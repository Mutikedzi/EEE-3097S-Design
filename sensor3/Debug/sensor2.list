
sensor2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a048  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800a108  0800a108  0001a108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ac  0800a5ac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5ac  0800a5ac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5ac  0800a5ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a5b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001dc  0800a790  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  0800a790  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf46  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002117  00000000  00000000  0002d14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013302  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d935  00000000  00000000  00043ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e110  00000000  00000000  000513f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bf507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e8  00000000  00000000  000bf558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a0f0 	.word	0x0800a0f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800a0f0 	.word	0x0800a0f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb21 	bl	8001a84 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa71 	bl	8001934 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb13 	bl	8001a84 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb09 	bl	8001a84 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa99 	bl	80019b8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa8f 	bl	80019b8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fa6c 	bl	800298c <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fb59 	bl	8000b70 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 f9a5 	bl	8000814 <__aeabi_fsub>
 80004ca:	f000 fb51 	bl	8000b70 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fadd>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	46c6      	mov	lr, r8
 80004dc:	0243      	lsls	r3, r0, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	024e      	lsls	r6, r1, #9
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	004f      	lsls	r7, r1, #1
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	0fc4      	lsrs	r4, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0a70      	lsrs	r0, r6, #9
 80004ee:	4690      	mov	r8, r2
 80004f0:	b500      	push	{lr}
 80004f2:	0e2d      	lsrs	r5, r5, #24
 80004f4:	0e3f      	lsrs	r7, r7, #24
 80004f6:	0fc9      	lsrs	r1, r1, #31
 80004f8:	09b6      	lsrs	r6, r6, #6
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d04b      	beq.n	8000596 <__aeabi_fadd+0xbe>
 80004fe:	1bea      	subs	r2, r5, r7
 8000500:	2a00      	cmp	r2, #0
 8000502:	dd36      	ble.n	8000572 <__aeabi_fadd+0x9a>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d061      	beq.n	80005cc <__aeabi_fadd+0xf4>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x36>
 800050c:	e0ad      	b.n	800066a <__aeabi_fadd+0x192>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	04db      	lsls	r3, r3, #19
 8000512:	431e      	orrs	r6, r3
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x42>
 8000518:	e0d3      	b.n	80006c2 <__aeabi_fadd+0x1ea>
 800051a:	2001      	movs	r0, #1
 800051c:	4643      	mov	r3, r8
 800051e:	1a18      	subs	r0, r3, r0
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x4e>
 8000524:	e08c      	b.n	8000640 <__aeabi_fadd+0x168>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0987      	lsrs	r7, r0, #6
 800052a:	0038      	movs	r0, r7
 800052c:	f002 fa38 	bl	80029a0 <__clzsi2>
 8000530:	3805      	subs	r0, #5
 8000532:	4087      	lsls	r7, r0
 8000534:	4285      	cmp	r5, r0
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x62>
 8000538:	e0b6      	b.n	80006a8 <__aeabi_fadd+0x1d0>
 800053a:	1a2d      	subs	r5, r5, r0
 800053c:	48b3      	ldr	r0, [pc, #716]	; (800080c <__aeabi_fadd+0x334>)
 800053e:	4038      	ands	r0, r7
 8000540:	0743      	lsls	r3, r0, #29
 8000542:	d004      	beq.n	800054e <__aeabi_fadd+0x76>
 8000544:	230f      	movs	r3, #15
 8000546:	4003      	ands	r3, r0
 8000548:	2b04      	cmp	r3, #4
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x76>
 800054c:	3004      	adds	r0, #4
 800054e:	0143      	lsls	r3, r0, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0x7c>
 8000552:	e078      	b.n	8000646 <__aeabi_fadd+0x16e>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	; 0xfe
 8000558:	d065      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800055a:	0180      	lsls	r0, r0, #6
 800055c:	0a43      	lsrs	r3, r0, #9
 800055e:	469c      	mov	ip, r3
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	05d0      	lsls	r0, r2, #23
 8000566:	4318      	orrs	r0, r3
 8000568:	07e4      	lsls	r4, r4, #31
 800056a:	4320      	orrs	r0, r4
 800056c:	bc80      	pop	{r7}
 800056e:	46b8      	mov	r8, r7
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2a00      	cmp	r2, #0
 8000574:	d035      	beq.n	80005e2 <__aeabi_fadd+0x10a>
 8000576:	1b7a      	subs	r2, r7, r5
 8000578:	2d00      	cmp	r5, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xa6>
 800057c:	e0af      	b.n	80006de <__aeabi_fadd+0x206>
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xae>
 8000584:	e0a7      	b.n	80006d6 <__aeabi_fadd+0x1fe>
 8000586:	1e53      	subs	r3, r2, #1
 8000588:	2a01      	cmp	r2, #1
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0xb6>
 800058c:	e12f      	b.n	80007ee <__aeabi_fadd+0x316>
 800058e:	2aff      	cmp	r2, #255	; 0xff
 8000590:	d069      	beq.n	8000666 <__aeabi_fadd+0x18e>
 8000592:	001a      	movs	r2, r3
 8000594:	e0aa      	b.n	80006ec <__aeabi_fadd+0x214>
 8000596:	1be9      	subs	r1, r5, r7
 8000598:	2900      	cmp	r1, #0
 800059a:	dd70      	ble.n	800067e <__aeabi_fadd+0x1a6>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d037      	beq.n	8000610 <__aeabi_fadd+0x138>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d062      	beq.n	800066a <__aeabi_fadd+0x192>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	04db      	lsls	r3, r3, #19
 80005a8:	431e      	orrs	r6, r3
 80005aa:	291b      	cmp	r1, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xd8>
 80005ae:	e0b0      	b.n	8000712 <__aeabi_fadd+0x23a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4440      	add	r0, r8
 80005b4:	0143      	lsls	r3, r0, #5
 80005b6:	d543      	bpl.n	8000640 <__aeabi_fadd+0x168>
 80005b8:	3501      	adds	r5, #1
 80005ba:	2dff      	cmp	r5, #255	; 0xff
 80005bc:	d033      	beq.n	8000626 <__aeabi_fadd+0x14e>
 80005be:	2301      	movs	r3, #1
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_fadd+0x338>)
 80005c2:	4003      	ands	r3, r0
 80005c4:	0840      	lsrs	r0, r0, #1
 80005c6:	4010      	ands	r0, r2
 80005c8:	4318      	orrs	r0, r3
 80005ca:	e7b9      	b.n	8000540 <__aeabi_fadd+0x68>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xfa>
 80005d0:	e083      	b.n	80006da <__aeabi_fadd+0x202>
 80005d2:	1e51      	subs	r1, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x102>
 80005d8:	e0d8      	b.n	800078c <__aeabi_fadd+0x2b4>
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d045      	beq.n	800066a <__aeabi_fadd+0x192>
 80005de:	000a      	movs	r2, r1
 80005e0:	e798      	b.n	8000514 <__aeabi_fadd+0x3c>
 80005e2:	27fe      	movs	r7, #254	; 0xfe
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	4217      	tst	r7, r2
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x114>
 80005ea:	e086      	b.n	80006fa <__aeabi_fadd+0x222>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x11a>
 80005f0:	e0b7      	b.n	8000762 <__aeabi_fadd+0x28a>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x122>
 80005f8:	e0f3      	b.n	80007e2 <__aeabi_fadd+0x30a>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d0b0      	beq.n	8000562 <__aeabi_fadd+0x8a>
 8000600:	1b98      	subs	r0, r3, r6
 8000602:	0143      	lsls	r3, r0, #5
 8000604:	d400      	bmi.n	8000608 <__aeabi_fadd+0x130>
 8000606:	e0fa      	b.n	80007fe <__aeabi_fadd+0x326>
 8000608:	4643      	mov	r3, r8
 800060a:	000c      	movs	r4, r1
 800060c:	1af0      	subs	r0, r6, r3
 800060e:	e797      	b.n	8000540 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x13e>
 8000614:	e0c8      	b.n	80007a8 <__aeabi_fadd+0x2d0>
 8000616:	1e4a      	subs	r2, r1, #1
 8000618:	2901      	cmp	r1, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x146>
 800061c:	e0ae      	b.n	800077c <__aeabi_fadd+0x2a4>
 800061e:	29ff      	cmp	r1, #255	; 0xff
 8000620:	d023      	beq.n	800066a <__aeabi_fadd+0x192>
 8000622:	0011      	movs	r1, r2
 8000624:	e7c1      	b.n	80005aa <__aeabi_fadd+0xd2>
 8000626:	2300      	movs	r3, #0
 8000628:	22ff      	movs	r2, #255	; 0xff
 800062a:	469c      	mov	ip, r3
 800062c:	e799      	b.n	8000562 <__aeabi_fadd+0x8a>
 800062e:	21fe      	movs	r1, #254	; 0xfe
 8000630:	1c6a      	adds	r2, r5, #1
 8000632:	4211      	tst	r1, r2
 8000634:	d077      	beq.n	8000726 <__aeabi_fadd+0x24e>
 8000636:	2aff      	cmp	r2, #255	; 0xff
 8000638:	d0f5      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800063a:	0015      	movs	r5, r2
 800063c:	4446      	add	r6, r8
 800063e:	0870      	lsrs	r0, r6, #1
 8000640:	0743      	lsls	r3, r0, #29
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x16e>
 8000644:	e77e      	b.n	8000544 <__aeabi_fadd+0x6c>
 8000646:	08c3      	lsrs	r3, r0, #3
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d00e      	beq.n	800066a <__aeabi_fadd+0x192>
 800064c:	025b      	lsls	r3, r3, #9
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	469c      	mov	ip, r3
 8000652:	b2ea      	uxtb	r2, r5
 8000654:	e785      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d007      	beq.n	800066a <__aeabi_fadd+0x192>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	03d2      	lsls	r2, r2, #15
 800065e:	4213      	tst	r3, r2
 8000660:	d003      	beq.n	800066a <__aeabi_fadd+0x192>
 8000662:	4210      	tst	r0, r2
 8000664:	d101      	bne.n	800066a <__aeabi_fadd+0x192>
 8000666:	000c      	movs	r4, r1
 8000668:	0003      	movs	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0db      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4318      	orrs	r0, r3
 8000674:	0240      	lsls	r0, r0, #9
 8000676:	0a43      	lsrs	r3, r0, #9
 8000678:	469c      	mov	ip, r3
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	e771      	b.n	8000562 <__aeabi_fadd+0x8a>
 800067e:	2900      	cmp	r1, #0
 8000680:	d0d5      	beq.n	800062e <__aeabi_fadd+0x156>
 8000682:	1b7a      	subs	r2, r7, r5
 8000684:	2d00      	cmp	r5, #0
 8000686:	d160      	bne.n	800074a <__aeabi_fadd+0x272>
 8000688:	4643      	mov	r3, r8
 800068a:	2b00      	cmp	r3, #0
 800068c:	d024      	beq.n	80006d8 <__aeabi_fadd+0x200>
 800068e:	1e53      	subs	r3, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d073      	beq.n	800077c <__aeabi_fadd+0x2a4>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0e7      	beq.n	8000668 <__aeabi_fadd+0x190>
 8000698:	001a      	movs	r2, r3
 800069a:	2a1b      	cmp	r2, #27
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_fadd+0x1c8>
 800069e:	e085      	b.n	80007ac <__aeabi_fadd+0x2d4>
 80006a0:	2001      	movs	r0, #1
 80006a2:	003d      	movs	r5, r7
 80006a4:	1980      	adds	r0, r0, r6
 80006a6:	e785      	b.n	80005b4 <__aeabi_fadd+0xdc>
 80006a8:	2320      	movs	r3, #32
 80006aa:	003a      	movs	r2, r7
 80006ac:	1b45      	subs	r5, r0, r5
 80006ae:	0038      	movs	r0, r7
 80006b0:	3501      	adds	r5, #1
 80006b2:	40ea      	lsrs	r2, r5
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	40a8      	lsls	r0, r5
 80006b8:	1e43      	subs	r3, r0, #1
 80006ba:	4198      	sbcs	r0, r3
 80006bc:	2500      	movs	r5, #0
 80006be:	4310      	orrs	r0, r2
 80006c0:	e73e      	b.n	8000540 <__aeabi_fadd+0x68>
 80006c2:	2320      	movs	r3, #32
 80006c4:	0030      	movs	r0, r6
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	0031      	movs	r1, r6
 80006ca:	4098      	lsls	r0, r3
 80006cc:	40d1      	lsrs	r1, r2
 80006ce:	1e43      	subs	r3, r0, #1
 80006d0:	4198      	sbcs	r0, r3
 80006d2:	4308      	orrs	r0, r1
 80006d4:	e722      	b.n	800051c <__aeabi_fadd+0x44>
 80006d6:	000c      	movs	r4, r1
 80006d8:	0003      	movs	r3, r0
 80006da:	0015      	movs	r5, r2
 80006dc:	e7b4      	b.n	8000648 <__aeabi_fadd+0x170>
 80006de:	2fff      	cmp	r7, #255	; 0xff
 80006e0:	d0c1      	beq.n	8000666 <__aeabi_fadd+0x18e>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	4640      	mov	r0, r8
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4318      	orrs	r0, r3
 80006ea:	4680      	mov	r8, r0
 80006ec:	2a1b      	cmp	r2, #27
 80006ee:	dd51      	ble.n	8000794 <__aeabi_fadd+0x2bc>
 80006f0:	2001      	movs	r0, #1
 80006f2:	000c      	movs	r4, r1
 80006f4:	003d      	movs	r5, r7
 80006f6:	1a30      	subs	r0, r6, r0
 80006f8:	e712      	b.n	8000520 <__aeabi_fadd+0x48>
 80006fa:	4643      	mov	r3, r8
 80006fc:	1b9f      	subs	r7, r3, r6
 80006fe:	017b      	lsls	r3, r7, #5
 8000700:	d42b      	bmi.n	800075a <__aeabi_fadd+0x282>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x230>
 8000706:	e710      	b.n	800052a <__aeabi_fadd+0x52>
 8000708:	2300      	movs	r3, #0
 800070a:	2400      	movs	r4, #0
 800070c:	2200      	movs	r2, #0
 800070e:	469c      	mov	ip, r3
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000712:	2320      	movs	r3, #32
 8000714:	0032      	movs	r2, r6
 8000716:	0030      	movs	r0, r6
 8000718:	40ca      	lsrs	r2, r1
 800071a:	1a59      	subs	r1, r3, r1
 800071c:	4088      	lsls	r0, r1
 800071e:	1e43      	subs	r3, r0, #1
 8000720:	4198      	sbcs	r0, r3
 8000722:	4310      	orrs	r0, r2
 8000724:	e745      	b.n	80005b2 <__aeabi_fadd+0xda>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d14a      	bne.n	80007c0 <__aeabi_fadd+0x2e8>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d063      	beq.n	80007f8 <__aeabi_fadd+0x320>
 8000730:	2200      	movs	r2, #0
 8000732:	2e00      	cmp	r6, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x260>
 8000736:	e714      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000738:	0030      	movs	r0, r6
 800073a:	4440      	add	r0, r8
 800073c:	0143      	lsls	r3, r0, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fadd+0x26a>
 8000740:	e77e      	b.n	8000640 <__aeabi_fadd+0x168>
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <__aeabi_fadd+0x334>)
 8000744:	3501      	adds	r5, #1
 8000746:	4018      	ands	r0, r3
 8000748:	e77a      	b.n	8000640 <__aeabi_fadd+0x168>
 800074a:	2fff      	cmp	r7, #255	; 0xff
 800074c:	d08c      	beq.n	8000668 <__aeabi_fadd+0x190>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	4641      	mov	r1, r8
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	4319      	orrs	r1, r3
 8000756:	4688      	mov	r8, r1
 8000758:	e79f      	b.n	800069a <__aeabi_fadd+0x1c2>
 800075a:	4643      	mov	r3, r8
 800075c:	000c      	movs	r4, r1
 800075e:	1af7      	subs	r7, r6, r3
 8000760:	e6e3      	b.n	800052a <__aeabi_fadd+0x52>
 8000762:	4642      	mov	r2, r8
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x292>
 8000768:	e775      	b.n	8000656 <__aeabi_fadd+0x17e>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x298>
 800076e:	e77a      	b.n	8000666 <__aeabi_fadd+0x18e>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	2400      	movs	r4, #0
 8000776:	469c      	mov	ip, r3
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	e6f2      	b.n	8000562 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	2501      	movs	r5, #1
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x2b0>
 8000786:	e75b      	b.n	8000640 <__aeabi_fadd+0x168>
 8000788:	2502      	movs	r5, #2
 800078a:	e718      	b.n	80005be <__aeabi_fadd+0xe6>
 800078c:	4643      	mov	r3, r8
 800078e:	2501      	movs	r5, #1
 8000790:	1b98      	subs	r0, r3, r6
 8000792:	e6c5      	b.n	8000520 <__aeabi_fadd+0x48>
 8000794:	2320      	movs	r3, #32
 8000796:	4644      	mov	r4, r8
 8000798:	4640      	mov	r0, r8
 800079a:	40d4      	lsrs	r4, r2
 800079c:	1a9a      	subs	r2, r3, r2
 800079e:	4090      	lsls	r0, r2
 80007a0:	1e43      	subs	r3, r0, #1
 80007a2:	4198      	sbcs	r0, r3
 80007a4:	4320      	orrs	r0, r4
 80007a6:	e7a4      	b.n	80006f2 <__aeabi_fadd+0x21a>
 80007a8:	000d      	movs	r5, r1
 80007aa:	e74d      	b.n	8000648 <__aeabi_fadd+0x170>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4641      	mov	r1, r8
 80007b0:	4640      	mov	r0, r8
 80007b2:	40d1      	lsrs	r1, r2
 80007b4:	1a9a      	subs	r2, r3, r2
 80007b6:	4090      	lsls	r0, r2
 80007b8:	1e43      	subs	r3, r0, #1
 80007ba:	4198      	sbcs	r0, r3
 80007bc:	4308      	orrs	r0, r1
 80007be:	e770      	b.n	80006a2 <__aeabi_fadd+0x1ca>
 80007c0:	4642      	mov	r2, r8
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x2f0>
 80007c6:	e74f      	b.n	8000668 <__aeabi_fadd+0x190>
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2f6>
 80007cc:	e74d      	b.n	800066a <__aeabi_fadd+0x192>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	03d2      	lsls	r2, r2, #15
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x300>
 80007d6:	e748      	b.n	800066a <__aeabi_fadd+0x192>
 80007d8:	4210      	tst	r0, r2
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x306>
 80007dc:	e745      	b.n	800066a <__aeabi_fadd+0x192>
 80007de:	0003      	movs	r3, r0
 80007e0:	e743      	b.n	800066a <__aeabi_fadd+0x192>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d090      	beq.n	8000708 <__aeabi_fadd+0x230>
 80007e6:	000c      	movs	r4, r1
 80007e8:	4684      	mov	ip, r0
 80007ea:	2200      	movs	r2, #0
 80007ec:	e6b9      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007ee:	4643      	mov	r3, r8
 80007f0:	000c      	movs	r4, r1
 80007f2:	1af0      	subs	r0, r6, r3
 80007f4:	3501      	adds	r5, #1
 80007f6:	e693      	b.n	8000520 <__aeabi_fadd+0x48>
 80007f8:	4684      	mov	ip, r0
 80007fa:	2200      	movs	r2, #0
 80007fc:	e6b1      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x32c>
 8000802:	e71d      	b.n	8000640 <__aeabi_fadd+0x168>
 8000804:	2300      	movs	r3, #0
 8000806:	2400      	movs	r4, #0
 8000808:	469c      	mov	ip, r3
 800080a:	e6aa      	b.n	8000562 <__aeabi_fadd+0x8a>
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_fsub>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	46ce      	mov	lr, r9
 8000818:	4647      	mov	r7, r8
 800081a:	0243      	lsls	r3, r0, #9
 800081c:	0a5b      	lsrs	r3, r3, #9
 800081e:	024e      	lsls	r6, r1, #9
 8000820:	00da      	lsls	r2, r3, #3
 8000822:	4694      	mov	ip, r2
 8000824:	0a72      	lsrs	r2, r6, #9
 8000826:	4691      	mov	r9, r2
 8000828:	0045      	lsls	r5, r0, #1
 800082a:	004a      	lsls	r2, r1, #1
 800082c:	b580      	push	{r7, lr}
 800082e:	0e2d      	lsrs	r5, r5, #24
 8000830:	001f      	movs	r7, r3
 8000832:	0fc4      	lsrs	r4, r0, #31
 8000834:	0e12      	lsrs	r2, r2, #24
 8000836:	0fc9      	lsrs	r1, r1, #31
 8000838:	09b6      	lsrs	r6, r6, #6
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d05b      	beq.n	80008f6 <__aeabi_fsub+0xe2>
 800083e:	2001      	movs	r0, #1
 8000840:	4041      	eors	r1, r0
 8000842:	428c      	cmp	r4, r1
 8000844:	d039      	beq.n	80008ba <__aeabi_fsub+0xa6>
 8000846:	1aa8      	subs	r0, r5, r2
 8000848:	2800      	cmp	r0, #0
 800084a:	dd5a      	ble.n	8000902 <__aeabi_fsub+0xee>
 800084c:	2a00      	cmp	r2, #0
 800084e:	d06a      	beq.n	8000926 <__aeabi_fsub+0x112>
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0x42>
 8000854:	e0d9      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	04d2      	lsls	r2, r2, #19
 800085a:	4316      	orrs	r6, r2
 800085c:	281b      	cmp	r0, #27
 800085e:	dc00      	bgt.n	8000862 <__aeabi_fsub+0x4e>
 8000860:	e0e9      	b.n	8000a36 <__aeabi_fsub+0x222>
 8000862:	2001      	movs	r0, #1
 8000864:	4663      	mov	r3, ip
 8000866:	1a18      	subs	r0, r3, r0
 8000868:	0143      	lsls	r3, r0, #5
 800086a:	d400      	bmi.n	800086e <__aeabi_fsub+0x5a>
 800086c:	e0b4      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 800086e:	0180      	lsls	r0, r0, #6
 8000870:	0987      	lsrs	r7, r0, #6
 8000872:	0038      	movs	r0, r7
 8000874:	f002 f894 	bl	80029a0 <__clzsi2>
 8000878:	3805      	subs	r0, #5
 800087a:	4087      	lsls	r7, r0
 800087c:	4285      	cmp	r5, r0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fsub+0x6e>
 8000880:	e0cc      	b.n	8000a1c <__aeabi_fsub+0x208>
 8000882:	1a2d      	subs	r5, r5, r0
 8000884:	48b5      	ldr	r0, [pc, #724]	; (8000b5c <__aeabi_fsub+0x348>)
 8000886:	4038      	ands	r0, r7
 8000888:	0743      	lsls	r3, r0, #29
 800088a:	d004      	beq.n	8000896 <__aeabi_fsub+0x82>
 800088c:	230f      	movs	r3, #15
 800088e:	4003      	ands	r3, r0
 8000890:	2b04      	cmp	r3, #4
 8000892:	d000      	beq.n	8000896 <__aeabi_fsub+0x82>
 8000894:	3004      	adds	r0, #4
 8000896:	0143      	lsls	r3, r0, #5
 8000898:	d400      	bmi.n	800089c <__aeabi_fsub+0x88>
 800089a:	e0a0      	b.n	80009de <__aeabi_fsub+0x1ca>
 800089c:	1c6a      	adds	r2, r5, #1
 800089e:	2dfe      	cmp	r5, #254	; 0xfe
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fsub+0x90>
 80008a2:	e08d      	b.n	80009c0 <__aeabi_fsub+0x1ac>
 80008a4:	0180      	lsls	r0, r0, #6
 80008a6:	0a47      	lsrs	r7, r0, #9
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	05d0      	lsls	r0, r2, #23
 80008ac:	4338      	orrs	r0, r7
 80008ae:	07e4      	lsls	r4, r4, #31
 80008b0:	4320      	orrs	r0, r4
 80008b2:	bcc0      	pop	{r6, r7}
 80008b4:	46b9      	mov	r9, r7
 80008b6:	46b0      	mov	r8, r6
 80008b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ba:	1aa8      	subs	r0, r5, r2
 80008bc:	4680      	mov	r8, r0
 80008be:	2800      	cmp	r0, #0
 80008c0:	dd45      	ble.n	800094e <__aeabi_fsub+0x13a>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d070      	beq.n	80009a8 <__aeabi_fsub+0x194>
 80008c6:	2dff      	cmp	r5, #255	; 0xff
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0xb8>
 80008ca:	e09e      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	04db      	lsls	r3, r3, #19
 80008d0:	431e      	orrs	r6, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b1b      	cmp	r3, #27
 80008d6:	dc00      	bgt.n	80008da <__aeabi_fsub+0xc6>
 80008d8:	e0d2      	b.n	8000a80 <__aeabi_fsub+0x26c>
 80008da:	2001      	movs	r0, #1
 80008dc:	4460      	add	r0, ip
 80008de:	0143      	lsls	r3, r0, #5
 80008e0:	d57a      	bpl.n	80009d8 <__aeabi_fsub+0x1c4>
 80008e2:	3501      	adds	r5, #1
 80008e4:	2dff      	cmp	r5, #255	; 0xff
 80008e6:	d06b      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 80008e8:	2301      	movs	r3, #1
 80008ea:	4a9d      	ldr	r2, [pc, #628]	; (8000b60 <__aeabi_fsub+0x34c>)
 80008ec:	4003      	ands	r3, r0
 80008ee:	0840      	lsrs	r0, r0, #1
 80008f0:	4010      	ands	r0, r2
 80008f2:	4318      	orrs	r0, r3
 80008f4:	e7c8      	b.n	8000888 <__aeabi_fsub+0x74>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d020      	beq.n	800093c <__aeabi_fsub+0x128>
 80008fa:	428c      	cmp	r4, r1
 80008fc:	d023      	beq.n	8000946 <__aeabi_fsub+0x132>
 80008fe:	0028      	movs	r0, r5
 8000900:	38ff      	subs	r0, #255	; 0xff
 8000902:	2800      	cmp	r0, #0
 8000904:	d039      	beq.n	800097a <__aeabi_fsub+0x166>
 8000906:	1b57      	subs	r7, r2, r5
 8000908:	2d00      	cmp	r5, #0
 800090a:	d000      	beq.n	800090e <__aeabi_fsub+0xfa>
 800090c:	e09d      	b.n	8000a4a <__aeabi_fsub+0x236>
 800090e:	4663      	mov	r3, ip
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_fsub+0x102>
 8000914:	e0db      	b.n	8000ace <__aeabi_fsub+0x2ba>
 8000916:	1e7b      	subs	r3, r7, #1
 8000918:	2f01      	cmp	r7, #1
 800091a:	d100      	bne.n	800091e <__aeabi_fsub+0x10a>
 800091c:	e10d      	b.n	8000b3a <__aeabi_fsub+0x326>
 800091e:	2fff      	cmp	r7, #255	; 0xff
 8000920:	d071      	beq.n	8000a06 <__aeabi_fsub+0x1f2>
 8000922:	001f      	movs	r7, r3
 8000924:	e098      	b.n	8000a58 <__aeabi_fsub+0x244>
 8000926:	2e00      	cmp	r6, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x118>
 800092a:	e0a7      	b.n	8000a7c <__aeabi_fsub+0x268>
 800092c:	1e42      	subs	r2, r0, #1
 800092e:	2801      	cmp	r0, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_fsub+0x120>
 8000932:	e0e6      	b.n	8000b02 <__aeabi_fsub+0x2ee>
 8000934:	28ff      	cmp	r0, #255	; 0xff
 8000936:	d068      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 8000938:	0010      	movs	r0, r2
 800093a:	e78f      	b.n	800085c <__aeabi_fsub+0x48>
 800093c:	2001      	movs	r0, #1
 800093e:	4041      	eors	r1, r0
 8000940:	42a1      	cmp	r1, r4
 8000942:	d000      	beq.n	8000946 <__aeabi_fsub+0x132>
 8000944:	e77f      	b.n	8000846 <__aeabi_fsub+0x32>
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	4240      	negs	r0, r0
 800094a:	4680      	mov	r8, r0
 800094c:	44a8      	add	r8, r5
 800094e:	4640      	mov	r0, r8
 8000950:	2800      	cmp	r0, #0
 8000952:	d038      	beq.n	80009c6 <__aeabi_fsub+0x1b2>
 8000954:	1b51      	subs	r1, r2, r5
 8000956:	2d00      	cmp	r5, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x148>
 800095a:	e0ae      	b.n	8000aba <__aeabi_fsub+0x2a6>
 800095c:	2aff      	cmp	r2, #255	; 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x14e>
 8000960:	e0df      	b.n	8000b22 <__aeabi_fsub+0x30e>
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	4660      	mov	r0, ip
 8000966:	04db      	lsls	r3, r3, #19
 8000968:	4318      	orrs	r0, r3
 800096a:	4684      	mov	ip, r0
 800096c:	291b      	cmp	r1, #27
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x15e>
 8000970:	e0d9      	b.n	8000b26 <__aeabi_fsub+0x312>
 8000972:	2001      	movs	r0, #1
 8000974:	0015      	movs	r5, r2
 8000976:	1980      	adds	r0, r0, r6
 8000978:	e7b1      	b.n	80008de <__aeabi_fsub+0xca>
 800097a:	20fe      	movs	r0, #254	; 0xfe
 800097c:	1c6a      	adds	r2, r5, #1
 800097e:	4210      	tst	r0, r2
 8000980:	d171      	bne.n	8000a66 <__aeabi_fsub+0x252>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d000      	beq.n	8000988 <__aeabi_fsub+0x174>
 8000986:	e0a6      	b.n	8000ad6 <__aeabi_fsub+0x2c2>
 8000988:	4663      	mov	r3, ip
 800098a:	2b00      	cmp	r3, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x17c>
 800098e:	e0d9      	b.n	8000b44 <__aeabi_fsub+0x330>
 8000990:	2200      	movs	r2, #0
 8000992:	2e00      	cmp	r6, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_fsub+0x184>
 8000996:	e788      	b.n	80008aa <__aeabi_fsub+0x96>
 8000998:	1b98      	subs	r0, r3, r6
 800099a:	0143      	lsls	r3, r0, #5
 800099c:	d400      	bmi.n	80009a0 <__aeabi_fsub+0x18c>
 800099e:	e0e1      	b.n	8000b64 <__aeabi_fsub+0x350>
 80009a0:	4663      	mov	r3, ip
 80009a2:	000c      	movs	r4, r1
 80009a4:	1af0      	subs	r0, r6, r3
 80009a6:	e76f      	b.n	8000888 <__aeabi_fsub+0x74>
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fsub+0x19a>
 80009ac:	e0b7      	b.n	8000b1e <__aeabi_fsub+0x30a>
 80009ae:	0002      	movs	r2, r0
 80009b0:	3a01      	subs	r2, #1
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fsub+0x1a4>
 80009b6:	e09c      	b.n	8000af2 <__aeabi_fsub+0x2de>
 80009b8:	28ff      	cmp	r0, #255	; 0xff
 80009ba:	d026      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009bc:	4690      	mov	r8, r2
 80009be:	e788      	b.n	80008d2 <__aeabi_fsub+0xbe>
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	2700      	movs	r7, #0
 80009c4:	e771      	b.n	80008aa <__aeabi_fsub+0x96>
 80009c6:	20fe      	movs	r0, #254	; 0xfe
 80009c8:	1c6a      	adds	r2, r5, #1
 80009ca:	4210      	tst	r0, r2
 80009cc:	d064      	beq.n	8000a98 <__aeabi_fsub+0x284>
 80009ce:	2aff      	cmp	r2, #255	; 0xff
 80009d0:	d0f6      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 80009d2:	0015      	movs	r5, r2
 80009d4:	4466      	add	r6, ip
 80009d6:	0870      	lsrs	r0, r6, #1
 80009d8:	0743      	lsls	r3, r0, #29
 80009da:	d000      	beq.n	80009de <__aeabi_fsub+0x1ca>
 80009dc:	e756      	b.n	800088c <__aeabi_fsub+0x78>
 80009de:	08c3      	lsrs	r3, r0, #3
 80009e0:	2dff      	cmp	r5, #255	; 0xff
 80009e2:	d012      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009e4:	025b      	lsls	r3, r3, #9
 80009e6:	0a5f      	lsrs	r7, r3, #9
 80009e8:	b2ea      	uxtb	r2, r5
 80009ea:	e75e      	b.n	80008aa <__aeabi_fsub+0x96>
 80009ec:	4662      	mov	r2, ip
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x1e0>
 80009f2:	e096      	b.n	8000b22 <__aeabi_fsub+0x30e>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d008      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	4213      	tst	r3, r2
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fsub+0x1f6>
 8000a00:	4648      	mov	r0, r9
 8000a02:	4210      	tst	r0, r2
 8000a04:	d101      	bne.n	8000a0a <__aeabi_fsub+0x1f6>
 8000a06:	000c      	movs	r4, r1
 8000a08:	464b      	mov	r3, r9
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0d8      	beq.n	80009c0 <__aeabi_fsub+0x1ac>
 8000a0e:	2780      	movs	r7, #128	; 0x80
 8000a10:	03ff      	lsls	r7, r7, #15
 8000a12:	431f      	orrs	r7, r3
 8000a14:	027f      	lsls	r7, r7, #9
 8000a16:	22ff      	movs	r2, #255	; 0xff
 8000a18:	0a7f      	lsrs	r7, r7, #9
 8000a1a:	e746      	b.n	80008aa <__aeabi_fsub+0x96>
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	003a      	movs	r2, r7
 8000a20:	1b45      	subs	r5, r0, r5
 8000a22:	0038      	movs	r0, r7
 8000a24:	3501      	adds	r5, #1
 8000a26:	40ea      	lsrs	r2, r5
 8000a28:	1b5d      	subs	r5, r3, r5
 8000a2a:	40a8      	lsls	r0, r5
 8000a2c:	1e43      	subs	r3, r0, #1
 8000a2e:	4198      	sbcs	r0, r3
 8000a30:	2500      	movs	r5, #0
 8000a32:	4310      	orrs	r0, r2
 8000a34:	e728      	b.n	8000888 <__aeabi_fsub+0x74>
 8000a36:	2320      	movs	r3, #32
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	0032      	movs	r2, r6
 8000a3c:	409e      	lsls	r6, r3
 8000a3e:	40c2      	lsrs	r2, r0
 8000a40:	0030      	movs	r0, r6
 8000a42:	1e43      	subs	r3, r0, #1
 8000a44:	4198      	sbcs	r0, r3
 8000a46:	4310      	orrs	r0, r2
 8000a48:	e70c      	b.n	8000864 <__aeabi_fsub+0x50>
 8000a4a:	2aff      	cmp	r2, #255	; 0xff
 8000a4c:	d0db      	beq.n	8000a06 <__aeabi_fsub+0x1f2>
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	4660      	mov	r0, ip
 8000a52:	04db      	lsls	r3, r3, #19
 8000a54:	4318      	orrs	r0, r3
 8000a56:	4684      	mov	ip, r0
 8000a58:	2f1b      	cmp	r7, #27
 8000a5a:	dd56      	ble.n	8000b0a <__aeabi_fsub+0x2f6>
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	000c      	movs	r4, r1
 8000a60:	0015      	movs	r5, r2
 8000a62:	1a30      	subs	r0, r6, r0
 8000a64:	e700      	b.n	8000868 <__aeabi_fsub+0x54>
 8000a66:	4663      	mov	r3, ip
 8000a68:	1b9f      	subs	r7, r3, r6
 8000a6a:	017b      	lsls	r3, r7, #5
 8000a6c:	d43d      	bmi.n	8000aea <__aeabi_fsub+0x2d6>
 8000a6e:	2f00      	cmp	r7, #0
 8000a70:	d000      	beq.n	8000a74 <__aeabi_fsub+0x260>
 8000a72:	e6fe      	b.n	8000872 <__aeabi_fsub+0x5e>
 8000a74:	2400      	movs	r4, #0
 8000a76:	2200      	movs	r2, #0
 8000a78:	2700      	movs	r7, #0
 8000a7a:	e716      	b.n	80008aa <__aeabi_fsub+0x96>
 8000a7c:	0005      	movs	r5, r0
 8000a7e:	e7af      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000a80:	0032      	movs	r2, r6
 8000a82:	4643      	mov	r3, r8
 8000a84:	4641      	mov	r1, r8
 8000a86:	40da      	lsrs	r2, r3
 8000a88:	2320      	movs	r3, #32
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	409e      	lsls	r6, r3
 8000a8e:	0030      	movs	r0, r6
 8000a90:	1e43      	subs	r3, r0, #1
 8000a92:	4198      	sbcs	r0, r3
 8000a94:	4310      	orrs	r0, r2
 8000a96:	e721      	b.n	80008dc <__aeabi_fsub+0xc8>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d1a7      	bne.n	80009ec <__aeabi_fsub+0x1d8>
 8000a9c:	4663      	mov	r3, ip
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d059      	beq.n	8000b56 <__aeabi_fsub+0x342>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2e00      	cmp	r6, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x296>
 8000aa8:	e6ff      	b.n	80008aa <__aeabi_fsub+0x96>
 8000aaa:	0030      	movs	r0, r6
 8000aac:	4460      	add	r0, ip
 8000aae:	0143      	lsls	r3, r0, #5
 8000ab0:	d592      	bpl.n	80009d8 <__aeabi_fsub+0x1c4>
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <__aeabi_fsub+0x348>)
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	4018      	ands	r0, r3
 8000ab8:	e78e      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000aba:	4663      	mov	r3, ip
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d047      	beq.n	8000b50 <__aeabi_fsub+0x33c>
 8000ac0:	1e4b      	subs	r3, r1, #1
 8000ac2:	2901      	cmp	r1, #1
 8000ac4:	d015      	beq.n	8000af2 <__aeabi_fsub+0x2de>
 8000ac6:	29ff      	cmp	r1, #255	; 0xff
 8000ac8:	d02b      	beq.n	8000b22 <__aeabi_fsub+0x30e>
 8000aca:	0019      	movs	r1, r3
 8000acc:	e74e      	b.n	800096c <__aeabi_fsub+0x158>
 8000ace:	000c      	movs	r4, r1
 8000ad0:	464b      	mov	r3, r9
 8000ad2:	003d      	movs	r5, r7
 8000ad4:	e784      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d18b      	bne.n	80009f4 <__aeabi_fsub+0x1e0>
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d192      	bne.n	8000a06 <__aeabi_fsub+0x1f2>
 8000ae0:	2780      	movs	r7, #128	; 0x80
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	03ff      	lsls	r7, r7, #15
 8000ae8:	e6df      	b.n	80008aa <__aeabi_fsub+0x96>
 8000aea:	4663      	mov	r3, ip
 8000aec:	000c      	movs	r4, r1
 8000aee:	1af7      	subs	r7, r6, r3
 8000af0:	e6bf      	b.n	8000872 <__aeabi_fsub+0x5e>
 8000af2:	0030      	movs	r0, r6
 8000af4:	4460      	add	r0, ip
 8000af6:	2501      	movs	r5, #1
 8000af8:	0143      	lsls	r3, r0, #5
 8000afa:	d400      	bmi.n	8000afe <__aeabi_fsub+0x2ea>
 8000afc:	e76c      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000afe:	2502      	movs	r5, #2
 8000b00:	e6f2      	b.n	80008e8 <__aeabi_fsub+0xd4>
 8000b02:	4663      	mov	r3, ip
 8000b04:	2501      	movs	r5, #1
 8000b06:	1b98      	subs	r0, r3, r6
 8000b08:	e6ae      	b.n	8000868 <__aeabi_fsub+0x54>
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	4664      	mov	r4, ip
 8000b0e:	4660      	mov	r0, ip
 8000b10:	40fc      	lsrs	r4, r7
 8000b12:	1bdf      	subs	r7, r3, r7
 8000b14:	40b8      	lsls	r0, r7
 8000b16:	1e43      	subs	r3, r0, #1
 8000b18:	4198      	sbcs	r0, r3
 8000b1a:	4320      	orrs	r0, r4
 8000b1c:	e79f      	b.n	8000a5e <__aeabi_fsub+0x24a>
 8000b1e:	0005      	movs	r5, r0
 8000b20:	e75e      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000b22:	464b      	mov	r3, r9
 8000b24:	e771      	b.n	8000a0a <__aeabi_fsub+0x1f6>
 8000b26:	2320      	movs	r3, #32
 8000b28:	4665      	mov	r5, ip
 8000b2a:	4660      	mov	r0, ip
 8000b2c:	40cd      	lsrs	r5, r1
 8000b2e:	1a59      	subs	r1, r3, r1
 8000b30:	4088      	lsls	r0, r1
 8000b32:	1e43      	subs	r3, r0, #1
 8000b34:	4198      	sbcs	r0, r3
 8000b36:	4328      	orrs	r0, r5
 8000b38:	e71c      	b.n	8000974 <__aeabi_fsub+0x160>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2501      	movs	r5, #1
 8000b40:	1af0      	subs	r0, r6, r3
 8000b42:	e691      	b.n	8000868 <__aeabi_fsub+0x54>
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d095      	beq.n	8000a74 <__aeabi_fsub+0x260>
 8000b48:	000c      	movs	r4, r1
 8000b4a:	464f      	mov	r7, r9
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e6ac      	b.n	80008aa <__aeabi_fsub+0x96>
 8000b50:	464b      	mov	r3, r9
 8000b52:	000d      	movs	r5, r1
 8000b54:	e744      	b.n	80009e0 <__aeabi_fsub+0x1cc>
 8000b56:	464f      	mov	r7, r9
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e6a6      	b.n	80008aa <__aeabi_fsub+0x96>
 8000b5c:	fbffffff 	.word	0xfbffffff
 8000b60:	7dffffff 	.word	0x7dffffff
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0x356>
 8000b68:	e736      	b.n	80009d8 <__aeabi_fsub+0x1c4>
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e69c      	b.n	80008aa <__aeabi_fsub+0x96>

08000b70 <__aeabi_f2iz>:
 8000b70:	0241      	lsls	r1, r0, #9
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0fc3      	lsrs	r3, r0, #31
 8000b76:	0a49      	lsrs	r1, r1, #9
 8000b78:	2000      	movs	r0, #0
 8000b7a:	0e12      	lsrs	r2, r2, #24
 8000b7c:	2a7e      	cmp	r2, #126	; 0x7e
 8000b7e:	dd03      	ble.n	8000b88 <__aeabi_f2iz+0x18>
 8000b80:	2a9d      	cmp	r2, #157	; 0x9d
 8000b82:	dd02      	ble.n	8000b8a <__aeabi_f2iz+0x1a>
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <__aeabi_f2iz+0x3c>)
 8000b86:	1898      	adds	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	2080      	movs	r0, #128	; 0x80
 8000b8c:	0400      	lsls	r0, r0, #16
 8000b8e:	4301      	orrs	r1, r0
 8000b90:	2a95      	cmp	r2, #149	; 0x95
 8000b92:	dc07      	bgt.n	8000ba4 <__aeabi_f2iz+0x34>
 8000b94:	2096      	movs	r0, #150	; 0x96
 8000b96:	1a82      	subs	r2, r0, r2
 8000b98:	40d1      	lsrs	r1, r2
 8000b9a:	4248      	negs	r0, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1f3      	bne.n	8000b88 <__aeabi_f2iz+0x18>
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	e7f1      	b.n	8000b88 <__aeabi_f2iz+0x18>
 8000ba4:	3a96      	subs	r2, #150	; 0x96
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	e7f7      	b.n	8000b9a <__aeabi_f2iz+0x2a>
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	7fffffff 	.word	0x7fffffff

08000bb0 <__aeabi_i2f>:
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d013      	beq.n	8000bde <__aeabi_i2f+0x2e>
 8000bb6:	17c3      	asrs	r3, r0, #31
 8000bb8:	18c6      	adds	r6, r0, r3
 8000bba:	405e      	eors	r6, r3
 8000bbc:	0fc4      	lsrs	r4, r0, #31
 8000bbe:	0030      	movs	r0, r6
 8000bc0:	f001 feee 	bl	80029a0 <__clzsi2>
 8000bc4:	239e      	movs	r3, #158	; 0x9e
 8000bc6:	0005      	movs	r5, r0
 8000bc8:	1a1b      	subs	r3, r3, r0
 8000bca:	2b96      	cmp	r3, #150	; 0x96
 8000bcc:	dc0f      	bgt.n	8000bee <__aeabi_i2f+0x3e>
 8000bce:	2808      	cmp	r0, #8
 8000bd0:	dd01      	ble.n	8000bd6 <__aeabi_i2f+0x26>
 8000bd2:	3d08      	subs	r5, #8
 8000bd4:	40ae      	lsls	r6, r5
 8000bd6:	0276      	lsls	r6, r6, #9
 8000bd8:	0a76      	lsrs	r6, r6, #9
 8000bda:	b2d8      	uxtb	r0, r3
 8000bdc:	e002      	b.n	8000be4 <__aeabi_i2f+0x34>
 8000bde:	2400      	movs	r4, #0
 8000be0:	2000      	movs	r0, #0
 8000be2:	2600      	movs	r6, #0
 8000be4:	05c0      	lsls	r0, r0, #23
 8000be6:	4330      	orrs	r0, r6
 8000be8:	07e4      	lsls	r4, r4, #31
 8000bea:	4320      	orrs	r0, r4
 8000bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bee:	2b99      	cmp	r3, #153	; 0x99
 8000bf0:	dd0c      	ble.n	8000c0c <__aeabi_i2f+0x5c>
 8000bf2:	2205      	movs	r2, #5
 8000bf4:	0031      	movs	r1, r6
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	40d1      	lsrs	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	0001      	movs	r1, r0
 8000bfe:	0030      	movs	r0, r6
 8000c00:	311b      	adds	r1, #27
 8000c02:	4088      	lsls	r0, r1
 8000c04:	1e41      	subs	r1, r0, #1
 8000c06:	4188      	sbcs	r0, r1
 8000c08:	4302      	orrs	r2, r0
 8000c0a:	0016      	movs	r6, r2
 8000c0c:	2d05      	cmp	r5, #5
 8000c0e:	dc12      	bgt.n	8000c36 <__aeabi_i2f+0x86>
 8000c10:	0031      	movs	r1, r6
 8000c12:	4f0d      	ldr	r7, [pc, #52]	; (8000c48 <__aeabi_i2f+0x98>)
 8000c14:	4039      	ands	r1, r7
 8000c16:	0772      	lsls	r2, r6, #29
 8000c18:	d009      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	4030      	ands	r0, r6
 8000c1e:	2804      	cmp	r0, #4
 8000c20:	d005      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c22:	3104      	adds	r1, #4
 8000c24:	014a      	lsls	r2, r1, #5
 8000c26:	d502      	bpl.n	8000c2e <__aeabi_i2f+0x7e>
 8000c28:	239f      	movs	r3, #159	; 0x9f
 8000c2a:	4039      	ands	r1, r7
 8000c2c:	1b5b      	subs	r3, r3, r5
 8000c2e:	0189      	lsls	r1, r1, #6
 8000c30:	0a4e      	lsrs	r6, r1, #9
 8000c32:	b2d8      	uxtb	r0, r3
 8000c34:	e7d6      	b.n	8000be4 <__aeabi_i2f+0x34>
 8000c36:	1f6a      	subs	r2, r5, #5
 8000c38:	4096      	lsls	r6, r2
 8000c3a:	0031      	movs	r1, r6
 8000c3c:	4f02      	ldr	r7, [pc, #8]	; (8000c48 <__aeabi_i2f+0x98>)
 8000c3e:	4039      	ands	r1, r7
 8000c40:	0772      	lsls	r2, r6, #29
 8000c42:	d0f4      	beq.n	8000c2e <__aeabi_i2f+0x7e>
 8000c44:	e7e9      	b.n	8000c1a <__aeabi_i2f+0x6a>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	fbffffff 	.word	0xfbffffff

08000c4c <__aeabi_ui2f>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	1e05      	subs	r5, r0, #0
 8000c50:	d00e      	beq.n	8000c70 <__aeabi_ui2f+0x24>
 8000c52:	f001 fea5 	bl	80029a0 <__clzsi2>
 8000c56:	239e      	movs	r3, #158	; 0x9e
 8000c58:	0004      	movs	r4, r0
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	2b96      	cmp	r3, #150	; 0x96
 8000c5e:	dc0c      	bgt.n	8000c7a <__aeabi_ui2f+0x2e>
 8000c60:	2808      	cmp	r0, #8
 8000c62:	dd01      	ble.n	8000c68 <__aeabi_ui2f+0x1c>
 8000c64:	3c08      	subs	r4, #8
 8000c66:	40a5      	lsls	r5, r4
 8000c68:	026d      	lsls	r5, r5, #9
 8000c6a:	0a6d      	lsrs	r5, r5, #9
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	e001      	b.n	8000c74 <__aeabi_ui2f+0x28>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2500      	movs	r5, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4328      	orrs	r0, r5
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
 8000c7a:	2b99      	cmp	r3, #153	; 0x99
 8000c7c:	dd09      	ble.n	8000c92 <__aeabi_ui2f+0x46>
 8000c7e:	0002      	movs	r2, r0
 8000c80:	0029      	movs	r1, r5
 8000c82:	321b      	adds	r2, #27
 8000c84:	4091      	lsls	r1, r2
 8000c86:	1e4a      	subs	r2, r1, #1
 8000c88:	4191      	sbcs	r1, r2
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	1a12      	subs	r2, r2, r0
 8000c8e:	40d5      	lsrs	r5, r2
 8000c90:	430d      	orrs	r5, r1
 8000c92:	2c05      	cmp	r4, #5
 8000c94:	dc12      	bgt.n	8000cbc <__aeabi_ui2f+0x70>
 8000c96:	0029      	movs	r1, r5
 8000c98:	4e0c      	ldr	r6, [pc, #48]	; (8000ccc <__aeabi_ui2f+0x80>)
 8000c9a:	4031      	ands	r1, r6
 8000c9c:	076a      	lsls	r2, r5, #29
 8000c9e:	d009      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000ca0:	200f      	movs	r0, #15
 8000ca2:	4028      	ands	r0, r5
 8000ca4:	2804      	cmp	r0, #4
 8000ca6:	d005      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000ca8:	3104      	adds	r1, #4
 8000caa:	014a      	lsls	r2, r1, #5
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_ui2f+0x68>
 8000cae:	239f      	movs	r3, #159	; 0x9f
 8000cb0:	4031      	ands	r1, r6
 8000cb2:	1b1b      	subs	r3, r3, r4
 8000cb4:	0189      	lsls	r1, r1, #6
 8000cb6:	0a4d      	lsrs	r5, r1, #9
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	e7db      	b.n	8000c74 <__aeabi_ui2f+0x28>
 8000cbc:	1f62      	subs	r2, r4, #5
 8000cbe:	4095      	lsls	r5, r2
 8000cc0:	0029      	movs	r1, r5
 8000cc2:	4e02      	ldr	r6, [pc, #8]	; (8000ccc <__aeabi_ui2f+0x80>)
 8000cc4:	4031      	ands	r1, r6
 8000cc6:	076a      	lsls	r2, r5, #29
 8000cc8:	d0f4      	beq.n	8000cb4 <__aeabi_ui2f+0x68>
 8000cca:	e7e9      	b.n	8000ca0 <__aeabi_ui2f+0x54>
 8000ccc:	fbffffff 	.word	0xfbffffff

08000cd0 <__aeabi_dadd>:
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	464f      	mov	r7, r9
 8000cd4:	4646      	mov	r6, r8
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	000d      	movs	r5, r1
 8000cda:	0004      	movs	r4, r0
 8000cdc:	b5c0      	push	{r6, r7, lr}
 8000cde:	001f      	movs	r7, r3
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0328      	lsls	r0, r5, #12
 8000ce4:	0f62      	lsrs	r2, r4, #29
 8000ce6:	0a40      	lsrs	r0, r0, #9
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	007a      	lsls	r2, r7, #1
 8000cec:	0d52      	lsrs	r2, r2, #21
 8000cee:	00e3      	lsls	r3, r4, #3
 8000cf0:	033c      	lsls	r4, r7, #12
 8000cf2:	4691      	mov	r9, r2
 8000cf4:	0a64      	lsrs	r4, r4, #9
 8000cf6:	0ffa      	lsrs	r2, r7, #31
 8000cf8:	0f4f      	lsrs	r7, r1, #29
 8000cfa:	006e      	lsls	r6, r5, #1
 8000cfc:	4327      	orrs	r7, r4
 8000cfe:	4692      	mov	sl, r2
 8000d00:	46b8      	mov	r8, r7
 8000d02:	0d76      	lsrs	r6, r6, #21
 8000d04:	0fed      	lsrs	r5, r5, #31
 8000d06:	00c9      	lsls	r1, r1, #3
 8000d08:	4295      	cmp	r5, r2
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x3e>
 8000d0c:	e099      	b.n	8000e42 <__aeabi_dadd+0x172>
 8000d0e:	464c      	mov	r4, r9
 8000d10:	1b34      	subs	r4, r6, r4
 8000d12:	46a4      	mov	ip, r4
 8000d14:	2c00      	cmp	r4, #0
 8000d16:	dc00      	bgt.n	8000d1a <__aeabi_dadd+0x4a>
 8000d18:	e07c      	b.n	8000e14 <__aeabi_dadd+0x144>
 8000d1a:	464a      	mov	r2, r9
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_dadd+0x52>
 8000d20:	e0b8      	b.n	8000e94 <__aeabi_dadd+0x1c4>
 8000d22:	4ac5      	ldr	r2, [pc, #788]	; (8001038 <__aeabi_dadd+0x368>)
 8000d24:	4296      	cmp	r6, r2
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dadd+0x5a>
 8000d28:	e11c      	b.n	8000f64 <__aeabi_dadd+0x294>
 8000d2a:	2280      	movs	r2, #128	; 0x80
 8000d2c:	003c      	movs	r4, r7
 8000d2e:	0412      	lsls	r2, r2, #16
 8000d30:	4314      	orrs	r4, r2
 8000d32:	46a0      	mov	r8, r4
 8000d34:	4662      	mov	r2, ip
 8000d36:	2a38      	cmp	r2, #56	; 0x38
 8000d38:	dd00      	ble.n	8000d3c <__aeabi_dadd+0x6c>
 8000d3a:	e161      	b.n	8001000 <__aeabi_dadd+0x330>
 8000d3c:	2a1f      	cmp	r2, #31
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_dadd+0x72>
 8000d40:	e1cc      	b.n	80010dc <__aeabi_dadd+0x40c>
 8000d42:	4664      	mov	r4, ip
 8000d44:	2220      	movs	r2, #32
 8000d46:	1b12      	subs	r2, r2, r4
 8000d48:	4644      	mov	r4, r8
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	000f      	movs	r7, r1
 8000d4e:	46a1      	mov	r9, r4
 8000d50:	4664      	mov	r4, ip
 8000d52:	4091      	lsls	r1, r2
 8000d54:	40e7      	lsrs	r7, r4
 8000d56:	464c      	mov	r4, r9
 8000d58:	1e4a      	subs	r2, r1, #1
 8000d5a:	4191      	sbcs	r1, r2
 8000d5c:	433c      	orrs	r4, r7
 8000d5e:	4642      	mov	r2, r8
 8000d60:	4321      	orrs	r1, r4
 8000d62:	4664      	mov	r4, ip
 8000d64:	40e2      	lsrs	r2, r4
 8000d66:	1a80      	subs	r0, r0, r2
 8000d68:	1a5c      	subs	r4, r3, r1
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	419b      	sbcs	r3, r3
 8000d6e:	425f      	negs	r7, r3
 8000d70:	1bc7      	subs	r7, r0, r7
 8000d72:	023b      	lsls	r3, r7, #8
 8000d74:	d400      	bmi.n	8000d78 <__aeabi_dadd+0xa8>
 8000d76:	e0d0      	b.n	8000f1a <__aeabi_dadd+0x24a>
 8000d78:	027f      	lsls	r7, r7, #9
 8000d7a:	0a7f      	lsrs	r7, r7, #9
 8000d7c:	2f00      	cmp	r7, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0xb2>
 8000d80:	e0ff      	b.n	8000f82 <__aeabi_dadd+0x2b2>
 8000d82:	0038      	movs	r0, r7
 8000d84:	f001 fe0c 	bl	80029a0 <__clzsi2>
 8000d88:	0001      	movs	r1, r0
 8000d8a:	3908      	subs	r1, #8
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	0022      	movs	r2, r4
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	408f      	lsls	r7, r1
 8000d94:	40da      	lsrs	r2, r3
 8000d96:	408c      	lsls	r4, r1
 8000d98:	4317      	orrs	r7, r2
 8000d9a:	42b1      	cmp	r1, r6
 8000d9c:	da00      	bge.n	8000da0 <__aeabi_dadd+0xd0>
 8000d9e:	e0ff      	b.n	8000fa0 <__aeabi_dadd+0x2d0>
 8000da0:	1b89      	subs	r1, r1, r6
 8000da2:	1c4b      	adds	r3, r1, #1
 8000da4:	2b1f      	cmp	r3, #31
 8000da6:	dd00      	ble.n	8000daa <__aeabi_dadd+0xda>
 8000da8:	e0a8      	b.n	8000efc <__aeabi_dadd+0x22c>
 8000daa:	2220      	movs	r2, #32
 8000dac:	0039      	movs	r1, r7
 8000dae:	1ad2      	subs	r2, r2, r3
 8000db0:	0020      	movs	r0, r4
 8000db2:	4094      	lsls	r4, r2
 8000db4:	4091      	lsls	r1, r2
 8000db6:	40d8      	lsrs	r0, r3
 8000db8:	1e62      	subs	r2, r4, #1
 8000dba:	4194      	sbcs	r4, r2
 8000dbc:	40df      	lsrs	r7, r3
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4301      	orrs	r1, r0
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	0763      	lsls	r3, r4, #29
 8000dc6:	d009      	beq.n	8000ddc <__aeabi_dadd+0x10c>
 8000dc8:	230f      	movs	r3, #15
 8000dca:	4023      	ands	r3, r4
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d005      	beq.n	8000ddc <__aeabi_dadd+0x10c>
 8000dd0:	1d23      	adds	r3, r4, #4
 8000dd2:	42a3      	cmp	r3, r4
 8000dd4:	41a4      	sbcs	r4, r4
 8000dd6:	4264      	negs	r4, r4
 8000dd8:	193f      	adds	r7, r7, r4
 8000dda:	001c      	movs	r4, r3
 8000ddc:	023b      	lsls	r3, r7, #8
 8000dde:	d400      	bmi.n	8000de2 <__aeabi_dadd+0x112>
 8000de0:	e09e      	b.n	8000f20 <__aeabi_dadd+0x250>
 8000de2:	4b95      	ldr	r3, [pc, #596]	; (8001038 <__aeabi_dadd+0x368>)
 8000de4:	3601      	adds	r6, #1
 8000de6:	429e      	cmp	r6, r3
 8000de8:	d100      	bne.n	8000dec <__aeabi_dadd+0x11c>
 8000dea:	e0b7      	b.n	8000f5c <__aeabi_dadd+0x28c>
 8000dec:	4a93      	ldr	r2, [pc, #588]	; (800103c <__aeabi_dadd+0x36c>)
 8000dee:	08e4      	lsrs	r4, r4, #3
 8000df0:	4017      	ands	r7, r2
 8000df2:	077b      	lsls	r3, r7, #29
 8000df4:	0571      	lsls	r1, r6, #21
 8000df6:	027f      	lsls	r7, r7, #9
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	0b3f      	lsrs	r7, r7, #12
 8000dfc:	0d4a      	lsrs	r2, r1, #21
 8000dfe:	0512      	lsls	r2, r2, #20
 8000e00:	433a      	orrs	r2, r7
 8000e02:	07ed      	lsls	r5, r5, #31
 8000e04:	432a      	orrs	r2, r5
 8000e06:	0018      	movs	r0, r3
 8000e08:	0011      	movs	r1, r2
 8000e0a:	bce0      	pop	{r5, r6, r7}
 8000e0c:	46ba      	mov	sl, r7
 8000e0e:	46b1      	mov	r9, r6
 8000e10:	46a8      	mov	r8, r5
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d04b      	beq.n	8000eb0 <__aeabi_dadd+0x1e0>
 8000e18:	464c      	mov	r4, r9
 8000e1a:	1ba4      	subs	r4, r4, r6
 8000e1c:	46a4      	mov	ip, r4
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d000      	beq.n	8000e24 <__aeabi_dadd+0x154>
 8000e22:	e123      	b.n	800106c <__aeabi_dadd+0x39c>
 8000e24:	0004      	movs	r4, r0
 8000e26:	431c      	orrs	r4, r3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_dadd+0x15c>
 8000e2a:	e1af      	b.n	800118c <__aeabi_dadd+0x4bc>
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	1e54      	subs	r4, r2, #1
 8000e30:	2a01      	cmp	r2, #1
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x166>
 8000e34:	e215      	b.n	8001262 <__aeabi_dadd+0x592>
 8000e36:	4d80      	ldr	r5, [pc, #512]	; (8001038 <__aeabi_dadd+0x368>)
 8000e38:	45ac      	cmp	ip, r5
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_dadd+0x16e>
 8000e3c:	e1c8      	b.n	80011d0 <__aeabi_dadd+0x500>
 8000e3e:	46a4      	mov	ip, r4
 8000e40:	e11b      	b.n	800107a <__aeabi_dadd+0x3aa>
 8000e42:	464a      	mov	r2, r9
 8000e44:	1ab2      	subs	r2, r6, r2
 8000e46:	4694      	mov	ip, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_dadd+0x17e>
 8000e4c:	e0ac      	b.n	8000fa8 <__aeabi_dadd+0x2d8>
 8000e4e:	464a      	mov	r2, r9
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d043      	beq.n	8000edc <__aeabi_dadd+0x20c>
 8000e54:	4a78      	ldr	r2, [pc, #480]	; (8001038 <__aeabi_dadd+0x368>)
 8000e56:	4296      	cmp	r6, r2
 8000e58:	d100      	bne.n	8000e5c <__aeabi_dadd+0x18c>
 8000e5a:	e1af      	b.n	80011bc <__aeabi_dadd+0x4ec>
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	003c      	movs	r4, r7
 8000e60:	0412      	lsls	r2, r2, #16
 8000e62:	4314      	orrs	r4, r2
 8000e64:	46a0      	mov	r8, r4
 8000e66:	4662      	mov	r2, ip
 8000e68:	2a38      	cmp	r2, #56	; 0x38
 8000e6a:	dc67      	bgt.n	8000f3c <__aeabi_dadd+0x26c>
 8000e6c:	2a1f      	cmp	r2, #31
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dadd+0x1a2>
 8000e70:	e15f      	b.n	8001132 <__aeabi_dadd+0x462>
 8000e72:	4647      	mov	r7, r8
 8000e74:	3a20      	subs	r2, #32
 8000e76:	40d7      	lsrs	r7, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	2a20      	cmp	r2, #32
 8000e7c:	d005      	beq.n	8000e8a <__aeabi_dadd+0x1ba>
 8000e7e:	4664      	mov	r4, ip
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	1b12      	subs	r2, r2, r4
 8000e84:	4644      	mov	r4, r8
 8000e86:	4094      	lsls	r4, r2
 8000e88:	4321      	orrs	r1, r4
 8000e8a:	1e4a      	subs	r2, r1, #1
 8000e8c:	4191      	sbcs	r1, r2
 8000e8e:	000c      	movs	r4, r1
 8000e90:	433c      	orrs	r4, r7
 8000e92:	e057      	b.n	8000f44 <__aeabi_dadd+0x274>
 8000e94:	003a      	movs	r2, r7
 8000e96:	430a      	orrs	r2, r1
 8000e98:	d100      	bne.n	8000e9c <__aeabi_dadd+0x1cc>
 8000e9a:	e105      	b.n	80010a8 <__aeabi_dadd+0x3d8>
 8000e9c:	0022      	movs	r2, r4
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	2c01      	cmp	r4, #1
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_dadd+0x1d6>
 8000ea4:	e182      	b.n	80011ac <__aeabi_dadd+0x4dc>
 8000ea6:	4c64      	ldr	r4, [pc, #400]	; (8001038 <__aeabi_dadd+0x368>)
 8000ea8:	45a4      	cmp	ip, r4
 8000eaa:	d05b      	beq.n	8000f64 <__aeabi_dadd+0x294>
 8000eac:	4694      	mov	ip, r2
 8000eae:	e741      	b.n	8000d34 <__aeabi_dadd+0x64>
 8000eb0:	4c63      	ldr	r4, [pc, #396]	; (8001040 <__aeabi_dadd+0x370>)
 8000eb2:	1c77      	adds	r7, r6, #1
 8000eb4:	4227      	tst	r7, r4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_dadd+0x1ea>
 8000eb8:	e0c4      	b.n	8001044 <__aeabi_dadd+0x374>
 8000eba:	0004      	movs	r4, r0
 8000ebc:	431c      	orrs	r4, r3
 8000ebe:	2e00      	cmp	r6, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_dadd+0x1f4>
 8000ec2:	e169      	b.n	8001198 <__aeabi_dadd+0x4c8>
 8000ec4:	2c00      	cmp	r4, #0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_dadd+0x1fa>
 8000ec8:	e1bf      	b.n	800124a <__aeabi_dadd+0x57a>
 8000eca:	4644      	mov	r4, r8
 8000ecc:	430c      	orrs	r4, r1
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_dadd+0x202>
 8000ed0:	e1d0      	b.n	8001274 <__aeabi_dadd+0x5a4>
 8000ed2:	0742      	lsls	r2, r0, #29
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	08c0      	lsrs	r0, r0, #3
 8000eda:	e029      	b.n	8000f30 <__aeabi_dadd+0x260>
 8000edc:	003a      	movs	r2, r7
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x214>
 8000ee2:	e170      	b.n	80011c6 <__aeabi_dadd+0x4f6>
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	4664      	mov	r4, ip
 8000ee8:	3a01      	subs	r2, #1
 8000eea:	2c01      	cmp	r4, #1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x220>
 8000eee:	e0e0      	b.n	80010b2 <__aeabi_dadd+0x3e2>
 8000ef0:	4c51      	ldr	r4, [pc, #324]	; (8001038 <__aeabi_dadd+0x368>)
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_dadd+0x228>
 8000ef6:	e161      	b.n	80011bc <__aeabi_dadd+0x4ec>
 8000ef8:	4694      	mov	ip, r2
 8000efa:	e7b4      	b.n	8000e66 <__aeabi_dadd+0x196>
 8000efc:	003a      	movs	r2, r7
 8000efe:	391f      	subs	r1, #31
 8000f00:	40ca      	lsrs	r2, r1
 8000f02:	0011      	movs	r1, r2
 8000f04:	2b20      	cmp	r3, #32
 8000f06:	d003      	beq.n	8000f10 <__aeabi_dadd+0x240>
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	409f      	lsls	r7, r3
 8000f0e:	433c      	orrs	r4, r7
 8000f10:	1e63      	subs	r3, r4, #1
 8000f12:	419c      	sbcs	r4, r3
 8000f14:	2700      	movs	r7, #0
 8000f16:	2600      	movs	r6, #0
 8000f18:	430c      	orrs	r4, r1
 8000f1a:	0763      	lsls	r3, r4, #29
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dadd+0x250>
 8000f1e:	e753      	b.n	8000dc8 <__aeabi_dadd+0xf8>
 8000f20:	46b4      	mov	ip, r6
 8000f22:	08e4      	lsrs	r4, r4, #3
 8000f24:	077b      	lsls	r3, r7, #29
 8000f26:	4323      	orrs	r3, r4
 8000f28:	08f8      	lsrs	r0, r7, #3
 8000f2a:	4a43      	ldr	r2, [pc, #268]	; (8001038 <__aeabi_dadd+0x368>)
 8000f2c:	4594      	cmp	ip, r2
 8000f2e:	d01d      	beq.n	8000f6c <__aeabi_dadd+0x29c>
 8000f30:	4662      	mov	r2, ip
 8000f32:	0307      	lsls	r7, r0, #12
 8000f34:	0552      	lsls	r2, r2, #21
 8000f36:	0b3f      	lsrs	r7, r7, #12
 8000f38:	0d52      	lsrs	r2, r2, #21
 8000f3a:	e760      	b.n	8000dfe <__aeabi_dadd+0x12e>
 8000f3c:	4644      	mov	r4, r8
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	1e62      	subs	r2, r4, #1
 8000f42:	4194      	sbcs	r4, r2
 8000f44:	18e4      	adds	r4, r4, r3
 8000f46:	429c      	cmp	r4, r3
 8000f48:	419b      	sbcs	r3, r3
 8000f4a:	425f      	negs	r7, r3
 8000f4c:	183f      	adds	r7, r7, r0
 8000f4e:	023b      	lsls	r3, r7, #8
 8000f50:	d5e3      	bpl.n	8000f1a <__aeabi_dadd+0x24a>
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <__aeabi_dadd+0x368>)
 8000f54:	3601      	adds	r6, #1
 8000f56:	429e      	cmp	r6, r3
 8000f58:	d000      	beq.n	8000f5c <__aeabi_dadd+0x28c>
 8000f5a:	e0b5      	b.n	80010c8 <__aeabi_dadd+0x3f8>
 8000f5c:	0032      	movs	r2, r6
 8000f5e:	2700      	movs	r7, #0
 8000f60:	2300      	movs	r3, #0
 8000f62:	e74c      	b.n	8000dfe <__aeabi_dadd+0x12e>
 8000f64:	0742      	lsls	r2, r0, #29
 8000f66:	08db      	lsrs	r3, r3, #3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	08c0      	lsrs	r0, r0, #3
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	4302      	orrs	r2, r0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_dadd+0x2a4>
 8000f72:	e1e1      	b.n	8001338 <__aeabi_dadd+0x668>
 8000f74:	2780      	movs	r7, #128	; 0x80
 8000f76:	033f      	lsls	r7, r7, #12
 8000f78:	4307      	orrs	r7, r0
 8000f7a:	033f      	lsls	r7, r7, #12
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <__aeabi_dadd+0x368>)
 8000f7e:	0b3f      	lsrs	r7, r7, #12
 8000f80:	e73d      	b.n	8000dfe <__aeabi_dadd+0x12e>
 8000f82:	0020      	movs	r0, r4
 8000f84:	f001 fd0c 	bl	80029a0 <__clzsi2>
 8000f88:	0001      	movs	r1, r0
 8000f8a:	3118      	adds	r1, #24
 8000f8c:	291f      	cmp	r1, #31
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_dadd+0x2c2>
 8000f90:	e6fc      	b.n	8000d8c <__aeabi_dadd+0xbc>
 8000f92:	3808      	subs	r0, #8
 8000f94:	4084      	lsls	r4, r0
 8000f96:	0027      	movs	r7, r4
 8000f98:	2400      	movs	r4, #0
 8000f9a:	42b1      	cmp	r1, r6
 8000f9c:	db00      	blt.n	8000fa0 <__aeabi_dadd+0x2d0>
 8000f9e:	e6ff      	b.n	8000da0 <__aeabi_dadd+0xd0>
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <__aeabi_dadd+0x36c>)
 8000fa2:	1a76      	subs	r6, r6, r1
 8000fa4:	4017      	ands	r7, r2
 8000fa6:	e70d      	b.n	8000dc4 <__aeabi_dadd+0xf4>
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d02f      	beq.n	800100c <__aeabi_dadd+0x33c>
 8000fac:	464a      	mov	r2, r9
 8000fae:	1b92      	subs	r2, r2, r6
 8000fb0:	4694      	mov	ip, r2
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_dadd+0x2e8>
 8000fb6:	e0ad      	b.n	8001114 <__aeabi_dadd+0x444>
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <__aeabi_dadd+0x368>)
 8000fba:	4591      	cmp	r9, r2
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_dadd+0x2f0>
 8000fbe:	e10f      	b.n	80011e0 <__aeabi_dadd+0x510>
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0412      	lsls	r2, r2, #16
 8000fc4:	4310      	orrs	r0, r2
 8000fc6:	4662      	mov	r2, ip
 8000fc8:	2a38      	cmp	r2, #56	; 0x38
 8000fca:	dd00      	ble.n	8000fce <__aeabi_dadd+0x2fe>
 8000fcc:	e10f      	b.n	80011ee <__aeabi_dadd+0x51e>
 8000fce:	2a1f      	cmp	r2, #31
 8000fd0:	dd00      	ble.n	8000fd4 <__aeabi_dadd+0x304>
 8000fd2:	e180      	b.n	80012d6 <__aeabi_dadd+0x606>
 8000fd4:	4664      	mov	r4, ip
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	001e      	movs	r6, r3
 8000fda:	1b12      	subs	r2, r2, r4
 8000fdc:	4667      	mov	r7, ip
 8000fde:	0004      	movs	r4, r0
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	4094      	lsls	r4, r2
 8000fe4:	40fe      	lsrs	r6, r7
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	4193      	sbcs	r3, r2
 8000fea:	40f8      	lsrs	r0, r7
 8000fec:	4334      	orrs	r4, r6
 8000fee:	431c      	orrs	r4, r3
 8000ff0:	4480      	add	r8, r0
 8000ff2:	1864      	adds	r4, r4, r1
 8000ff4:	428c      	cmp	r4, r1
 8000ff6:	41bf      	sbcs	r7, r7
 8000ff8:	427f      	negs	r7, r7
 8000ffa:	464e      	mov	r6, r9
 8000ffc:	4447      	add	r7, r8
 8000ffe:	e7a6      	b.n	8000f4e <__aeabi_dadd+0x27e>
 8001000:	4642      	mov	r2, r8
 8001002:	430a      	orrs	r2, r1
 8001004:	0011      	movs	r1, r2
 8001006:	1e4a      	subs	r2, r1, #1
 8001008:	4191      	sbcs	r1, r2
 800100a:	e6ad      	b.n	8000d68 <__aeabi_dadd+0x98>
 800100c:	4c0c      	ldr	r4, [pc, #48]	; (8001040 <__aeabi_dadd+0x370>)
 800100e:	1c72      	adds	r2, r6, #1
 8001010:	4222      	tst	r2, r4
 8001012:	d000      	beq.n	8001016 <__aeabi_dadd+0x346>
 8001014:	e0a1      	b.n	800115a <__aeabi_dadd+0x48a>
 8001016:	0002      	movs	r2, r0
 8001018:	431a      	orrs	r2, r3
 800101a:	2e00      	cmp	r6, #0
 800101c:	d000      	beq.n	8001020 <__aeabi_dadd+0x350>
 800101e:	e0fa      	b.n	8001216 <__aeabi_dadd+0x546>
 8001020:	2a00      	cmp	r2, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x356>
 8001024:	e145      	b.n	80012b2 <__aeabi_dadd+0x5e2>
 8001026:	003a      	movs	r2, r7
 8001028:	430a      	orrs	r2, r1
 800102a:	d000      	beq.n	800102e <__aeabi_dadd+0x35e>
 800102c:	e146      	b.n	80012bc <__aeabi_dadd+0x5ec>
 800102e:	0742      	lsls	r2, r0, #29
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	4313      	orrs	r3, r2
 8001034:	08c0      	lsrs	r0, r0, #3
 8001036:	e77b      	b.n	8000f30 <__aeabi_dadd+0x260>
 8001038:	000007ff 	.word	0x000007ff
 800103c:	ff7fffff 	.word	0xff7fffff
 8001040:	000007fe 	.word	0x000007fe
 8001044:	4647      	mov	r7, r8
 8001046:	1a5c      	subs	r4, r3, r1
 8001048:	1bc2      	subs	r2, r0, r7
 800104a:	42a3      	cmp	r3, r4
 800104c:	41bf      	sbcs	r7, r7
 800104e:	427f      	negs	r7, r7
 8001050:	46b9      	mov	r9, r7
 8001052:	0017      	movs	r7, r2
 8001054:	464a      	mov	r2, r9
 8001056:	1abf      	subs	r7, r7, r2
 8001058:	023a      	lsls	r2, r7, #8
 800105a:	d500      	bpl.n	800105e <__aeabi_dadd+0x38e>
 800105c:	e08d      	b.n	800117a <__aeabi_dadd+0x4aa>
 800105e:	0023      	movs	r3, r4
 8001060:	433b      	orrs	r3, r7
 8001062:	d000      	beq.n	8001066 <__aeabi_dadd+0x396>
 8001064:	e68a      	b.n	8000d7c <__aeabi_dadd+0xac>
 8001066:	2000      	movs	r0, #0
 8001068:	2500      	movs	r5, #0
 800106a:	e761      	b.n	8000f30 <__aeabi_dadd+0x260>
 800106c:	4cb4      	ldr	r4, [pc, #720]	; (8001340 <__aeabi_dadd+0x670>)
 800106e:	45a1      	cmp	r9, r4
 8001070:	d100      	bne.n	8001074 <__aeabi_dadd+0x3a4>
 8001072:	e0ad      	b.n	80011d0 <__aeabi_dadd+0x500>
 8001074:	2480      	movs	r4, #128	; 0x80
 8001076:	0424      	lsls	r4, r4, #16
 8001078:	4320      	orrs	r0, r4
 800107a:	4664      	mov	r4, ip
 800107c:	2c38      	cmp	r4, #56	; 0x38
 800107e:	dc3d      	bgt.n	80010fc <__aeabi_dadd+0x42c>
 8001080:	4662      	mov	r2, ip
 8001082:	2c1f      	cmp	r4, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0x3b8>
 8001086:	e0b7      	b.n	80011f8 <__aeabi_dadd+0x528>
 8001088:	2520      	movs	r5, #32
 800108a:	001e      	movs	r6, r3
 800108c:	1b2d      	subs	r5, r5, r4
 800108e:	0004      	movs	r4, r0
 8001090:	40ab      	lsls	r3, r5
 8001092:	40ac      	lsls	r4, r5
 8001094:	40d6      	lsrs	r6, r2
 8001096:	40d0      	lsrs	r0, r2
 8001098:	4642      	mov	r2, r8
 800109a:	1e5d      	subs	r5, r3, #1
 800109c:	41ab      	sbcs	r3, r5
 800109e:	4334      	orrs	r4, r6
 80010a0:	1a12      	subs	r2, r2, r0
 80010a2:	4690      	mov	r8, r2
 80010a4:	4323      	orrs	r3, r4
 80010a6:	e02c      	b.n	8001102 <__aeabi_dadd+0x432>
 80010a8:	0742      	lsls	r2, r0, #29
 80010aa:	08db      	lsrs	r3, r3, #3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	08c0      	lsrs	r0, r0, #3
 80010b0:	e73b      	b.n	8000f2a <__aeabi_dadd+0x25a>
 80010b2:	185c      	adds	r4, r3, r1
 80010b4:	429c      	cmp	r4, r3
 80010b6:	419b      	sbcs	r3, r3
 80010b8:	4440      	add	r0, r8
 80010ba:	425b      	negs	r3, r3
 80010bc:	18c7      	adds	r7, r0, r3
 80010be:	2601      	movs	r6, #1
 80010c0:	023b      	lsls	r3, r7, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0x3f6>
 80010c4:	e729      	b.n	8000f1a <__aeabi_dadd+0x24a>
 80010c6:	2602      	movs	r6, #2
 80010c8:	4a9e      	ldr	r2, [pc, #632]	; (8001344 <__aeabi_dadd+0x674>)
 80010ca:	0863      	lsrs	r3, r4, #1
 80010cc:	4017      	ands	r7, r2
 80010ce:	2201      	movs	r2, #1
 80010d0:	4014      	ands	r4, r2
 80010d2:	431c      	orrs	r4, r3
 80010d4:	07fb      	lsls	r3, r7, #31
 80010d6:	431c      	orrs	r4, r3
 80010d8:	087f      	lsrs	r7, r7, #1
 80010da:	e673      	b.n	8000dc4 <__aeabi_dadd+0xf4>
 80010dc:	4644      	mov	r4, r8
 80010de:	3a20      	subs	r2, #32
 80010e0:	40d4      	lsrs	r4, r2
 80010e2:	4662      	mov	r2, ip
 80010e4:	2a20      	cmp	r2, #32
 80010e6:	d005      	beq.n	80010f4 <__aeabi_dadd+0x424>
 80010e8:	4667      	mov	r7, ip
 80010ea:	2240      	movs	r2, #64	; 0x40
 80010ec:	1bd2      	subs	r2, r2, r7
 80010ee:	4647      	mov	r7, r8
 80010f0:	4097      	lsls	r7, r2
 80010f2:	4339      	orrs	r1, r7
 80010f4:	1e4a      	subs	r2, r1, #1
 80010f6:	4191      	sbcs	r1, r2
 80010f8:	4321      	orrs	r1, r4
 80010fa:	e635      	b.n	8000d68 <__aeabi_dadd+0x98>
 80010fc:	4303      	orrs	r3, r0
 80010fe:	1e58      	subs	r0, r3, #1
 8001100:	4183      	sbcs	r3, r0
 8001102:	1acc      	subs	r4, r1, r3
 8001104:	42a1      	cmp	r1, r4
 8001106:	41bf      	sbcs	r7, r7
 8001108:	4643      	mov	r3, r8
 800110a:	427f      	negs	r7, r7
 800110c:	4655      	mov	r5, sl
 800110e:	464e      	mov	r6, r9
 8001110:	1bdf      	subs	r7, r3, r7
 8001112:	e62e      	b.n	8000d72 <__aeabi_dadd+0xa2>
 8001114:	0002      	movs	r2, r0
 8001116:	431a      	orrs	r2, r3
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x44c>
 800111a:	e0bd      	b.n	8001298 <__aeabi_dadd+0x5c8>
 800111c:	4662      	mov	r2, ip
 800111e:	4664      	mov	r4, ip
 8001120:	3a01      	subs	r2, #1
 8001122:	2c01      	cmp	r4, #1
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0x458>
 8001126:	e0e5      	b.n	80012f4 <__aeabi_dadd+0x624>
 8001128:	4c85      	ldr	r4, [pc, #532]	; (8001340 <__aeabi_dadd+0x670>)
 800112a:	45a4      	cmp	ip, r4
 800112c:	d058      	beq.n	80011e0 <__aeabi_dadd+0x510>
 800112e:	4694      	mov	ip, r2
 8001130:	e749      	b.n	8000fc6 <__aeabi_dadd+0x2f6>
 8001132:	4664      	mov	r4, ip
 8001134:	2220      	movs	r2, #32
 8001136:	1b12      	subs	r2, r2, r4
 8001138:	4644      	mov	r4, r8
 800113a:	4094      	lsls	r4, r2
 800113c:	000f      	movs	r7, r1
 800113e:	46a1      	mov	r9, r4
 8001140:	4664      	mov	r4, ip
 8001142:	4091      	lsls	r1, r2
 8001144:	40e7      	lsrs	r7, r4
 8001146:	464c      	mov	r4, r9
 8001148:	1e4a      	subs	r2, r1, #1
 800114a:	4191      	sbcs	r1, r2
 800114c:	433c      	orrs	r4, r7
 800114e:	4642      	mov	r2, r8
 8001150:	430c      	orrs	r4, r1
 8001152:	4661      	mov	r1, ip
 8001154:	40ca      	lsrs	r2, r1
 8001156:	1880      	adds	r0, r0, r2
 8001158:	e6f4      	b.n	8000f44 <__aeabi_dadd+0x274>
 800115a:	4c79      	ldr	r4, [pc, #484]	; (8001340 <__aeabi_dadd+0x670>)
 800115c:	42a2      	cmp	r2, r4
 800115e:	d100      	bne.n	8001162 <__aeabi_dadd+0x492>
 8001160:	e6fd      	b.n	8000f5e <__aeabi_dadd+0x28e>
 8001162:	1859      	adds	r1, r3, r1
 8001164:	4299      	cmp	r1, r3
 8001166:	419b      	sbcs	r3, r3
 8001168:	4440      	add	r0, r8
 800116a:	425f      	negs	r7, r3
 800116c:	19c7      	adds	r7, r0, r7
 800116e:	07fc      	lsls	r4, r7, #31
 8001170:	0849      	lsrs	r1, r1, #1
 8001172:	0016      	movs	r6, r2
 8001174:	430c      	orrs	r4, r1
 8001176:	087f      	lsrs	r7, r7, #1
 8001178:	e6cf      	b.n	8000f1a <__aeabi_dadd+0x24a>
 800117a:	1acc      	subs	r4, r1, r3
 800117c:	42a1      	cmp	r1, r4
 800117e:	41bf      	sbcs	r7, r7
 8001180:	4643      	mov	r3, r8
 8001182:	427f      	negs	r7, r7
 8001184:	1a18      	subs	r0, r3, r0
 8001186:	4655      	mov	r5, sl
 8001188:	1bc7      	subs	r7, r0, r7
 800118a:	e5f7      	b.n	8000d7c <__aeabi_dadd+0xac>
 800118c:	08c9      	lsrs	r1, r1, #3
 800118e:	077b      	lsls	r3, r7, #29
 8001190:	4655      	mov	r5, sl
 8001192:	430b      	orrs	r3, r1
 8001194:	08f8      	lsrs	r0, r7, #3
 8001196:	e6c8      	b.n	8000f2a <__aeabi_dadd+0x25a>
 8001198:	2c00      	cmp	r4, #0
 800119a:	d000      	beq.n	800119e <__aeabi_dadd+0x4ce>
 800119c:	e081      	b.n	80012a2 <__aeabi_dadd+0x5d2>
 800119e:	4643      	mov	r3, r8
 80011a0:	430b      	orrs	r3, r1
 80011a2:	d115      	bne.n	80011d0 <__aeabi_dadd+0x500>
 80011a4:	2080      	movs	r0, #128	; 0x80
 80011a6:	2500      	movs	r5, #0
 80011a8:	0300      	lsls	r0, r0, #12
 80011aa:	e6e3      	b.n	8000f74 <__aeabi_dadd+0x2a4>
 80011ac:	1a5c      	subs	r4, r3, r1
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	419b      	sbcs	r3, r3
 80011b2:	1bc7      	subs	r7, r0, r7
 80011b4:	425b      	negs	r3, r3
 80011b6:	2601      	movs	r6, #1
 80011b8:	1aff      	subs	r7, r7, r3
 80011ba:	e5da      	b.n	8000d72 <__aeabi_dadd+0xa2>
 80011bc:	0742      	lsls	r2, r0, #29
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	e6d2      	b.n	8000f6c <__aeabi_dadd+0x29c>
 80011c6:	0742      	lsls	r2, r0, #29
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	08c0      	lsrs	r0, r0, #3
 80011ce:	e6ac      	b.n	8000f2a <__aeabi_dadd+0x25a>
 80011d0:	4643      	mov	r3, r8
 80011d2:	4642      	mov	r2, r8
 80011d4:	08c9      	lsrs	r1, r1, #3
 80011d6:	075b      	lsls	r3, r3, #29
 80011d8:	4655      	mov	r5, sl
 80011da:	430b      	orrs	r3, r1
 80011dc:	08d0      	lsrs	r0, r2, #3
 80011de:	e6c5      	b.n	8000f6c <__aeabi_dadd+0x29c>
 80011e0:	4643      	mov	r3, r8
 80011e2:	4642      	mov	r2, r8
 80011e4:	075b      	lsls	r3, r3, #29
 80011e6:	08c9      	lsrs	r1, r1, #3
 80011e8:	430b      	orrs	r3, r1
 80011ea:	08d0      	lsrs	r0, r2, #3
 80011ec:	e6be      	b.n	8000f6c <__aeabi_dadd+0x29c>
 80011ee:	4303      	orrs	r3, r0
 80011f0:	001c      	movs	r4, r3
 80011f2:	1e63      	subs	r3, r4, #1
 80011f4:	419c      	sbcs	r4, r3
 80011f6:	e6fc      	b.n	8000ff2 <__aeabi_dadd+0x322>
 80011f8:	0002      	movs	r2, r0
 80011fa:	3c20      	subs	r4, #32
 80011fc:	40e2      	lsrs	r2, r4
 80011fe:	0014      	movs	r4, r2
 8001200:	4662      	mov	r2, ip
 8001202:	2a20      	cmp	r2, #32
 8001204:	d003      	beq.n	800120e <__aeabi_dadd+0x53e>
 8001206:	2540      	movs	r5, #64	; 0x40
 8001208:	1aad      	subs	r5, r5, r2
 800120a:	40a8      	lsls	r0, r5
 800120c:	4303      	orrs	r3, r0
 800120e:	1e58      	subs	r0, r3, #1
 8001210:	4183      	sbcs	r3, r0
 8001212:	4323      	orrs	r3, r4
 8001214:	e775      	b.n	8001102 <__aeabi_dadd+0x432>
 8001216:	2a00      	cmp	r2, #0
 8001218:	d0e2      	beq.n	80011e0 <__aeabi_dadd+0x510>
 800121a:	003a      	movs	r2, r7
 800121c:	430a      	orrs	r2, r1
 800121e:	d0cd      	beq.n	80011bc <__aeabi_dadd+0x4ec>
 8001220:	0742      	lsls	r2, r0, #29
 8001222:	08db      	lsrs	r3, r3, #3
 8001224:	4313      	orrs	r3, r2
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	08c0      	lsrs	r0, r0, #3
 800122a:	0312      	lsls	r2, r2, #12
 800122c:	4210      	tst	r0, r2
 800122e:	d006      	beq.n	800123e <__aeabi_dadd+0x56e>
 8001230:	08fc      	lsrs	r4, r7, #3
 8001232:	4214      	tst	r4, r2
 8001234:	d103      	bne.n	800123e <__aeabi_dadd+0x56e>
 8001236:	0020      	movs	r0, r4
 8001238:	08cb      	lsrs	r3, r1, #3
 800123a:	077a      	lsls	r2, r7, #29
 800123c:	4313      	orrs	r3, r2
 800123e:	0f5a      	lsrs	r2, r3, #29
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	0752      	lsls	r2, r2, #29
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	4313      	orrs	r3, r2
 8001248:	e690      	b.n	8000f6c <__aeabi_dadd+0x29c>
 800124a:	4643      	mov	r3, r8
 800124c:	430b      	orrs	r3, r1
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x582>
 8001250:	e709      	b.n	8001066 <__aeabi_dadd+0x396>
 8001252:	4643      	mov	r3, r8
 8001254:	4642      	mov	r2, r8
 8001256:	08c9      	lsrs	r1, r1, #3
 8001258:	075b      	lsls	r3, r3, #29
 800125a:	4655      	mov	r5, sl
 800125c:	430b      	orrs	r3, r1
 800125e:	08d0      	lsrs	r0, r2, #3
 8001260:	e666      	b.n	8000f30 <__aeabi_dadd+0x260>
 8001262:	1acc      	subs	r4, r1, r3
 8001264:	42a1      	cmp	r1, r4
 8001266:	4189      	sbcs	r1, r1
 8001268:	1a3f      	subs	r7, r7, r0
 800126a:	4249      	negs	r1, r1
 800126c:	4655      	mov	r5, sl
 800126e:	2601      	movs	r6, #1
 8001270:	1a7f      	subs	r7, r7, r1
 8001272:	e57e      	b.n	8000d72 <__aeabi_dadd+0xa2>
 8001274:	4642      	mov	r2, r8
 8001276:	1a5c      	subs	r4, r3, r1
 8001278:	1a87      	subs	r7, r0, r2
 800127a:	42a3      	cmp	r3, r4
 800127c:	4192      	sbcs	r2, r2
 800127e:	4252      	negs	r2, r2
 8001280:	1abf      	subs	r7, r7, r2
 8001282:	023a      	lsls	r2, r7, #8
 8001284:	d53d      	bpl.n	8001302 <__aeabi_dadd+0x632>
 8001286:	1acc      	subs	r4, r1, r3
 8001288:	42a1      	cmp	r1, r4
 800128a:	4189      	sbcs	r1, r1
 800128c:	4643      	mov	r3, r8
 800128e:	4249      	negs	r1, r1
 8001290:	1a1f      	subs	r7, r3, r0
 8001292:	4655      	mov	r5, sl
 8001294:	1a7f      	subs	r7, r7, r1
 8001296:	e595      	b.n	8000dc4 <__aeabi_dadd+0xf4>
 8001298:	077b      	lsls	r3, r7, #29
 800129a:	08c9      	lsrs	r1, r1, #3
 800129c:	430b      	orrs	r3, r1
 800129e:	08f8      	lsrs	r0, r7, #3
 80012a0:	e643      	b.n	8000f2a <__aeabi_dadd+0x25a>
 80012a2:	4644      	mov	r4, r8
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	430c      	orrs	r4, r1
 80012a8:	d130      	bne.n	800130c <__aeabi_dadd+0x63c>
 80012aa:	0742      	lsls	r2, r0, #29
 80012ac:	4313      	orrs	r3, r2
 80012ae:	08c0      	lsrs	r0, r0, #3
 80012b0:	e65c      	b.n	8000f6c <__aeabi_dadd+0x29c>
 80012b2:	077b      	lsls	r3, r7, #29
 80012b4:	08c9      	lsrs	r1, r1, #3
 80012b6:	430b      	orrs	r3, r1
 80012b8:	08f8      	lsrs	r0, r7, #3
 80012ba:	e639      	b.n	8000f30 <__aeabi_dadd+0x260>
 80012bc:	185c      	adds	r4, r3, r1
 80012be:	429c      	cmp	r4, r3
 80012c0:	419b      	sbcs	r3, r3
 80012c2:	4440      	add	r0, r8
 80012c4:	425b      	negs	r3, r3
 80012c6:	18c7      	adds	r7, r0, r3
 80012c8:	023b      	lsls	r3, r7, #8
 80012ca:	d400      	bmi.n	80012ce <__aeabi_dadd+0x5fe>
 80012cc:	e625      	b.n	8000f1a <__aeabi_dadd+0x24a>
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <__aeabi_dadd+0x674>)
 80012d0:	2601      	movs	r6, #1
 80012d2:	401f      	ands	r7, r3
 80012d4:	e621      	b.n	8000f1a <__aeabi_dadd+0x24a>
 80012d6:	0004      	movs	r4, r0
 80012d8:	3a20      	subs	r2, #32
 80012da:	40d4      	lsrs	r4, r2
 80012dc:	4662      	mov	r2, ip
 80012de:	2a20      	cmp	r2, #32
 80012e0:	d004      	beq.n	80012ec <__aeabi_dadd+0x61c>
 80012e2:	2240      	movs	r2, #64	; 0x40
 80012e4:	4666      	mov	r6, ip
 80012e6:	1b92      	subs	r2, r2, r6
 80012e8:	4090      	lsls	r0, r2
 80012ea:	4303      	orrs	r3, r0
 80012ec:	1e5a      	subs	r2, r3, #1
 80012ee:	4193      	sbcs	r3, r2
 80012f0:	431c      	orrs	r4, r3
 80012f2:	e67e      	b.n	8000ff2 <__aeabi_dadd+0x322>
 80012f4:	185c      	adds	r4, r3, r1
 80012f6:	428c      	cmp	r4, r1
 80012f8:	4189      	sbcs	r1, r1
 80012fa:	4440      	add	r0, r8
 80012fc:	4249      	negs	r1, r1
 80012fe:	1847      	adds	r7, r0, r1
 8001300:	e6dd      	b.n	80010be <__aeabi_dadd+0x3ee>
 8001302:	0023      	movs	r3, r4
 8001304:	433b      	orrs	r3, r7
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x63a>
 8001308:	e6ad      	b.n	8001066 <__aeabi_dadd+0x396>
 800130a:	e606      	b.n	8000f1a <__aeabi_dadd+0x24a>
 800130c:	0744      	lsls	r4, r0, #29
 800130e:	4323      	orrs	r3, r4
 8001310:	2480      	movs	r4, #128	; 0x80
 8001312:	08c0      	lsrs	r0, r0, #3
 8001314:	0324      	lsls	r4, r4, #12
 8001316:	4220      	tst	r0, r4
 8001318:	d008      	beq.n	800132c <__aeabi_dadd+0x65c>
 800131a:	4642      	mov	r2, r8
 800131c:	08d6      	lsrs	r6, r2, #3
 800131e:	4226      	tst	r6, r4
 8001320:	d104      	bne.n	800132c <__aeabi_dadd+0x65c>
 8001322:	4655      	mov	r5, sl
 8001324:	0030      	movs	r0, r6
 8001326:	08cb      	lsrs	r3, r1, #3
 8001328:	0751      	lsls	r1, r2, #29
 800132a:	430b      	orrs	r3, r1
 800132c:	0f5a      	lsrs	r2, r3, #29
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	0752      	lsls	r2, r2, #29
 8001334:	4313      	orrs	r3, r2
 8001336:	e619      	b.n	8000f6c <__aeabi_dadd+0x29c>
 8001338:	2300      	movs	r3, #0
 800133a:	4a01      	ldr	r2, [pc, #4]	; (8001340 <__aeabi_dadd+0x670>)
 800133c:	001f      	movs	r7, r3
 800133e:	e55e      	b.n	8000dfe <__aeabi_dadd+0x12e>
 8001340:	000007ff 	.word	0x000007ff
 8001344:	ff7fffff 	.word	0xff7fffff

08001348 <__aeabi_ddiv>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	4657      	mov	r7, sl
 800134c:	464e      	mov	r6, r9
 800134e:	4645      	mov	r5, r8
 8001350:	46de      	mov	lr, fp
 8001352:	b5e0      	push	{r5, r6, r7, lr}
 8001354:	4681      	mov	r9, r0
 8001356:	0005      	movs	r5, r0
 8001358:	030c      	lsls	r4, r1, #12
 800135a:	0048      	lsls	r0, r1, #1
 800135c:	4692      	mov	sl, r2
 800135e:	001f      	movs	r7, r3
 8001360:	b085      	sub	sp, #20
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	0d40      	lsrs	r0, r0, #21
 8001366:	0fce      	lsrs	r6, r1, #31
 8001368:	2800      	cmp	r0, #0
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0x26>
 800136c:	e156      	b.n	800161c <__aeabi_ddiv+0x2d4>
 800136e:	4bd4      	ldr	r3, [pc, #848]	; (80016c0 <__aeabi_ddiv+0x378>)
 8001370:	4298      	cmp	r0, r3
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x2e>
 8001374:	e172      	b.n	800165c <__aeabi_ddiv+0x314>
 8001376:	0f6b      	lsrs	r3, r5, #29
 8001378:	00e4      	lsls	r4, r4, #3
 800137a:	431c      	orrs	r4, r3
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	4323      	orrs	r3, r4
 8001382:	4698      	mov	r8, r3
 8001384:	4bcf      	ldr	r3, [pc, #828]	; (80016c4 <__aeabi_ddiv+0x37c>)
 8001386:	00ed      	lsls	r5, r5, #3
 8001388:	469b      	mov	fp, r3
 800138a:	2300      	movs	r3, #0
 800138c:	4699      	mov	r9, r3
 800138e:	4483      	add	fp, r0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	033c      	lsls	r4, r7, #12
 8001394:	007b      	lsls	r3, r7, #1
 8001396:	4650      	mov	r0, sl
 8001398:	0b24      	lsrs	r4, r4, #12
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fff      	lsrs	r7, r7, #31
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_ddiv+0x5c>
 80013a2:	e11f      	b.n	80015e4 <__aeabi_ddiv+0x29c>
 80013a4:	4ac6      	ldr	r2, [pc, #792]	; (80016c0 <__aeabi_ddiv+0x378>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x64>
 80013aa:	e162      	b.n	8001672 <__aeabi_ddiv+0x32a>
 80013ac:	49c5      	ldr	r1, [pc, #788]	; (80016c4 <__aeabi_ddiv+0x37c>)
 80013ae:	0f42      	lsrs	r2, r0, #29
 80013b0:	468c      	mov	ip, r1
 80013b2:	00e4      	lsls	r4, r4, #3
 80013b4:	4659      	mov	r1, fp
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	4463      	add	r3, ip
 80013bc:	0412      	lsls	r2, r2, #16
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	4314      	orrs	r4, r2
 80013c2:	469b      	mov	fp, r3
 80013c4:	00c2      	lsls	r2, r0, #3
 80013c6:	2000      	movs	r0, #0
 80013c8:	0033      	movs	r3, r6
 80013ca:	407b      	eors	r3, r7
 80013cc:	469a      	mov	sl, r3
 80013ce:	464b      	mov	r3, r9
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d827      	bhi.n	8001424 <__aeabi_ddiv+0xdc>
 80013d4:	49bc      	ldr	r1, [pc, #752]	; (80016c8 <__aeabi_ddiv+0x380>)
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	58cb      	ldr	r3, [r1, r3]
 80013da:	469f      	mov	pc, r3
 80013dc:	46b2      	mov	sl, r6
 80013de:	9b00      	ldr	r3, [sp, #0]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d016      	beq.n	8001412 <__aeabi_ddiv+0xca>
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d100      	bne.n	80013ea <__aeabi_ddiv+0xa2>
 80013e8:	e28e      	b.n	8001908 <__aeabi_ddiv+0x5c0>
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d000      	beq.n	80013f0 <__aeabi_ddiv+0xa8>
 80013ee:	e0d9      	b.n	80015a4 <__aeabi_ddiv+0x25c>
 80013f0:	2300      	movs	r3, #0
 80013f2:	2400      	movs	r4, #0
 80013f4:	2500      	movs	r5, #0
 80013f6:	4652      	mov	r2, sl
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	4323      	orrs	r3, r4
 80013fc:	07d2      	lsls	r2, r2, #31
 80013fe:	4313      	orrs	r3, r2
 8001400:	0028      	movs	r0, r5
 8001402:	0019      	movs	r1, r3
 8001404:	b005      	add	sp, #20
 8001406:	bcf0      	pop	{r4, r5, r6, r7}
 8001408:	46bb      	mov	fp, r7
 800140a:	46b2      	mov	sl, r6
 800140c:	46a9      	mov	r9, r5
 800140e:	46a0      	mov	r8, r4
 8001410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001412:	2400      	movs	r4, #0
 8001414:	2500      	movs	r5, #0
 8001416:	4baa      	ldr	r3, [pc, #680]	; (80016c0 <__aeabi_ddiv+0x378>)
 8001418:	e7ed      	b.n	80013f6 <__aeabi_ddiv+0xae>
 800141a:	46ba      	mov	sl, r7
 800141c:	46a0      	mov	r8, r4
 800141e:	0015      	movs	r5, r2
 8001420:	9000      	str	r0, [sp, #0]
 8001422:	e7dc      	b.n	80013de <__aeabi_ddiv+0x96>
 8001424:	4544      	cmp	r4, r8
 8001426:	d200      	bcs.n	800142a <__aeabi_ddiv+0xe2>
 8001428:	e1c7      	b.n	80017ba <__aeabi_ddiv+0x472>
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0xe6>
 800142c:	e1c2      	b.n	80017b4 <__aeabi_ddiv+0x46c>
 800142e:	2301      	movs	r3, #1
 8001430:	425b      	negs	r3, r3
 8001432:	469c      	mov	ip, r3
 8001434:	002e      	movs	r6, r5
 8001436:	4640      	mov	r0, r8
 8001438:	2500      	movs	r5, #0
 800143a:	44e3      	add	fp, ip
 800143c:	0223      	lsls	r3, r4, #8
 800143e:	0e14      	lsrs	r4, r2, #24
 8001440:	431c      	orrs	r4, r3
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	4699      	mov	r9, r3
 8001446:	0423      	lsls	r3, r4, #16
 8001448:	0c1f      	lsrs	r7, r3, #16
 800144a:	0212      	lsls	r2, r2, #8
 800144c:	4649      	mov	r1, r9
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	9701      	str	r7, [sp, #4]
 8001452:	f7fe fefb 	bl	800024c <__aeabi_uidivmod>
 8001456:	0002      	movs	r2, r0
 8001458:	437a      	muls	r2, r7
 800145a:	040b      	lsls	r3, r1, #16
 800145c:	0c31      	lsrs	r1, r6, #16
 800145e:	4680      	mov	r8, r0
 8001460:	4319      	orrs	r1, r3
 8001462:	428a      	cmp	r2, r1
 8001464:	d907      	bls.n	8001476 <__aeabi_ddiv+0x12e>
 8001466:	2301      	movs	r3, #1
 8001468:	425b      	negs	r3, r3
 800146a:	469c      	mov	ip, r3
 800146c:	1909      	adds	r1, r1, r4
 800146e:	44e0      	add	r8, ip
 8001470:	428c      	cmp	r4, r1
 8001472:	d800      	bhi.n	8001476 <__aeabi_ddiv+0x12e>
 8001474:	e207      	b.n	8001886 <__aeabi_ddiv+0x53e>
 8001476:	1a88      	subs	r0, r1, r2
 8001478:	4649      	mov	r1, r9
 800147a:	f7fe fee7 	bl	800024c <__aeabi_uidivmod>
 800147e:	0409      	lsls	r1, r1, #16
 8001480:	468c      	mov	ip, r1
 8001482:	0431      	lsls	r1, r6, #16
 8001484:	4666      	mov	r6, ip
 8001486:	9a01      	ldr	r2, [sp, #4]
 8001488:	0c09      	lsrs	r1, r1, #16
 800148a:	4342      	muls	r2, r0
 800148c:	0003      	movs	r3, r0
 800148e:	4331      	orrs	r1, r6
 8001490:	428a      	cmp	r2, r1
 8001492:	d904      	bls.n	800149e <__aeabi_ddiv+0x156>
 8001494:	1909      	adds	r1, r1, r4
 8001496:	3b01      	subs	r3, #1
 8001498:	428c      	cmp	r4, r1
 800149a:	d800      	bhi.n	800149e <__aeabi_ddiv+0x156>
 800149c:	e1ed      	b.n	800187a <__aeabi_ddiv+0x532>
 800149e:	1a88      	subs	r0, r1, r2
 80014a0:	4642      	mov	r2, r8
 80014a2:	0412      	lsls	r2, r2, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	4690      	mov	r8, r2
 80014a8:	4641      	mov	r1, r8
 80014aa:	9b00      	ldr	r3, [sp, #0]
 80014ac:	040e      	lsls	r6, r1, #16
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	001f      	movs	r7, r3
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	9b00      	ldr	r3, [sp, #0]
 80014b6:	0c36      	lsrs	r6, r6, #16
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	0c19      	lsrs	r1, r3, #16
 80014bc:	000b      	movs	r3, r1
 80014be:	4373      	muls	r3, r6
 80014c0:	0c12      	lsrs	r2, r2, #16
 80014c2:	437e      	muls	r6, r7
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	4351      	muls	r1, r2
 80014c8:	437a      	muls	r2, r7
 80014ca:	0c1f      	lsrs	r7, r3, #16
 80014cc:	46bc      	mov	ip, r7
 80014ce:	1876      	adds	r6, r6, r1
 80014d0:	4466      	add	r6, ip
 80014d2:	42b1      	cmp	r1, r6
 80014d4:	d903      	bls.n	80014de <__aeabi_ddiv+0x196>
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	0249      	lsls	r1, r1, #9
 80014da:	468c      	mov	ip, r1
 80014dc:	4462      	add	r2, ip
 80014de:	0c31      	lsrs	r1, r6, #16
 80014e0:	188a      	adds	r2, r1, r2
 80014e2:	0431      	lsls	r1, r6, #16
 80014e4:	041e      	lsls	r6, r3, #16
 80014e6:	0c36      	lsrs	r6, r6, #16
 80014e8:	198e      	adds	r6, r1, r6
 80014ea:	4290      	cmp	r0, r2
 80014ec:	d302      	bcc.n	80014f4 <__aeabi_ddiv+0x1ac>
 80014ee:	d112      	bne.n	8001516 <__aeabi_ddiv+0x1ce>
 80014f0:	42b5      	cmp	r5, r6
 80014f2:	d210      	bcs.n	8001516 <__aeabi_ddiv+0x1ce>
 80014f4:	4643      	mov	r3, r8
 80014f6:	1e59      	subs	r1, r3, #1
 80014f8:	9b00      	ldr	r3, [sp, #0]
 80014fa:	469c      	mov	ip, r3
 80014fc:	4465      	add	r5, ip
 80014fe:	001f      	movs	r7, r3
 8001500:	429d      	cmp	r5, r3
 8001502:	419b      	sbcs	r3, r3
 8001504:	425b      	negs	r3, r3
 8001506:	191b      	adds	r3, r3, r4
 8001508:	18c0      	adds	r0, r0, r3
 800150a:	4284      	cmp	r4, r0
 800150c:	d200      	bcs.n	8001510 <__aeabi_ddiv+0x1c8>
 800150e:	e1a0      	b.n	8001852 <__aeabi_ddiv+0x50a>
 8001510:	d100      	bne.n	8001514 <__aeabi_ddiv+0x1cc>
 8001512:	e19b      	b.n	800184c <__aeabi_ddiv+0x504>
 8001514:	4688      	mov	r8, r1
 8001516:	1bae      	subs	r6, r5, r6
 8001518:	42b5      	cmp	r5, r6
 800151a:	41ad      	sbcs	r5, r5
 800151c:	1a80      	subs	r0, r0, r2
 800151e:	426d      	negs	r5, r5
 8001520:	1b40      	subs	r0, r0, r5
 8001522:	4284      	cmp	r4, r0
 8001524:	d100      	bne.n	8001528 <__aeabi_ddiv+0x1e0>
 8001526:	e1d5      	b.n	80018d4 <__aeabi_ddiv+0x58c>
 8001528:	4649      	mov	r1, r9
 800152a:	f7fe fe8f 	bl	800024c <__aeabi_uidivmod>
 800152e:	9a01      	ldr	r2, [sp, #4]
 8001530:	040b      	lsls	r3, r1, #16
 8001532:	4342      	muls	r2, r0
 8001534:	0c31      	lsrs	r1, r6, #16
 8001536:	0005      	movs	r5, r0
 8001538:	4319      	orrs	r1, r3
 800153a:	428a      	cmp	r2, r1
 800153c:	d900      	bls.n	8001540 <__aeabi_ddiv+0x1f8>
 800153e:	e16c      	b.n	800181a <__aeabi_ddiv+0x4d2>
 8001540:	1a88      	subs	r0, r1, r2
 8001542:	4649      	mov	r1, r9
 8001544:	f7fe fe82 	bl	800024c <__aeabi_uidivmod>
 8001548:	9a01      	ldr	r2, [sp, #4]
 800154a:	0436      	lsls	r6, r6, #16
 800154c:	4342      	muls	r2, r0
 800154e:	0409      	lsls	r1, r1, #16
 8001550:	0c36      	lsrs	r6, r6, #16
 8001552:	0003      	movs	r3, r0
 8001554:	430e      	orrs	r6, r1
 8001556:	42b2      	cmp	r2, r6
 8001558:	d900      	bls.n	800155c <__aeabi_ddiv+0x214>
 800155a:	e153      	b.n	8001804 <__aeabi_ddiv+0x4bc>
 800155c:	9803      	ldr	r0, [sp, #12]
 800155e:	1ab6      	subs	r6, r6, r2
 8001560:	0002      	movs	r2, r0
 8001562:	042d      	lsls	r5, r5, #16
 8001564:	431d      	orrs	r5, r3
 8001566:	9f02      	ldr	r7, [sp, #8]
 8001568:	042b      	lsls	r3, r5, #16
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	435a      	muls	r2, r3
 800156e:	437b      	muls	r3, r7
 8001570:	469c      	mov	ip, r3
 8001572:	0c29      	lsrs	r1, r5, #16
 8001574:	4348      	muls	r0, r1
 8001576:	0c13      	lsrs	r3, r2, #16
 8001578:	4484      	add	ip, r0
 800157a:	4463      	add	r3, ip
 800157c:	4379      	muls	r1, r7
 800157e:	4298      	cmp	r0, r3
 8001580:	d903      	bls.n	800158a <__aeabi_ddiv+0x242>
 8001582:	2080      	movs	r0, #128	; 0x80
 8001584:	0240      	lsls	r0, r0, #9
 8001586:	4684      	mov	ip, r0
 8001588:	4461      	add	r1, ip
 800158a:	0c18      	lsrs	r0, r3, #16
 800158c:	0412      	lsls	r2, r2, #16
 800158e:	041b      	lsls	r3, r3, #16
 8001590:	0c12      	lsrs	r2, r2, #16
 8001592:	1841      	adds	r1, r0, r1
 8001594:	189b      	adds	r3, r3, r2
 8001596:	428e      	cmp	r6, r1
 8001598:	d200      	bcs.n	800159c <__aeabi_ddiv+0x254>
 800159a:	e0ff      	b.n	800179c <__aeabi_ddiv+0x454>
 800159c:	d100      	bne.n	80015a0 <__aeabi_ddiv+0x258>
 800159e:	e0fa      	b.n	8001796 <__aeabi_ddiv+0x44e>
 80015a0:	2301      	movs	r3, #1
 80015a2:	431d      	orrs	r5, r3
 80015a4:	4a49      	ldr	r2, [pc, #292]	; (80016cc <__aeabi_ddiv+0x384>)
 80015a6:	445a      	add	r2, fp
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	dc00      	bgt.n	80015ae <__aeabi_ddiv+0x266>
 80015ac:	e0aa      	b.n	8001704 <__aeabi_ddiv+0x3bc>
 80015ae:	076b      	lsls	r3, r5, #29
 80015b0:	d000      	beq.n	80015b4 <__aeabi_ddiv+0x26c>
 80015b2:	e13d      	b.n	8001830 <__aeabi_ddiv+0x4e8>
 80015b4:	08ed      	lsrs	r5, r5, #3
 80015b6:	4643      	mov	r3, r8
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	d506      	bpl.n	80015ca <__aeabi_ddiv+0x282>
 80015bc:	4642      	mov	r2, r8
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <__aeabi_ddiv+0x388>)
 80015c0:	401a      	ands	r2, r3
 80015c2:	4690      	mov	r8, r2
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	445a      	add	r2, fp
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <__aeabi_ddiv+0x38c>)
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dd00      	ble.n	80015d2 <__aeabi_ddiv+0x28a>
 80015d0:	e71f      	b.n	8001412 <__aeabi_ddiv+0xca>
 80015d2:	4643      	mov	r3, r8
 80015d4:	075b      	lsls	r3, r3, #29
 80015d6:	431d      	orrs	r5, r3
 80015d8:	4643      	mov	r3, r8
 80015da:	0552      	lsls	r2, r2, #21
 80015dc:	025c      	lsls	r4, r3, #9
 80015de:	0b24      	lsrs	r4, r4, #12
 80015e0:	0d53      	lsrs	r3, r2, #21
 80015e2:	e708      	b.n	80013f6 <__aeabi_ddiv+0xae>
 80015e4:	4652      	mov	r2, sl
 80015e6:	4322      	orrs	r2, r4
 80015e8:	d100      	bne.n	80015ec <__aeabi_ddiv+0x2a4>
 80015ea:	e07b      	b.n	80016e4 <__aeabi_ddiv+0x39c>
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d100      	bne.n	80015f2 <__aeabi_ddiv+0x2aa>
 80015f0:	e0fa      	b.n	80017e8 <__aeabi_ddiv+0x4a0>
 80015f2:	0020      	movs	r0, r4
 80015f4:	f001 f9d4 	bl	80029a0 <__clzsi2>
 80015f8:	0002      	movs	r2, r0
 80015fa:	3a0b      	subs	r2, #11
 80015fc:	231d      	movs	r3, #29
 80015fe:	0001      	movs	r1, r0
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	4652      	mov	r2, sl
 8001604:	3908      	subs	r1, #8
 8001606:	40da      	lsrs	r2, r3
 8001608:	408c      	lsls	r4, r1
 800160a:	4314      	orrs	r4, r2
 800160c:	4652      	mov	r2, sl
 800160e:	408a      	lsls	r2, r1
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <__aeabi_ddiv+0x390>)
 8001612:	4458      	add	r0, fp
 8001614:	469b      	mov	fp, r3
 8001616:	4483      	add	fp, r0
 8001618:	2000      	movs	r0, #0
 800161a:	e6d5      	b.n	80013c8 <__aeabi_ddiv+0x80>
 800161c:	464b      	mov	r3, r9
 800161e:	4323      	orrs	r3, r4
 8001620:	4698      	mov	r8, r3
 8001622:	d044      	beq.n	80016ae <__aeabi_ddiv+0x366>
 8001624:	2c00      	cmp	r4, #0
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x2e2>
 8001628:	e0ce      	b.n	80017c8 <__aeabi_ddiv+0x480>
 800162a:	0020      	movs	r0, r4
 800162c:	f001 f9b8 	bl	80029a0 <__clzsi2>
 8001630:	0001      	movs	r1, r0
 8001632:	0002      	movs	r2, r0
 8001634:	390b      	subs	r1, #11
 8001636:	231d      	movs	r3, #29
 8001638:	1a5b      	subs	r3, r3, r1
 800163a:	4649      	mov	r1, r9
 800163c:	0010      	movs	r0, r2
 800163e:	40d9      	lsrs	r1, r3
 8001640:	3808      	subs	r0, #8
 8001642:	4084      	lsls	r4, r0
 8001644:	000b      	movs	r3, r1
 8001646:	464d      	mov	r5, r9
 8001648:	4323      	orrs	r3, r4
 800164a:	4698      	mov	r8, r3
 800164c:	4085      	lsls	r5, r0
 800164e:	4823      	ldr	r0, [pc, #140]	; (80016dc <__aeabi_ddiv+0x394>)
 8001650:	1a83      	subs	r3, r0, r2
 8001652:	469b      	mov	fp, r3
 8001654:	2300      	movs	r3, #0
 8001656:	4699      	mov	r9, r3
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	e69a      	b.n	8001392 <__aeabi_ddiv+0x4a>
 800165c:	464b      	mov	r3, r9
 800165e:	4323      	orrs	r3, r4
 8001660:	4698      	mov	r8, r3
 8001662:	d11d      	bne.n	80016a0 <__aeabi_ddiv+0x358>
 8001664:	2308      	movs	r3, #8
 8001666:	4699      	mov	r9, r3
 8001668:	3b06      	subs	r3, #6
 800166a:	2500      	movs	r5, #0
 800166c:	4683      	mov	fp, r0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	e68f      	b.n	8001392 <__aeabi_ddiv+0x4a>
 8001672:	4652      	mov	r2, sl
 8001674:	4322      	orrs	r2, r4
 8001676:	d109      	bne.n	800168c <__aeabi_ddiv+0x344>
 8001678:	2302      	movs	r3, #2
 800167a:	4649      	mov	r1, r9
 800167c:	4319      	orrs	r1, r3
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <__aeabi_ddiv+0x398>)
 8001680:	4689      	mov	r9, r1
 8001682:	469c      	mov	ip, r3
 8001684:	2400      	movs	r4, #0
 8001686:	2002      	movs	r0, #2
 8001688:	44e3      	add	fp, ip
 800168a:	e69d      	b.n	80013c8 <__aeabi_ddiv+0x80>
 800168c:	2303      	movs	r3, #3
 800168e:	464a      	mov	r2, r9
 8001690:	431a      	orrs	r2, r3
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <__aeabi_ddiv+0x398>)
 8001694:	4691      	mov	r9, r2
 8001696:	469c      	mov	ip, r3
 8001698:	4652      	mov	r2, sl
 800169a:	2003      	movs	r0, #3
 800169c:	44e3      	add	fp, ip
 800169e:	e693      	b.n	80013c8 <__aeabi_ddiv+0x80>
 80016a0:	230c      	movs	r3, #12
 80016a2:	4699      	mov	r9, r3
 80016a4:	3b09      	subs	r3, #9
 80016a6:	46a0      	mov	r8, r4
 80016a8:	4683      	mov	fp, r0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	e671      	b.n	8001392 <__aeabi_ddiv+0x4a>
 80016ae:	2304      	movs	r3, #4
 80016b0:	4699      	mov	r9, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	469b      	mov	fp, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	2500      	movs	r5, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	e669      	b.n	8001392 <__aeabi_ddiv+0x4a>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	fffffc01 	.word	0xfffffc01
 80016c8:	0800a13c 	.word	0x0800a13c
 80016cc:	000003ff 	.word	0x000003ff
 80016d0:	feffffff 	.word	0xfeffffff
 80016d4:	000007fe 	.word	0x000007fe
 80016d8:	000003f3 	.word	0x000003f3
 80016dc:	fffffc0d 	.word	0xfffffc0d
 80016e0:	fffff801 	.word	0xfffff801
 80016e4:	4649      	mov	r1, r9
 80016e6:	2301      	movs	r3, #1
 80016e8:	4319      	orrs	r1, r3
 80016ea:	4689      	mov	r9, r1
 80016ec:	2400      	movs	r4, #0
 80016ee:	2001      	movs	r0, #1
 80016f0:	e66a      	b.n	80013c8 <__aeabi_ddiv+0x80>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2480      	movs	r4, #128	; 0x80
 80016f6:	469a      	mov	sl, r3
 80016f8:	2500      	movs	r5, #0
 80016fa:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <__aeabi_ddiv+0x5dc>)
 80016fc:	0324      	lsls	r4, r4, #12
 80016fe:	e67a      	b.n	80013f6 <__aeabi_ddiv+0xae>
 8001700:	2501      	movs	r5, #1
 8001702:	426d      	negs	r5, r5
 8001704:	2301      	movs	r3, #1
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	2b38      	cmp	r3, #56	; 0x38
 800170a:	dd00      	ble.n	800170e <__aeabi_ddiv+0x3c6>
 800170c:	e670      	b.n	80013f0 <__aeabi_ddiv+0xa8>
 800170e:	2b1f      	cmp	r3, #31
 8001710:	dc00      	bgt.n	8001714 <__aeabi_ddiv+0x3cc>
 8001712:	e0bf      	b.n	8001894 <__aeabi_ddiv+0x54c>
 8001714:	211f      	movs	r1, #31
 8001716:	4249      	negs	r1, r1
 8001718:	1a8a      	subs	r2, r1, r2
 800171a:	4641      	mov	r1, r8
 800171c:	40d1      	lsrs	r1, r2
 800171e:	000a      	movs	r2, r1
 8001720:	2b20      	cmp	r3, #32
 8001722:	d004      	beq.n	800172e <__aeabi_ddiv+0x3e6>
 8001724:	4641      	mov	r1, r8
 8001726:	4b80      	ldr	r3, [pc, #512]	; (8001928 <__aeabi_ddiv+0x5e0>)
 8001728:	445b      	add	r3, fp
 800172a:	4099      	lsls	r1, r3
 800172c:	430d      	orrs	r5, r1
 800172e:	1e6b      	subs	r3, r5, #1
 8001730:	419d      	sbcs	r5, r3
 8001732:	2307      	movs	r3, #7
 8001734:	432a      	orrs	r2, r5
 8001736:	001d      	movs	r5, r3
 8001738:	2400      	movs	r4, #0
 800173a:	4015      	ands	r5, r2
 800173c:	4213      	tst	r3, r2
 800173e:	d100      	bne.n	8001742 <__aeabi_ddiv+0x3fa>
 8001740:	e0d4      	b.n	80018ec <__aeabi_ddiv+0x5a4>
 8001742:	210f      	movs	r1, #15
 8001744:	2300      	movs	r3, #0
 8001746:	4011      	ands	r1, r2
 8001748:	2904      	cmp	r1, #4
 800174a:	d100      	bne.n	800174e <__aeabi_ddiv+0x406>
 800174c:	e0cb      	b.n	80018e6 <__aeabi_ddiv+0x59e>
 800174e:	1d11      	adds	r1, r2, #4
 8001750:	4291      	cmp	r1, r2
 8001752:	4192      	sbcs	r2, r2
 8001754:	4252      	negs	r2, r2
 8001756:	189b      	adds	r3, r3, r2
 8001758:	000a      	movs	r2, r1
 800175a:	0219      	lsls	r1, r3, #8
 800175c:	d400      	bmi.n	8001760 <__aeabi_ddiv+0x418>
 800175e:	e0c2      	b.n	80018e6 <__aeabi_ddiv+0x59e>
 8001760:	2301      	movs	r3, #1
 8001762:	2400      	movs	r4, #0
 8001764:	2500      	movs	r5, #0
 8001766:	e646      	b.n	80013f6 <__aeabi_ddiv+0xae>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	4641      	mov	r1, r8
 800176c:	031b      	lsls	r3, r3, #12
 800176e:	4219      	tst	r1, r3
 8001770:	d008      	beq.n	8001784 <__aeabi_ddiv+0x43c>
 8001772:	421c      	tst	r4, r3
 8001774:	d106      	bne.n	8001784 <__aeabi_ddiv+0x43c>
 8001776:	431c      	orrs	r4, r3
 8001778:	0324      	lsls	r4, r4, #12
 800177a:	46ba      	mov	sl, r7
 800177c:	0015      	movs	r5, r2
 800177e:	4b69      	ldr	r3, [pc, #420]	; (8001924 <__aeabi_ddiv+0x5dc>)
 8001780:	0b24      	lsrs	r4, r4, #12
 8001782:	e638      	b.n	80013f6 <__aeabi_ddiv+0xae>
 8001784:	2480      	movs	r4, #128	; 0x80
 8001786:	4643      	mov	r3, r8
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	431c      	orrs	r4, r3
 800178c:	0324      	lsls	r4, r4, #12
 800178e:	46b2      	mov	sl, r6
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <__aeabi_ddiv+0x5dc>)
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	e62f      	b.n	80013f6 <__aeabi_ddiv+0xae>
 8001796:	2b00      	cmp	r3, #0
 8001798:	d100      	bne.n	800179c <__aeabi_ddiv+0x454>
 800179a:	e703      	b.n	80015a4 <__aeabi_ddiv+0x25c>
 800179c:	19a6      	adds	r6, r4, r6
 800179e:	1e68      	subs	r0, r5, #1
 80017a0:	42a6      	cmp	r6, r4
 80017a2:	d200      	bcs.n	80017a6 <__aeabi_ddiv+0x45e>
 80017a4:	e08d      	b.n	80018c2 <__aeabi_ddiv+0x57a>
 80017a6:	428e      	cmp	r6, r1
 80017a8:	d200      	bcs.n	80017ac <__aeabi_ddiv+0x464>
 80017aa:	e0a3      	b.n	80018f4 <__aeabi_ddiv+0x5ac>
 80017ac:	d100      	bne.n	80017b0 <__aeabi_ddiv+0x468>
 80017ae:	e0b3      	b.n	8001918 <__aeabi_ddiv+0x5d0>
 80017b0:	0005      	movs	r5, r0
 80017b2:	e6f5      	b.n	80015a0 <__aeabi_ddiv+0x258>
 80017b4:	42aa      	cmp	r2, r5
 80017b6:	d900      	bls.n	80017ba <__aeabi_ddiv+0x472>
 80017b8:	e639      	b.n	800142e <__aeabi_ddiv+0xe6>
 80017ba:	4643      	mov	r3, r8
 80017bc:	07de      	lsls	r6, r3, #31
 80017be:	0858      	lsrs	r0, r3, #1
 80017c0:	086b      	lsrs	r3, r5, #1
 80017c2:	431e      	orrs	r6, r3
 80017c4:	07ed      	lsls	r5, r5, #31
 80017c6:	e639      	b.n	800143c <__aeabi_ddiv+0xf4>
 80017c8:	4648      	mov	r0, r9
 80017ca:	f001 f8e9 	bl	80029a0 <__clzsi2>
 80017ce:	0001      	movs	r1, r0
 80017d0:	0002      	movs	r2, r0
 80017d2:	3115      	adds	r1, #21
 80017d4:	3220      	adds	r2, #32
 80017d6:	291c      	cmp	r1, #28
 80017d8:	dc00      	bgt.n	80017dc <__aeabi_ddiv+0x494>
 80017da:	e72c      	b.n	8001636 <__aeabi_ddiv+0x2ee>
 80017dc:	464b      	mov	r3, r9
 80017de:	3808      	subs	r0, #8
 80017e0:	4083      	lsls	r3, r0
 80017e2:	2500      	movs	r5, #0
 80017e4:	4698      	mov	r8, r3
 80017e6:	e732      	b.n	800164e <__aeabi_ddiv+0x306>
 80017e8:	f001 f8da 	bl	80029a0 <__clzsi2>
 80017ec:	0003      	movs	r3, r0
 80017ee:	001a      	movs	r2, r3
 80017f0:	3215      	adds	r2, #21
 80017f2:	3020      	adds	r0, #32
 80017f4:	2a1c      	cmp	r2, #28
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x4b2>
 80017f8:	e700      	b.n	80015fc <__aeabi_ddiv+0x2b4>
 80017fa:	4654      	mov	r4, sl
 80017fc:	3b08      	subs	r3, #8
 80017fe:	2200      	movs	r2, #0
 8001800:	409c      	lsls	r4, r3
 8001802:	e705      	b.n	8001610 <__aeabi_ddiv+0x2c8>
 8001804:	1936      	adds	r6, r6, r4
 8001806:	3b01      	subs	r3, #1
 8001808:	42b4      	cmp	r4, r6
 800180a:	d900      	bls.n	800180e <__aeabi_ddiv+0x4c6>
 800180c:	e6a6      	b.n	800155c <__aeabi_ddiv+0x214>
 800180e:	42b2      	cmp	r2, r6
 8001810:	d800      	bhi.n	8001814 <__aeabi_ddiv+0x4cc>
 8001812:	e6a3      	b.n	800155c <__aeabi_ddiv+0x214>
 8001814:	1e83      	subs	r3, r0, #2
 8001816:	1936      	adds	r6, r6, r4
 8001818:	e6a0      	b.n	800155c <__aeabi_ddiv+0x214>
 800181a:	1909      	adds	r1, r1, r4
 800181c:	3d01      	subs	r5, #1
 800181e:	428c      	cmp	r4, r1
 8001820:	d900      	bls.n	8001824 <__aeabi_ddiv+0x4dc>
 8001822:	e68d      	b.n	8001540 <__aeabi_ddiv+0x1f8>
 8001824:	428a      	cmp	r2, r1
 8001826:	d800      	bhi.n	800182a <__aeabi_ddiv+0x4e2>
 8001828:	e68a      	b.n	8001540 <__aeabi_ddiv+0x1f8>
 800182a:	1e85      	subs	r5, r0, #2
 800182c:	1909      	adds	r1, r1, r4
 800182e:	e687      	b.n	8001540 <__aeabi_ddiv+0x1f8>
 8001830:	230f      	movs	r3, #15
 8001832:	402b      	ands	r3, r5
 8001834:	2b04      	cmp	r3, #4
 8001836:	d100      	bne.n	800183a <__aeabi_ddiv+0x4f2>
 8001838:	e6bc      	b.n	80015b4 <__aeabi_ddiv+0x26c>
 800183a:	2305      	movs	r3, #5
 800183c:	425b      	negs	r3, r3
 800183e:	42ab      	cmp	r3, r5
 8001840:	419b      	sbcs	r3, r3
 8001842:	3504      	adds	r5, #4
 8001844:	425b      	negs	r3, r3
 8001846:	08ed      	lsrs	r5, r5, #3
 8001848:	4498      	add	r8, r3
 800184a:	e6b4      	b.n	80015b6 <__aeabi_ddiv+0x26e>
 800184c:	42af      	cmp	r7, r5
 800184e:	d900      	bls.n	8001852 <__aeabi_ddiv+0x50a>
 8001850:	e660      	b.n	8001514 <__aeabi_ddiv+0x1cc>
 8001852:	4282      	cmp	r2, r0
 8001854:	d804      	bhi.n	8001860 <__aeabi_ddiv+0x518>
 8001856:	d000      	beq.n	800185a <__aeabi_ddiv+0x512>
 8001858:	e65c      	b.n	8001514 <__aeabi_ddiv+0x1cc>
 800185a:	42ae      	cmp	r6, r5
 800185c:	d800      	bhi.n	8001860 <__aeabi_ddiv+0x518>
 800185e:	e659      	b.n	8001514 <__aeabi_ddiv+0x1cc>
 8001860:	2302      	movs	r3, #2
 8001862:	425b      	negs	r3, r3
 8001864:	469c      	mov	ip, r3
 8001866:	9b00      	ldr	r3, [sp, #0]
 8001868:	44e0      	add	r8, ip
 800186a:	469c      	mov	ip, r3
 800186c:	4465      	add	r5, ip
 800186e:	429d      	cmp	r5, r3
 8001870:	419b      	sbcs	r3, r3
 8001872:	425b      	negs	r3, r3
 8001874:	191b      	adds	r3, r3, r4
 8001876:	18c0      	adds	r0, r0, r3
 8001878:	e64d      	b.n	8001516 <__aeabi_ddiv+0x1ce>
 800187a:	428a      	cmp	r2, r1
 800187c:	d800      	bhi.n	8001880 <__aeabi_ddiv+0x538>
 800187e:	e60e      	b.n	800149e <__aeabi_ddiv+0x156>
 8001880:	1e83      	subs	r3, r0, #2
 8001882:	1909      	adds	r1, r1, r4
 8001884:	e60b      	b.n	800149e <__aeabi_ddiv+0x156>
 8001886:	428a      	cmp	r2, r1
 8001888:	d800      	bhi.n	800188c <__aeabi_ddiv+0x544>
 800188a:	e5f4      	b.n	8001476 <__aeabi_ddiv+0x12e>
 800188c:	1e83      	subs	r3, r0, #2
 800188e:	4698      	mov	r8, r3
 8001890:	1909      	adds	r1, r1, r4
 8001892:	e5f0      	b.n	8001476 <__aeabi_ddiv+0x12e>
 8001894:	4925      	ldr	r1, [pc, #148]	; (800192c <__aeabi_ddiv+0x5e4>)
 8001896:	0028      	movs	r0, r5
 8001898:	4459      	add	r1, fp
 800189a:	408d      	lsls	r5, r1
 800189c:	4642      	mov	r2, r8
 800189e:	408a      	lsls	r2, r1
 80018a0:	1e69      	subs	r1, r5, #1
 80018a2:	418d      	sbcs	r5, r1
 80018a4:	4641      	mov	r1, r8
 80018a6:	40d8      	lsrs	r0, r3
 80018a8:	40d9      	lsrs	r1, r3
 80018aa:	4302      	orrs	r2, r0
 80018ac:	432a      	orrs	r2, r5
 80018ae:	000b      	movs	r3, r1
 80018b0:	0751      	lsls	r1, r2, #29
 80018b2:	d100      	bne.n	80018b6 <__aeabi_ddiv+0x56e>
 80018b4:	e751      	b.n	800175a <__aeabi_ddiv+0x412>
 80018b6:	210f      	movs	r1, #15
 80018b8:	4011      	ands	r1, r2
 80018ba:	2904      	cmp	r1, #4
 80018bc:	d000      	beq.n	80018c0 <__aeabi_ddiv+0x578>
 80018be:	e746      	b.n	800174e <__aeabi_ddiv+0x406>
 80018c0:	e74b      	b.n	800175a <__aeabi_ddiv+0x412>
 80018c2:	0005      	movs	r5, r0
 80018c4:	428e      	cmp	r6, r1
 80018c6:	d000      	beq.n	80018ca <__aeabi_ddiv+0x582>
 80018c8:	e66a      	b.n	80015a0 <__aeabi_ddiv+0x258>
 80018ca:	9a00      	ldr	r2, [sp, #0]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d000      	beq.n	80018d2 <__aeabi_ddiv+0x58a>
 80018d0:	e666      	b.n	80015a0 <__aeabi_ddiv+0x258>
 80018d2:	e667      	b.n	80015a4 <__aeabi_ddiv+0x25c>
 80018d4:	4a16      	ldr	r2, [pc, #88]	; (8001930 <__aeabi_ddiv+0x5e8>)
 80018d6:	445a      	add	r2, fp
 80018d8:	2a00      	cmp	r2, #0
 80018da:	dc00      	bgt.n	80018de <__aeabi_ddiv+0x596>
 80018dc:	e710      	b.n	8001700 <__aeabi_ddiv+0x3b8>
 80018de:	2301      	movs	r3, #1
 80018e0:	2500      	movs	r5, #0
 80018e2:	4498      	add	r8, r3
 80018e4:	e667      	b.n	80015b6 <__aeabi_ddiv+0x26e>
 80018e6:	075d      	lsls	r5, r3, #29
 80018e8:	025b      	lsls	r3, r3, #9
 80018ea:	0b1c      	lsrs	r4, r3, #12
 80018ec:	08d2      	lsrs	r2, r2, #3
 80018ee:	2300      	movs	r3, #0
 80018f0:	4315      	orrs	r5, r2
 80018f2:	e580      	b.n	80013f6 <__aeabi_ddiv+0xae>
 80018f4:	9800      	ldr	r0, [sp, #0]
 80018f6:	3d02      	subs	r5, #2
 80018f8:	0042      	lsls	r2, r0, #1
 80018fa:	4282      	cmp	r2, r0
 80018fc:	41bf      	sbcs	r7, r7
 80018fe:	427f      	negs	r7, r7
 8001900:	193c      	adds	r4, r7, r4
 8001902:	1936      	adds	r6, r6, r4
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	e7dd      	b.n	80018c4 <__aeabi_ddiv+0x57c>
 8001908:	2480      	movs	r4, #128	; 0x80
 800190a:	4643      	mov	r3, r8
 800190c:	0324      	lsls	r4, r4, #12
 800190e:	431c      	orrs	r4, r3
 8001910:	0324      	lsls	r4, r4, #12
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__aeabi_ddiv+0x5dc>)
 8001914:	0b24      	lsrs	r4, r4, #12
 8001916:	e56e      	b.n	80013f6 <__aeabi_ddiv+0xae>
 8001918:	9a00      	ldr	r2, [sp, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3ea      	bcc.n	80018f4 <__aeabi_ddiv+0x5ac>
 800191e:	0005      	movs	r5, r0
 8001920:	e7d3      	b.n	80018ca <__aeabi_ddiv+0x582>
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	000007ff 	.word	0x000007ff
 8001928:	0000043e 	.word	0x0000043e
 800192c:	0000041e 	.word	0x0000041e
 8001930:	000003ff 	.word	0x000003ff

08001934 <__eqdf2>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	464e      	mov	r6, r9
 8001938:	4645      	mov	r5, r8
 800193a:	46de      	mov	lr, fp
 800193c:	4657      	mov	r7, sl
 800193e:	4690      	mov	r8, r2
 8001940:	b5e0      	push	{r5, r6, r7, lr}
 8001942:	0017      	movs	r7, r2
 8001944:	031a      	lsls	r2, r3, #12
 8001946:	0b12      	lsrs	r2, r2, #12
 8001948:	0005      	movs	r5, r0
 800194a:	4684      	mov	ip, r0
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <__eqdf2+0x80>)
 800194e:	030e      	lsls	r6, r1, #12
 8001950:	004c      	lsls	r4, r1, #1
 8001952:	4691      	mov	r9, r2
 8001954:	005a      	lsls	r2, r3, #1
 8001956:	0fdb      	lsrs	r3, r3, #31
 8001958:	469b      	mov	fp, r3
 800195a:	0b36      	lsrs	r6, r6, #12
 800195c:	0d64      	lsrs	r4, r4, #21
 800195e:	0fc9      	lsrs	r1, r1, #31
 8001960:	0d52      	lsrs	r2, r2, #21
 8001962:	4284      	cmp	r4, r0
 8001964:	d019      	beq.n	800199a <__eqdf2+0x66>
 8001966:	4282      	cmp	r2, r0
 8001968:	d010      	beq.n	800198c <__eqdf2+0x58>
 800196a:	2001      	movs	r0, #1
 800196c:	4294      	cmp	r4, r2
 800196e:	d10e      	bne.n	800198e <__eqdf2+0x5a>
 8001970:	454e      	cmp	r6, r9
 8001972:	d10c      	bne.n	800198e <__eqdf2+0x5a>
 8001974:	2001      	movs	r0, #1
 8001976:	45c4      	cmp	ip, r8
 8001978:	d109      	bne.n	800198e <__eqdf2+0x5a>
 800197a:	4559      	cmp	r1, fp
 800197c:	d017      	beq.n	80019ae <__eqdf2+0x7a>
 800197e:	2c00      	cmp	r4, #0
 8001980:	d105      	bne.n	800198e <__eqdf2+0x5a>
 8001982:	0030      	movs	r0, r6
 8001984:	4328      	orrs	r0, r5
 8001986:	1e43      	subs	r3, r0, #1
 8001988:	4198      	sbcs	r0, r3
 800198a:	e000      	b.n	800198e <__eqdf2+0x5a>
 800198c:	2001      	movs	r0, #1
 800198e:	bcf0      	pop	{r4, r5, r6, r7}
 8001990:	46bb      	mov	fp, r7
 8001992:	46b2      	mov	sl, r6
 8001994:	46a9      	mov	r9, r5
 8001996:	46a0      	mov	r8, r4
 8001998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199a:	0033      	movs	r3, r6
 800199c:	2001      	movs	r0, #1
 800199e:	432b      	orrs	r3, r5
 80019a0:	d1f5      	bne.n	800198e <__eqdf2+0x5a>
 80019a2:	42a2      	cmp	r2, r4
 80019a4:	d1f3      	bne.n	800198e <__eqdf2+0x5a>
 80019a6:	464b      	mov	r3, r9
 80019a8:	433b      	orrs	r3, r7
 80019aa:	d1f0      	bne.n	800198e <__eqdf2+0x5a>
 80019ac:	e7e2      	b.n	8001974 <__eqdf2+0x40>
 80019ae:	2000      	movs	r0, #0
 80019b0:	e7ed      	b.n	800198e <__eqdf2+0x5a>
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	000007ff 	.word	0x000007ff

080019b8 <__gedf2>:
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	4647      	mov	r7, r8
 80019bc:	46ce      	mov	lr, r9
 80019be:	0004      	movs	r4, r0
 80019c0:	0018      	movs	r0, r3
 80019c2:	0016      	movs	r6, r2
 80019c4:	031b      	lsls	r3, r3, #12
 80019c6:	0b1b      	lsrs	r3, r3, #12
 80019c8:	4d2d      	ldr	r5, [pc, #180]	; (8001a80 <__gedf2+0xc8>)
 80019ca:	004a      	lsls	r2, r1, #1
 80019cc:	4699      	mov	r9, r3
 80019ce:	b580      	push	{r7, lr}
 80019d0:	0043      	lsls	r3, r0, #1
 80019d2:	030f      	lsls	r7, r1, #12
 80019d4:	46a4      	mov	ip, r4
 80019d6:	46b0      	mov	r8, r6
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0d52      	lsrs	r2, r2, #21
 80019dc:	0fc9      	lsrs	r1, r1, #31
 80019de:	0d5b      	lsrs	r3, r3, #21
 80019e0:	0fc0      	lsrs	r0, r0, #31
 80019e2:	42aa      	cmp	r2, r5
 80019e4:	d021      	beq.n	8001a2a <__gedf2+0x72>
 80019e6:	42ab      	cmp	r3, r5
 80019e8:	d013      	beq.n	8001a12 <__gedf2+0x5a>
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d122      	bne.n	8001a34 <__gedf2+0x7c>
 80019ee:	433c      	orrs	r4, r7
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <__gedf2+0x42>
 80019f4:	464d      	mov	r5, r9
 80019f6:	432e      	orrs	r6, r5
 80019f8:	d022      	beq.n	8001a40 <__gedf2+0x88>
 80019fa:	2c00      	cmp	r4, #0
 80019fc:	d010      	beq.n	8001a20 <__gedf2+0x68>
 80019fe:	4281      	cmp	r1, r0
 8001a00:	d022      	beq.n	8001a48 <__gedf2+0x90>
 8001a02:	2002      	movs	r0, #2
 8001a04:	3901      	subs	r1, #1
 8001a06:	4008      	ands	r0, r1
 8001a08:	3801      	subs	r0, #1
 8001a0a:	bcc0      	pop	{r6, r7}
 8001a0c:	46b9      	mov	r9, r7
 8001a0e:	46b0      	mov	r8, r6
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	464d      	mov	r5, r9
 8001a14:	432e      	orrs	r6, r5
 8001a16:	d129      	bne.n	8001a6c <__gedf2+0xb4>
 8001a18:	2a00      	cmp	r2, #0
 8001a1a:	d1f0      	bne.n	80019fe <__gedf2+0x46>
 8001a1c:	433c      	orrs	r4, r7
 8001a1e:	d1ee      	bne.n	80019fe <__gedf2+0x46>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1f2      	bne.n	8001a0a <__gedf2+0x52>
 8001a24:	2001      	movs	r0, #1
 8001a26:	4240      	negs	r0, r0
 8001a28:	e7ef      	b.n	8001a0a <__gedf2+0x52>
 8001a2a:	003d      	movs	r5, r7
 8001a2c:	4325      	orrs	r5, r4
 8001a2e:	d11d      	bne.n	8001a6c <__gedf2+0xb4>
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d0ee      	beq.n	8001a12 <__gedf2+0x5a>
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e2      	bne.n	80019fe <__gedf2+0x46>
 8001a38:	464c      	mov	r4, r9
 8001a3a:	4326      	orrs	r6, r4
 8001a3c:	d1df      	bne.n	80019fe <__gedf2+0x46>
 8001a3e:	e7e0      	b.n	8001a02 <__gedf2+0x4a>
 8001a40:	2000      	movs	r0, #0
 8001a42:	2c00      	cmp	r4, #0
 8001a44:	d0e1      	beq.n	8001a0a <__gedf2+0x52>
 8001a46:	e7dc      	b.n	8001a02 <__gedf2+0x4a>
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dc0a      	bgt.n	8001a62 <__gedf2+0xaa>
 8001a4c:	dbe8      	blt.n	8001a20 <__gedf2+0x68>
 8001a4e:	454f      	cmp	r7, r9
 8001a50:	d8d7      	bhi.n	8001a02 <__gedf2+0x4a>
 8001a52:	d00e      	beq.n	8001a72 <__gedf2+0xba>
 8001a54:	2000      	movs	r0, #0
 8001a56:	454f      	cmp	r7, r9
 8001a58:	d2d7      	bcs.n	8001a0a <__gedf2+0x52>
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d0e2      	beq.n	8001a24 <__gedf2+0x6c>
 8001a5e:	0008      	movs	r0, r1
 8001a60:	e7d3      	b.n	8001a0a <__gedf2+0x52>
 8001a62:	4243      	negs	r3, r0
 8001a64:	4158      	adcs	r0, r3
 8001a66:	0040      	lsls	r0, r0, #1
 8001a68:	3801      	subs	r0, #1
 8001a6a:	e7ce      	b.n	8001a0a <__gedf2+0x52>
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	4240      	negs	r0, r0
 8001a70:	e7cb      	b.n	8001a0a <__gedf2+0x52>
 8001a72:	45c4      	cmp	ip, r8
 8001a74:	d8c5      	bhi.n	8001a02 <__gedf2+0x4a>
 8001a76:	2000      	movs	r0, #0
 8001a78:	45c4      	cmp	ip, r8
 8001a7a:	d2c6      	bcs.n	8001a0a <__gedf2+0x52>
 8001a7c:	e7ed      	b.n	8001a5a <__gedf2+0xa2>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	000007ff 	.word	0x000007ff

08001a84 <__ledf2>:
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	4647      	mov	r7, r8
 8001a88:	46ce      	mov	lr, r9
 8001a8a:	0004      	movs	r4, r0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	0016      	movs	r6, r2
 8001a90:	031b      	lsls	r3, r3, #12
 8001a92:	0b1b      	lsrs	r3, r3, #12
 8001a94:	4d2c      	ldr	r5, [pc, #176]	; (8001b48 <__ledf2+0xc4>)
 8001a96:	004a      	lsls	r2, r1, #1
 8001a98:	4699      	mov	r9, r3
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	0043      	lsls	r3, r0, #1
 8001a9e:	030f      	lsls	r7, r1, #12
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	46b0      	mov	r8, r6
 8001aa4:	0b3f      	lsrs	r7, r7, #12
 8001aa6:	0d52      	lsrs	r2, r2, #21
 8001aa8:	0fc9      	lsrs	r1, r1, #31
 8001aaa:	0d5b      	lsrs	r3, r3, #21
 8001aac:	0fc0      	lsrs	r0, r0, #31
 8001aae:	42aa      	cmp	r2, r5
 8001ab0:	d00d      	beq.n	8001ace <__ledf2+0x4a>
 8001ab2:	42ab      	cmp	r3, r5
 8001ab4:	d010      	beq.n	8001ad8 <__ledf2+0x54>
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d127      	bne.n	8001b0a <__ledf2+0x86>
 8001aba:	433c      	orrs	r4, r7
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <__ledf2+0x60>
 8001ac0:	464d      	mov	r5, r9
 8001ac2:	432e      	orrs	r6, r5
 8001ac4:	d10e      	bne.n	8001ae4 <__ledf2+0x60>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	2c00      	cmp	r4, #0
 8001aca:	d015      	beq.n	8001af8 <__ledf2+0x74>
 8001acc:	e00e      	b.n	8001aec <__ledf2+0x68>
 8001ace:	003d      	movs	r5, r7
 8001ad0:	4325      	orrs	r5, r4
 8001ad2:	d110      	bne.n	8001af6 <__ledf2+0x72>
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d118      	bne.n	8001b0a <__ledf2+0x86>
 8001ad8:	464d      	mov	r5, r9
 8001ada:	432e      	orrs	r6, r5
 8001adc:	d10b      	bne.n	8001af6 <__ledf2+0x72>
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d102      	bne.n	8001ae8 <__ledf2+0x64>
 8001ae2:	433c      	orrs	r4, r7
 8001ae4:	2c00      	cmp	r4, #0
 8001ae6:	d00b      	beq.n	8001b00 <__ledf2+0x7c>
 8001ae8:	4281      	cmp	r1, r0
 8001aea:	d014      	beq.n	8001b16 <__ledf2+0x92>
 8001aec:	2002      	movs	r0, #2
 8001aee:	3901      	subs	r1, #1
 8001af0:	4008      	ands	r0, r1
 8001af2:	3801      	subs	r0, #1
 8001af4:	e000      	b.n	8001af8 <__ledf2+0x74>
 8001af6:	2002      	movs	r0, #2
 8001af8:	bcc0      	pop	{r6, r7}
 8001afa:	46b9      	mov	r9, r7
 8001afc:	46b0      	mov	r8, r6
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d1f9      	bne.n	8001af8 <__ledf2+0x74>
 8001b04:	2001      	movs	r0, #1
 8001b06:	4240      	negs	r0, r0
 8001b08:	e7f6      	b.n	8001af8 <__ledf2+0x74>
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ec      	bne.n	8001ae8 <__ledf2+0x64>
 8001b0e:	464c      	mov	r4, r9
 8001b10:	4326      	orrs	r6, r4
 8001b12:	d1e9      	bne.n	8001ae8 <__ledf2+0x64>
 8001b14:	e7ea      	b.n	8001aec <__ledf2+0x68>
 8001b16:	429a      	cmp	r2, r3
 8001b18:	dd04      	ble.n	8001b24 <__ledf2+0xa0>
 8001b1a:	4243      	negs	r3, r0
 8001b1c:	4158      	adcs	r0, r3
 8001b1e:	0040      	lsls	r0, r0, #1
 8001b20:	3801      	subs	r0, #1
 8001b22:	e7e9      	b.n	8001af8 <__ledf2+0x74>
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbeb      	blt.n	8001b00 <__ledf2+0x7c>
 8001b28:	454f      	cmp	r7, r9
 8001b2a:	d8df      	bhi.n	8001aec <__ledf2+0x68>
 8001b2c:	d006      	beq.n	8001b3c <__ledf2+0xb8>
 8001b2e:	2000      	movs	r0, #0
 8001b30:	454f      	cmp	r7, r9
 8001b32:	d2e1      	bcs.n	8001af8 <__ledf2+0x74>
 8001b34:	2900      	cmp	r1, #0
 8001b36:	d0e5      	beq.n	8001b04 <__ledf2+0x80>
 8001b38:	0008      	movs	r0, r1
 8001b3a:	e7dd      	b.n	8001af8 <__ledf2+0x74>
 8001b3c:	45c4      	cmp	ip, r8
 8001b3e:	d8d5      	bhi.n	8001aec <__ledf2+0x68>
 8001b40:	2000      	movs	r0, #0
 8001b42:	45c4      	cmp	ip, r8
 8001b44:	d2d8      	bcs.n	8001af8 <__ledf2+0x74>
 8001b46:	e7f5      	b.n	8001b34 <__ledf2+0xb0>
 8001b48:	000007ff 	.word	0x000007ff

08001b4c <__aeabi_dmul>:
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	4657      	mov	r7, sl
 8001b50:	464e      	mov	r6, r9
 8001b52:	4645      	mov	r5, r8
 8001b54:	46de      	mov	lr, fp
 8001b56:	b5e0      	push	{r5, r6, r7, lr}
 8001b58:	4698      	mov	r8, r3
 8001b5a:	030c      	lsls	r4, r1, #12
 8001b5c:	004b      	lsls	r3, r1, #1
 8001b5e:	0006      	movs	r6, r0
 8001b60:	4692      	mov	sl, r2
 8001b62:	b087      	sub	sp, #28
 8001b64:	0b24      	lsrs	r4, r4, #12
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	0fcf      	lsrs	r7, r1, #31
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dmul+0x24>
 8001b6e:	e15c      	b.n	8001e2a <__aeabi_dmul+0x2de>
 8001b70:	4ad9      	ldr	r2, [pc, #868]	; (8001ed8 <__aeabi_dmul+0x38c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dmul+0x2c>
 8001b76:	e175      	b.n	8001e64 <__aeabi_dmul+0x318>
 8001b78:	0f42      	lsrs	r2, r0, #29
 8001b7a:	00e4      	lsls	r4, r4, #3
 8001b7c:	4314      	orrs	r4, r2
 8001b7e:	2280      	movs	r2, #128	; 0x80
 8001b80:	0412      	lsls	r2, r2, #16
 8001b82:	4314      	orrs	r4, r2
 8001b84:	4ad5      	ldr	r2, [pc, #852]	; (8001edc <__aeabi_dmul+0x390>)
 8001b86:	00c5      	lsls	r5, r0, #3
 8001b88:	4694      	mov	ip, r2
 8001b8a:	4463      	add	r3, ip
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4699      	mov	r9, r3
 8001b92:	469b      	mov	fp, r3
 8001b94:	4643      	mov	r3, r8
 8001b96:	4642      	mov	r2, r8
 8001b98:	031e      	lsls	r6, r3, #12
 8001b9a:	0fd2      	lsrs	r2, r2, #31
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4650      	mov	r0, sl
 8001ba0:	4690      	mov	r8, r2
 8001ba2:	0b36      	lsrs	r6, r6, #12
 8001ba4:	0d5b      	lsrs	r3, r3, #21
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dmul+0x5e>
 8001ba8:	e120      	b.n	8001dec <__aeabi_dmul+0x2a0>
 8001baa:	4acb      	ldr	r2, [pc, #812]	; (8001ed8 <__aeabi_dmul+0x38c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <__aeabi_dmul+0x66>
 8001bb0:	e162      	b.n	8001e78 <__aeabi_dmul+0x32c>
 8001bb2:	49ca      	ldr	r1, [pc, #808]	; (8001edc <__aeabi_dmul+0x390>)
 8001bb4:	0f42      	lsrs	r2, r0, #29
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	9900      	ldr	r1, [sp, #0]
 8001bba:	4463      	add	r3, ip
 8001bbc:	00f6      	lsls	r6, r6, #3
 8001bbe:	468c      	mov	ip, r1
 8001bc0:	4316      	orrs	r6, r2
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	449c      	add	ip, r3
 8001bc6:	0412      	lsls	r2, r2, #16
 8001bc8:	4663      	mov	r3, ip
 8001bca:	4316      	orrs	r6, r2
 8001bcc:	00c2      	lsls	r2, r0, #3
 8001bce:	2000      	movs	r0, #0
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	9900      	ldr	r1, [sp, #0]
 8001bd4:	4643      	mov	r3, r8
 8001bd6:	3101      	adds	r1, #1
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4649      	mov	r1, r9
 8001bdc:	407b      	eors	r3, r7
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	290f      	cmp	r1, #15
 8001be2:	d826      	bhi.n	8001c32 <__aeabi_dmul+0xe6>
 8001be4:	4bbe      	ldr	r3, [pc, #760]	; (8001ee0 <__aeabi_dmul+0x394>)
 8001be6:	0089      	lsls	r1, r1, #2
 8001be8:	5859      	ldr	r1, [r3, r1]
 8001bea:	468f      	mov	pc, r1
 8001bec:	4643      	mov	r3, r8
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	0034      	movs	r4, r6
 8001bf2:	0015      	movs	r5, r2
 8001bf4:	4683      	mov	fp, r0
 8001bf6:	465b      	mov	r3, fp
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d016      	beq.n	8001c2a <__aeabi_dmul+0xde>
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0xb6>
 8001c00:	e203      	b.n	800200a <__aeabi_dmul+0x4be>
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dmul+0xbc>
 8001c06:	e0cd      	b.n	8001da4 <__aeabi_dmul+0x258>
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2400      	movs	r4, #0
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	9b01      	ldr	r3, [sp, #4]
 8001c10:	0512      	lsls	r2, r2, #20
 8001c12:	4322      	orrs	r2, r4
 8001c14:	07db      	lsls	r3, r3, #31
 8001c16:	431a      	orrs	r2, r3
 8001c18:	0028      	movs	r0, r5
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	b007      	add	sp, #28
 8001c1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c20:	46bb      	mov	fp, r7
 8001c22:	46b2      	mov	sl, r6
 8001c24:	46a9      	mov	r9, r5
 8001c26:	46a0      	mov	r8, r4
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	2400      	movs	r4, #0
 8001c2c:	2500      	movs	r5, #0
 8001c2e:	4aaa      	ldr	r2, [pc, #680]	; (8001ed8 <__aeabi_dmul+0x38c>)
 8001c30:	e7ed      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001c32:	0c28      	lsrs	r0, r5, #16
 8001c34:	042d      	lsls	r5, r5, #16
 8001c36:	0c2d      	lsrs	r5, r5, #16
 8001c38:	002b      	movs	r3, r5
 8001c3a:	0c11      	lsrs	r1, r2, #16
 8001c3c:	0412      	lsls	r2, r2, #16
 8001c3e:	0c12      	lsrs	r2, r2, #16
 8001c40:	4353      	muls	r3, r2
 8001c42:	4698      	mov	r8, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	002f      	movs	r7, r5
 8001c48:	4343      	muls	r3, r0
 8001c4a:	4699      	mov	r9, r3
 8001c4c:	434f      	muls	r7, r1
 8001c4e:	444f      	add	r7, r9
 8001c50:	46bb      	mov	fp, r7
 8001c52:	4647      	mov	r7, r8
 8001c54:	000b      	movs	r3, r1
 8001c56:	0c3f      	lsrs	r7, r7, #16
 8001c58:	46ba      	mov	sl, r7
 8001c5a:	4343      	muls	r3, r0
 8001c5c:	44da      	add	sl, fp
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	45d1      	cmp	r9, sl
 8001c62:	d904      	bls.n	8001c6e <__aeabi_dmul+0x122>
 8001c64:	2780      	movs	r7, #128	; 0x80
 8001c66:	027f      	lsls	r7, r7, #9
 8001c68:	46b9      	mov	r9, r7
 8001c6a:	444b      	add	r3, r9
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	4653      	mov	r3, sl
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	469b      	mov	fp, r3
 8001c74:	4653      	mov	r3, sl
 8001c76:	041f      	lsls	r7, r3, #16
 8001c78:	4643      	mov	r3, r8
 8001c7a:	041b      	lsls	r3, r3, #16
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	4698      	mov	r8, r3
 8001c80:	003b      	movs	r3, r7
 8001c82:	4443      	add	r3, r8
 8001c84:	9304      	str	r3, [sp, #16]
 8001c86:	0c33      	lsrs	r3, r6, #16
 8001c88:	0436      	lsls	r6, r6, #16
 8001c8a:	0c36      	lsrs	r6, r6, #16
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	0033      	movs	r3, r6
 8001c90:	4343      	muls	r3, r0
 8001c92:	4699      	mov	r9, r3
 8001c94:	4643      	mov	r3, r8
 8001c96:	4343      	muls	r3, r0
 8001c98:	002f      	movs	r7, r5
 8001c9a:	469a      	mov	sl, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	4377      	muls	r7, r6
 8001ca0:	435d      	muls	r5, r3
 8001ca2:	0c38      	lsrs	r0, r7, #16
 8001ca4:	444d      	add	r5, r9
 8001ca6:	1945      	adds	r5, r0, r5
 8001ca8:	45a9      	cmp	r9, r5
 8001caa:	d903      	bls.n	8001cb4 <__aeabi_dmul+0x168>
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	4699      	mov	r9, r3
 8001cb2:	44ca      	add	sl, r9
 8001cb4:	043f      	lsls	r7, r7, #16
 8001cb6:	0c28      	lsrs	r0, r5, #16
 8001cb8:	0c3f      	lsrs	r7, r7, #16
 8001cba:	042d      	lsls	r5, r5, #16
 8001cbc:	19ed      	adds	r5, r5, r7
 8001cbe:	0c27      	lsrs	r7, r4, #16
 8001cc0:	0424      	lsls	r4, r4, #16
 8001cc2:	0c24      	lsrs	r4, r4, #16
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	0020      	movs	r0, r4
 8001cc8:	4350      	muls	r0, r2
 8001cca:	437a      	muls	r2, r7
 8001ccc:	4691      	mov	r9, r2
 8001cce:	003a      	movs	r2, r7
 8001cd0:	4453      	add	r3, sl
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	0c03      	lsrs	r3, r0, #16
 8001cd6:	469a      	mov	sl, r3
 8001cd8:	434a      	muls	r2, r1
 8001cda:	4361      	muls	r1, r4
 8001cdc:	4449      	add	r1, r9
 8001cde:	4451      	add	r1, sl
 8001ce0:	44ab      	add	fp, r5
 8001ce2:	4589      	cmp	r9, r1
 8001ce4:	d903      	bls.n	8001cee <__aeabi_dmul+0x1a2>
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	025b      	lsls	r3, r3, #9
 8001cea:	4699      	mov	r9, r3
 8001cec:	444a      	add	r2, r9
 8001cee:	0400      	lsls	r0, r0, #16
 8001cf0:	0c0b      	lsrs	r3, r1, #16
 8001cf2:	0c00      	lsrs	r0, r0, #16
 8001cf4:	0409      	lsls	r1, r1, #16
 8001cf6:	1809      	adds	r1, r1, r0
 8001cf8:	0020      	movs	r0, r4
 8001cfa:	4699      	mov	r9, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	4370      	muls	r0, r6
 8001d00:	435c      	muls	r4, r3
 8001d02:	437e      	muls	r6, r7
 8001d04:	435f      	muls	r7, r3
 8001d06:	0c03      	lsrs	r3, r0, #16
 8001d08:	4698      	mov	r8, r3
 8001d0a:	19a4      	adds	r4, r4, r6
 8001d0c:	4444      	add	r4, r8
 8001d0e:	444a      	add	r2, r9
 8001d10:	9703      	str	r7, [sp, #12]
 8001d12:	42a6      	cmp	r6, r4
 8001d14:	d904      	bls.n	8001d20 <__aeabi_dmul+0x1d4>
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	025b      	lsls	r3, r3, #9
 8001d1a:	4698      	mov	r8, r3
 8001d1c:	4447      	add	r7, r8
 8001d1e:	9703      	str	r7, [sp, #12]
 8001d20:	0423      	lsls	r3, r4, #16
 8001d22:	9e02      	ldr	r6, [sp, #8]
 8001d24:	469a      	mov	sl, r3
 8001d26:	9b05      	ldr	r3, [sp, #20]
 8001d28:	445e      	add	r6, fp
 8001d2a:	4698      	mov	r8, r3
 8001d2c:	42ae      	cmp	r6, r5
 8001d2e:	41ad      	sbcs	r5, r5
 8001d30:	1876      	adds	r6, r6, r1
 8001d32:	428e      	cmp	r6, r1
 8001d34:	4189      	sbcs	r1, r1
 8001d36:	0400      	lsls	r0, r0, #16
 8001d38:	0c00      	lsrs	r0, r0, #16
 8001d3a:	4450      	add	r0, sl
 8001d3c:	4440      	add	r0, r8
 8001d3e:	426d      	negs	r5, r5
 8001d40:	1947      	adds	r7, r0, r5
 8001d42:	46b8      	mov	r8, r7
 8001d44:	4693      	mov	fp, r2
 8001d46:	4249      	negs	r1, r1
 8001d48:	4689      	mov	r9, r1
 8001d4a:	44c3      	add	fp, r8
 8001d4c:	44d9      	add	r9, fp
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	4180      	sbcs	r0, r0
 8001d52:	45a8      	cmp	r8, r5
 8001d54:	41ad      	sbcs	r5, r5
 8001d56:	4593      	cmp	fp, r2
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	4589      	cmp	r9, r1
 8001d5c:	4189      	sbcs	r1, r1
 8001d5e:	426d      	negs	r5, r5
 8001d60:	4240      	negs	r0, r0
 8001d62:	4328      	orrs	r0, r5
 8001d64:	0c24      	lsrs	r4, r4, #16
 8001d66:	4252      	negs	r2, r2
 8001d68:	4249      	negs	r1, r1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	9b03      	ldr	r3, [sp, #12]
 8001d6e:	1900      	adds	r0, r0, r4
 8001d70:	1880      	adds	r0, r0, r2
 8001d72:	18c7      	adds	r7, r0, r3
 8001d74:	464b      	mov	r3, r9
 8001d76:	0ddc      	lsrs	r4, r3, #23
 8001d78:	9b04      	ldr	r3, [sp, #16]
 8001d7a:	0275      	lsls	r5, r6, #9
 8001d7c:	431d      	orrs	r5, r3
 8001d7e:	1e6a      	subs	r2, r5, #1
 8001d80:	4195      	sbcs	r5, r2
 8001d82:	464b      	mov	r3, r9
 8001d84:	0df6      	lsrs	r6, r6, #23
 8001d86:	027f      	lsls	r7, r7, #9
 8001d88:	4335      	orrs	r5, r6
 8001d8a:	025a      	lsls	r2, r3, #9
 8001d8c:	433c      	orrs	r4, r7
 8001d8e:	4315      	orrs	r5, r2
 8001d90:	01fb      	lsls	r3, r7, #7
 8001d92:	d400      	bmi.n	8001d96 <__aeabi_dmul+0x24a>
 8001d94:	e11c      	b.n	8001fd0 <__aeabi_dmul+0x484>
 8001d96:	2101      	movs	r1, #1
 8001d98:	086a      	lsrs	r2, r5, #1
 8001d9a:	400d      	ands	r5, r1
 8001d9c:	4315      	orrs	r5, r2
 8001d9e:	07e2      	lsls	r2, r4, #31
 8001da0:	4315      	orrs	r5, r2
 8001da2:	0864      	lsrs	r4, r4, #1
 8001da4:	494f      	ldr	r1, [pc, #316]	; (8001ee4 <__aeabi_dmul+0x398>)
 8001da6:	4461      	add	r1, ip
 8001da8:	2900      	cmp	r1, #0
 8001daa:	dc00      	bgt.n	8001dae <__aeabi_dmul+0x262>
 8001dac:	e0b0      	b.n	8001f10 <__aeabi_dmul+0x3c4>
 8001dae:	076b      	lsls	r3, r5, #29
 8001db0:	d009      	beq.n	8001dc6 <__aeabi_dmul+0x27a>
 8001db2:	220f      	movs	r2, #15
 8001db4:	402a      	ands	r2, r5
 8001db6:	2a04      	cmp	r2, #4
 8001db8:	d005      	beq.n	8001dc6 <__aeabi_dmul+0x27a>
 8001dba:	1d2a      	adds	r2, r5, #4
 8001dbc:	42aa      	cmp	r2, r5
 8001dbe:	41ad      	sbcs	r5, r5
 8001dc0:	426d      	negs	r5, r5
 8001dc2:	1964      	adds	r4, r4, r5
 8001dc4:	0015      	movs	r5, r2
 8001dc6:	01e3      	lsls	r3, r4, #7
 8001dc8:	d504      	bpl.n	8001dd4 <__aeabi_dmul+0x288>
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <__aeabi_dmul+0x39c>)
 8001dce:	00c9      	lsls	r1, r1, #3
 8001dd0:	4014      	ands	r4, r2
 8001dd2:	4461      	add	r1, ip
 8001dd4:	4a45      	ldr	r2, [pc, #276]	; (8001eec <__aeabi_dmul+0x3a0>)
 8001dd6:	4291      	cmp	r1, r2
 8001dd8:	dd00      	ble.n	8001ddc <__aeabi_dmul+0x290>
 8001dda:	e726      	b.n	8001c2a <__aeabi_dmul+0xde>
 8001ddc:	0762      	lsls	r2, r4, #29
 8001dde:	08ed      	lsrs	r5, r5, #3
 8001de0:	0264      	lsls	r4, r4, #9
 8001de2:	0549      	lsls	r1, r1, #21
 8001de4:	4315      	orrs	r5, r2
 8001de6:	0b24      	lsrs	r4, r4, #12
 8001de8:	0d4a      	lsrs	r2, r1, #21
 8001dea:	e710      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001dec:	4652      	mov	r2, sl
 8001dee:	4332      	orrs	r2, r6
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dmul+0x2a8>
 8001df2:	e07f      	b.n	8001ef4 <__aeabi_dmul+0x3a8>
 8001df4:	2e00      	cmp	r6, #0
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dmul+0x2ae>
 8001df8:	e0dc      	b.n	8001fb4 <__aeabi_dmul+0x468>
 8001dfa:	0030      	movs	r0, r6
 8001dfc:	f000 fdd0 	bl	80029a0 <__clzsi2>
 8001e00:	0002      	movs	r2, r0
 8001e02:	3a0b      	subs	r2, #11
 8001e04:	231d      	movs	r3, #29
 8001e06:	0001      	movs	r1, r0
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	4652      	mov	r2, sl
 8001e0c:	3908      	subs	r1, #8
 8001e0e:	40da      	lsrs	r2, r3
 8001e10:	408e      	lsls	r6, r1
 8001e12:	4316      	orrs	r6, r2
 8001e14:	4652      	mov	r2, sl
 8001e16:	408a      	lsls	r2, r1
 8001e18:	9b00      	ldr	r3, [sp, #0]
 8001e1a:	4935      	ldr	r1, [pc, #212]	; (8001ef0 <__aeabi_dmul+0x3a4>)
 8001e1c:	1a18      	subs	r0, r3, r0
 8001e1e:	0003      	movs	r3, r0
 8001e20:	468c      	mov	ip, r1
 8001e22:	4463      	add	r3, ip
 8001e24:	2000      	movs	r0, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	e6d3      	b.n	8001bd2 <__aeabi_dmul+0x86>
 8001e2a:	0025      	movs	r5, r4
 8001e2c:	4305      	orrs	r5, r0
 8001e2e:	d04a      	beq.n	8001ec6 <__aeabi_dmul+0x37a>
 8001e30:	2c00      	cmp	r4, #0
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dmul+0x2ea>
 8001e34:	e0b0      	b.n	8001f98 <__aeabi_dmul+0x44c>
 8001e36:	0020      	movs	r0, r4
 8001e38:	f000 fdb2 	bl	80029a0 <__clzsi2>
 8001e3c:	0001      	movs	r1, r0
 8001e3e:	0002      	movs	r2, r0
 8001e40:	390b      	subs	r1, #11
 8001e42:	231d      	movs	r3, #29
 8001e44:	0010      	movs	r0, r2
 8001e46:	1a5b      	subs	r3, r3, r1
 8001e48:	0031      	movs	r1, r6
 8001e4a:	0035      	movs	r5, r6
 8001e4c:	3808      	subs	r0, #8
 8001e4e:	4084      	lsls	r4, r0
 8001e50:	40d9      	lsrs	r1, r3
 8001e52:	4085      	lsls	r5, r0
 8001e54:	430c      	orrs	r4, r1
 8001e56:	4826      	ldr	r0, [pc, #152]	; (8001ef0 <__aeabi_dmul+0x3a4>)
 8001e58:	1a83      	subs	r3, r0, r2
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4699      	mov	r9, r3
 8001e60:	469b      	mov	fp, r3
 8001e62:	e697      	b.n	8001b94 <__aeabi_dmul+0x48>
 8001e64:	0005      	movs	r5, r0
 8001e66:	4325      	orrs	r5, r4
 8001e68:	d126      	bne.n	8001eb8 <__aeabi_dmul+0x36c>
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	2400      	movs	r4, #0
 8001e72:	4691      	mov	r9, r2
 8001e74:	469b      	mov	fp, r3
 8001e76:	e68d      	b.n	8001b94 <__aeabi_dmul+0x48>
 8001e78:	4652      	mov	r2, sl
 8001e7a:	9b00      	ldr	r3, [sp, #0]
 8001e7c:	4332      	orrs	r2, r6
 8001e7e:	d110      	bne.n	8001ea2 <__aeabi_dmul+0x356>
 8001e80:	4915      	ldr	r1, [pc, #84]	; (8001ed8 <__aeabi_dmul+0x38c>)
 8001e82:	2600      	movs	r6, #0
 8001e84:	468c      	mov	ip, r1
 8001e86:	4463      	add	r3, ip
 8001e88:	4649      	mov	r1, r9
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	4319      	orrs	r1, r3
 8001e90:	4689      	mov	r9, r1
 8001e92:	2002      	movs	r0, #2
 8001e94:	e69d      	b.n	8001bd2 <__aeabi_dmul+0x86>
 8001e96:	465b      	mov	r3, fp
 8001e98:	9701      	str	r7, [sp, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_dmul+0x354>
 8001e9e:	e6ad      	b.n	8001bfc <__aeabi_dmul+0xb0>
 8001ea0:	e6c3      	b.n	8001c2a <__aeabi_dmul+0xde>
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <__aeabi_dmul+0x38c>)
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	4694      	mov	ip, r2
 8001ea8:	4463      	add	r3, ip
 8001eaa:	464a      	mov	r2, r9
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2303      	movs	r3, #3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	4652      	mov	r2, sl
 8001eb6:	e68c      	b.n	8001bd2 <__aeabi_dmul+0x86>
 8001eb8:	220c      	movs	r2, #12
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	0005      	movs	r5, r0
 8001ec0:	4691      	mov	r9, r2
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	e666      	b.n	8001b94 <__aeabi_dmul+0x48>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	4699      	mov	r9, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	2400      	movs	r4, #0
 8001ed2:	469b      	mov	fp, r3
 8001ed4:	e65e      	b.n	8001b94 <__aeabi_dmul+0x48>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	000007ff 	.word	0x000007ff
 8001edc:	fffffc01 	.word	0xfffffc01
 8001ee0:	0800a17c 	.word	0x0800a17c
 8001ee4:	000003ff 	.word	0x000003ff
 8001ee8:	feffffff 	.word	0xfeffffff
 8001eec:	000007fe 	.word	0x000007fe
 8001ef0:	fffffc0d 	.word	0xfffffc0d
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4319      	orrs	r1, r3
 8001efa:	4689      	mov	r9, r1
 8001efc:	2600      	movs	r6, #0
 8001efe:	2001      	movs	r0, #1
 8001f00:	e667      	b.n	8001bd2 <__aeabi_dmul+0x86>
 8001f02:	2300      	movs	r3, #0
 8001f04:	2480      	movs	r4, #128	; 0x80
 8001f06:	2500      	movs	r5, #0
 8001f08:	4a43      	ldr	r2, [pc, #268]	; (8002018 <__aeabi_dmul+0x4cc>)
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	0324      	lsls	r4, r4, #12
 8001f0e:	e67e      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001f10:	2001      	movs	r0, #1
 8001f12:	1a40      	subs	r0, r0, r1
 8001f14:	2838      	cmp	r0, #56	; 0x38
 8001f16:	dd00      	ble.n	8001f1a <__aeabi_dmul+0x3ce>
 8001f18:	e676      	b.n	8001c08 <__aeabi_dmul+0xbc>
 8001f1a:	281f      	cmp	r0, #31
 8001f1c:	dd5b      	ble.n	8001fd6 <__aeabi_dmul+0x48a>
 8001f1e:	221f      	movs	r2, #31
 8001f20:	0023      	movs	r3, r4
 8001f22:	4252      	negs	r2, r2
 8001f24:	1a51      	subs	r1, r2, r1
 8001f26:	40cb      	lsrs	r3, r1
 8001f28:	0019      	movs	r1, r3
 8001f2a:	2820      	cmp	r0, #32
 8001f2c:	d003      	beq.n	8001f36 <__aeabi_dmul+0x3ea>
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <__aeabi_dmul+0x4d0>)
 8001f30:	4462      	add	r2, ip
 8001f32:	4094      	lsls	r4, r2
 8001f34:	4325      	orrs	r5, r4
 8001f36:	1e6a      	subs	r2, r5, #1
 8001f38:	4195      	sbcs	r5, r2
 8001f3a:	002a      	movs	r2, r5
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	2107      	movs	r1, #7
 8001f40:	000d      	movs	r5, r1
 8001f42:	2400      	movs	r4, #0
 8001f44:	4015      	ands	r5, r2
 8001f46:	4211      	tst	r1, r2
 8001f48:	d05b      	beq.n	8002002 <__aeabi_dmul+0x4b6>
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	4011      	ands	r1, r2
 8001f50:	2904      	cmp	r1, #4
 8001f52:	d053      	beq.n	8001ffc <__aeabi_dmul+0x4b0>
 8001f54:	1d11      	adds	r1, r2, #4
 8001f56:	4291      	cmp	r1, r2
 8001f58:	4192      	sbcs	r2, r2
 8001f5a:	4252      	negs	r2, r2
 8001f5c:	18a4      	adds	r4, r4, r2
 8001f5e:	000a      	movs	r2, r1
 8001f60:	0223      	lsls	r3, r4, #8
 8001f62:	d54b      	bpl.n	8001ffc <__aeabi_dmul+0x4b0>
 8001f64:	2201      	movs	r2, #1
 8001f66:	2400      	movs	r4, #0
 8001f68:	2500      	movs	r5, #0
 8001f6a:	e650      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	421c      	tst	r4, r3
 8001f72:	d009      	beq.n	8001f88 <__aeabi_dmul+0x43c>
 8001f74:	421e      	tst	r6, r3
 8001f76:	d107      	bne.n	8001f88 <__aeabi_dmul+0x43c>
 8001f78:	4333      	orrs	r3, r6
 8001f7a:	031c      	lsls	r4, r3, #12
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	0015      	movs	r5, r2
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	4a25      	ldr	r2, [pc, #148]	; (8002018 <__aeabi_dmul+0x4cc>)
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	e642      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0312      	lsls	r2, r2, #12
 8001f8c:	4314      	orrs	r4, r2
 8001f8e:	0324      	lsls	r4, r4, #12
 8001f90:	4a21      	ldr	r2, [pc, #132]	; (8002018 <__aeabi_dmul+0x4cc>)
 8001f92:	0b24      	lsrs	r4, r4, #12
 8001f94:	9701      	str	r7, [sp, #4]
 8001f96:	e63a      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8001f98:	f000 fd02 	bl	80029a0 <__clzsi2>
 8001f9c:	0001      	movs	r1, r0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	3115      	adds	r1, #21
 8001fa2:	3220      	adds	r2, #32
 8001fa4:	291c      	cmp	r1, #28
 8001fa6:	dc00      	bgt.n	8001faa <__aeabi_dmul+0x45e>
 8001fa8:	e74b      	b.n	8001e42 <__aeabi_dmul+0x2f6>
 8001faa:	0034      	movs	r4, r6
 8001fac:	3808      	subs	r0, #8
 8001fae:	2500      	movs	r5, #0
 8001fb0:	4084      	lsls	r4, r0
 8001fb2:	e750      	b.n	8001e56 <__aeabi_dmul+0x30a>
 8001fb4:	f000 fcf4 	bl	80029a0 <__clzsi2>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	001a      	movs	r2, r3
 8001fbc:	3215      	adds	r2, #21
 8001fbe:	3020      	adds	r0, #32
 8001fc0:	2a1c      	cmp	r2, #28
 8001fc2:	dc00      	bgt.n	8001fc6 <__aeabi_dmul+0x47a>
 8001fc4:	e71e      	b.n	8001e04 <__aeabi_dmul+0x2b8>
 8001fc6:	4656      	mov	r6, sl
 8001fc8:	3b08      	subs	r3, #8
 8001fca:	2200      	movs	r2, #0
 8001fcc:	409e      	lsls	r6, r3
 8001fce:	e723      	b.n	8001e18 <__aeabi_dmul+0x2cc>
 8001fd0:	9b00      	ldr	r3, [sp, #0]
 8001fd2:	469c      	mov	ip, r3
 8001fd4:	e6e6      	b.n	8001da4 <__aeabi_dmul+0x258>
 8001fd6:	4912      	ldr	r1, [pc, #72]	; (8002020 <__aeabi_dmul+0x4d4>)
 8001fd8:	0022      	movs	r2, r4
 8001fda:	4461      	add	r1, ip
 8001fdc:	002e      	movs	r6, r5
 8001fde:	408d      	lsls	r5, r1
 8001fe0:	408a      	lsls	r2, r1
 8001fe2:	40c6      	lsrs	r6, r0
 8001fe4:	1e69      	subs	r1, r5, #1
 8001fe6:	418d      	sbcs	r5, r1
 8001fe8:	4332      	orrs	r2, r6
 8001fea:	432a      	orrs	r2, r5
 8001fec:	40c4      	lsrs	r4, r0
 8001fee:	0753      	lsls	r3, r2, #29
 8001ff0:	d0b6      	beq.n	8001f60 <__aeabi_dmul+0x414>
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	4011      	ands	r1, r2
 8001ff6:	2904      	cmp	r1, #4
 8001ff8:	d1ac      	bne.n	8001f54 <__aeabi_dmul+0x408>
 8001ffa:	e7b1      	b.n	8001f60 <__aeabi_dmul+0x414>
 8001ffc:	0765      	lsls	r5, r4, #29
 8001ffe:	0264      	lsls	r4, r4, #9
 8002000:	0b24      	lsrs	r4, r4, #12
 8002002:	08d2      	lsrs	r2, r2, #3
 8002004:	4315      	orrs	r5, r2
 8002006:	2200      	movs	r2, #0
 8002008:	e601      	b.n	8001c0e <__aeabi_dmul+0xc2>
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	0312      	lsls	r2, r2, #12
 800200e:	4314      	orrs	r4, r2
 8002010:	0324      	lsls	r4, r4, #12
 8002012:	4a01      	ldr	r2, [pc, #4]	; (8002018 <__aeabi_dmul+0x4cc>)
 8002014:	0b24      	lsrs	r4, r4, #12
 8002016:	e5fa      	b.n	8001c0e <__aeabi_dmul+0xc2>
 8002018:	000007ff 	.word	0x000007ff
 800201c:	0000043e 	.word	0x0000043e
 8002020:	0000041e 	.word	0x0000041e

08002024 <__aeabi_dsub>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	4657      	mov	r7, sl
 8002028:	464e      	mov	r6, r9
 800202a:	4645      	mov	r5, r8
 800202c:	46de      	mov	lr, fp
 800202e:	b5e0      	push	{r5, r6, r7, lr}
 8002030:	001e      	movs	r6, r3
 8002032:	0017      	movs	r7, r2
 8002034:	004a      	lsls	r2, r1, #1
 8002036:	030b      	lsls	r3, r1, #12
 8002038:	0d52      	lsrs	r2, r2, #21
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	4690      	mov	r8, r2
 800203e:	0f42      	lsrs	r2, r0, #29
 8002040:	431a      	orrs	r2, r3
 8002042:	0fcd      	lsrs	r5, r1, #31
 8002044:	4ccd      	ldr	r4, [pc, #820]	; (800237c <__aeabi_dsub+0x358>)
 8002046:	0331      	lsls	r1, r6, #12
 8002048:	00c3      	lsls	r3, r0, #3
 800204a:	4694      	mov	ip, r2
 800204c:	0070      	lsls	r0, r6, #1
 800204e:	0f7a      	lsrs	r2, r7, #29
 8002050:	0a49      	lsrs	r1, r1, #9
 8002052:	00ff      	lsls	r7, r7, #3
 8002054:	469a      	mov	sl, r3
 8002056:	46b9      	mov	r9, r7
 8002058:	0d40      	lsrs	r0, r0, #21
 800205a:	0ff6      	lsrs	r6, r6, #31
 800205c:	4311      	orrs	r1, r2
 800205e:	42a0      	cmp	r0, r4
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x40>
 8002062:	e0b1      	b.n	80021c8 <__aeabi_dsub+0x1a4>
 8002064:	2201      	movs	r2, #1
 8002066:	4056      	eors	r6, r2
 8002068:	46b3      	mov	fp, r6
 800206a:	42b5      	cmp	r5, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x4c>
 800206e:	e088      	b.n	8002182 <__aeabi_dsub+0x15e>
 8002070:	4642      	mov	r2, r8
 8002072:	1a12      	subs	r2, r2, r0
 8002074:	2a00      	cmp	r2, #0
 8002076:	dc00      	bgt.n	800207a <__aeabi_dsub+0x56>
 8002078:	e0ae      	b.n	80021d8 <__aeabi_dsub+0x1b4>
 800207a:	2800      	cmp	r0, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x5c>
 800207e:	e0c1      	b.n	8002204 <__aeabi_dsub+0x1e0>
 8002080:	48be      	ldr	r0, [pc, #760]	; (800237c <__aeabi_dsub+0x358>)
 8002082:	4580      	cmp	r8, r0
 8002084:	d100      	bne.n	8002088 <__aeabi_dsub+0x64>
 8002086:	e151      	b.n	800232c <__aeabi_dsub+0x308>
 8002088:	2080      	movs	r0, #128	; 0x80
 800208a:	0400      	lsls	r0, r0, #16
 800208c:	4301      	orrs	r1, r0
 800208e:	2a38      	cmp	r2, #56	; 0x38
 8002090:	dd00      	ble.n	8002094 <__aeabi_dsub+0x70>
 8002092:	e17b      	b.n	800238c <__aeabi_dsub+0x368>
 8002094:	2a1f      	cmp	r2, #31
 8002096:	dd00      	ble.n	800209a <__aeabi_dsub+0x76>
 8002098:	e1ee      	b.n	8002478 <__aeabi_dsub+0x454>
 800209a:	2020      	movs	r0, #32
 800209c:	003e      	movs	r6, r7
 800209e:	1a80      	subs	r0, r0, r2
 80020a0:	000c      	movs	r4, r1
 80020a2:	40d6      	lsrs	r6, r2
 80020a4:	40d1      	lsrs	r1, r2
 80020a6:	4087      	lsls	r7, r0
 80020a8:	4662      	mov	r2, ip
 80020aa:	4084      	lsls	r4, r0
 80020ac:	1a52      	subs	r2, r2, r1
 80020ae:	1e78      	subs	r0, r7, #1
 80020b0:	4187      	sbcs	r7, r0
 80020b2:	4694      	mov	ip, r2
 80020b4:	4334      	orrs	r4, r6
 80020b6:	4327      	orrs	r7, r4
 80020b8:	1bdc      	subs	r4, r3, r7
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	419b      	sbcs	r3, r3
 80020be:	4662      	mov	r2, ip
 80020c0:	425b      	negs	r3, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4699      	mov	r9, r3
 80020c6:	464b      	mov	r3, r9
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	d400      	bmi.n	80020ce <__aeabi_dsub+0xaa>
 80020cc:	e118      	b.n	8002300 <__aeabi_dsub+0x2dc>
 80020ce:	464b      	mov	r3, r9
 80020d0:	0258      	lsls	r0, r3, #9
 80020d2:	0a43      	lsrs	r3, r0, #9
 80020d4:	4699      	mov	r9, r3
 80020d6:	464b      	mov	r3, r9
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d100      	bne.n	80020de <__aeabi_dsub+0xba>
 80020dc:	e137      	b.n	800234e <__aeabi_dsub+0x32a>
 80020de:	4648      	mov	r0, r9
 80020e0:	f000 fc5e 	bl	80029a0 <__clzsi2>
 80020e4:	0001      	movs	r1, r0
 80020e6:	3908      	subs	r1, #8
 80020e8:	2320      	movs	r3, #32
 80020ea:	0022      	movs	r2, r4
 80020ec:	4648      	mov	r0, r9
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	40da      	lsrs	r2, r3
 80020f2:	4088      	lsls	r0, r1
 80020f4:	408c      	lsls	r4, r1
 80020f6:	4643      	mov	r3, r8
 80020f8:	4310      	orrs	r0, r2
 80020fa:	4588      	cmp	r8, r1
 80020fc:	dd00      	ble.n	8002100 <__aeabi_dsub+0xdc>
 80020fe:	e136      	b.n	800236e <__aeabi_dsub+0x34a>
 8002100:	1ac9      	subs	r1, r1, r3
 8002102:	1c4b      	adds	r3, r1, #1
 8002104:	2b1f      	cmp	r3, #31
 8002106:	dd00      	ble.n	800210a <__aeabi_dsub+0xe6>
 8002108:	e0ea      	b.n	80022e0 <__aeabi_dsub+0x2bc>
 800210a:	2220      	movs	r2, #32
 800210c:	0026      	movs	r6, r4
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	0001      	movs	r1, r0
 8002112:	4094      	lsls	r4, r2
 8002114:	40de      	lsrs	r6, r3
 8002116:	40d8      	lsrs	r0, r3
 8002118:	2300      	movs	r3, #0
 800211a:	4091      	lsls	r1, r2
 800211c:	1e62      	subs	r2, r4, #1
 800211e:	4194      	sbcs	r4, r2
 8002120:	4681      	mov	r9, r0
 8002122:	4698      	mov	r8, r3
 8002124:	4331      	orrs	r1, r6
 8002126:	430c      	orrs	r4, r1
 8002128:	0763      	lsls	r3, r4, #29
 800212a:	d009      	beq.n	8002140 <__aeabi_dsub+0x11c>
 800212c:	230f      	movs	r3, #15
 800212e:	4023      	ands	r3, r4
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <__aeabi_dsub+0x11c>
 8002134:	1d23      	adds	r3, r4, #4
 8002136:	42a3      	cmp	r3, r4
 8002138:	41a4      	sbcs	r4, r4
 800213a:	4264      	negs	r4, r4
 800213c:	44a1      	add	r9, r4
 800213e:	001c      	movs	r4, r3
 8002140:	464b      	mov	r3, r9
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	d400      	bmi.n	8002148 <__aeabi_dsub+0x124>
 8002146:	e0de      	b.n	8002306 <__aeabi_dsub+0x2e2>
 8002148:	4641      	mov	r1, r8
 800214a:	4b8c      	ldr	r3, [pc, #560]	; (800237c <__aeabi_dsub+0x358>)
 800214c:	3101      	adds	r1, #1
 800214e:	4299      	cmp	r1, r3
 8002150:	d100      	bne.n	8002154 <__aeabi_dsub+0x130>
 8002152:	e0e7      	b.n	8002324 <__aeabi_dsub+0x300>
 8002154:	464b      	mov	r3, r9
 8002156:	488a      	ldr	r0, [pc, #552]	; (8002380 <__aeabi_dsub+0x35c>)
 8002158:	08e4      	lsrs	r4, r4, #3
 800215a:	4003      	ands	r3, r0
 800215c:	0018      	movs	r0, r3
 800215e:	0549      	lsls	r1, r1, #21
 8002160:	075b      	lsls	r3, r3, #29
 8002162:	0240      	lsls	r0, r0, #9
 8002164:	4323      	orrs	r3, r4
 8002166:	0d4a      	lsrs	r2, r1, #21
 8002168:	0b04      	lsrs	r4, r0, #12
 800216a:	0512      	lsls	r2, r2, #20
 800216c:	07ed      	lsls	r5, r5, #31
 800216e:	4322      	orrs	r2, r4
 8002170:	432a      	orrs	r2, r5
 8002172:	0018      	movs	r0, r3
 8002174:	0011      	movs	r1, r2
 8002176:	bcf0      	pop	{r4, r5, r6, r7}
 8002178:	46bb      	mov	fp, r7
 800217a:	46b2      	mov	sl, r6
 800217c:	46a9      	mov	r9, r5
 800217e:	46a0      	mov	r8, r4
 8002180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002182:	4642      	mov	r2, r8
 8002184:	1a12      	subs	r2, r2, r0
 8002186:	2a00      	cmp	r2, #0
 8002188:	dd52      	ble.n	8002230 <__aeabi_dsub+0x20c>
 800218a:	2800      	cmp	r0, #0
 800218c:	d100      	bne.n	8002190 <__aeabi_dsub+0x16c>
 800218e:	e09c      	b.n	80022ca <__aeabi_dsub+0x2a6>
 8002190:	45a0      	cmp	r8, r4
 8002192:	d100      	bne.n	8002196 <__aeabi_dsub+0x172>
 8002194:	e0ca      	b.n	800232c <__aeabi_dsub+0x308>
 8002196:	2080      	movs	r0, #128	; 0x80
 8002198:	0400      	lsls	r0, r0, #16
 800219a:	4301      	orrs	r1, r0
 800219c:	2a38      	cmp	r2, #56	; 0x38
 800219e:	dd00      	ble.n	80021a2 <__aeabi_dsub+0x17e>
 80021a0:	e149      	b.n	8002436 <__aeabi_dsub+0x412>
 80021a2:	2a1f      	cmp	r2, #31
 80021a4:	dc00      	bgt.n	80021a8 <__aeabi_dsub+0x184>
 80021a6:	e197      	b.n	80024d8 <__aeabi_dsub+0x4b4>
 80021a8:	0010      	movs	r0, r2
 80021aa:	000e      	movs	r6, r1
 80021ac:	3820      	subs	r0, #32
 80021ae:	40c6      	lsrs	r6, r0
 80021b0:	2a20      	cmp	r2, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_dsub+0x19a>
 80021b4:	2040      	movs	r0, #64	; 0x40
 80021b6:	1a82      	subs	r2, r0, r2
 80021b8:	4091      	lsls	r1, r2
 80021ba:	430f      	orrs	r7, r1
 80021bc:	46b9      	mov	r9, r7
 80021be:	464c      	mov	r4, r9
 80021c0:	1e62      	subs	r2, r4, #1
 80021c2:	4194      	sbcs	r4, r2
 80021c4:	4334      	orrs	r4, r6
 80021c6:	e13a      	b.n	800243e <__aeabi_dsub+0x41a>
 80021c8:	000a      	movs	r2, r1
 80021ca:	433a      	orrs	r2, r7
 80021cc:	d028      	beq.n	8002220 <__aeabi_dsub+0x1fc>
 80021ce:	46b3      	mov	fp, r6
 80021d0:	42b5      	cmp	r5, r6
 80021d2:	d02b      	beq.n	800222c <__aeabi_dsub+0x208>
 80021d4:	4a6b      	ldr	r2, [pc, #428]	; (8002384 <__aeabi_dsub+0x360>)
 80021d6:	4442      	add	r2, r8
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d05d      	beq.n	8002298 <__aeabi_dsub+0x274>
 80021dc:	4642      	mov	r2, r8
 80021de:	4644      	mov	r4, r8
 80021e0:	1a82      	subs	r2, r0, r2
 80021e2:	2c00      	cmp	r4, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x1c4>
 80021e6:	e0f5      	b.n	80023d4 <__aeabi_dsub+0x3b0>
 80021e8:	4665      	mov	r5, ip
 80021ea:	431d      	orrs	r5, r3
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x1cc>
 80021ee:	e19c      	b.n	800252a <__aeabi_dsub+0x506>
 80021f0:	1e55      	subs	r5, r2, #1
 80021f2:	2a01      	cmp	r2, #1
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x1d4>
 80021f6:	e1fb      	b.n	80025f0 <__aeabi_dsub+0x5cc>
 80021f8:	4c60      	ldr	r4, [pc, #384]	; (800237c <__aeabi_dsub+0x358>)
 80021fa:	42a2      	cmp	r2, r4
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x1dc>
 80021fe:	e1bd      	b.n	800257c <__aeabi_dsub+0x558>
 8002200:	002a      	movs	r2, r5
 8002202:	e0f0      	b.n	80023e6 <__aeabi_dsub+0x3c2>
 8002204:	0008      	movs	r0, r1
 8002206:	4338      	orrs	r0, r7
 8002208:	d100      	bne.n	800220c <__aeabi_dsub+0x1e8>
 800220a:	e0c3      	b.n	8002394 <__aeabi_dsub+0x370>
 800220c:	1e50      	subs	r0, r2, #1
 800220e:	2a01      	cmp	r2, #1
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x1f0>
 8002212:	e1a8      	b.n	8002566 <__aeabi_dsub+0x542>
 8002214:	4c59      	ldr	r4, [pc, #356]	; (800237c <__aeabi_dsub+0x358>)
 8002216:	42a2      	cmp	r2, r4
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x1f8>
 800221a:	e087      	b.n	800232c <__aeabi_dsub+0x308>
 800221c:	0002      	movs	r2, r0
 800221e:	e736      	b.n	800208e <__aeabi_dsub+0x6a>
 8002220:	2201      	movs	r2, #1
 8002222:	4056      	eors	r6, r2
 8002224:	46b3      	mov	fp, r6
 8002226:	42b5      	cmp	r5, r6
 8002228:	d000      	beq.n	800222c <__aeabi_dsub+0x208>
 800222a:	e721      	b.n	8002070 <__aeabi_dsub+0x4c>
 800222c:	4a55      	ldr	r2, [pc, #340]	; (8002384 <__aeabi_dsub+0x360>)
 800222e:	4442      	add	r2, r8
 8002230:	2a00      	cmp	r2, #0
 8002232:	d100      	bne.n	8002236 <__aeabi_dsub+0x212>
 8002234:	e0b5      	b.n	80023a2 <__aeabi_dsub+0x37e>
 8002236:	4642      	mov	r2, r8
 8002238:	4644      	mov	r4, r8
 800223a:	1a82      	subs	r2, r0, r2
 800223c:	2c00      	cmp	r4, #0
 800223e:	d100      	bne.n	8002242 <__aeabi_dsub+0x21e>
 8002240:	e138      	b.n	80024b4 <__aeabi_dsub+0x490>
 8002242:	4e4e      	ldr	r6, [pc, #312]	; (800237c <__aeabi_dsub+0x358>)
 8002244:	42b0      	cmp	r0, r6
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x226>
 8002248:	e1de      	b.n	8002608 <__aeabi_dsub+0x5e4>
 800224a:	2680      	movs	r6, #128	; 0x80
 800224c:	4664      	mov	r4, ip
 800224e:	0436      	lsls	r6, r6, #16
 8002250:	4334      	orrs	r4, r6
 8002252:	46a4      	mov	ip, r4
 8002254:	2a38      	cmp	r2, #56	; 0x38
 8002256:	dd00      	ble.n	800225a <__aeabi_dsub+0x236>
 8002258:	e196      	b.n	8002588 <__aeabi_dsub+0x564>
 800225a:	2a1f      	cmp	r2, #31
 800225c:	dd00      	ble.n	8002260 <__aeabi_dsub+0x23c>
 800225e:	e224      	b.n	80026aa <__aeabi_dsub+0x686>
 8002260:	2620      	movs	r6, #32
 8002262:	1ab4      	subs	r4, r6, r2
 8002264:	46a2      	mov	sl, r4
 8002266:	4664      	mov	r4, ip
 8002268:	4656      	mov	r6, sl
 800226a:	40b4      	lsls	r4, r6
 800226c:	46a1      	mov	r9, r4
 800226e:	001c      	movs	r4, r3
 8002270:	464e      	mov	r6, r9
 8002272:	40d4      	lsrs	r4, r2
 8002274:	4326      	orrs	r6, r4
 8002276:	0034      	movs	r4, r6
 8002278:	4656      	mov	r6, sl
 800227a:	40b3      	lsls	r3, r6
 800227c:	1e5e      	subs	r6, r3, #1
 800227e:	41b3      	sbcs	r3, r6
 8002280:	431c      	orrs	r4, r3
 8002282:	4663      	mov	r3, ip
 8002284:	40d3      	lsrs	r3, r2
 8002286:	18c9      	adds	r1, r1, r3
 8002288:	19e4      	adds	r4, r4, r7
 800228a:	42bc      	cmp	r4, r7
 800228c:	41bf      	sbcs	r7, r7
 800228e:	427f      	negs	r7, r7
 8002290:	46b9      	mov	r9, r7
 8002292:	4680      	mov	r8, r0
 8002294:	4489      	add	r9, r1
 8002296:	e0d8      	b.n	800244a <__aeabi_dsub+0x426>
 8002298:	4640      	mov	r0, r8
 800229a:	4c3b      	ldr	r4, [pc, #236]	; (8002388 <__aeabi_dsub+0x364>)
 800229c:	3001      	adds	r0, #1
 800229e:	4220      	tst	r0, r4
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dsub+0x280>
 80022a2:	e0b4      	b.n	800240e <__aeabi_dsub+0x3ea>
 80022a4:	4640      	mov	r0, r8
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d000      	beq.n	80022ac <__aeabi_dsub+0x288>
 80022aa:	e144      	b.n	8002536 <__aeabi_dsub+0x512>
 80022ac:	4660      	mov	r0, ip
 80022ae:	4318      	orrs	r0, r3
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x290>
 80022b2:	e190      	b.n	80025d6 <__aeabi_dsub+0x5b2>
 80022b4:	0008      	movs	r0, r1
 80022b6:	4338      	orrs	r0, r7
 80022b8:	d000      	beq.n	80022bc <__aeabi_dsub+0x298>
 80022ba:	e1aa      	b.n	8002612 <__aeabi_dsub+0x5ee>
 80022bc:	4661      	mov	r1, ip
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	0749      	lsls	r1, r1, #29
 80022c2:	430b      	orrs	r3, r1
 80022c4:	4661      	mov	r1, ip
 80022c6:	08cc      	lsrs	r4, r1, #3
 80022c8:	e027      	b.n	800231a <__aeabi_dsub+0x2f6>
 80022ca:	0008      	movs	r0, r1
 80022cc:	4338      	orrs	r0, r7
 80022ce:	d061      	beq.n	8002394 <__aeabi_dsub+0x370>
 80022d0:	1e50      	subs	r0, r2, #1
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x2b4>
 80022d6:	e139      	b.n	800254c <__aeabi_dsub+0x528>
 80022d8:	42a2      	cmp	r2, r4
 80022da:	d027      	beq.n	800232c <__aeabi_dsub+0x308>
 80022dc:	0002      	movs	r2, r0
 80022de:	e75d      	b.n	800219c <__aeabi_dsub+0x178>
 80022e0:	0002      	movs	r2, r0
 80022e2:	391f      	subs	r1, #31
 80022e4:	40ca      	lsrs	r2, r1
 80022e6:	0011      	movs	r1, r2
 80022e8:	2b20      	cmp	r3, #32
 80022ea:	d003      	beq.n	80022f4 <__aeabi_dsub+0x2d0>
 80022ec:	2240      	movs	r2, #64	; 0x40
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4098      	lsls	r0, r3
 80022f2:	4304      	orrs	r4, r0
 80022f4:	1e63      	subs	r3, r4, #1
 80022f6:	419c      	sbcs	r4, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	4699      	mov	r9, r3
 80022fc:	4698      	mov	r8, r3
 80022fe:	430c      	orrs	r4, r1
 8002300:	0763      	lsls	r3, r4, #29
 8002302:	d000      	beq.n	8002306 <__aeabi_dsub+0x2e2>
 8002304:	e712      	b.n	800212c <__aeabi_dsub+0x108>
 8002306:	464b      	mov	r3, r9
 8002308:	464a      	mov	r2, r9
 800230a:	08e4      	lsrs	r4, r4, #3
 800230c:	075b      	lsls	r3, r3, #29
 800230e:	4323      	orrs	r3, r4
 8002310:	08d4      	lsrs	r4, r2, #3
 8002312:	4642      	mov	r2, r8
 8002314:	4919      	ldr	r1, [pc, #100]	; (800237c <__aeabi_dsub+0x358>)
 8002316:	428a      	cmp	r2, r1
 8002318:	d00e      	beq.n	8002338 <__aeabi_dsub+0x314>
 800231a:	0324      	lsls	r4, r4, #12
 800231c:	0552      	lsls	r2, r2, #21
 800231e:	0b24      	lsrs	r4, r4, #12
 8002320:	0d52      	lsrs	r2, r2, #21
 8002322:	e722      	b.n	800216a <__aeabi_dsub+0x146>
 8002324:	000a      	movs	r2, r1
 8002326:	2400      	movs	r4, #0
 8002328:	2300      	movs	r3, #0
 800232a:	e71e      	b.n	800216a <__aeabi_dsub+0x146>
 800232c:	08db      	lsrs	r3, r3, #3
 800232e:	4662      	mov	r2, ip
 8002330:	0752      	lsls	r2, r2, #29
 8002332:	4313      	orrs	r3, r2
 8002334:	4662      	mov	r2, ip
 8002336:	08d4      	lsrs	r4, r2, #3
 8002338:	001a      	movs	r2, r3
 800233a:	4322      	orrs	r2, r4
 800233c:	d100      	bne.n	8002340 <__aeabi_dsub+0x31c>
 800233e:	e1fc      	b.n	800273a <__aeabi_dsub+0x716>
 8002340:	2280      	movs	r2, #128	; 0x80
 8002342:	0312      	lsls	r2, r2, #12
 8002344:	4314      	orrs	r4, r2
 8002346:	0324      	lsls	r4, r4, #12
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <__aeabi_dsub+0x358>)
 800234a:	0b24      	lsrs	r4, r4, #12
 800234c:	e70d      	b.n	800216a <__aeabi_dsub+0x146>
 800234e:	0020      	movs	r0, r4
 8002350:	f000 fb26 	bl	80029a0 <__clzsi2>
 8002354:	0001      	movs	r1, r0
 8002356:	3118      	adds	r1, #24
 8002358:	291f      	cmp	r1, #31
 800235a:	dc00      	bgt.n	800235e <__aeabi_dsub+0x33a>
 800235c:	e6c4      	b.n	80020e8 <__aeabi_dsub+0xc4>
 800235e:	3808      	subs	r0, #8
 8002360:	4084      	lsls	r4, r0
 8002362:	4643      	mov	r3, r8
 8002364:	0020      	movs	r0, r4
 8002366:	2400      	movs	r4, #0
 8002368:	4588      	cmp	r8, r1
 800236a:	dc00      	bgt.n	800236e <__aeabi_dsub+0x34a>
 800236c:	e6c8      	b.n	8002100 <__aeabi_dsub+0xdc>
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__aeabi_dsub+0x35c>)
 8002370:	1a5b      	subs	r3, r3, r1
 8002372:	4010      	ands	r0, r2
 8002374:	4698      	mov	r8, r3
 8002376:	4681      	mov	r9, r0
 8002378:	e6d6      	b.n	8002128 <__aeabi_dsub+0x104>
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	000007ff 	.word	0x000007ff
 8002380:	ff7fffff 	.word	0xff7fffff
 8002384:	fffff801 	.word	0xfffff801
 8002388:	000007fe 	.word	0x000007fe
 800238c:	430f      	orrs	r7, r1
 800238e:	1e7a      	subs	r2, r7, #1
 8002390:	4197      	sbcs	r7, r2
 8002392:	e691      	b.n	80020b8 <__aeabi_dsub+0x94>
 8002394:	4661      	mov	r1, ip
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	0749      	lsls	r1, r1, #29
 800239a:	430b      	orrs	r3, r1
 800239c:	4661      	mov	r1, ip
 800239e:	08cc      	lsrs	r4, r1, #3
 80023a0:	e7b8      	b.n	8002314 <__aeabi_dsub+0x2f0>
 80023a2:	4640      	mov	r0, r8
 80023a4:	4cd3      	ldr	r4, [pc, #844]	; (80026f4 <__aeabi_dsub+0x6d0>)
 80023a6:	3001      	adds	r0, #1
 80023a8:	4220      	tst	r0, r4
 80023aa:	d000      	beq.n	80023ae <__aeabi_dsub+0x38a>
 80023ac:	e0a2      	b.n	80024f4 <__aeabi_dsub+0x4d0>
 80023ae:	4640      	mov	r0, r8
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d000      	beq.n	80023b6 <__aeabi_dsub+0x392>
 80023b4:	e101      	b.n	80025ba <__aeabi_dsub+0x596>
 80023b6:	4660      	mov	r0, ip
 80023b8:	4318      	orrs	r0, r3
 80023ba:	d100      	bne.n	80023be <__aeabi_dsub+0x39a>
 80023bc:	e15e      	b.n	800267c <__aeabi_dsub+0x658>
 80023be:	0008      	movs	r0, r1
 80023c0:	4338      	orrs	r0, r7
 80023c2:	d000      	beq.n	80023c6 <__aeabi_dsub+0x3a2>
 80023c4:	e15f      	b.n	8002686 <__aeabi_dsub+0x662>
 80023c6:	4661      	mov	r1, ip
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	0749      	lsls	r1, r1, #29
 80023cc:	430b      	orrs	r3, r1
 80023ce:	4661      	mov	r1, ip
 80023d0:	08cc      	lsrs	r4, r1, #3
 80023d2:	e7a2      	b.n	800231a <__aeabi_dsub+0x2f6>
 80023d4:	4dc8      	ldr	r5, [pc, #800]	; (80026f8 <__aeabi_dsub+0x6d4>)
 80023d6:	42a8      	cmp	r0, r5
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x3b8>
 80023da:	e0cf      	b.n	800257c <__aeabi_dsub+0x558>
 80023dc:	2580      	movs	r5, #128	; 0x80
 80023de:	4664      	mov	r4, ip
 80023e0:	042d      	lsls	r5, r5, #16
 80023e2:	432c      	orrs	r4, r5
 80023e4:	46a4      	mov	ip, r4
 80023e6:	2a38      	cmp	r2, #56	; 0x38
 80023e8:	dc56      	bgt.n	8002498 <__aeabi_dsub+0x474>
 80023ea:	2a1f      	cmp	r2, #31
 80023ec:	dd00      	ble.n	80023f0 <__aeabi_dsub+0x3cc>
 80023ee:	e0d1      	b.n	8002594 <__aeabi_dsub+0x570>
 80023f0:	2520      	movs	r5, #32
 80023f2:	001e      	movs	r6, r3
 80023f4:	1aad      	subs	r5, r5, r2
 80023f6:	4664      	mov	r4, ip
 80023f8:	40ab      	lsls	r3, r5
 80023fa:	40ac      	lsls	r4, r5
 80023fc:	40d6      	lsrs	r6, r2
 80023fe:	1e5d      	subs	r5, r3, #1
 8002400:	41ab      	sbcs	r3, r5
 8002402:	4334      	orrs	r4, r6
 8002404:	4323      	orrs	r3, r4
 8002406:	4664      	mov	r4, ip
 8002408:	40d4      	lsrs	r4, r2
 800240a:	1b09      	subs	r1, r1, r4
 800240c:	e049      	b.n	80024a2 <__aeabi_dsub+0x47e>
 800240e:	4660      	mov	r0, ip
 8002410:	1bdc      	subs	r4, r3, r7
 8002412:	1a46      	subs	r6, r0, r1
 8002414:	42a3      	cmp	r3, r4
 8002416:	4180      	sbcs	r0, r0
 8002418:	4240      	negs	r0, r0
 800241a:	4681      	mov	r9, r0
 800241c:	0030      	movs	r0, r6
 800241e:	464e      	mov	r6, r9
 8002420:	1b80      	subs	r0, r0, r6
 8002422:	4681      	mov	r9, r0
 8002424:	0200      	lsls	r0, r0, #8
 8002426:	d476      	bmi.n	8002516 <__aeabi_dsub+0x4f2>
 8002428:	464b      	mov	r3, r9
 800242a:	4323      	orrs	r3, r4
 800242c:	d000      	beq.n	8002430 <__aeabi_dsub+0x40c>
 800242e:	e652      	b.n	80020d6 <__aeabi_dsub+0xb2>
 8002430:	2400      	movs	r4, #0
 8002432:	2500      	movs	r5, #0
 8002434:	e771      	b.n	800231a <__aeabi_dsub+0x2f6>
 8002436:	4339      	orrs	r1, r7
 8002438:	000c      	movs	r4, r1
 800243a:	1e62      	subs	r2, r4, #1
 800243c:	4194      	sbcs	r4, r2
 800243e:	18e4      	adds	r4, r4, r3
 8002440:	429c      	cmp	r4, r3
 8002442:	419b      	sbcs	r3, r3
 8002444:	425b      	negs	r3, r3
 8002446:	4463      	add	r3, ip
 8002448:	4699      	mov	r9, r3
 800244a:	464b      	mov	r3, r9
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	d400      	bmi.n	8002452 <__aeabi_dsub+0x42e>
 8002450:	e756      	b.n	8002300 <__aeabi_dsub+0x2dc>
 8002452:	2301      	movs	r3, #1
 8002454:	469c      	mov	ip, r3
 8002456:	4ba8      	ldr	r3, [pc, #672]	; (80026f8 <__aeabi_dsub+0x6d4>)
 8002458:	44e0      	add	r8, ip
 800245a:	4598      	cmp	r8, r3
 800245c:	d038      	beq.n	80024d0 <__aeabi_dsub+0x4ac>
 800245e:	464b      	mov	r3, r9
 8002460:	48a6      	ldr	r0, [pc, #664]	; (80026fc <__aeabi_dsub+0x6d8>)
 8002462:	2201      	movs	r2, #1
 8002464:	4003      	ands	r3, r0
 8002466:	0018      	movs	r0, r3
 8002468:	0863      	lsrs	r3, r4, #1
 800246a:	4014      	ands	r4, r2
 800246c:	431c      	orrs	r4, r3
 800246e:	07c3      	lsls	r3, r0, #31
 8002470:	431c      	orrs	r4, r3
 8002472:	0843      	lsrs	r3, r0, #1
 8002474:	4699      	mov	r9, r3
 8002476:	e657      	b.n	8002128 <__aeabi_dsub+0x104>
 8002478:	0010      	movs	r0, r2
 800247a:	000e      	movs	r6, r1
 800247c:	3820      	subs	r0, #32
 800247e:	40c6      	lsrs	r6, r0
 8002480:	2a20      	cmp	r2, #32
 8002482:	d004      	beq.n	800248e <__aeabi_dsub+0x46a>
 8002484:	2040      	movs	r0, #64	; 0x40
 8002486:	1a82      	subs	r2, r0, r2
 8002488:	4091      	lsls	r1, r2
 800248a:	430f      	orrs	r7, r1
 800248c:	46b9      	mov	r9, r7
 800248e:	464f      	mov	r7, r9
 8002490:	1e7a      	subs	r2, r7, #1
 8002492:	4197      	sbcs	r7, r2
 8002494:	4337      	orrs	r7, r6
 8002496:	e60f      	b.n	80020b8 <__aeabi_dsub+0x94>
 8002498:	4662      	mov	r2, ip
 800249a:	431a      	orrs	r2, r3
 800249c:	0013      	movs	r3, r2
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	4193      	sbcs	r3, r2
 80024a2:	1afc      	subs	r4, r7, r3
 80024a4:	42a7      	cmp	r7, r4
 80024a6:	41bf      	sbcs	r7, r7
 80024a8:	427f      	negs	r7, r7
 80024aa:	1bcb      	subs	r3, r1, r7
 80024ac:	4699      	mov	r9, r3
 80024ae:	465d      	mov	r5, fp
 80024b0:	4680      	mov	r8, r0
 80024b2:	e608      	b.n	80020c6 <__aeabi_dsub+0xa2>
 80024b4:	4666      	mov	r6, ip
 80024b6:	431e      	orrs	r6, r3
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x498>
 80024ba:	e0be      	b.n	800263a <__aeabi_dsub+0x616>
 80024bc:	1e56      	subs	r6, r2, #1
 80024be:	2a01      	cmp	r2, #1
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x4a0>
 80024c2:	e109      	b.n	80026d8 <__aeabi_dsub+0x6b4>
 80024c4:	4c8c      	ldr	r4, [pc, #560]	; (80026f8 <__aeabi_dsub+0x6d4>)
 80024c6:	42a2      	cmp	r2, r4
 80024c8:	d100      	bne.n	80024cc <__aeabi_dsub+0x4a8>
 80024ca:	e119      	b.n	8002700 <__aeabi_dsub+0x6dc>
 80024cc:	0032      	movs	r2, r6
 80024ce:	e6c1      	b.n	8002254 <__aeabi_dsub+0x230>
 80024d0:	4642      	mov	r2, r8
 80024d2:	2400      	movs	r4, #0
 80024d4:	2300      	movs	r3, #0
 80024d6:	e648      	b.n	800216a <__aeabi_dsub+0x146>
 80024d8:	2020      	movs	r0, #32
 80024da:	000c      	movs	r4, r1
 80024dc:	1a80      	subs	r0, r0, r2
 80024de:	003e      	movs	r6, r7
 80024e0:	4087      	lsls	r7, r0
 80024e2:	4084      	lsls	r4, r0
 80024e4:	40d6      	lsrs	r6, r2
 80024e6:	1e78      	subs	r0, r7, #1
 80024e8:	4187      	sbcs	r7, r0
 80024ea:	40d1      	lsrs	r1, r2
 80024ec:	4334      	orrs	r4, r6
 80024ee:	433c      	orrs	r4, r7
 80024f0:	448c      	add	ip, r1
 80024f2:	e7a4      	b.n	800243e <__aeabi_dsub+0x41a>
 80024f4:	4a80      	ldr	r2, [pc, #512]	; (80026f8 <__aeabi_dsub+0x6d4>)
 80024f6:	4290      	cmp	r0, r2
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x4d8>
 80024fa:	e0e9      	b.n	80026d0 <__aeabi_dsub+0x6ac>
 80024fc:	19df      	adds	r7, r3, r7
 80024fe:	429f      	cmp	r7, r3
 8002500:	419b      	sbcs	r3, r3
 8002502:	4461      	add	r1, ip
 8002504:	425b      	negs	r3, r3
 8002506:	18c9      	adds	r1, r1, r3
 8002508:	07cc      	lsls	r4, r1, #31
 800250a:	087f      	lsrs	r7, r7, #1
 800250c:	084b      	lsrs	r3, r1, #1
 800250e:	4699      	mov	r9, r3
 8002510:	4680      	mov	r8, r0
 8002512:	433c      	orrs	r4, r7
 8002514:	e6f4      	b.n	8002300 <__aeabi_dsub+0x2dc>
 8002516:	1afc      	subs	r4, r7, r3
 8002518:	42a7      	cmp	r7, r4
 800251a:	41bf      	sbcs	r7, r7
 800251c:	4663      	mov	r3, ip
 800251e:	427f      	negs	r7, r7
 8002520:	1ac9      	subs	r1, r1, r3
 8002522:	1bcb      	subs	r3, r1, r7
 8002524:	4699      	mov	r9, r3
 8002526:	465d      	mov	r5, fp
 8002528:	e5d5      	b.n	80020d6 <__aeabi_dsub+0xb2>
 800252a:	08ff      	lsrs	r7, r7, #3
 800252c:	074b      	lsls	r3, r1, #29
 800252e:	465d      	mov	r5, fp
 8002530:	433b      	orrs	r3, r7
 8002532:	08cc      	lsrs	r4, r1, #3
 8002534:	e6ee      	b.n	8002314 <__aeabi_dsub+0x2f0>
 8002536:	4662      	mov	r2, ip
 8002538:	431a      	orrs	r2, r3
 800253a:	d000      	beq.n	800253e <__aeabi_dsub+0x51a>
 800253c:	e082      	b.n	8002644 <__aeabi_dsub+0x620>
 800253e:	000b      	movs	r3, r1
 8002540:	433b      	orrs	r3, r7
 8002542:	d11b      	bne.n	800257c <__aeabi_dsub+0x558>
 8002544:	2480      	movs	r4, #128	; 0x80
 8002546:	2500      	movs	r5, #0
 8002548:	0324      	lsls	r4, r4, #12
 800254a:	e6f9      	b.n	8002340 <__aeabi_dsub+0x31c>
 800254c:	19dc      	adds	r4, r3, r7
 800254e:	429c      	cmp	r4, r3
 8002550:	419b      	sbcs	r3, r3
 8002552:	4461      	add	r1, ip
 8002554:	4689      	mov	r9, r1
 8002556:	425b      	negs	r3, r3
 8002558:	4499      	add	r9, r3
 800255a:	464b      	mov	r3, r9
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	d444      	bmi.n	80025ea <__aeabi_dsub+0x5c6>
 8002560:	2301      	movs	r3, #1
 8002562:	4698      	mov	r8, r3
 8002564:	e6cc      	b.n	8002300 <__aeabi_dsub+0x2dc>
 8002566:	1bdc      	subs	r4, r3, r7
 8002568:	4662      	mov	r2, ip
 800256a:	42a3      	cmp	r3, r4
 800256c:	419b      	sbcs	r3, r3
 800256e:	1a51      	subs	r1, r2, r1
 8002570:	425b      	negs	r3, r3
 8002572:	1acb      	subs	r3, r1, r3
 8002574:	4699      	mov	r9, r3
 8002576:	2301      	movs	r3, #1
 8002578:	4698      	mov	r8, r3
 800257a:	e5a4      	b.n	80020c6 <__aeabi_dsub+0xa2>
 800257c:	08ff      	lsrs	r7, r7, #3
 800257e:	074b      	lsls	r3, r1, #29
 8002580:	465d      	mov	r5, fp
 8002582:	433b      	orrs	r3, r7
 8002584:	08cc      	lsrs	r4, r1, #3
 8002586:	e6d7      	b.n	8002338 <__aeabi_dsub+0x314>
 8002588:	4662      	mov	r2, ip
 800258a:	431a      	orrs	r2, r3
 800258c:	0014      	movs	r4, r2
 800258e:	1e63      	subs	r3, r4, #1
 8002590:	419c      	sbcs	r4, r3
 8002592:	e679      	b.n	8002288 <__aeabi_dsub+0x264>
 8002594:	0015      	movs	r5, r2
 8002596:	4664      	mov	r4, ip
 8002598:	3d20      	subs	r5, #32
 800259a:	40ec      	lsrs	r4, r5
 800259c:	46a0      	mov	r8, r4
 800259e:	2a20      	cmp	r2, #32
 80025a0:	d005      	beq.n	80025ae <__aeabi_dsub+0x58a>
 80025a2:	2540      	movs	r5, #64	; 0x40
 80025a4:	4664      	mov	r4, ip
 80025a6:	1aaa      	subs	r2, r5, r2
 80025a8:	4094      	lsls	r4, r2
 80025aa:	4323      	orrs	r3, r4
 80025ac:	469a      	mov	sl, r3
 80025ae:	4654      	mov	r4, sl
 80025b0:	1e63      	subs	r3, r4, #1
 80025b2:	419c      	sbcs	r4, r3
 80025b4:	4643      	mov	r3, r8
 80025b6:	4323      	orrs	r3, r4
 80025b8:	e773      	b.n	80024a2 <__aeabi_dsub+0x47e>
 80025ba:	4662      	mov	r2, ip
 80025bc:	431a      	orrs	r2, r3
 80025be:	d023      	beq.n	8002608 <__aeabi_dsub+0x5e4>
 80025c0:	000a      	movs	r2, r1
 80025c2:	433a      	orrs	r2, r7
 80025c4:	d000      	beq.n	80025c8 <__aeabi_dsub+0x5a4>
 80025c6:	e0a0      	b.n	800270a <__aeabi_dsub+0x6e6>
 80025c8:	4662      	mov	r2, ip
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	0752      	lsls	r2, r2, #29
 80025ce:	4313      	orrs	r3, r2
 80025d0:	4662      	mov	r2, ip
 80025d2:	08d4      	lsrs	r4, r2, #3
 80025d4:	e6b0      	b.n	8002338 <__aeabi_dsub+0x314>
 80025d6:	000b      	movs	r3, r1
 80025d8:	433b      	orrs	r3, r7
 80025da:	d100      	bne.n	80025de <__aeabi_dsub+0x5ba>
 80025dc:	e728      	b.n	8002430 <__aeabi_dsub+0x40c>
 80025de:	08ff      	lsrs	r7, r7, #3
 80025e0:	074b      	lsls	r3, r1, #29
 80025e2:	465d      	mov	r5, fp
 80025e4:	433b      	orrs	r3, r7
 80025e6:	08cc      	lsrs	r4, r1, #3
 80025e8:	e697      	b.n	800231a <__aeabi_dsub+0x2f6>
 80025ea:	2302      	movs	r3, #2
 80025ec:	4698      	mov	r8, r3
 80025ee:	e736      	b.n	800245e <__aeabi_dsub+0x43a>
 80025f0:	1afc      	subs	r4, r7, r3
 80025f2:	42a7      	cmp	r7, r4
 80025f4:	41bf      	sbcs	r7, r7
 80025f6:	4663      	mov	r3, ip
 80025f8:	427f      	negs	r7, r7
 80025fa:	1ac9      	subs	r1, r1, r3
 80025fc:	1bcb      	subs	r3, r1, r7
 80025fe:	4699      	mov	r9, r3
 8002600:	2301      	movs	r3, #1
 8002602:	465d      	mov	r5, fp
 8002604:	4698      	mov	r8, r3
 8002606:	e55e      	b.n	80020c6 <__aeabi_dsub+0xa2>
 8002608:	074b      	lsls	r3, r1, #29
 800260a:	08ff      	lsrs	r7, r7, #3
 800260c:	433b      	orrs	r3, r7
 800260e:	08cc      	lsrs	r4, r1, #3
 8002610:	e692      	b.n	8002338 <__aeabi_dsub+0x314>
 8002612:	1bdc      	subs	r4, r3, r7
 8002614:	4660      	mov	r0, ip
 8002616:	42a3      	cmp	r3, r4
 8002618:	41b6      	sbcs	r6, r6
 800261a:	1a40      	subs	r0, r0, r1
 800261c:	4276      	negs	r6, r6
 800261e:	1b80      	subs	r0, r0, r6
 8002620:	4681      	mov	r9, r0
 8002622:	0200      	lsls	r0, r0, #8
 8002624:	d560      	bpl.n	80026e8 <__aeabi_dsub+0x6c4>
 8002626:	1afc      	subs	r4, r7, r3
 8002628:	42a7      	cmp	r7, r4
 800262a:	41bf      	sbcs	r7, r7
 800262c:	4663      	mov	r3, ip
 800262e:	427f      	negs	r7, r7
 8002630:	1ac9      	subs	r1, r1, r3
 8002632:	1bcb      	subs	r3, r1, r7
 8002634:	4699      	mov	r9, r3
 8002636:	465d      	mov	r5, fp
 8002638:	e576      	b.n	8002128 <__aeabi_dsub+0x104>
 800263a:	08ff      	lsrs	r7, r7, #3
 800263c:	074b      	lsls	r3, r1, #29
 800263e:	433b      	orrs	r3, r7
 8002640:	08cc      	lsrs	r4, r1, #3
 8002642:	e667      	b.n	8002314 <__aeabi_dsub+0x2f0>
 8002644:	000a      	movs	r2, r1
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	433a      	orrs	r2, r7
 800264a:	d100      	bne.n	800264e <__aeabi_dsub+0x62a>
 800264c:	e66f      	b.n	800232e <__aeabi_dsub+0x30a>
 800264e:	4662      	mov	r2, ip
 8002650:	0752      	lsls	r2, r2, #29
 8002652:	4313      	orrs	r3, r2
 8002654:	4662      	mov	r2, ip
 8002656:	08d4      	lsrs	r4, r2, #3
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0312      	lsls	r2, r2, #12
 800265c:	4214      	tst	r4, r2
 800265e:	d007      	beq.n	8002670 <__aeabi_dsub+0x64c>
 8002660:	08c8      	lsrs	r0, r1, #3
 8002662:	4210      	tst	r0, r2
 8002664:	d104      	bne.n	8002670 <__aeabi_dsub+0x64c>
 8002666:	465d      	mov	r5, fp
 8002668:	0004      	movs	r4, r0
 800266a:	08fb      	lsrs	r3, r7, #3
 800266c:	0749      	lsls	r1, r1, #29
 800266e:	430b      	orrs	r3, r1
 8002670:	0f5a      	lsrs	r2, r3, #29
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	0752      	lsls	r2, r2, #29
 8002678:	4313      	orrs	r3, r2
 800267a:	e65d      	b.n	8002338 <__aeabi_dsub+0x314>
 800267c:	074b      	lsls	r3, r1, #29
 800267e:	08ff      	lsrs	r7, r7, #3
 8002680:	433b      	orrs	r3, r7
 8002682:	08cc      	lsrs	r4, r1, #3
 8002684:	e649      	b.n	800231a <__aeabi_dsub+0x2f6>
 8002686:	19dc      	adds	r4, r3, r7
 8002688:	429c      	cmp	r4, r3
 800268a:	419b      	sbcs	r3, r3
 800268c:	4461      	add	r1, ip
 800268e:	4689      	mov	r9, r1
 8002690:	425b      	negs	r3, r3
 8002692:	4499      	add	r9, r3
 8002694:	464b      	mov	r3, r9
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	d400      	bmi.n	800269c <__aeabi_dsub+0x678>
 800269a:	e631      	b.n	8002300 <__aeabi_dsub+0x2dc>
 800269c:	464a      	mov	r2, r9
 800269e:	4b17      	ldr	r3, [pc, #92]	; (80026fc <__aeabi_dsub+0x6d8>)
 80026a0:	401a      	ands	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	4691      	mov	r9, r2
 80026a6:	4698      	mov	r8, r3
 80026a8:	e62a      	b.n	8002300 <__aeabi_dsub+0x2dc>
 80026aa:	0016      	movs	r6, r2
 80026ac:	4664      	mov	r4, ip
 80026ae:	3e20      	subs	r6, #32
 80026b0:	40f4      	lsrs	r4, r6
 80026b2:	46a0      	mov	r8, r4
 80026b4:	2a20      	cmp	r2, #32
 80026b6:	d005      	beq.n	80026c4 <__aeabi_dsub+0x6a0>
 80026b8:	2640      	movs	r6, #64	; 0x40
 80026ba:	4664      	mov	r4, ip
 80026bc:	1ab2      	subs	r2, r6, r2
 80026be:	4094      	lsls	r4, r2
 80026c0:	4323      	orrs	r3, r4
 80026c2:	469a      	mov	sl, r3
 80026c4:	4654      	mov	r4, sl
 80026c6:	1e63      	subs	r3, r4, #1
 80026c8:	419c      	sbcs	r4, r3
 80026ca:	4643      	mov	r3, r8
 80026cc:	431c      	orrs	r4, r3
 80026ce:	e5db      	b.n	8002288 <__aeabi_dsub+0x264>
 80026d0:	0002      	movs	r2, r0
 80026d2:	2400      	movs	r4, #0
 80026d4:	2300      	movs	r3, #0
 80026d6:	e548      	b.n	800216a <__aeabi_dsub+0x146>
 80026d8:	19dc      	adds	r4, r3, r7
 80026da:	42bc      	cmp	r4, r7
 80026dc:	41bf      	sbcs	r7, r7
 80026de:	4461      	add	r1, ip
 80026e0:	4689      	mov	r9, r1
 80026e2:	427f      	negs	r7, r7
 80026e4:	44b9      	add	r9, r7
 80026e6:	e738      	b.n	800255a <__aeabi_dsub+0x536>
 80026e8:	464b      	mov	r3, r9
 80026ea:	4323      	orrs	r3, r4
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x6cc>
 80026ee:	e69f      	b.n	8002430 <__aeabi_dsub+0x40c>
 80026f0:	e606      	b.n	8002300 <__aeabi_dsub+0x2dc>
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	000007fe 	.word	0x000007fe
 80026f8:	000007ff 	.word	0x000007ff
 80026fc:	ff7fffff 	.word	0xff7fffff
 8002700:	08ff      	lsrs	r7, r7, #3
 8002702:	074b      	lsls	r3, r1, #29
 8002704:	433b      	orrs	r3, r7
 8002706:	08cc      	lsrs	r4, r1, #3
 8002708:	e616      	b.n	8002338 <__aeabi_dsub+0x314>
 800270a:	4662      	mov	r2, ip
 800270c:	08db      	lsrs	r3, r3, #3
 800270e:	0752      	lsls	r2, r2, #29
 8002710:	4313      	orrs	r3, r2
 8002712:	4662      	mov	r2, ip
 8002714:	08d4      	lsrs	r4, r2, #3
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	0312      	lsls	r2, r2, #12
 800271a:	4214      	tst	r4, r2
 800271c:	d007      	beq.n	800272e <__aeabi_dsub+0x70a>
 800271e:	08c8      	lsrs	r0, r1, #3
 8002720:	4210      	tst	r0, r2
 8002722:	d104      	bne.n	800272e <__aeabi_dsub+0x70a>
 8002724:	465d      	mov	r5, fp
 8002726:	0004      	movs	r4, r0
 8002728:	08fb      	lsrs	r3, r7, #3
 800272a:	0749      	lsls	r1, r1, #29
 800272c:	430b      	orrs	r3, r1
 800272e:	0f5a      	lsrs	r2, r3, #29
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	0752      	lsls	r2, r2, #29
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	4313      	orrs	r3, r2
 8002738:	e5fe      	b.n	8002338 <__aeabi_dsub+0x314>
 800273a:	2300      	movs	r3, #0
 800273c:	4a01      	ldr	r2, [pc, #4]	; (8002744 <__aeabi_dsub+0x720>)
 800273e:	001c      	movs	r4, r3
 8002740:	e513      	b.n	800216a <__aeabi_dsub+0x146>
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	000007ff 	.word	0x000007ff

08002748 <__aeabi_dcmpun>:
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	0005      	movs	r5, r0
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <__aeabi_dcmpun+0x38>)
 800274e:	031c      	lsls	r4, r3, #12
 8002750:	0016      	movs	r6, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	030a      	lsls	r2, r1, #12
 8002756:	0049      	lsls	r1, r1, #1
 8002758:	0b12      	lsrs	r2, r2, #12
 800275a:	0d49      	lsrs	r1, r1, #21
 800275c:	0b24      	lsrs	r4, r4, #12
 800275e:	0d5b      	lsrs	r3, r3, #21
 8002760:	4281      	cmp	r1, r0
 8002762:	d008      	beq.n	8002776 <__aeabi_dcmpun+0x2e>
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <__aeabi_dcmpun+0x38>)
 8002766:	2000      	movs	r0, #0
 8002768:	4293      	cmp	r3, r2
 800276a:	d103      	bne.n	8002774 <__aeabi_dcmpun+0x2c>
 800276c:	0020      	movs	r0, r4
 800276e:	4330      	orrs	r0, r6
 8002770:	1e43      	subs	r3, r0, #1
 8002772:	4198      	sbcs	r0, r3
 8002774:	bd70      	pop	{r4, r5, r6, pc}
 8002776:	2001      	movs	r0, #1
 8002778:	432a      	orrs	r2, r5
 800277a:	d1fb      	bne.n	8002774 <__aeabi_dcmpun+0x2c>
 800277c:	e7f2      	b.n	8002764 <__aeabi_dcmpun+0x1c>
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	000007ff 	.word	0x000007ff

08002784 <__aeabi_d2iz>:
 8002784:	000a      	movs	r2, r1
 8002786:	b530      	push	{r4, r5, lr}
 8002788:	4c13      	ldr	r4, [pc, #76]	; (80027d8 <__aeabi_d2iz+0x54>)
 800278a:	0053      	lsls	r3, r2, #1
 800278c:	0309      	lsls	r1, r1, #12
 800278e:	0005      	movs	r5, r0
 8002790:	0b09      	lsrs	r1, r1, #12
 8002792:	2000      	movs	r0, #0
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	0fd2      	lsrs	r2, r2, #31
 8002798:	42a3      	cmp	r3, r4
 800279a:	dd04      	ble.n	80027a6 <__aeabi_d2iz+0x22>
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <__aeabi_d2iz+0x58>)
 800279e:	4283      	cmp	r3, r0
 80027a0:	dd02      	ble.n	80027a8 <__aeabi_d2iz+0x24>
 80027a2:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <__aeabi_d2iz+0x5c>)
 80027a4:	18d0      	adds	r0, r2, r3
 80027a6:	bd30      	pop	{r4, r5, pc}
 80027a8:	2080      	movs	r0, #128	; 0x80
 80027aa:	0340      	lsls	r0, r0, #13
 80027ac:	4301      	orrs	r1, r0
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <__aeabi_d2iz+0x60>)
 80027b0:	1ac0      	subs	r0, r0, r3
 80027b2:	281f      	cmp	r0, #31
 80027b4:	dd08      	ble.n	80027c8 <__aeabi_d2iz+0x44>
 80027b6:	480c      	ldr	r0, [pc, #48]	; (80027e8 <__aeabi_d2iz+0x64>)
 80027b8:	1ac3      	subs	r3, r0, r3
 80027ba:	40d9      	lsrs	r1, r3
 80027bc:	000b      	movs	r3, r1
 80027be:	4258      	negs	r0, r3
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	d1f0      	bne.n	80027a6 <__aeabi_d2iz+0x22>
 80027c4:	0018      	movs	r0, r3
 80027c6:	e7ee      	b.n	80027a6 <__aeabi_d2iz+0x22>
 80027c8:	4c08      	ldr	r4, [pc, #32]	; (80027ec <__aeabi_d2iz+0x68>)
 80027ca:	40c5      	lsrs	r5, r0
 80027cc:	46a4      	mov	ip, r4
 80027ce:	4463      	add	r3, ip
 80027d0:	4099      	lsls	r1, r3
 80027d2:	000b      	movs	r3, r1
 80027d4:	432b      	orrs	r3, r5
 80027d6:	e7f2      	b.n	80027be <__aeabi_d2iz+0x3a>
 80027d8:	000003fe 	.word	0x000003fe
 80027dc:	0000041d 	.word	0x0000041d
 80027e0:	7fffffff 	.word	0x7fffffff
 80027e4:	00000433 	.word	0x00000433
 80027e8:	00000413 	.word	0x00000413
 80027ec:	fffffbed 	.word	0xfffffbed

080027f0 <__aeabi_i2d>:
 80027f0:	b570      	push	{r4, r5, r6, lr}
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d016      	beq.n	8002824 <__aeabi_i2d+0x34>
 80027f6:	17c3      	asrs	r3, r0, #31
 80027f8:	18c5      	adds	r5, r0, r3
 80027fa:	405d      	eors	r5, r3
 80027fc:	0fc4      	lsrs	r4, r0, #31
 80027fe:	0028      	movs	r0, r5
 8002800:	f000 f8ce 	bl	80029a0 <__clzsi2>
 8002804:	4a11      	ldr	r2, [pc, #68]	; (800284c <__aeabi_i2d+0x5c>)
 8002806:	1a12      	subs	r2, r2, r0
 8002808:	280a      	cmp	r0, #10
 800280a:	dc16      	bgt.n	800283a <__aeabi_i2d+0x4a>
 800280c:	0003      	movs	r3, r0
 800280e:	002e      	movs	r6, r5
 8002810:	3315      	adds	r3, #21
 8002812:	409e      	lsls	r6, r3
 8002814:	230b      	movs	r3, #11
 8002816:	1a18      	subs	r0, r3, r0
 8002818:	40c5      	lsrs	r5, r0
 800281a:	0552      	lsls	r2, r2, #21
 800281c:	032d      	lsls	r5, r5, #12
 800281e:	0b2d      	lsrs	r5, r5, #12
 8002820:	0d53      	lsrs	r3, r2, #21
 8002822:	e003      	b.n	800282c <__aeabi_i2d+0x3c>
 8002824:	2400      	movs	r4, #0
 8002826:	2300      	movs	r3, #0
 8002828:	2500      	movs	r5, #0
 800282a:	2600      	movs	r6, #0
 800282c:	051b      	lsls	r3, r3, #20
 800282e:	432b      	orrs	r3, r5
 8002830:	07e4      	lsls	r4, r4, #31
 8002832:	4323      	orrs	r3, r4
 8002834:	0030      	movs	r0, r6
 8002836:	0019      	movs	r1, r3
 8002838:	bd70      	pop	{r4, r5, r6, pc}
 800283a:	380b      	subs	r0, #11
 800283c:	4085      	lsls	r5, r0
 800283e:	0552      	lsls	r2, r2, #21
 8002840:	032d      	lsls	r5, r5, #12
 8002842:	2600      	movs	r6, #0
 8002844:	0b2d      	lsrs	r5, r5, #12
 8002846:	0d53      	lsrs	r3, r2, #21
 8002848:	e7f0      	b.n	800282c <__aeabi_i2d+0x3c>
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	0000041e 	.word	0x0000041e

08002850 <__aeabi_ui2d>:
 8002850:	b510      	push	{r4, lr}
 8002852:	1e04      	subs	r4, r0, #0
 8002854:	d010      	beq.n	8002878 <__aeabi_ui2d+0x28>
 8002856:	f000 f8a3 	bl	80029a0 <__clzsi2>
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <__aeabi_ui2d+0x48>)
 800285c:	1a1b      	subs	r3, r3, r0
 800285e:	280a      	cmp	r0, #10
 8002860:	dc11      	bgt.n	8002886 <__aeabi_ui2d+0x36>
 8002862:	220b      	movs	r2, #11
 8002864:	0021      	movs	r1, r4
 8002866:	1a12      	subs	r2, r2, r0
 8002868:	40d1      	lsrs	r1, r2
 800286a:	3015      	adds	r0, #21
 800286c:	030a      	lsls	r2, r1, #12
 800286e:	055b      	lsls	r3, r3, #21
 8002870:	4084      	lsls	r4, r0
 8002872:	0b12      	lsrs	r2, r2, #12
 8002874:	0d5b      	lsrs	r3, r3, #21
 8002876:	e001      	b.n	800287c <__aeabi_ui2d+0x2c>
 8002878:	2300      	movs	r3, #0
 800287a:	2200      	movs	r2, #0
 800287c:	051b      	lsls	r3, r3, #20
 800287e:	4313      	orrs	r3, r2
 8002880:	0020      	movs	r0, r4
 8002882:	0019      	movs	r1, r3
 8002884:	bd10      	pop	{r4, pc}
 8002886:	0022      	movs	r2, r4
 8002888:	380b      	subs	r0, #11
 800288a:	4082      	lsls	r2, r0
 800288c:	055b      	lsls	r3, r3, #21
 800288e:	0312      	lsls	r2, r2, #12
 8002890:	2400      	movs	r4, #0
 8002892:	0b12      	lsrs	r2, r2, #12
 8002894:	0d5b      	lsrs	r3, r3, #21
 8002896:	e7f1      	b.n	800287c <__aeabi_ui2d+0x2c>
 8002898:	0000041e 	.word	0x0000041e

0800289c <__aeabi_f2d>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	0043      	lsls	r3, r0, #1
 80028a0:	0246      	lsls	r6, r0, #9
 80028a2:	0fc4      	lsrs	r4, r0, #31
 80028a4:	20fe      	movs	r0, #254	; 0xfe
 80028a6:	0e1b      	lsrs	r3, r3, #24
 80028a8:	1c59      	adds	r1, r3, #1
 80028aa:	0a75      	lsrs	r5, r6, #9
 80028ac:	4208      	tst	r0, r1
 80028ae:	d00c      	beq.n	80028ca <__aeabi_f2d+0x2e>
 80028b0:	22e0      	movs	r2, #224	; 0xe0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4694      	mov	ip, r2
 80028b6:	076d      	lsls	r5, r5, #29
 80028b8:	0b36      	lsrs	r6, r6, #12
 80028ba:	4463      	add	r3, ip
 80028bc:	051b      	lsls	r3, r3, #20
 80028be:	4333      	orrs	r3, r6
 80028c0:	07e4      	lsls	r4, r4, #31
 80028c2:	4323      	orrs	r3, r4
 80028c4:	0028      	movs	r0, r5
 80028c6:	0019      	movs	r1, r3
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d114      	bne.n	80028f8 <__aeabi_f2d+0x5c>
 80028ce:	2d00      	cmp	r5, #0
 80028d0:	d01b      	beq.n	800290a <__aeabi_f2d+0x6e>
 80028d2:	0028      	movs	r0, r5
 80028d4:	f000 f864 	bl	80029a0 <__clzsi2>
 80028d8:	280a      	cmp	r0, #10
 80028da:	dc1c      	bgt.n	8002916 <__aeabi_f2d+0x7a>
 80028dc:	230b      	movs	r3, #11
 80028de:	002e      	movs	r6, r5
 80028e0:	1a1b      	subs	r3, r3, r0
 80028e2:	40de      	lsrs	r6, r3
 80028e4:	0003      	movs	r3, r0
 80028e6:	3315      	adds	r3, #21
 80028e8:	409d      	lsls	r5, r3
 80028ea:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <__aeabi_f2d+0x88>)
 80028ec:	0336      	lsls	r6, r6, #12
 80028ee:	1a12      	subs	r2, r2, r0
 80028f0:	0552      	lsls	r2, r2, #21
 80028f2:	0b36      	lsrs	r6, r6, #12
 80028f4:	0d53      	lsrs	r3, r2, #21
 80028f6:	e7e1      	b.n	80028bc <__aeabi_f2d+0x20>
 80028f8:	2d00      	cmp	r5, #0
 80028fa:	d009      	beq.n	8002910 <__aeabi_f2d+0x74>
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	0b36      	lsrs	r6, r6, #12
 8002900:	0312      	lsls	r2, r2, #12
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <__aeabi_f2d+0x8c>)
 8002904:	076d      	lsls	r5, r5, #29
 8002906:	4316      	orrs	r6, r2
 8002908:	e7d8      	b.n	80028bc <__aeabi_f2d+0x20>
 800290a:	2300      	movs	r3, #0
 800290c:	2600      	movs	r6, #0
 800290e:	e7d5      	b.n	80028bc <__aeabi_f2d+0x20>
 8002910:	2600      	movs	r6, #0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <__aeabi_f2d+0x8c>)
 8002914:	e7d2      	b.n	80028bc <__aeabi_f2d+0x20>
 8002916:	0003      	movs	r3, r0
 8002918:	3b0b      	subs	r3, #11
 800291a:	409d      	lsls	r5, r3
 800291c:	002e      	movs	r6, r5
 800291e:	2500      	movs	r5, #0
 8002920:	e7e3      	b.n	80028ea <__aeabi_f2d+0x4e>
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	00000389 	.word	0x00000389
 8002928:	000007ff 	.word	0x000007ff

0800292c <__aeabi_cfrcmple>:
 800292c:	4684      	mov	ip, r0
 800292e:	0008      	movs	r0, r1
 8002930:	4661      	mov	r1, ip
 8002932:	e7ff      	b.n	8002934 <__aeabi_cfcmpeq>

08002934 <__aeabi_cfcmpeq>:
 8002934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002936:	f000 f8bd 	bl	8002ab4 <__lesf2>
 800293a:	2800      	cmp	r0, #0
 800293c:	d401      	bmi.n	8002942 <__aeabi_cfcmpeq+0xe>
 800293e:	2100      	movs	r1, #0
 8002940:	42c8      	cmn	r0, r1
 8002942:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002944 <__aeabi_fcmpeq>:
 8002944:	b510      	push	{r4, lr}
 8002946:	f000 f849 	bl	80029dc <__eqsf2>
 800294a:	4240      	negs	r0, r0
 800294c:	3001      	adds	r0, #1
 800294e:	bd10      	pop	{r4, pc}

08002950 <__aeabi_fcmplt>:
 8002950:	b510      	push	{r4, lr}
 8002952:	f000 f8af 	bl	8002ab4 <__lesf2>
 8002956:	2800      	cmp	r0, #0
 8002958:	db01      	blt.n	800295e <__aeabi_fcmplt+0xe>
 800295a:	2000      	movs	r0, #0
 800295c:	bd10      	pop	{r4, pc}
 800295e:	2001      	movs	r0, #1
 8002960:	bd10      	pop	{r4, pc}
 8002962:	46c0      	nop			; (mov r8, r8)

08002964 <__aeabi_fcmple>:
 8002964:	b510      	push	{r4, lr}
 8002966:	f000 f8a5 	bl	8002ab4 <__lesf2>
 800296a:	2800      	cmp	r0, #0
 800296c:	dd01      	ble.n	8002972 <__aeabi_fcmple+0xe>
 800296e:	2000      	movs	r0, #0
 8002970:	bd10      	pop	{r4, pc}
 8002972:	2001      	movs	r0, #1
 8002974:	bd10      	pop	{r4, pc}
 8002976:	46c0      	nop			; (mov r8, r8)

08002978 <__aeabi_fcmpgt>:
 8002978:	b510      	push	{r4, lr}
 800297a:	f000 f855 	bl	8002a28 <__gesf2>
 800297e:	2800      	cmp	r0, #0
 8002980:	dc01      	bgt.n	8002986 <__aeabi_fcmpgt+0xe>
 8002982:	2000      	movs	r0, #0
 8002984:	bd10      	pop	{r4, pc}
 8002986:	2001      	movs	r0, #1
 8002988:	bd10      	pop	{r4, pc}
 800298a:	46c0      	nop			; (mov r8, r8)

0800298c <__aeabi_fcmpge>:
 800298c:	b510      	push	{r4, lr}
 800298e:	f000 f84b 	bl	8002a28 <__gesf2>
 8002992:	2800      	cmp	r0, #0
 8002994:	da01      	bge.n	800299a <__aeabi_fcmpge+0xe>
 8002996:	2000      	movs	r0, #0
 8002998:	bd10      	pop	{r4, pc}
 800299a:	2001      	movs	r0, #1
 800299c:	bd10      	pop	{r4, pc}
 800299e:	46c0      	nop			; (mov r8, r8)

080029a0 <__clzsi2>:
 80029a0:	211c      	movs	r1, #28
 80029a2:	2301      	movs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	4298      	cmp	r0, r3
 80029a8:	d301      	bcc.n	80029ae <__clzsi2+0xe>
 80029aa:	0c00      	lsrs	r0, r0, #16
 80029ac:	3910      	subs	r1, #16
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	4298      	cmp	r0, r3
 80029b2:	d301      	bcc.n	80029b8 <__clzsi2+0x18>
 80029b4:	0a00      	lsrs	r0, r0, #8
 80029b6:	3908      	subs	r1, #8
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	4298      	cmp	r0, r3
 80029bc:	d301      	bcc.n	80029c2 <__clzsi2+0x22>
 80029be:	0900      	lsrs	r0, r0, #4
 80029c0:	3904      	subs	r1, #4
 80029c2:	a202      	add	r2, pc, #8	; (adr r2, 80029cc <__clzsi2+0x2c>)
 80029c4:	5c10      	ldrb	r0, [r2, r0]
 80029c6:	1840      	adds	r0, r0, r1
 80029c8:	4770      	bx	lr
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	02020304 	.word	0x02020304
 80029d0:	01010101 	.word	0x01010101
	...

080029dc <__eqsf2>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	0042      	lsls	r2, r0, #1
 80029e0:	0245      	lsls	r5, r0, #9
 80029e2:	024e      	lsls	r6, r1, #9
 80029e4:	004c      	lsls	r4, r1, #1
 80029e6:	0fc3      	lsrs	r3, r0, #31
 80029e8:	0a6d      	lsrs	r5, r5, #9
 80029ea:	2001      	movs	r0, #1
 80029ec:	0e12      	lsrs	r2, r2, #24
 80029ee:	0a76      	lsrs	r6, r6, #9
 80029f0:	0e24      	lsrs	r4, r4, #24
 80029f2:	0fc9      	lsrs	r1, r1, #31
 80029f4:	2aff      	cmp	r2, #255	; 0xff
 80029f6:	d006      	beq.n	8002a06 <__eqsf2+0x2a>
 80029f8:	2cff      	cmp	r4, #255	; 0xff
 80029fa:	d003      	beq.n	8002a04 <__eqsf2+0x28>
 80029fc:	42a2      	cmp	r2, r4
 80029fe:	d101      	bne.n	8002a04 <__eqsf2+0x28>
 8002a00:	42b5      	cmp	r5, r6
 8002a02:	d006      	beq.n	8002a12 <__eqsf2+0x36>
 8002a04:	bd70      	pop	{r4, r5, r6, pc}
 8002a06:	2d00      	cmp	r5, #0
 8002a08:	d1fc      	bne.n	8002a04 <__eqsf2+0x28>
 8002a0a:	2cff      	cmp	r4, #255	; 0xff
 8002a0c:	d1fa      	bne.n	8002a04 <__eqsf2+0x28>
 8002a0e:	2e00      	cmp	r6, #0
 8002a10:	d1f8      	bne.n	8002a04 <__eqsf2+0x28>
 8002a12:	428b      	cmp	r3, r1
 8002a14:	d006      	beq.n	8002a24 <__eqsf2+0x48>
 8002a16:	2001      	movs	r0, #1
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d1f3      	bne.n	8002a04 <__eqsf2+0x28>
 8002a1c:	0028      	movs	r0, r5
 8002a1e:	1e43      	subs	r3, r0, #1
 8002a20:	4198      	sbcs	r0, r3
 8002a22:	e7ef      	b.n	8002a04 <__eqsf2+0x28>
 8002a24:	2000      	movs	r0, #0
 8002a26:	e7ed      	b.n	8002a04 <__eqsf2+0x28>

08002a28 <__gesf2>:
 8002a28:	b570      	push	{r4, r5, r6, lr}
 8002a2a:	0042      	lsls	r2, r0, #1
 8002a2c:	0245      	lsls	r5, r0, #9
 8002a2e:	024e      	lsls	r6, r1, #9
 8002a30:	004c      	lsls	r4, r1, #1
 8002a32:	0fc3      	lsrs	r3, r0, #31
 8002a34:	0a6d      	lsrs	r5, r5, #9
 8002a36:	0e12      	lsrs	r2, r2, #24
 8002a38:	0a76      	lsrs	r6, r6, #9
 8002a3a:	0e24      	lsrs	r4, r4, #24
 8002a3c:	0fc8      	lsrs	r0, r1, #31
 8002a3e:	2aff      	cmp	r2, #255	; 0xff
 8002a40:	d01b      	beq.n	8002a7a <__gesf2+0x52>
 8002a42:	2cff      	cmp	r4, #255	; 0xff
 8002a44:	d00e      	beq.n	8002a64 <__gesf2+0x3c>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d11b      	bne.n	8002a82 <__gesf2+0x5a>
 8002a4a:	2c00      	cmp	r4, #0
 8002a4c:	d101      	bne.n	8002a52 <__gesf2+0x2a>
 8002a4e:	2e00      	cmp	r6, #0
 8002a50:	d01c      	beq.n	8002a8c <__gesf2+0x64>
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	d00c      	beq.n	8002a70 <__gesf2+0x48>
 8002a56:	4283      	cmp	r3, r0
 8002a58:	d01c      	beq.n	8002a94 <__gesf2+0x6c>
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	1e58      	subs	r0, r3, #1
 8002a5e:	4008      	ands	r0, r1
 8002a60:	3801      	subs	r0, #1
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	2e00      	cmp	r6, #0
 8002a66:	d122      	bne.n	8002aae <__gesf2+0x86>
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d1f4      	bne.n	8002a56 <__gesf2+0x2e>
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d1f2      	bne.n	8002a56 <__gesf2+0x2e>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d1f6      	bne.n	8002a62 <__gesf2+0x3a>
 8002a74:	2001      	movs	r0, #1
 8002a76:	4240      	negs	r0, r0
 8002a78:	e7f3      	b.n	8002a62 <__gesf2+0x3a>
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d117      	bne.n	8002aae <__gesf2+0x86>
 8002a7e:	2cff      	cmp	r4, #255	; 0xff
 8002a80:	d0f0      	beq.n	8002a64 <__gesf2+0x3c>
 8002a82:	2c00      	cmp	r4, #0
 8002a84:	d1e7      	bne.n	8002a56 <__gesf2+0x2e>
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d1e5      	bne.n	8002a56 <__gesf2+0x2e>
 8002a8a:	e7e6      	b.n	8002a5a <__gesf2+0x32>
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	2d00      	cmp	r5, #0
 8002a90:	d0e7      	beq.n	8002a62 <__gesf2+0x3a>
 8002a92:	e7e2      	b.n	8002a5a <__gesf2+0x32>
 8002a94:	42a2      	cmp	r2, r4
 8002a96:	dc05      	bgt.n	8002aa4 <__gesf2+0x7c>
 8002a98:	dbea      	blt.n	8002a70 <__gesf2+0x48>
 8002a9a:	42b5      	cmp	r5, r6
 8002a9c:	d802      	bhi.n	8002aa4 <__gesf2+0x7c>
 8002a9e:	d3e7      	bcc.n	8002a70 <__gesf2+0x48>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e7de      	b.n	8002a62 <__gesf2+0x3a>
 8002aa4:	4243      	negs	r3, r0
 8002aa6:	4158      	adcs	r0, r3
 8002aa8:	0040      	lsls	r0, r0, #1
 8002aaa:	3801      	subs	r0, #1
 8002aac:	e7d9      	b.n	8002a62 <__gesf2+0x3a>
 8002aae:	2002      	movs	r0, #2
 8002ab0:	4240      	negs	r0, r0
 8002ab2:	e7d6      	b.n	8002a62 <__gesf2+0x3a>

08002ab4 <__lesf2>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	0042      	lsls	r2, r0, #1
 8002ab8:	0245      	lsls	r5, r0, #9
 8002aba:	024e      	lsls	r6, r1, #9
 8002abc:	004c      	lsls	r4, r1, #1
 8002abe:	0fc3      	lsrs	r3, r0, #31
 8002ac0:	0a6d      	lsrs	r5, r5, #9
 8002ac2:	0e12      	lsrs	r2, r2, #24
 8002ac4:	0a76      	lsrs	r6, r6, #9
 8002ac6:	0e24      	lsrs	r4, r4, #24
 8002ac8:	0fc8      	lsrs	r0, r1, #31
 8002aca:	2aff      	cmp	r2, #255	; 0xff
 8002acc:	d00b      	beq.n	8002ae6 <__lesf2+0x32>
 8002ace:	2cff      	cmp	r4, #255	; 0xff
 8002ad0:	d00d      	beq.n	8002aee <__lesf2+0x3a>
 8002ad2:	2a00      	cmp	r2, #0
 8002ad4:	d11f      	bne.n	8002b16 <__lesf2+0x62>
 8002ad6:	2c00      	cmp	r4, #0
 8002ad8:	d116      	bne.n	8002b08 <__lesf2+0x54>
 8002ada:	2e00      	cmp	r6, #0
 8002adc:	d114      	bne.n	8002b08 <__lesf2+0x54>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	2d00      	cmp	r5, #0
 8002ae2:	d010      	beq.n	8002b06 <__lesf2+0x52>
 8002ae4:	e009      	b.n	8002afa <__lesf2+0x46>
 8002ae6:	2d00      	cmp	r5, #0
 8002ae8:	d10c      	bne.n	8002b04 <__lesf2+0x50>
 8002aea:	2cff      	cmp	r4, #255	; 0xff
 8002aec:	d113      	bne.n	8002b16 <__lesf2+0x62>
 8002aee:	2e00      	cmp	r6, #0
 8002af0:	d108      	bne.n	8002b04 <__lesf2+0x50>
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d008      	beq.n	8002b08 <__lesf2+0x54>
 8002af6:	4283      	cmp	r3, r0
 8002af8:	d012      	beq.n	8002b20 <__lesf2+0x6c>
 8002afa:	2102      	movs	r1, #2
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	4008      	ands	r0, r1
 8002b00:	3801      	subs	r0, #1
 8002b02:	e000      	b.n	8002b06 <__lesf2+0x52>
 8002b04:	2002      	movs	r0, #2
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	2d00      	cmp	r5, #0
 8002b0a:	d1f4      	bne.n	8002af6 <__lesf2+0x42>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1fa      	bne.n	8002b06 <__lesf2+0x52>
 8002b10:	2001      	movs	r0, #1
 8002b12:	4240      	negs	r0, r0
 8002b14:	e7f7      	b.n	8002b06 <__lesf2+0x52>
 8002b16:	2c00      	cmp	r4, #0
 8002b18:	d1ed      	bne.n	8002af6 <__lesf2+0x42>
 8002b1a:	2e00      	cmp	r6, #0
 8002b1c:	d1eb      	bne.n	8002af6 <__lesf2+0x42>
 8002b1e:	e7ec      	b.n	8002afa <__lesf2+0x46>
 8002b20:	42a2      	cmp	r2, r4
 8002b22:	dc05      	bgt.n	8002b30 <__lesf2+0x7c>
 8002b24:	dbf2      	blt.n	8002b0c <__lesf2+0x58>
 8002b26:	42b5      	cmp	r5, r6
 8002b28:	d802      	bhi.n	8002b30 <__lesf2+0x7c>
 8002b2a:	d3ef      	bcc.n	8002b0c <__lesf2+0x58>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	e7ea      	b.n	8002b06 <__lesf2+0x52>
 8002b30:	4243      	negs	r3, r0
 8002b32:	4158      	adcs	r0, r3
 8002b34:	0040      	lsls	r0, r0, #1
 8002b36:	3801      	subs	r0, #1
 8002b38:	e7e5      	b.n	8002b06 <__lesf2+0x52>
 8002b3a:	46c0      	nop			; (mov r8, r8)

08002b3c <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002b40:	46c0      	nop			; (mov r8, r8)
 8002b42:	f000 f934 	bl	8002dae <icm20948_who_am_i>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	4053      	eors	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f6      	bne.n	8002b42 <icm20948_init+0x6>

	icm20948_device_reset();
 8002b54:	f000 f954 	bl	8002e00 <icm20948_device_reset>
	icm20948_wakeup();
 8002b58:	f000 f96b 	bl	8002e32 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f000 f9fb 	bl	8002f58 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002b62:	f000 fa1a 	bl	8002f9a <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8002b66:	f000 f982 	bl	8002e6e <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	f000 fa1f 	bl	8002fae <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f000 fa40 	bl	8002ff6 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f000 fa61 	bl	800303e <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f000 fa6f 	bl	8003060 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002b82:	f000 faa7 	bl	80030d4 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002b86:	f000 fb6b 	bl	8003260 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002b8a:	2003      	movs	r0, #3
 8002b8c:	f000 fcbc 	bl	8003508 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8002b90:	2003      	movs	r0, #3
 8002b92:	f000 fd15 	bl	80035c0 <icm20948_accel_full_scale_select>
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <ak09916_init>:

void ak09916_init()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002ba0:	f000 f980 	bl	8002ea4 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002ba4:	f000 f999 	bl	8002eda <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002ba8:	2007      	movs	r0, #7
 8002baa:	f000 f9b4 	bl	8002f16 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	f000 f912 	bl	8002dd8 <ak09916_who_am_i>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4053      	eors	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f6      	bne.n	8002bb0 <ak09916_init+0x14>

	ak09916_soft_reset();
 8002bc2:	f000 f92a 	bl	8002e1a <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002bc6:	2008      	movs	r0, #8
 8002bc8:	f000 fa71 	bl	80030ae <ak09916_operation_mode_setting>
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002bda:	2206      	movs	r2, #6
 8002bdc:	2133      	movs	r1, #51	; 0x33
 8002bde:	2000      	movs	r0, #0
 8002be0:	f000 fddc 	bl	800379c <read_multiple_icm20948_reg>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b21b      	sxth	r3, r3
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	b21b      	sxth	r3, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd ffd7 	bl	8000bb0 <__aeabi_i2f>
 8002c02:	1c02      	adds	r2, r0, #0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	b21a      	sxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3303      	adds	r3, #3
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b21b      	sxth	r3, r3
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fd ffc6 	bl	8000bb0 <__aeabi_i2f>
 8002c24:	1c02      	adds	r2, r0, #0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3305      	adds	r3, #5
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b21b      	sxth	r3, r3
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7fd ffb5 	bl	8000bb0 <__aeabi_i2f>
 8002c46:	1c02      	adds	r2, r0, #0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	212d      	movs	r1, #45	; 0x2d
 8002c60:	2000      	movs	r0, #0
 8002c62:	f000 fd9b 	bl	800379c <read_multiple_icm20948_reg>
 8002c66:	0003      	movs	r3, r0
 8002c68:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	b21a      	sxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7fd ff96 	bl	8000bb0 <__aeabi_i2f>
 8002c84:	1c02      	adds	r2, r0, #0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3303      	adds	r3, #3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	b21b      	sxth	r3, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	b21b      	sxth	r3, r3
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fd ff85 	bl	8000bb0 <__aeabi_i2f>
 8002ca6:	1c02      	adds	r2, r0, #0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	3305      	adds	r3, #5
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7fd ff74 	bl	8000bb0 <__aeabi_i2f>
 8002cc8:	1c02      	adds	r2, r0, #0
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <icm20948_accel_read+0x94>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1c19      	adds	r1, r3, #0
 8002cd0:	1c10      	adds	r0, r2, #0
 8002cd2:	f7fd fc01 	bl	80004d8 <__aeabi_fadd>
 8002cd6:	1c03      	adds	r3, r0, #0
 8002cd8:	1c1a      	adds	r2, r3, #0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b004      	add	sp, #16
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	200001fc 	.word	0x200001fc

08002cec <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	f000 fdbf 	bl	8003878 <read_single_ak09916_reg>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	2017      	movs	r0, #23
 8002d00:	183b      	adds	r3, r7, r0
 8002d02:	2201      	movs	r2, #1
 8002d04:	400a      	ands	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
	if(!drdy)	return false;
 8002d08:	183b      	adds	r3, r7, r0
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <ak09916_mag_read+0x28>
 8002d10:	2300      	movs	r3, #0
 8002d12:	e048      	b.n	8002da6 <ak09916_mag_read+0xba>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002d14:	2106      	movs	r1, #6
 8002d16:	2011      	movs	r0, #17
 8002d18:	f000 fdf6 	bl	8003908 <read_multiple_ak09916_reg>
 8002d1c:	0003      	movs	r3, r0
 8002d1e:	613b      	str	r3, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002d20:	2018      	movs	r0, #24
 8002d22:	f000 fda9 	bl	8003878 <read_single_ak09916_reg>
 8002d26:	0003      	movs	r3, r0
 8002d28:	0019      	movs	r1, r3
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	183b      	adds	r3, r7, r0
 8002d2e:	2208      	movs	r2, #8
 8002d30:	400a      	ands	r2, r1
 8002d32:	701a      	strb	r2, [r3, #0]
	if(hofl)	return false;
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <ak09916_mag_read+0x54>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e032      	b.n	8002da6 <ak09916_mag_read+0xba>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	3301      	adds	r3, #1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b21b      	sxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd ff2b 	bl	8000bb0 <__aeabi_i2f>
 8002d5a:	1c02      	adds	r2, r0, #0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3303      	adds	r3, #3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7fd ff1a 	bl	8000bb0 <__aeabi_i2f>
 8002d7c:	1c02      	adds	r2, r0, #0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3305      	adds	r3, #5
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	b21a      	sxth	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	4313      	orrs	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f7fd ff09 	bl	8000bb0 <__aeabi_i2f>
 8002d9e:	1c02      	adds	r2, r0, #0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	609a      	str	r2, [r3, #8]

	return true;
 8002da4:	2301      	movs	r3, #1
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b006      	add	sp, #24
 8002dac:	bd80      	pop	{r7, pc}

08002dae <icm20948_who_am_i>:



/* Sub Functions */
bool icm20948_who_am_i()
{
 8002dae:	b590      	push	{r4, r7, lr}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002db4:	1dfc      	adds	r4, r7, #7
 8002db6:	2100      	movs	r1, #0
 8002db8:	2000      	movs	r0, #0
 8002dba:	f000 fc8f 	bl	80036dc <read_single_icm20948_reg>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2bea      	cmp	r3, #234	; 0xea
 8002dc8:	d101      	bne.n	8002dce <icm20948_who_am_i+0x20>
		return true;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <icm20948_who_am_i+0x22>
	else
		return false;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8002dde:	1dfc      	adds	r4, r7, #7
 8002de0:	2001      	movs	r0, #1
 8002de2:	f000 fd49 	bl	8003878 <read_single_ak09916_reg>
 8002de6:	0003      	movs	r3, r0
 8002de8:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	d101      	bne.n	8002df6 <ak09916_who_am_i+0x1e>
		return true;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <ak09916_who_am_i+0x20>
	else
		return false;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002e04:	22c1      	movs	r2, #193	; 0xc1
 8002e06:	2106      	movs	r1, #6
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f000 fc99 	bl	8003740 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002e0e:	2064      	movs	r0, #100	; 0x64
 8002e10:	f001 fa3a 	bl	8004288 <HAL_Delay>
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	2032      	movs	r0, #50	; 0x32
 8002e22:	f000 fd4c 	bl	80038be <write_single_ak09916_reg>
	HAL_Delay(100);
 8002e26:	2064      	movs	r0, #100	; 0x64
 8002e28:	f001 fa2e 	bl	8004288 <HAL_Delay>
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002e32:	b590      	push	{r4, r7, lr}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002e38:	1dfc      	adds	r4, r7, #7
 8002e3a:	2106      	movs	r1, #6
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f000 fc4d 	bl	80036dc <read_single_icm20948_reg>
 8002e42:	0003      	movs	r3, r0
 8002e44:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	1dfa      	adds	r2, r7, #7
 8002e4a:	7812      	ldrb	r2, [r2, #0]
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	438a      	bics	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	001a      	movs	r2, r3
 8002e58:	2106      	movs	r1, #6
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 fc70 	bl	8003740 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002e60:	2064      	movs	r0, #100	; 0x64
 8002e62:	f001 fa11 	bl	8004288 <HAL_Delay>
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b003      	add	sp, #12
 8002e6c:	bd90      	pop	{r4, r7, pc}

08002e6e <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002e6e:	b590      	push	{r4, r7, lr}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002e74:	1dfc      	adds	r4, r7, #7
 8002e76:	2103      	movs	r1, #3
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f000 fc2f 	bl	80036dc <read_single_icm20948_reg>
 8002e7e:	0003      	movs	r3, r0
 8002e80:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8002e82:	1dfb      	adds	r3, r7, #7
 8002e84:	1dfa      	adds	r2, r7, #7
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	2110      	movs	r1, #16
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	001a      	movs	r2, r3
 8002e94:	2103      	movs	r1, #3
 8002e96:	2000      	movs	r0, #0
 8002e98:	f000 fc52 	bl	8003740 <write_single_icm20948_reg>
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd90      	pop	{r4, r7, pc}

08002ea4 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002eaa:	1dfc      	adds	r4, r7, #7
 8002eac:	2103      	movs	r1, #3
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 fc14 	bl	80036dc <read_single_icm20948_reg>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	1dfa      	adds	r2, r7, #7
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	001a      	movs	r2, r3
 8002eca:	2103      	movs	r1, #3
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f000 fc37 	bl	8003740 <write_single_icm20948_reg>
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b003      	add	sp, #12
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002ee0:	1dfc      	adds	r4, r7, #7
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f000 fbf9 	bl	80036dc <read_single_icm20948_reg>
 8002eea:	0003      	movs	r3, r0
 8002eec:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 8002eee:	1dfb      	adds	r3, r7, #7
 8002ef0:	1dfa      	adds	r2, r7, #7
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	001a      	movs	r2, r3
 8002f00:	2103      	movs	r1, #3
 8002f02:	2000      	movs	r0, #0
 8002f04:	f000 fc1c 	bl	8003740 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002f08:	2064      	movs	r0, #100	; 0x64
 8002f0a:	f001 f9bd 	bl	8004288 <HAL_Delay>
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b003      	add	sp, #12
 8002f14:	bd90      	pop	{r4, r7, pc}

08002f16 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8002f16:	b5b0      	push	{r4, r5, r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	0002      	movs	r2, r0
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8002f22:	250f      	movs	r5, #15
 8002f24:	197c      	adds	r4, r7, r5
 8002f26:	2101      	movs	r1, #1
 8002f28:	2030      	movs	r0, #48	; 0x30
 8002f2a:	f000 fbd7 	bl	80036dc <read_single_icm20948_reg>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 8002f32:	0028      	movs	r0, r5
 8002f34:	183b      	adds	r3, r7, r0
 8002f36:	1839      	adds	r1, r7, r0
 8002f38:	1dfa      	adds	r2, r7, #7
 8002f3a:	7809      	ldrb	r1, [r1, #0]
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8002f42:	183b      	adds	r3, r7, r0
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	001a      	movs	r2, r3
 8002f48:	2101      	movs	r1, #1
 8002f4a:	2030      	movs	r0, #48	; 0x30
 8002f4c:	f000 fbf8 	bl	8003740 <write_single_icm20948_reg>
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bdb0      	pop	{r4, r5, r7, pc}

08002f58 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002f58:	b5b0      	push	{r4, r5, r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	0002      	movs	r2, r0
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002f64:	250f      	movs	r5, #15
 8002f66:	197c      	adds	r4, r7, r5
 8002f68:	2106      	movs	r1, #6
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f000 fbb6 	bl	80036dc <read_single_icm20948_reg>
 8002f70:	0003      	movs	r3, r0
 8002f72:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8002f74:	0028      	movs	r0, r5
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	1839      	adds	r1, r7, r0
 8002f7a:	1dfa      	adds	r2, r7, #7
 8002f7c:	7809      	ldrb	r1, [r1, #0]
 8002f7e:	7812      	ldrb	r2, [r2, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002f84:	183b      	adds	r3, r7, r0
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	001a      	movs	r2, r3
 8002f8a:	2106      	movs	r1, #6
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f000 fbd7 	bl	8003740 <write_single_icm20948_reg>
}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bdb0      	pop	{r4, r5, r7, pc}

08002f9a <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	2109      	movs	r1, #9
 8002fa2:	2020      	movs	r0, #32
 8002fa4:	f000 fbcc 	bl	8003740 <write_single_icm20948_reg>
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8002fae:	b5b0      	push	{r4, r5, r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8002fba:	250f      	movs	r5, #15
 8002fbc:	197c      	adds	r4, r7, r5
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2020      	movs	r0, #32
 8002fc2:	f000 fb8b 	bl	80036dc <read_single_icm20948_reg>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	b25a      	sxtb	r2, r3
 8002fd2:	197b      	adds	r3, r7, r5
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b25b      	sxtb	r3, r3
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	197b      	adds	r3, r7, r5
 8002fde:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8002fe0:	197b      	adds	r3, r7, r5
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2020      	movs	r0, #32
 8002fea:	f000 fba9 	bl	8003740 <write_single_icm20948_reg>
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b004      	add	sp, #16
 8002ff4:	bdb0      	pop	{r4, r5, r7, pc}

08002ff6 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8002ff6:	b5b0      	push	{r4, r5, r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	1dfb      	adds	r3, r7, #7
 8003000:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8003002:	250f      	movs	r5, #15
 8003004:	197c      	adds	r4, r7, r5
 8003006:	2114      	movs	r1, #20
 8003008:	2020      	movs	r0, #32
 800300a:	f000 fb67 	bl	80036dc <read_single_icm20948_reg>
 800300e:	0003      	movs	r3, r0
 8003010:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	b25a      	sxtb	r2, r3
 800301a:	197b      	adds	r3, r7, r5
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b25b      	sxtb	r3, r3
 8003020:	4313      	orrs	r3, r2
 8003022:	b25a      	sxtb	r2, r3
 8003024:	197b      	adds	r3, r7, r5
 8003026:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003028:	197b      	adds	r3, r7, r5
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	001a      	movs	r2, r3
 800302e:	2101      	movs	r1, #1
 8003030:	2020      	movs	r0, #32
 8003032:	f000 fb85 	bl	8003740 <write_single_icm20948_reg>
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bdb0      	pop	{r4, r5, r7, pc}

0800303e <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	0002      	movs	r2, r0
 8003046:	1dfb      	adds	r3, r7, #7
 8003048:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800304a:	1dfb      	adds	r3, r7, #7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	001a      	movs	r2, r3
 8003050:	2100      	movs	r1, #0
 8003052:	2020      	movs	r0, #32
 8003054:	f000 fb74 	bl	8003740 <write_single_icm20948_reg>
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	b002      	add	sp, #8
 800305e:	bd80      	pop	{r7, pc}

08003060 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	0002      	movs	r2, r0
 8003068:	1dbb      	adds	r3, r7, #6
 800306a:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	0a1b      	lsrs	r3, r3, #8
 8003072:	b29a      	uxth	r2, r3
 8003074:	200f      	movs	r0, #15
 8003076:	183b      	adds	r3, r7, r0
 8003078:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800307a:	1dbb      	adds	r3, r7, #6
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	240e      	movs	r4, #14
 8003082:	193b      	adds	r3, r7, r4
 8003084:	210f      	movs	r1, #15
 8003086:	400a      	ands	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800308a:	183b      	adds	r3, r7, r0
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	001a      	movs	r2, r3
 8003090:	2110      	movs	r1, #16
 8003092:	2020      	movs	r0, #32
 8003094:	f000 fb54 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8003098:	193b      	adds	r3, r7, r4
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	2111      	movs	r1, #17
 80030a0:	2020      	movs	r0, #32
 80030a2:	f000 fb4d 	bl	8003740 <write_single_icm20948_reg>
}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b005      	add	sp, #20
 80030ac:	bd90      	pop	{r4, r7, pc}

080030ae <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	0002      	movs	r2, r0
 80030b6:	1dfb      	adds	r3, r7, #7
 80030b8:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	0019      	movs	r1, r3
 80030c0:	2031      	movs	r0, #49	; 0x31
 80030c2:	f000 fbfc 	bl	80038be <write_single_ak09916_reg>
	HAL_Delay(100);
 80030c6:	2064      	movs	r0, #100	; 0x64
 80030c8:	f001 f8de 	bl	8004288 <HAL_Delay>
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80030da:	230c      	movs	r3, #12
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	0018      	movs	r0, r3
 80030e0:	230c      	movs	r3, #12
 80030e2:	001a      	movs	r2, r3
 80030e4:	2100      	movs	r1, #0
 80030e6:	f004 f861 	bl	80071ac <memset>
	uint8_t gyro_offset[6] = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	2200      	movs	r2, #0
 80030f2:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e041      	b.n	800317e <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 80030fa:	2518      	movs	r5, #24
 80030fc:	197b      	adds	r3, r7, r5
 80030fe:	0018      	movs	r0, r3
 8003100:	f7ff fd67 	bl	8002bd2 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8003104:	240c      	movs	r4, #12
 8003106:	193b      	adds	r3, r7, r4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0018      	movs	r0, r3
 800310c:	f7fd fd50 	bl	8000bb0 <__aeabi_i2f>
 8003110:	1c02      	adds	r2, r0, #0
 8003112:	197b      	adds	r3, r7, r5
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	1c19      	adds	r1, r3, #0
 8003118:	1c10      	adds	r0, r2, #0
 800311a:	f7fd f9dd 	bl	80004d8 <__aeabi_fadd>
 800311e:	1c03      	adds	r3, r0, #0
 8003120:	1c18      	adds	r0, r3, #0
 8003122:	f7fd fd25 	bl	8000b70 <__aeabi_f2iz>
 8003126:	0002      	movs	r2, r0
 8003128:	193b      	adds	r3, r7, r4
 800312a:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 800312c:	193b      	adds	r3, r7, r4
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f7fd fd3d 	bl	8000bb0 <__aeabi_i2f>
 8003136:	1c02      	adds	r2, r0, #0
 8003138:	197b      	adds	r3, r7, r5
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	1c19      	adds	r1, r3, #0
 800313e:	1c10      	adds	r0, r2, #0
 8003140:	f7fd f9ca 	bl	80004d8 <__aeabi_fadd>
 8003144:	1c03      	adds	r3, r0, #0
 8003146:	1c18      	adds	r0, r3, #0
 8003148:	f7fd fd12 	bl	8000b70 <__aeabi_f2iz>
 800314c:	0002      	movs	r2, r0
 800314e:	193b      	adds	r3, r7, r4
 8003150:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	0018      	movs	r0, r3
 8003158:	f7fd fd2a 	bl	8000bb0 <__aeabi_i2f>
 800315c:	1c02      	adds	r2, r0, #0
 800315e:	197b      	adds	r3, r7, r5
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	1c19      	adds	r1, r3, #0
 8003164:	1c10      	adds	r0, r2, #0
 8003166:	f7fd f9b7 	bl	80004d8 <__aeabi_fadd>
 800316a:	1c03      	adds	r3, r0, #0
 800316c:	1c18      	adds	r0, r3, #0
 800316e:	f7fd fcff 	bl	8000b70 <__aeabi_f2iz>
 8003172:	0002      	movs	r2, r0
 8003174:	193b      	adds	r3, r7, r4
 8003176:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	3301      	adds	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	2b63      	cmp	r3, #99	; 0x63
 8003182:	ddba      	ble.n	80030fa <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 8003184:	240c      	movs	r4, #12
 8003186:	193b      	adds	r3, r7, r4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2164      	movs	r1, #100	; 0x64
 800318c:	0018      	movs	r0, r3
 800318e:	f7fd f861 	bl	8000254 <__divsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	001a      	movs	r2, r3
 8003196:	193b      	adds	r3, r7, r4
 8003198:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2164      	movs	r1, #100	; 0x64
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7fd f857 	bl	8000254 <__divsi3>
 80031a6:	0003      	movs	r3, r0
 80031a8:	001a      	movs	r2, r3
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2164      	movs	r1, #100	; 0x64
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fd f84d 	bl	8000254 <__divsi3>
 80031ba:	0003      	movs	r3, r0
 80031bc:	001a      	movs	r2, r3
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 80031c2:	193b      	adds	r3, r7, r4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	425b      	negs	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <icm20948_gyro_calibration+0xfa>
 80031cc:	3303      	adds	r3, #3
 80031ce:	109b      	asrs	r3, r3, #2
 80031d0:	121b      	asrs	r3, r3, #8
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 80031d8:	230c      	movs	r3, #12
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	425b      	negs	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da00      	bge.n	80031e6 <icm20948_gyro_calibration+0x112>
 80031e4:	3303      	adds	r3, #3
 80031e6:	109b      	asrs	r3, r3, #2
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80031ee:	230c      	movs	r3, #12
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	425b      	negs	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	da00      	bge.n	80031fc <icm20948_gyro_calibration+0x128>
 80031fa:	3303      	adds	r3, #3
 80031fc:	109b      	asrs	r3, r3, #2
 80031fe:	121b      	asrs	r3, r3, #8
 8003200:	b2da      	uxtb	r2, r3
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8003206:	230c      	movs	r3, #12
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	425b      	negs	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	da00      	bge.n	8003214 <icm20948_gyro_calibration+0x140>
 8003212:	3303      	adds	r3, #3
 8003214:	109b      	asrs	r3, r3, #2
 8003216:	b2da      	uxtb	r2, r3
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800321c:	230c      	movs	r3, #12
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	425b      	negs	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	da00      	bge.n	800322a <icm20948_gyro_calibration+0x156>
 8003228:	3303      	adds	r3, #3
 800322a:	109b      	asrs	r3, r3, #2
 800322c:	121b      	asrs	r3, r3, #8
 800322e:	b2da      	uxtb	r2, r3
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8003234:	230c      	movs	r3, #12
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	425b      	negs	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	da00      	bge.n	8003242 <icm20948_gyro_calibration+0x16e>
 8003240:	3303      	adds	r3, #3
 8003242:	109b      	asrs	r3, r3, #2
 8003244:	b2da      	uxtb	r2, r3
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	715a      	strb	r2, [r3, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800324a:	1d3a      	adds	r2, r7, #4
 800324c:	2306      	movs	r3, #6
 800324e:	2103      	movs	r1, #3
 8003250:	2020      	movs	r0, #32
 8003252:	f000 fadd 	bl	8003810 <write_multiple_icm20948_reg>
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b00a      	add	sp, #40	; 0x28
 800325c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003260 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b090      	sub	sp, #64	; 0x40
 8003264:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8003266:	2318      	movs	r3, #24
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	0018      	movs	r0, r3
 800326c:	230c      	movs	r3, #12
 800326e:	001a      	movs	r2, r3
 8003270:	2100      	movs	r1, #0
 8003272:	f003 ff9b 	bl	80071ac <memset>
	int32_t accel_bias_reg[3] = {0};
 8003276:	230c      	movs	r3, #12
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	0018      	movs	r0, r3
 800327c:	230c      	movs	r3, #12
 800327e:	001a      	movs	r2, r3
 8003280:	2100      	movs	r1, #0
 8003282:	f003 ff93 	bl	80071ac <memset>
	uint8_t accel_offset[6] = {0};
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8003290:	2300      	movs	r3, #0
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003294:	e041      	b.n	800331a <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 8003296:	2524      	movs	r5, #36	; 0x24
 8003298:	197b      	adds	r3, r7, r5
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fcda 	bl	8002c54 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80032a0:	2418      	movs	r4, #24
 80032a2:	193b      	adds	r3, r7, r4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd fc82 	bl	8000bb0 <__aeabi_i2f>
 80032ac:	1c02      	adds	r2, r0, #0
 80032ae:	197b      	adds	r3, r7, r5
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1c19      	adds	r1, r3, #0
 80032b4:	1c10      	adds	r0, r2, #0
 80032b6:	f7fd f90f 	bl	80004d8 <__aeabi_fadd>
 80032ba:	1c03      	adds	r3, r0, #0
 80032bc:	1c18      	adds	r0, r3, #0
 80032be:	f7fd fc57 	bl	8000b70 <__aeabi_f2iz>
 80032c2:	0002      	movs	r2, r0
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fd fc6f 	bl	8000bb0 <__aeabi_i2f>
 80032d2:	1c02      	adds	r2, r0, #0
 80032d4:	197b      	adds	r3, r7, r5
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	1c19      	adds	r1, r3, #0
 80032da:	1c10      	adds	r0, r2, #0
 80032dc:	f7fd f8fc 	bl	80004d8 <__aeabi_fadd>
 80032e0:	1c03      	adds	r3, r0, #0
 80032e2:	1c18      	adds	r0, r3, #0
 80032e4:	f7fd fc44 	bl	8000b70 <__aeabi_f2iz>
 80032e8:	0002      	movs	r2, r0
 80032ea:	193b      	adds	r3, r7, r4
 80032ec:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd fc5c 	bl	8000bb0 <__aeabi_i2f>
 80032f8:	1c02      	adds	r2, r0, #0
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	1c19      	adds	r1, r3, #0
 8003300:	1c10      	adds	r0, r2, #0
 8003302:	f7fd f8e9 	bl	80004d8 <__aeabi_fadd>
 8003306:	1c03      	adds	r3, r0, #0
 8003308:	1c18      	adds	r0, r3, #0
 800330a:	f7fd fc31 	bl	8000b70 <__aeabi_f2iz>
 800330e:	0002      	movs	r2, r0
 8003310:	193b      	adds	r3, r7, r4
 8003312:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8003314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003316:	3301      	adds	r3, #1
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331c:	2b63      	cmp	r3, #99	; 0x63
 800331e:	ddba      	ble.n	8003296 <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8003320:	2418      	movs	r4, #24
 8003322:	193b      	adds	r3, r7, r4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2164      	movs	r1, #100	; 0x64
 8003328:	0018      	movs	r0, r3
 800332a:	f7fc ff93 	bl	8000254 <__divsi3>
 800332e:	0003      	movs	r3, r0
 8003330:	001a      	movs	r2, r3
 8003332:	193b      	adds	r3, r7, r4
 8003334:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 8003336:	193b      	adds	r3, r7, r4
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2164      	movs	r1, #100	; 0x64
 800333c:	0018      	movs	r0, r3
 800333e:	f7fc ff89 	bl	8000254 <__divsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	001a      	movs	r2, r3
 8003346:	193b      	adds	r3, r7, r4
 8003348:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	0018      	movs	r0, r3
 8003352:	f7fc ff7f 	bl	8000254 <__divsi3>
 8003356:	0003      	movs	r3, r0
 8003358:	001a      	movs	r2, r3
 800335a:	193b      	adds	r3, r7, r4
 800335c:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 800335e:	003b      	movs	r3, r7
 8003360:	4a68      	ldr	r2, [pc, #416]	; (8003504 <icm20948_accel_calibration+0x2a4>)
 8003362:	8811      	ldrh	r1, [r2, #0]
 8003364:	8019      	strh	r1, [r3, #0]
 8003366:	7892      	ldrb	r2, [r2, #2]
 8003368:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800336a:	2202      	movs	r2, #2
 800336c:	2114      	movs	r1, #20
 800336e:	2010      	movs	r0, #16
 8003370:	f000 fa14 	bl	800379c <read_multiple_icm20948_reg>
 8003374:	0003      	movs	r3, r0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003380:	3201      	adds	r2, #1
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	431a      	orrs	r2, r3
 8003386:	250c      	movs	r5, #12
 8003388:	197b      	adds	r3, r7, r5
 800338a:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	3301      	adds	r3, #1
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	4013      	ands	r3, r2
 8003396:	b2da      	uxtb	r2, r3
 8003398:	003b      	movs	r3, r7
 800339a:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 800339c:	2202      	movs	r2, #2
 800339e:	2117      	movs	r1, #23
 80033a0:	2010      	movs	r0, #16
 80033a2:	f000 f9fb 	bl	800379c <read_multiple_icm20948_reg>
 80033a6:	0003      	movs	r3, r0
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b2:	3201      	adds	r2, #1
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	197b      	adds	r3, r7, r5
 80033ba:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 80033bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033be:	3301      	adds	r3, #1
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	003b      	movs	r3, r7
 80033ca:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80033cc:	2202      	movs	r2, #2
 80033ce:	211a      	movs	r1, #26
 80033d0:	2010      	movs	r0, #16
 80033d2:	f000 f9e3 	bl	800379c <read_multiple_icm20948_reg>
 80033d6:	0003      	movs	r3, r0
 80033d8:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e2:	3201      	adds	r2, #1
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	197b      	adds	r3, r7, r5
 80033ea:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	3301      	adds	r3, #1
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	003b      	movs	r3, r7
 80033fa:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	193b      	adds	r3, r7, r4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	da00      	bge.n	800340a <icm20948_accel_calibration+0x1aa>
 8003408:	3307      	adds	r3, #7
 800340a:	10db      	asrs	r3, r3, #3
 800340c:	425b      	negs	r3, r3
 800340e:	18d2      	adds	r2, r2, r3
 8003410:	210c      	movs	r1, #12
 8003412:	187b      	adds	r3, r7, r1
 8003414:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8003416:	187b      	adds	r3, r7, r1
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	2318      	movs	r3, #24
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da00      	bge.n	8003426 <icm20948_accel_calibration+0x1c6>
 8003424:	3307      	adds	r3, #7
 8003426:	10db      	asrs	r3, r3, #3
 8003428:	425b      	negs	r3, r3
 800342a:	18d2      	adds	r2, r2, r3
 800342c:	210c      	movs	r1, #12
 800342e:	187b      	adds	r3, r7, r1
 8003430:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8003432:	187b      	adds	r3, r7, r1
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	2318      	movs	r3, #24
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da00      	bge.n	8003442 <icm20948_accel_calibration+0x1e2>
 8003440:	3307      	adds	r3, #7
 8003442:	10db      	asrs	r3, r3, #3
 8003444:	425b      	negs	r3, r3
 8003446:	18d2      	adds	r2, r2, r3
 8003448:	210c      	movs	r1, #12
 800344a:	187b      	adds	r3, r7, r1
 800344c:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	121b      	asrs	r3, r3, #8
 8003454:	b2da      	uxtb	r2, r3
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2201      	movs	r2, #1
 8003462:	4393      	bics	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	785a      	ldrb	r2, [r3, #1]
 800346e:	003b      	movs	r3, r7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	b2da      	uxtb	r2, r3
 8003476:	1d3b      	adds	r3, r7, #4
 8003478:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800347a:	187b      	adds	r3, r7, r1
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	121b      	asrs	r3, r3, #8
 8003480:	b2da      	uxtb	r2, r3
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8003486:	187b      	adds	r3, r7, r1
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2201      	movs	r2, #1
 800348e:	4393      	bics	r3, r2
 8003490:	b2da      	uxtb	r2, r3
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	78da      	ldrb	r2, [r3, #3]
 800349a:	003b      	movs	r3, r7
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	121b      	asrs	r3, r3, #8
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	4393      	bics	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	795a      	ldrb	r2, [r3, #5]
 80034c6:	003b      	movs	r3, r7
 80034c8:	789b      	ldrb	r3, [r3, #2]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	715a      	strb	r2, [r3, #5]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80034d2:	1d3a      	adds	r2, r7, #4
 80034d4:	2302      	movs	r3, #2
 80034d6:	2114      	movs	r1, #20
 80034d8:	2010      	movs	r0, #16
 80034da:	f000 f999 	bl	8003810 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	1c9a      	adds	r2, r3, #2
 80034e2:	2302      	movs	r3, #2
 80034e4:	2117      	movs	r1, #23
 80034e6:	2010      	movs	r0, #16
 80034e8:	f000 f992 	bl	8003810 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	2302      	movs	r3, #2
 80034f2:	211a      	movs	r1, #26
 80034f4:	2010      	movs	r0, #16
 80034f6:	f000 f98b 	bl	8003810 <write_multiple_icm20948_reg>
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b010      	add	sp, #64	; 0x40
 8003500:	bdb0      	pop	{r4, r5, r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	0800a108 	.word	0x0800a108

08003508 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	0002      	movs	r2, r0
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8003514:	230f      	movs	r3, #15
 8003516:	18fc      	adds	r4, r7, r3
 8003518:	2101      	movs	r1, #1
 800351a:	2020      	movs	r0, #32
 800351c:	f000 f8de 	bl	80036dc <read_single_icm20948_reg>
 8003520:	0003      	movs	r3, r0
 8003522:	7023      	strb	r3, [r4, #0]
	
	switch(full_scale)
 8003524:	1dfb      	adds	r3, r7, #7
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d027      	beq.n	800357c <icm20948_gyro_full_scale_select+0x74>
 800352c:	dc31      	bgt.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
 800352e:	2b02      	cmp	r3, #2
 8003530:	d019      	beq.n	8003566 <icm20948_gyro_full_scale_select+0x5e>
 8003532:	dc2e      	bgt.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <icm20948_gyro_full_scale_select+0x36>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d009      	beq.n	8003550 <icm20948_gyro_full_scale_select+0x48>
 800353c:	e029      	b.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 800353e:	220f      	movs	r2, #15
 8003540:	18bb      	adds	r3, r7, r2
 8003542:	18ba      	adds	r2, r7, r2
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <icm20948_gyro_full_scale_select+0xa4>)
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <icm20948_gyro_full_scale_select+0xa8>)
 800354c:	601a      	str	r2, [r3, #0]
			break;
 800354e:	e020      	b.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 8003550:	220f      	movs	r2, #15
 8003552:	18bb      	adds	r3, r7, r2
 8003554:	18ba      	adds	r2, r7, r2
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	2102      	movs	r1, #2
 800355a:	430a      	orrs	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <icm20948_gyro_full_scale_select+0xa4>)
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <icm20948_gyro_full_scale_select+0xac>)
 8003562:	601a      	str	r2, [r3, #0]
			break;
 8003564:	e015      	b.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 8003566:	220f      	movs	r2, #15
 8003568:	18bb      	adds	r3, r7, r2
 800356a:	18ba      	adds	r2, r7, r2
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	2104      	movs	r1, #4
 8003570:	430a      	orrs	r2, r1
 8003572:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <icm20948_gyro_full_scale_select+0xa4>)
 8003576:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <icm20948_gyro_full_scale_select+0xb0>)
 8003578:	601a      	str	r2, [r3, #0]
			break;
 800357a:	e00a      	b.n	8003592 <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 800357c:	220f      	movs	r2, #15
 800357e:	18bb      	adds	r3, r7, r2
 8003580:	18ba      	adds	r2, r7, r2
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	2106      	movs	r1, #6
 8003586:	430a      	orrs	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <icm20948_gyro_full_scale_select+0xa4>)
 800358c:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <icm20948_gyro_full_scale_select+0xb4>)
 800358e:	601a      	str	r2, [r3, #0]
			break;
 8003590:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003592:	230f      	movs	r3, #15
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	001a      	movs	r2, r3
 800359a:	2101      	movs	r1, #1
 800359c:	2020      	movs	r0, #32
 800359e:	f000 f8cf 	bl	8003740 <write_single_icm20948_reg>
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b005      	add	sp, #20
 80035a8:	bd90      	pop	{r4, r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	200001f8 	.word	0x200001f8
 80035b0:	43030000 	.word	0x43030000
 80035b4:	42830000 	.word	0x42830000
 80035b8:	42033333 	.word	0x42033333
 80035bc:	41833333 	.word	0x41833333

080035c0 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80035cc:	230f      	movs	r3, #15
 80035ce:	18fc      	adds	r4, r7, r3
 80035d0:	2114      	movs	r1, #20
 80035d2:	2020      	movs	r0, #32
 80035d4:	f000 f882 	bl	80036dc <read_single_icm20948_reg>
 80035d8:	0003      	movs	r3, r0
 80035da:	7023      	strb	r3, [r4, #0]
	
	switch(full_scale)
 80035dc:	1dfb      	adds	r3, r7, #7
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d02a      	beq.n	800363a <icm20948_accel_full_scale_select+0x7a>
 80035e4:	dc35      	bgt.n	8003652 <icm20948_accel_full_scale_select+0x92>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d01b      	beq.n	8003622 <icm20948_accel_full_scale_select+0x62>
 80035ea:	dc32      	bgt.n	8003652 <icm20948_accel_full_scale_select+0x92>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <icm20948_accel_full_scale_select+0x36>
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00a      	beq.n	800360a <icm20948_accel_full_scale_select+0x4a>
 80035f4:	e02d      	b.n	8003652 <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 80035f6:	220f      	movs	r2, #15
 80035f8:	18bb      	adds	r3, r7, r2
 80035fa:	18ba      	adds	r2, r7, r2
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 8003600:	4b1a      	ldr	r3, [pc, #104]	; (800366c <icm20948_accel_full_scale_select+0xac>)
 8003602:	228d      	movs	r2, #141	; 0x8d
 8003604:	05d2      	lsls	r2, r2, #23
 8003606:	601a      	str	r2, [r3, #0]
			break;
 8003608:	e023      	b.n	8003652 <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 800360a:	220f      	movs	r2, #15
 800360c:	18bb      	adds	r3, r7, r2
 800360e:	18ba      	adds	r2, r7, r2
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	2102      	movs	r1, #2
 8003614:	430a      	orrs	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <icm20948_accel_full_scale_select+0xac>)
 800361a:	228c      	movs	r2, #140	; 0x8c
 800361c:	05d2      	lsls	r2, r2, #23
 800361e:	601a      	str	r2, [r3, #0]
			break;
 8003620:	e017      	b.n	8003652 <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 8003622:	220f      	movs	r2, #15
 8003624:	18bb      	adds	r3, r7, r2
 8003626:	18ba      	adds	r2, r7, r2
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	2104      	movs	r1, #4
 800362c:	430a      	orrs	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8003630:	4b0e      	ldr	r3, [pc, #56]	; (800366c <icm20948_accel_full_scale_select+0xac>)
 8003632:	228b      	movs	r2, #139	; 0x8b
 8003634:	05d2      	lsls	r2, r2, #23
 8003636:	601a      	str	r2, [r3, #0]
			break;
 8003638:	e00b      	b.n	8003652 <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 800363a:	220f      	movs	r2, #15
 800363c:	18bb      	adds	r3, r7, r2
 800363e:	18ba      	adds	r2, r7, r2
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	2106      	movs	r1, #6
 8003644:	430a      	orrs	r2, r1
 8003646:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <icm20948_accel_full_scale_select+0xac>)
 800364a:	228a      	movs	r2, #138	; 0x8a
 800364c:	05d2      	lsls	r2, r2, #23
 800364e:	601a      	str	r2, [r3, #0]
			break;
 8003650:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8003652:	230f      	movs	r3, #15
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	001a      	movs	r2, r3
 800365a:	2114      	movs	r1, #20
 800365c:	2020      	movs	r0, #32
 800365e:	f000 f86f 	bl	8003740 <write_single_icm20948_reg>
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b005      	add	sp, #20
 8003668:	bd90      	pop	{r4, r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	200001fc 	.word	0x200001fc

08003670 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8003674:	2390      	movs	r3, #144	; 0x90
 8003676:	05db      	lsls	r3, r3, #23
 8003678:	2201      	movs	r2, #1
 800367a:	2110      	movs	r1, #16
 800367c:	0018      	movs	r0, r3
 800367e:	f001 fa41 	bl	8004b04 <HAL_GPIO_WritePin>
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <cs_low>:

static void cs_low()
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 800368c:	2390      	movs	r3, #144	; 0x90
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	2200      	movs	r2, #0
 8003692:	2110      	movs	r1, #16
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fa35 	bl	8004b04 <HAL_GPIO_WritePin>
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80036a0:	b590      	push	{r4, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	0002      	movs	r2, r0
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80036ac:	240c      	movs	r4, #12
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	227f      	movs	r2, #127	; 0x7f
 80036b2:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	1dfa      	adds	r2, r7, #7
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	705a      	strb	r2, [r3, #1]

	cs_low();
 80036bc:	f7ff ffe4 	bl	8003688 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80036c0:	1939      	adds	r1, r7, r4
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <select_user_bank+0x38>)
 80036c4:	230a      	movs	r3, #10
 80036c6:	2202      	movs	r2, #2
 80036c8:	f001 ff5e 	bl	8005588 <HAL_SPI_Transmit>
	cs_high();
 80036cc:	f7ff ffd0 	bl	8003670 <cs_high>
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b005      	add	sp, #20
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	20000224 	.word	0x20000224

080036dc <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	0002      	movs	r2, r0
 80036e4:	1dfb      	adds	r3, r7, #7
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	1c0a      	adds	r2, r1, #0
 80036ec:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	4252      	negs	r2, r2
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	240f      	movs	r4, #15
 80036fc:	193b      	adds	r3, r7, r4
 80036fe:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff ffcb 	bl	80036a0 <select_user_bank>

	cs_low();
 800370a:	f7ff ffbd 	bl	8003688 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800370e:	23fa      	movs	r3, #250	; 0xfa
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	1939      	adds	r1, r7, r4
 8003714:	4809      	ldr	r0, [pc, #36]	; (800373c <read_single_icm20948_reg+0x60>)
 8003716:	2201      	movs	r2, #1
 8003718:	f001 ff36 	bl	8005588 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 800371c:	23fa      	movs	r3, #250	; 0xfa
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	240e      	movs	r4, #14
 8003722:	1939      	adds	r1, r7, r4
 8003724:	4805      	ldr	r0, [pc, #20]	; (800373c <read_single_icm20948_reg+0x60>)
 8003726:	2201      	movs	r2, #1
 8003728:	f002 f886 	bl	8005838 <HAL_SPI_Receive>
	cs_high();
 800372c:	f7ff ffa0 	bl	8003670 <cs_high>

	return reg_val;
 8003730:	193b      	adds	r3, r7, r4
 8003732:	781b      	ldrb	r3, [r3, #0]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b005      	add	sp, #20
 800373a:	bd90      	pop	{r4, r7, pc}
 800373c:	20000224 	.word	0x20000224

08003740 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	0004      	movs	r4, r0
 8003748:	0008      	movs	r0, r1
 800374a:	0011      	movs	r1, r2
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	1c22      	adds	r2, r4, #0
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	1dbb      	adds	r3, r7, #6
 8003754:	1c02      	adds	r2, r0, #0
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	1d7b      	adds	r3, r7, #5
 800375a:	1c0a      	adds	r2, r1, #0
 800375c:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800375e:	240c      	movs	r4, #12
 8003760:	193b      	adds	r3, r7, r4
 8003762:	1dba      	adds	r2, r7, #6
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8003768:	193b      	adds	r3, r7, r4
 800376a:	1d7a      	adds	r2, r7, #5
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8003770:	1dfb      	adds	r3, r7, #7
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff ff93 	bl	80036a0 <select_user_bank>

	cs_low();
 800377a:	f7ff ff85 	bl	8003688 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800377e:	23fa      	movs	r3, #250	; 0xfa
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	1939      	adds	r1, r7, r4
 8003784:	4804      	ldr	r0, [pc, #16]	; (8003798 <write_single_icm20948_reg+0x58>)
 8003786:	2202      	movs	r2, #2
 8003788:	f001 fefe 	bl	8005588 <HAL_SPI_Transmit>
	cs_high();
 800378c:	f7ff ff70 	bl	8003670 <cs_high>
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b005      	add	sp, #20
 8003796:	bd90      	pop	{r4, r7, pc}
 8003798:	20000224 	.word	0x20000224

0800379c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	0004      	movs	r4, r0
 80037a4:	0008      	movs	r0, r1
 80037a6:	0011      	movs	r1, r2
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	1c22      	adds	r2, r4, #0
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	1dbb      	adds	r3, r7, #6
 80037b0:	1c02      	adds	r2, r0, #0
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	1d7b      	adds	r3, r7, #5
 80037b6:	1c0a      	adds	r2, r1, #0
 80037b8:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	4252      	negs	r2, r2
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	240f      	movs	r4, #15
 80037c8:	193b      	adds	r3, r7, r4
 80037ca:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80037cc:	1dfb      	adds	r3, r7, #7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff ff65 	bl	80036a0 <select_user_bank>

	cs_low();
 80037d6:	f7ff ff57 	bl	8003688 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80037da:	23fa      	movs	r3, #250	; 0xfa
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	1939      	adds	r1, r7, r4
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <read_multiple_icm20948_reg+0x6c>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	f001 fed0 	bl	8005588 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80037e8:	1d7b      	adds	r3, r7, #5
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	23fa      	movs	r3, #250	; 0xfa
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4906      	ldr	r1, [pc, #24]	; (800380c <read_multiple_icm20948_reg+0x70>)
 80037f4:	4804      	ldr	r0, [pc, #16]	; (8003808 <read_multiple_icm20948_reg+0x6c>)
 80037f6:	f002 f81f 	bl	8005838 <HAL_SPI_Receive>
	cs_high();
 80037fa:	f7ff ff39 	bl	8003670 <cs_high>

	return reg_val;
 80037fe:	4b03      	ldr	r3, [pc, #12]	; (800380c <read_multiple_icm20948_reg+0x70>)
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	b005      	add	sp, #20
 8003806:	bd90      	pop	{r4, r7, pc}
 8003808:	20000224 	.word	0x20000224
 800380c:	20000200 	.word	0x20000200

08003810 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	0004      	movs	r4, r0
 8003818:	0008      	movs	r0, r1
 800381a:	603a      	str	r2, [r7, #0]
 800381c:	0019      	movs	r1, r3
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	1c22      	adds	r2, r4, #0
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	1dbb      	adds	r3, r7, #6
 8003826:	1c02      	adds	r2, r0, #0
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	1d7b      	adds	r3, r7, #5
 800382c:	1c0a      	adds	r2, r1, #0
 800382e:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003830:	240f      	movs	r4, #15
 8003832:	193b      	adds	r3, r7, r4
 8003834:	1dba      	adds	r2, r7, #6
 8003836:	7812      	ldrb	r2, [r2, #0]
 8003838:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 800383a:	1dfb      	adds	r3, r7, #7
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ff2e 	bl	80036a0 <select_user_bank>

	cs_low();
 8003844:	f7ff ff20 	bl	8003688 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8003848:	23fa      	movs	r3, #250	; 0xfa
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	1939      	adds	r1, r7, r4
 800384e:	4809      	ldr	r0, [pc, #36]	; (8003874 <write_multiple_icm20948_reg+0x64>)
 8003850:	2201      	movs	r2, #1
 8003852:	f001 fe99 	bl	8005588 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8003856:	1d7b      	adds	r3, r7, #5
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b29a      	uxth	r2, r3
 800385c:	23fa      	movs	r3, #250	; 0xfa
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	6839      	ldr	r1, [r7, #0]
 8003862:	4804      	ldr	r0, [pc, #16]	; (8003874 <write_multiple_icm20948_reg+0x64>)
 8003864:	f001 fe90 	bl	8005588 <HAL_SPI_Transmit>
	cs_high();
 8003868:	f7ff ff02 	bl	8003670 <cs_high>
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b005      	add	sp, #20
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	20000224 	.word	0x20000224

08003878 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003884:	228c      	movs	r2, #140	; 0x8c
 8003886:	2103      	movs	r1, #3
 8003888:	2030      	movs	r0, #48	; 0x30
 800388a:	f7ff ff59 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	001a      	movs	r2, r3
 8003894:	2104      	movs	r1, #4
 8003896:	2030      	movs	r0, #48	; 0x30
 8003898:	f7ff ff52 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800389c:	2281      	movs	r2, #129	; 0x81
 800389e:	2105      	movs	r1, #5
 80038a0:	2030      	movs	r0, #48	; 0x30
 80038a2:	f7ff ff4d 	bl	8003740 <write_single_icm20948_reg>

	HAL_Delay(1);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f000 fcee 	bl	8004288 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80038ac:	213b      	movs	r1, #59	; 0x3b
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7ff ff14 	bl	80036dc <read_single_icm20948_reg>
 80038b4:	0003      	movs	r3, r0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}

080038be <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	0002      	movs	r2, r0
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	1c0a      	adds	r2, r1, #0
 80038ce:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80038d0:	220c      	movs	r2, #12
 80038d2:	2103      	movs	r1, #3
 80038d4:	2030      	movs	r0, #48	; 0x30
 80038d6:	f7ff ff33 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80038da:	1dfb      	adds	r3, r7, #7
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	001a      	movs	r2, r3
 80038e0:	2104      	movs	r1, #4
 80038e2:	2030      	movs	r0, #48	; 0x30
 80038e4:	f7ff ff2c 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80038e8:	1dbb      	adds	r3, r7, #6
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	001a      	movs	r2, r3
 80038ee:	2106      	movs	r1, #6
 80038f0:	2030      	movs	r0, #48	; 0x30
 80038f2:	f7ff ff25 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80038f6:	2281      	movs	r2, #129	; 0x81
 80038f8:	2105      	movs	r1, #5
 80038fa:	2030      	movs	r0, #48	; 0x30
 80038fc:	f7ff ff20 	bl	8003740 <write_single_icm20948_reg>
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	0002      	movs	r2, r0
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	1dbb      	adds	r3, r7, #6
 8003916:	1c0a      	adds	r2, r1, #0
 8003918:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800391a:	228c      	movs	r2, #140	; 0x8c
 800391c:	2103      	movs	r1, #3
 800391e:	2030      	movs	r0, #48	; 0x30
 8003920:	f7ff ff0e 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	001a      	movs	r2, r3
 800392a:	2104      	movs	r1, #4
 800392c:	2030      	movs	r0, #48	; 0x30
 800392e:	f7ff ff07 	bl	8003740 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8003932:	1dbb      	adds	r3, r7, #6
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	4252      	negs	r2, r2
 800393a:	4313      	orrs	r3, r2
 800393c:	b2db      	uxtb	r3, r3
 800393e:	001a      	movs	r2, r3
 8003940:	2105      	movs	r1, #5
 8003942:	2030      	movs	r0, #48	; 0x30
 8003944:	f7ff fefc 	bl	8003740 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003948:	2001      	movs	r0, #1
 800394a:	f000 fc9d 	bl	8004288 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	001a      	movs	r2, r3
 8003954:	213b      	movs	r1, #59	; 0x3b
 8003956:	2000      	movs	r0, #0
 8003958:	f7ff ff20 	bl	800379c <read_multiple_icm20948_reg>
 800395c:	0003      	movs	r3, r0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800396a:	b08b      	sub	sp, #44	; 0x2c
 800396c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800396e:	f000 fc27 	bl	80041c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003972:	f000 f857 	bl	8003a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003976:	f000 f94b 	bl	8003c10 <MX_GPIO_Init>
  MX_DMA_Init();
 800397a:	f000 f92b 	bl	8003bd4 <MX_DMA_Init>
  MX_CRC_Init();
 800397e:	f000 f89b 	bl	8003ab8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8003982:	f000 f8f7 	bl	8003b74 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003986:	f000 f8b7 	bl	8003af8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, "Hello \n", 10, 1000);
  icm20948_init();
 800398a:	f7ff f8d7 	bl	8002b3c <icm20948_init>
  ak09916_init();
 800398e:	f7ff f905 	bl	8002b9c <ak09916_init>
  {

	//icm20948_gyro_read_dps(&my_gyro);
	//icm20948_accel_read_g(&my_accel);
	//icm20948_accel_read(&my_accel);
	ak09916_mag_read(&my_mag);
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <main+0xac>)
 8003994:	0018      	movs	r0, r3
 8003996:	f7ff f9a9 	bl	8002cec <ak09916_mag_read>
	uint32_t timeNow =(float) HAL_GetTick();
 800399a:	f000 fc6b 	bl	8004274 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7fd f953 	bl	8000c4c <__aeabi_ui2f>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c18      	adds	r0, r3, #0
 80039aa:	f7fc fd7d 	bl	80004a8 <__aeabi_f2uiz>
 80039ae:	0003      	movs	r3, r0
 80039b0:	60fb      	str	r3, [r7, #12]
	//sprintf(buffer, "%f,%f,%f,%f \r\n",timeNow, my_gyro.x,my_gyro.y,my_gyro.z);
	//sprintf(buffer,"%f,%f,%f,%f \r\n",timeNow,my_accel.x,my_accel.y,my_accel.z);
	sprintf(buffer,"%f,%f,%f,%f \r\n",timeNow,my_mag.x,my_mag.y,my_mag.z);
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <main+0xac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	1c18      	adds	r0, r3, #0
 80039b8:	f7fe ff70 	bl	800289c <__aeabi_f2d>
 80039bc:	0004      	movs	r4, r0
 80039be:	000d      	movs	r5, r1
 80039c0:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <main+0xac>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	1c18      	adds	r0, r3, #0
 80039c6:	f7fe ff69 	bl	800289c <__aeabi_f2d>
 80039ca:	6038      	str	r0, [r7, #0]
 80039cc:	6079      	str	r1, [r7, #4]
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <main+0xac>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	1c18      	adds	r0, r3, #0
 80039d4:	f7fe ff62 	bl	800289c <__aeabi_f2d>
 80039d8:	0002      	movs	r2, r0
 80039da:	000b      	movs	r3, r1
 80039dc:	68fe      	ldr	r6, [r7, #12]
 80039de:	490e      	ldr	r1, [pc, #56]	; (8003a18 <main+0xb0>)
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <main+0xb4>)
 80039e2:	9204      	str	r2, [sp, #16]
 80039e4:	9305      	str	r3, [sp, #20]
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	9303      	str	r3, [sp, #12]
 80039ee:	9400      	str	r4, [sp, #0]
 80039f0:	9501      	str	r5, [sp, #4]
 80039f2:	0032      	movs	r2, r6
 80039f4:	f004 f850 	bl	8007a98 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80039f8:	23fa      	movs	r3, #250	; 0xfa
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <main+0xb4>)
 80039fe:	4808      	ldr	r0, [pc, #32]	; (8003a20 <main+0xb8>)
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	f002 fc5f 	bl	80062c4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8003a06:	23fa      	movs	r3, #250	; 0xfa
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 fc3c 	bl	8004288 <HAL_Delay>
  {
 8003a10:	e7bf      	b.n	8003992 <main+0x2a>
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	20000394 	.word	0x20000394
 8003a18:	0800a10c 	.word	0x0800a10c
 8003a1c:	200003a0 	.word	0x200003a0
 8003a20:	20000288 	.word	0x20000288

08003a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b091      	sub	sp, #68	; 0x44
 8003a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a2a:	2410      	movs	r4, #16
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	0018      	movs	r0, r3
 8003a30:	2330      	movs	r3, #48	; 0x30
 8003a32:	001a      	movs	r2, r3
 8003a34:	2100      	movs	r1, #0
 8003a36:	f003 fbb9 	bl	80071ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a3a:	003b      	movs	r3, r7
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	2310      	movs	r3, #16
 8003a40:	001a      	movs	r2, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	f003 fbb2 	bl	80071ac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a48:	0021      	movs	r1, r4
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	2201      	movs	r2, #1
 8003a54:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2210      	movs	r2, #16
 8003a5a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	2202      	movs	r2, #2
 8003a60:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2200      	movs	r2, #0
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	22a0      	movs	r2, #160	; 0xa0
 8003a6c:	0392      	lsls	r2, r2, #14
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f001 f861 	bl	8004b40 <HAL_RCC_OscConfig>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d001      	beq.n	8003a86 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003a82:	f000 f93b 	bl	8003cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a86:	003b      	movs	r3, r7
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a8c:	003b      	movs	r3, r7
 8003a8e:	2202      	movs	r2, #2
 8003a90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a92:	003b      	movs	r3, r7
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a98:	003b      	movs	r3, r7
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a9e:	003b      	movs	r3, r7
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f001 fb66 	bl	8005174 <HAL_RCC_ClockConfig>
 8003aa8:	1e03      	subs	r3, r0, #0
 8003aaa:	d001      	beq.n	8003ab0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003aac:	f000 f926 	bl	8003cfc <Error_Handler>
  }
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b011      	add	sp, #68	; 0x44
 8003ab6:	bd90      	pop	{r4, r7, pc}

08003ab8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <MX_CRC_Init+0x38>)
 8003abe:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <MX_CRC_Init+0x3c>)
 8003ac0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <MX_CRC_Init+0x38>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <MX_CRC_Init+0x38>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <MX_CRC_Init+0x38>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <MX_CRC_Init+0x38>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <MX_CRC_Init+0x38>)
 8003adc:	0018      	movs	r0, r3
 8003ade:	f000 fcd5 	bl	800448c <HAL_CRC_Init>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d001      	beq.n	8003aea <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8003ae6:	f000 f909 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000208 	.word	0x20000208
 8003af4:	40023000 	.word	0x40023000

08003af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <MX_SPI1_Init+0x78>)
 8003b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b04:	2282      	movs	r2, #130	; 0x82
 8003b06:	0052      	lsls	r2, r2, #1
 8003b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b10:	4b16      	ldr	r3, [pc, #88]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b12:	22e0      	movs	r2, #224	; 0xe0
 8003b14:	00d2      	lsls	r2, r2, #3
 8003b16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b26:	2280      	movs	r2, #128	; 0x80
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b2e:	2218      	movs	r2, #24
 8003b30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b46:	2207      	movs	r2, #7
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <MX_SPI1_Init+0x74>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f001 fc5d 	bl	8005418 <HAL_SPI_Init>
 8003b5e:	1e03      	subs	r3, r0, #0
 8003b60:	d001      	beq.n	8003b66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b62:	f000 f8cb 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000224 	.word	0x20000224
 8003b70:	40013000 	.word	0x40013000

08003b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b7a:	4a15      	ldr	r2, [pc, #84]	; (8003bd0 <MX_USART2_UART_Init+0x5c>)
 8003b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b80:	2296      	movs	r2, #150	; 0x96
 8003b82:	0192      	lsls	r2, r2, #6
 8003b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b92:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <MX_USART2_UART_Init+0x58>)
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f002 fb2f 	bl	800621c <HAL_UART_Init>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003bc2:	f000 f89b 	bl	8003cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000288 	.word	0x20000288
 8003bd0:	40004400 	.word	0x40004400

08003bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <MX_DMA_Init+0x38>)
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <MX_DMA_Init+0x38>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	430a      	orrs	r2, r1
 8003be4:	615a      	str	r2, [r3, #20]
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <MX_DMA_Init+0x38>)
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	2201      	movs	r2, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	200b      	movs	r0, #11
 8003bf8:	f000 fc16 	bl	8004428 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003bfc:	200b      	movs	r0, #11
 8003bfe:	f000 fc28 	bl	8004452 <HAL_NVIC_EnableIRQ>

}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	40021000 	.word	0x40021000

08003c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c16:	240c      	movs	r4, #12
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	2314      	movs	r3, #20
 8003c1e:	001a      	movs	r2, r3
 8003c20:	2100      	movs	r1, #0
 8003c22:	f003 fac3 	bl	80071ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b33      	ldr	r3, [pc, #204]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	0289      	lsls	r1, r1, #10
 8003c30:	430a      	orrs	r2, r1
 8003c32:	615a      	str	r2, [r3, #20]
 8003c34:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	029b      	lsls	r3, r3, #10
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	0309      	lsls	r1, r1, #12
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <MX_GPIO_Init+0xe4>)
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	4013      	ands	r3, r2
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003c5e:	2390      	movs	r3, #144	; 0x90
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	2201      	movs	r2, #1
 8003c64:	2110      	movs	r1, #16
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 ff4c 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003c6c:	23c0      	movs	r3, #192	; 0xc0
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4821      	ldr	r0, [pc, #132]	; (8003cf8 <MX_GPIO_Init+0xe8>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	0019      	movs	r1, r3
 8003c76:	f000 ff45 	bl	8004b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c7a:	193b      	adds	r3, r7, r4
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	2290      	movs	r2, #144	; 0x90
 8003c84:	0352      	lsls	r2, r2, #13
 8003c86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	193b      	adds	r3, r7, r4
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c8e:	193a      	adds	r2, r7, r4
 8003c90:	2390      	movs	r3, #144	; 0x90
 8003c92:	05db      	lsls	r3, r3, #23
 8003c94:	0011      	movs	r1, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fdc4 	bl	8004824 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	193a      	adds	r2, r7, r4
 8003cb6:	2390      	movs	r3, #144	; 0x90
 8003cb8:	05db      	lsls	r3, r3, #23
 8003cba:	0011      	movs	r1, r2
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 fdb1 	bl	8004824 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	22c0      	movs	r2, #192	; 0xc0
 8003cc8:	0092      	lsls	r2, r2, #2
 8003cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ccc:	187b      	adds	r3, r7, r1
 8003cce:	2201      	movs	r2, #1
 8003cd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd2:	187b      	adds	r3, r7, r1
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	187b      	adds	r3, r7, r1
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cde:	187b      	adds	r3, r7, r1
 8003ce0:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <MX_GPIO_Init+0xe8>)
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	0010      	movs	r0, r2
 8003ce6:	f000 fd9d 	bl	8004824 <HAL_GPIO_Init>

}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b009      	add	sp, #36	; 0x24
 8003cf0:	bd90      	pop	{r4, r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	48000800 	.word	0x48000800

08003cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d00:	b672      	cpsid	i
}
 8003d02:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d04:	e7fe      	b.n	8003d04 <Error_Handler+0x8>
	...

08003d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_MspInit+0x44>)
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_MspInit+0x44>)
 8003d14:	2101      	movs	r1, #1
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_MspInit+0x44>)
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_MspInit+0x44>)
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_MspInit+0x44>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0549      	lsls	r1, r1, #21
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_MspInit+0x44>)
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	055b      	lsls	r3, r3, #21
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b002      	add	sp, #8
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_CRC_MspInit+0x34>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10b      	bne.n	8003d7a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_CRC_MspInit+0x38>)
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_CRC_MspInit+0x38>)
 8003d68:	2140      	movs	r1, #64	; 0x40
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	615a      	str	r2, [r3, #20]
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_CRC_MspInit+0x38>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	40023000 	.word	0x40023000
 8003d88:	40021000 	.word	0x40021000

08003d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b08b      	sub	sp, #44	; 0x2c
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	2414      	movs	r4, #20
 8003d96:	193b      	adds	r3, r7, r4
 8003d98:	0018      	movs	r0, r3
 8003d9a:	2314      	movs	r3, #20
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f003 fa04 	bl	80071ac <memset>
  if(hspi->Instance==SPI1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1c      	ldr	r2, [pc, #112]	; (8003e1c <HAL_SPI_MspInit+0x90>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d132      	bne.n	8003e14 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dae:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	0149      	lsls	r1, r1, #5
 8003db8:	430a      	orrs	r2, r1
 8003dba:	619a      	str	r2, [r3, #24]
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	015b      	lsls	r3, r3, #5
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0289      	lsls	r1, r1, #10
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	615a      	str	r2, [r3, #20]
 8003dd8:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <HAL_SPI_MspInit+0x94>)
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	029b      	lsls	r3, r3, #10
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003de6:	0021      	movs	r1, r4
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	22e0      	movs	r2, #224	; 0xe0
 8003dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dee:	187b      	adds	r3, r7, r1
 8003df0:	2202      	movs	r2, #2
 8003df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e00:	187b      	adds	r3, r7, r1
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e06:	187a      	adds	r2, r7, r1
 8003e08:	2390      	movs	r3, #144	; 0x90
 8003e0a:	05db      	lsls	r3, r3, #23
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f000 fd08 	bl	8004824 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b00b      	add	sp, #44	; 0x2c
 8003e1a:	bd90      	pop	{r4, r7, pc}
 8003e1c:	40013000 	.word	0x40013000
 8003e20:	40021000 	.word	0x40021000

08003e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e24:	b590      	push	{r4, r7, lr}
 8003e26:	b08b      	sub	sp, #44	; 0x2c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	2414      	movs	r4, #20
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	0018      	movs	r0, r3
 8003e32:	2314      	movs	r3, #20
 8003e34:	001a      	movs	r2, r3
 8003e36:	2100      	movs	r1, #0
 8003e38:	f003 f9b8 	bl	80071ac <memset>
  if(huart->Instance==USART2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <HAL_UART_MspInit+0x13c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d000      	beq.n	8003e48 <HAL_UART_MspInit+0x24>
 8003e46:	e086      	b.n	8003f56 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e48:	4b46      	ldr	r3, [pc, #280]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0289      	lsls	r1, r1, #10
 8003e52:	430a      	orrs	r2, r1
 8003e54:	61da      	str	r2, [r3, #28]
 8003e56:	4b43      	ldr	r3, [pc, #268]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	2380      	movs	r3, #128	; 0x80
 8003e5c:	029b      	lsls	r3, r3, #10
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e64:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	0289      	lsls	r1, r1, #10
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	615a      	str	r2, [r3, #20]
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_UART_MspInit+0x140>)
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	029b      	lsls	r3, r3, #10
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e80:	0021      	movs	r1, r4
 8003e82:	187b      	adds	r3, r7, r1
 8003e84:	220c      	movs	r2, #12
 8003e86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2203      	movs	r2, #3
 8003e98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea0:	187a      	adds	r2, r7, r1
 8003ea2:	2390      	movs	r3, #144	; 0x90
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f000 fcbb 	bl	8004824 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003eb0:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <HAL_UART_MspInit+0x148>)
 8003eb2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003eb4:	4b2c      	ldr	r3, [pc, #176]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ecc:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ed2:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ed8:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 fb1b 	bl	800451c <HAL_DMA_Init>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003eea:	f7ff ff07 	bl	8003cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1d      	ldr	r2, [pc, #116]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ef2:	671a      	str	r2, [r3, #112]	; 0x70
 8003ef4:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <HAL_UART_MspInit+0x144>)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003efc:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <HAL_UART_MspInit+0x150>)
 8003efe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f02:	2210      	movs	r2, #16
 8003f04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f1e:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f000 faf5 	bl	800451c <HAL_DMA_Init>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003f36:	f7ff fee1 	bl	8003cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_UART_MspInit+0x14c>)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	201c      	movs	r0, #28
 8003f4c:	f000 fa6c 	bl	8004428 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f50:	201c      	movs	r0, #28
 8003f52:	f000 fa7e 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b00b      	add	sp, #44	; 0x2c
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	40004400 	.word	0x40004400
 8003f64:	40021000 	.word	0x40021000
 8003f68:	2000030c 	.word	0x2000030c
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	20000350 	.word	0x20000350
 8003f74:	40020044 	.word	0x40020044

08003f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <NMI_Handler+0x4>

08003f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f82:	e7fe      	b.n	8003f82 <HardFault_Handler+0x4>

08003f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f9c:	f000 f958 	bl	8004250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <DMA1_Channel4_5_IRQHandler+0x1c>)
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f000 fb79 	bl	80046a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <DMA1_Channel4_5_IRQHandler+0x20>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fb75 	bl	80046a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	20000350 	.word	0x20000350
 8003fc8:	2000030c 	.word	0x2000030c

08003fcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <USART2_IRQHandler+0x14>)
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f002 fa20 	bl	8006418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	20000288 	.word	0x20000288

08003fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
	return 1;
 8003fe8:	2301      	movs	r3, #1
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_kill>:

int _kill(int pid, int sig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ffa:	f003 f8ad 	bl	8007158 <__errno>
 8003ffe:	0003      	movs	r3, r0
 8004000:	2216      	movs	r2, #22
 8004002:	601a      	str	r2, [r3, #0]
	return -1;
 8004004:	2301      	movs	r3, #1
 8004006:	425b      	negs	r3, r3
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <_exit>:

void _exit (int status)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004018:	2301      	movs	r3, #1
 800401a:	425a      	negs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0011      	movs	r1, r2
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff ffe5 	bl	8003ff0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004026:	e7fe      	b.n	8004026 <_exit+0x16>

08004028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e00a      	b.n	8004050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800403a:	e000      	b.n	800403e <_read+0x16>
 800403c:	bf00      	nop
 800403e:	0001      	movs	r1, r0
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	60ba      	str	r2, [r7, #8]
 8004046:	b2ca      	uxtb	r2, r1
 8004048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3301      	adds	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	dbf0      	blt.n	800403a <_read+0x12>
	}

return len;
 8004058:	687b      	ldr	r3, [r7, #4]
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b006      	add	sp, #24
 8004060:	bd80      	pop	{r7, pc}

08004062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e009      	b.n	8004088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	60ba      	str	r2, [r7, #8]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	0018      	movs	r0, r3
 800407e:	e000      	b.n	8004082 <_write+0x20>
 8004080:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	3301      	adds	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	dbf1      	blt.n	8004074 <_write+0x12>
	}
	return len;
 8004090:	687b      	ldr	r3, [r7, #4]
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b006      	add	sp, #24
 8004098:	bd80      	pop	{r7, pc}

0800409a <_close>:

int _close(int file)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
	return -1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	425b      	negs	r3, r3
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b002      	add	sp, #8
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0192      	lsls	r2, r2, #6
 80040be:	605a      	str	r2, [r3, #4]
	return 0;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b002      	add	sp, #8
 80040c8:	bd80      	pop	{r7, pc}

080040ca <_isatty>:

int _isatty(int file)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
	return 1;
 80040d2:	2301      	movs	r3, #1
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
	return 0;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <_sbrk+0x5c>)
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <_sbrk+0x60>)
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004108:	4b13      	ldr	r3, [pc, #76]	; (8004158 <_sbrk+0x64>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <_sbrk+0x64>)
 8004112:	4a12      	ldr	r2, [pc, #72]	; (800415c <_sbrk+0x68>)
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <_sbrk+0x64>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	18d3      	adds	r3, r2, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	429a      	cmp	r2, r3
 8004122:	d207      	bcs.n	8004134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004124:	f003 f818 	bl	8007158 <__errno>
 8004128:	0003      	movs	r3, r0
 800412a:	220c      	movs	r2, #12
 800412c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800412e:	2301      	movs	r3, #1
 8004130:	425b      	negs	r3, r3
 8004132:	e009      	b.n	8004148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <_sbrk+0x64>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <_sbrk+0x64>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	18d2      	adds	r2, r2, r3
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <_sbrk+0x64>)
 8004144:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	0018      	movs	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	b006      	add	sp, #24
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20002000 	.word	0x20002000
 8004154:	00000400 	.word	0x00000400
 8004158:	200003e0 	.word	0x200003e0
 800415c:	200003f8 	.word	0x200003f8

08004160 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800416c:	480d      	ldr	r0, [pc, #52]	; (80041a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800416e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004172:	490e      	ldr	r1, [pc, #56]	; (80041ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <LoopForever+0xe>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004188:	4c0b      	ldr	r4, [pc, #44]	; (80041b8 <LoopForever+0x16>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004196:	f7ff ffe3 	bl	8004160 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800419a:	f002 ffe3 	bl	8007164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800419e:	f7ff fbe3 	bl	8003968 <main>

080041a2 <LoopForever>:

LoopForever:
    b LoopForever
 80041a2:	e7fe      	b.n	80041a2 <LoopForever>
  ldr   r0, =_estack
 80041a4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80041b0:	0800a5b4 	.word	0x0800a5b4
  ldr r2, =_sbss
 80041b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80041b8:	200003f8 	.word	0x200003f8

080041bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041bc:	e7fe      	b.n	80041bc <ADC1_COMP_IRQHandler>
	...

080041c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_Init+0x24>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_Init+0x24>)
 80041ca:	2110      	movs	r1, #16
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80041d0:	2000      	movs	r0, #0
 80041d2:	f000 f809 	bl	80041e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041d6:	f7ff fd97 	bl	8003d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40022000 	.word	0x40022000

080041e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041e8:	b590      	push	{r4, r7, lr}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_InitTick+0x5c>)
 80041f2:	681c      	ldr	r4, [r3, #0]
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_InitTick+0x60>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	0019      	movs	r1, r3
 80041fa:	23fa      	movs	r3, #250	; 0xfa
 80041fc:	0098      	lsls	r0, r3, #2
 80041fe:	f7fb ff9f 	bl	8000140 <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	0019      	movs	r1, r3
 8004206:	0020      	movs	r0, r4
 8004208:	f7fb ff9a 	bl	8000140 <__udivsi3>
 800420c:	0003      	movs	r3, r0
 800420e:	0018      	movs	r0, r3
 8004210:	f000 f92f 	bl	8004472 <HAL_SYSTICK_Config>
 8004214:	1e03      	subs	r3, r0, #0
 8004216:	d001      	beq.n	800421c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e00f      	b.n	800423c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d80b      	bhi.n	800423a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	2301      	movs	r3, #1
 8004226:	425b      	negs	r3, r3
 8004228:	2200      	movs	r2, #0
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f8fc 	bl	8004428 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_InitTick+0x64>)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b003      	add	sp, #12
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	20000000 	.word	0x20000000
 8004248:	20000008 	.word	0x20000008
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_IncTick+0x1c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	001a      	movs	r2, r3
 800425a:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_IncTick+0x20>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	18d2      	adds	r2, r2, r3
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_IncTick+0x20>)
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	20000008 	.word	0x20000008
 8004270:	200003e4 	.word	0x200003e4

08004274 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  return uwTick;
 8004278:	4b02      	ldr	r3, [pc, #8]	; (8004284 <HAL_GetTick+0x10>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	0018      	movs	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	200003e4 	.word	0x200003e4

08004288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7ff fff0 	bl	8004274 <HAL_GetTick>
 8004294:	0003      	movs	r3, r0
 8004296:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	d005      	beq.n	80042ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a2:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_Delay+0x44>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	001a      	movs	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	f7ff ffe0 	bl	8004274 <HAL_GetTick>
 80042b4:	0002      	movs	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d8f7      	bhi.n	80042b0 <HAL_Delay+0x28>
  {
  }
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	20000008 	.word	0x20000008

080042d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	0002      	movs	r2, r0
 80042d8:	1dfb      	adds	r3, r7, #7
 80042da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b7f      	cmp	r3, #127	; 0x7f
 80042e2:	d809      	bhi.n	80042f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	001a      	movs	r2, r3
 80042ea:	231f      	movs	r3, #31
 80042ec:	401a      	ands	r2, r3
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <__NVIC_EnableIRQ+0x30>)
 80042f0:	2101      	movs	r1, #1
 80042f2:	4091      	lsls	r1, r2
 80042f4:	000a      	movs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
  }
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	0002      	movs	r2, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	1dfb      	adds	r3, r7, #7
 8004310:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004312:	1dfb      	adds	r3, r7, #7
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b7f      	cmp	r3, #127	; 0x7f
 8004318:	d828      	bhi.n	800436c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800431a:	4a2f      	ldr	r2, [pc, #188]	; (80043d8 <__NVIC_SetPriority+0xd4>)
 800431c:	1dfb      	adds	r3, r7, #7
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b25b      	sxtb	r3, r3
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	33c0      	adds	r3, #192	; 0xc0
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	589b      	ldr	r3, [r3, r2]
 800432a:	1dfa      	adds	r2, r7, #7
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	0011      	movs	r1, r2
 8004330:	2203      	movs	r2, #3
 8004332:	400a      	ands	r2, r1
 8004334:	00d2      	lsls	r2, r2, #3
 8004336:	21ff      	movs	r1, #255	; 0xff
 8004338:	4091      	lsls	r1, r2
 800433a:	000a      	movs	r2, r1
 800433c:	43d2      	mvns	r2, r2
 800433e:	401a      	ands	r2, r3
 8004340:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	22ff      	movs	r2, #255	; 0xff
 8004348:	401a      	ands	r2, r3
 800434a:	1dfb      	adds	r3, r7, #7
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	0018      	movs	r0, r3
 8004350:	2303      	movs	r3, #3
 8004352:	4003      	ands	r3, r0
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004358:	481f      	ldr	r0, [pc, #124]	; (80043d8 <__NVIC_SetPriority+0xd4>)
 800435a:	1dfb      	adds	r3, r7, #7
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b25b      	sxtb	r3, r3
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	430a      	orrs	r2, r1
 8004364:	33c0      	adds	r3, #192	; 0xc0
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800436a:	e031      	b.n	80043d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <__NVIC_SetPriority+0xd8>)
 800436e:	1dfb      	adds	r3, r7, #7
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	0019      	movs	r1, r3
 8004374:	230f      	movs	r3, #15
 8004376:	400b      	ands	r3, r1
 8004378:	3b08      	subs	r3, #8
 800437a:	089b      	lsrs	r3, r3, #2
 800437c:	3306      	adds	r3, #6
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	18d3      	adds	r3, r2, r3
 8004382:	3304      	adds	r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1dfa      	adds	r2, r7, #7
 8004388:	7812      	ldrb	r2, [r2, #0]
 800438a:	0011      	movs	r1, r2
 800438c:	2203      	movs	r2, #3
 800438e:	400a      	ands	r2, r1
 8004390:	00d2      	lsls	r2, r2, #3
 8004392:	21ff      	movs	r1, #255	; 0xff
 8004394:	4091      	lsls	r1, r2
 8004396:	000a      	movs	r2, r1
 8004398:	43d2      	mvns	r2, r2
 800439a:	401a      	ands	r2, r3
 800439c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	22ff      	movs	r2, #255	; 0xff
 80043a4:	401a      	ands	r2, r3
 80043a6:	1dfb      	adds	r3, r7, #7
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	0018      	movs	r0, r3
 80043ac:	2303      	movs	r3, #3
 80043ae:	4003      	ands	r3, r0
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043b4:	4809      	ldr	r0, [pc, #36]	; (80043dc <__NVIC_SetPriority+0xd8>)
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	001c      	movs	r4, r3
 80043bc:	230f      	movs	r3, #15
 80043be:	4023      	ands	r3, r4
 80043c0:	3b08      	subs	r3, #8
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	430a      	orrs	r2, r1
 80043c6:	3306      	adds	r3, #6
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	18c3      	adds	r3, r0, r3
 80043cc:	3304      	adds	r3, #4
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b003      	add	sp, #12
 80043d6:	bd90      	pop	{r4, r7, pc}
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1e5a      	subs	r2, r3, #1
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	045b      	lsls	r3, r3, #17
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d301      	bcc.n	80043f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043f4:	2301      	movs	r3, #1
 80043f6:	e010      	b.n	800441a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <SysTick_Config+0x44>)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	3a01      	subs	r2, #1
 80043fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004400:	2301      	movs	r3, #1
 8004402:	425b      	negs	r3, r3
 8004404:	2103      	movs	r1, #3
 8004406:	0018      	movs	r0, r3
 8004408:	f7ff ff7c 	bl	8004304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <SysTick_Config+0x44>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <SysTick_Config+0x44>)
 8004414:	2207      	movs	r2, #7
 8004416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	e000e010 	.word	0xe000e010

08004428 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	210f      	movs	r1, #15
 8004434:	187b      	adds	r3, r7, r1
 8004436:	1c02      	adds	r2, r0, #0
 8004438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	187b      	adds	r3, r7, r1
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b25b      	sxtb	r3, r3
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff ff5d 	bl	8004304 <__NVIC_SetPriority>
}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	0002      	movs	r2, r0
 800445a:	1dfb      	adds	r3, r7, #7
 800445c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445e:	1dfb      	adds	r3, r7, #7
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff ff33 	bl	80042d0 <__NVIC_EnableIRQ>
}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	46bd      	mov	sp, r7
 800446e:	b002      	add	sp, #8
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff ffaf 	bl	80043e0 <SysTick_Config>
 8004482:	0003      	movs	r3, r0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e039      	b.n	8004512 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7d5b      	ldrb	r3, [r3, #21]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7ff fc4d 	bl	8003d50 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2202      	movs	r2, #2
 80044ba:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	791b      	ldrb	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4252      	negs	r2, r2
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	e004      	b.n	80044da <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6892      	ldr	r2, [r2, #8]
 80044d8:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2260      	movs	r2, #96	; 0x60
 80044e2:	4393      	bics	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	4393      	bics	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b002      	add	sp, #8
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e036      	b.n	80045a0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2221      	movs	r2, #33	; 0x21
 8004536:	2102      	movs	r1, #2
 8004538:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <HAL_DMA_Init+0x8c>)
 8004546:	4013      	ands	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f932 	bl	80047ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2221      	movs	r2, #33	; 0x21
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	2100      	movs	r1, #0
 800459c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}  
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b004      	add	sp, #16
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	ffffc00f 	.word	0xffffc00f

080045ac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2221      	movs	r2, #33	; 0x21
 80045b8:	5c9b      	ldrb	r3, [r3, r2]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d008      	beq.n	80045d2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e020      	b.n	8004614 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	210e      	movs	r1, #14
 80045de:	438a      	bics	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2101      	movs	r1, #1
 80045ee:	438a      	bics	r2, r1
 80045f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2101      	movs	r1, #1
 80045fc:	4091      	lsls	r1, r2
 80045fe:	000a      	movs	r2, r1
 8004600:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2221      	movs	r2, #33	; 0x21
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b002      	add	sp, #8
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	210f      	movs	r1, #15
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2221      	movs	r2, #33	; 0x21
 8004630:	5c9b      	ldrb	r3, [r3, r2]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d006      	beq.n	8004646 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2204      	movs	r2, #4
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800463e:	187b      	adds	r3, r7, r1
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e028      	b.n	8004698 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	210e      	movs	r1, #14
 8004652:	438a      	bics	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2101      	movs	r1, #1
 8004662:	438a      	bics	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	2101      	movs	r1, #1
 8004670:	4091      	lsls	r1, r2
 8004672:	000a      	movs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2221      	movs	r2, #33	; 0x21
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	0010      	movs	r0, r2
 8004696:	4798      	blx	r3
    } 
  }
  return status;
 8004698:	230f      	movs	r3, #15
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b004      	add	sp, #16
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	0013      	movs	r3, r2
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4013      	ands	r3, r2
 80046cc:	d024      	beq.n	8004718 <HAL_DMA_IRQHandler+0x72>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2204      	movs	r2, #4
 80046d2:	4013      	ands	r3, r2
 80046d4:	d020      	beq.n	8004718 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	4013      	ands	r3, r2
 80046e0:	d107      	bne.n	80046f2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2104      	movs	r1, #4
 80046ee:	438a      	bics	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2104      	movs	r1, #4
 80046fc:	4091      	lsls	r1, r2
 80046fe:	000a      	movs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d100      	bne.n	800470c <HAL_DMA_IRQHandler+0x66>
 800470a:	e06a      	b.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	0010      	movs	r0, r2
 8004714:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004716:	e064      	b.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2202      	movs	r2, #2
 800471e:	409a      	lsls	r2, r3
 8004720:	0013      	movs	r3, r2
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4013      	ands	r3, r2
 8004726:	d02b      	beq.n	8004780 <HAL_DMA_IRQHandler+0xda>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2202      	movs	r2, #2
 800472c:	4013      	ands	r3, r2
 800472e:	d027      	beq.n	8004780 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2220      	movs	r2, #32
 8004738:	4013      	ands	r3, r2
 800473a:	d10b      	bne.n	8004754 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	210a      	movs	r1, #10
 8004748:	438a      	bics	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	2102      	movs	r1, #2
 800475e:	4091      	lsls	r1, r2
 8004760:	000a      	movs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d036      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	0010      	movs	r0, r2
 800477c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800477e:	e030      	b.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	2208      	movs	r2, #8
 8004786:	409a      	lsls	r2, r3
 8004788:	0013      	movs	r3, r2
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	d028      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2208      	movs	r2, #8
 8004794:	4013      	ands	r3, r2
 8004796:	d024      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	210e      	movs	r1, #14
 80047a4:	438a      	bics	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	2101      	movs	r1, #1
 80047b2:	4091      	lsls	r1, r2
 80047b4:	000a      	movs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2221      	movs	r2, #33	; 0x21
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	2100      	movs	r1, #0
 80047cc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	0010      	movs	r0, r2
 80047de:	4798      	blx	r3
    }
   }
}  
 80047e0:	e7ff      	b.n	80047e2 <HAL_DMA_IRQHandler+0x13c>
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b004      	add	sp, #16
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a08      	ldr	r2, [pc, #32]	; (800481c <DMA_CalcBaseAndBitshift+0x30>)
 80047fa:	4694      	mov	ip, r2
 80047fc:	4463      	add	r3, ip
 80047fe:	2114      	movs	r1, #20
 8004800:	0018      	movs	r0, r3
 8004802:	f7fb fc9d 	bl	8000140 <__udivsi3>
 8004806:	0003      	movs	r3, r0
 8004808:	009a      	lsls	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a03      	ldr	r2, [pc, #12]	; (8004820 <DMA_CalcBaseAndBitshift+0x34>)
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}
 800481c:	bffdfff8 	.word	0xbffdfff8
 8004820:	40020000 	.word	0x40020000

08004824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004832:	e14f      	b.n	8004ad4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2101      	movs	r1, #1
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4091      	lsls	r1, r2
 800483e:	000a      	movs	r2, r1
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d100      	bne.n	800484c <HAL_GPIO_Init+0x28>
 800484a:	e140      	b.n	8004ace <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2203      	movs	r2, #3
 8004852:	4013      	ands	r3, r2
 8004854:	2b01      	cmp	r3, #1
 8004856:	d005      	beq.n	8004864 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004860:	2b02      	cmp	r3, #2
 8004862:	d130      	bne.n	80048c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	2203      	movs	r2, #3
 8004870:	409a      	lsls	r2, r3
 8004872:	0013      	movs	r3, r2
 8004874:	43da      	mvns	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	409a      	lsls	r2, r3
 8004886:	0013      	movs	r3, r2
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800489a:	2201      	movs	r2, #1
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	409a      	lsls	r2, r3
 80048a0:	0013      	movs	r3, r2
 80048a2:	43da      	mvns	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	2201      	movs	r2, #1
 80048b2:	401a      	ands	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	409a      	lsls	r2, r3
 80048b8:	0013      	movs	r3, r2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2203      	movs	r2, #3
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d017      	beq.n	8004902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	409a      	lsls	r2, r3
 80048e0:	0013      	movs	r3, r2
 80048e2:	43da      	mvns	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4013      	ands	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	409a      	lsls	r2, r3
 80048f4:	0013      	movs	r3, r2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2203      	movs	r2, #3
 8004908:	4013      	ands	r3, r2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d123      	bne.n	8004956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	0092      	lsls	r2, r2, #2
 8004918:	58d3      	ldr	r3, [r2, r3]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2207      	movs	r2, #7
 8004920:	4013      	ands	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	409a      	lsls	r2, r3
 8004928:	0013      	movs	r3, r2
 800492a:	43da      	mvns	r2, r3
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2107      	movs	r1, #7
 800493a:	400b      	ands	r3, r1
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	409a      	lsls	r2, r3
 8004940:	0013      	movs	r3, r2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	08da      	lsrs	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3208      	adds	r2, #8
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	6939      	ldr	r1, [r7, #16]
 8004954:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	2203      	movs	r2, #3
 8004962:	409a      	lsls	r2, r3
 8004964:	0013      	movs	r3, r2
 8004966:	43da      	mvns	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	401a      	ands	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	0013      	movs	r3, r2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	23c0      	movs	r3, #192	; 0xc0
 8004990:	029b      	lsls	r3, r3, #10
 8004992:	4013      	ands	r3, r2
 8004994:	d100      	bne.n	8004998 <HAL_GPIO_Init+0x174>
 8004996:	e09a      	b.n	8004ace <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004998:	4b54      	ldr	r3, [pc, #336]	; (8004aec <HAL_GPIO_Init+0x2c8>)
 800499a:	699a      	ldr	r2, [r3, #24]
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_GPIO_Init+0x2c8>)
 800499e:	2101      	movs	r1, #1
 80049a0:	430a      	orrs	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
 80049a4:	4b51      	ldr	r3, [pc, #324]	; (8004aec <HAL_GPIO_Init+0x2c8>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2201      	movs	r2, #1
 80049aa:	4013      	ands	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049b0:	4a4f      	ldr	r2, [pc, #316]	; (8004af0 <HAL_GPIO_Init+0x2cc>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	589b      	ldr	r3, [r3, r2]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2203      	movs	r2, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	409a      	lsls	r2, r3
 80049ca:	0013      	movs	r3, r2
 80049cc:	43da      	mvns	r2, r3
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	2390      	movs	r3, #144	; 0x90
 80049d8:	05db      	lsls	r3, r3, #23
 80049da:	429a      	cmp	r2, r3
 80049dc:	d013      	beq.n	8004a06 <HAL_GPIO_Init+0x1e2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a44      	ldr	r2, [pc, #272]	; (8004af4 <HAL_GPIO_Init+0x2d0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00d      	beq.n	8004a02 <HAL_GPIO_Init+0x1de>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a43      	ldr	r2, [pc, #268]	; (8004af8 <HAL_GPIO_Init+0x2d4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d007      	beq.n	80049fe <HAL_GPIO_Init+0x1da>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a42      	ldr	r2, [pc, #264]	; (8004afc <HAL_GPIO_Init+0x2d8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <HAL_GPIO_Init+0x1d6>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e006      	b.n	8004a08 <HAL_GPIO_Init+0x1e4>
 80049fa:	2305      	movs	r3, #5
 80049fc:	e004      	b.n	8004a08 <HAL_GPIO_Init+0x1e4>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e002      	b.n	8004a08 <HAL_GPIO_Init+0x1e4>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <HAL_GPIO_Init+0x1e4>
 8004a06:	2300      	movs	r3, #0
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	0092      	lsls	r2, r2, #2
 8004a10:	4093      	lsls	r3, r2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a18:	4935      	ldr	r1, [pc, #212]	; (8004af0 <HAL_GPIO_Init+0x2cc>)
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a4a:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43da      	mvns	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	029b      	lsls	r3, r3, #10
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a7a:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43da      	mvns	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	2380      	movs	r3, #128	; 0x80
 8004a90:	035b      	lsls	r3, r3, #13
 8004a92:	4013      	ands	r3, r2
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a9e:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	039b      	lsls	r3, r3, #14
 8004abc:	4013      	ands	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ac8:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	40da      	lsrs	r2, r3
 8004adc:	1e13      	subs	r3, r2, #0
 8004ade:	d000      	beq.n	8004ae2 <HAL_GPIO_Init+0x2be>
 8004ae0:	e6a8      	b.n	8004834 <HAL_GPIO_Init+0x10>
  } 
}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	46c0      	nop			; (mov r8, r8)
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b006      	add	sp, #24
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	40010000 	.word	0x40010000
 8004af4:	48000400 	.word	0x48000400
 8004af8:	48000800 	.word	0x48000800
 8004afc:	48000c00 	.word	0x48000c00
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	0008      	movs	r0, r1
 8004b0e:	0011      	movs	r1, r2
 8004b10:	1cbb      	adds	r3, r7, #2
 8004b12:	1c02      	adds	r2, r0, #0
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	1c7b      	adds	r3, r7, #1
 8004b18:	1c0a      	adds	r2, r1, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b1c:	1c7b      	adds	r3, r7, #1
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b24:	1cbb      	adds	r3, r7, #2
 8004b26:	881a      	ldrh	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b2c:	e003      	b.n	8004b36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b2e:	1cbb      	adds	r3, r7, #2
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e301      	b.n	8005156 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <HAL_RCC_OscConfig+0x1e>
 8004b5c:	e08d      	b.n	8004c7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b5e:	4bc3      	ldr	r3, [pc, #780]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	220c      	movs	r2, #12
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d00e      	beq.n	8004b88 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b6a:	4bc0      	ldr	r3, [pc, #768]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	220c      	movs	r2, #12
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d116      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x64>
 8004b76:	4bbd      	ldr	r3, [pc, #756]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	025b      	lsls	r3, r3, #9
 8004b7e:	401a      	ands	r2, r3
 8004b80:	2380      	movs	r3, #128	; 0x80
 8004b82:	025b      	lsls	r3, r3, #9
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d10d      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	4bb8      	ldr	r3, [pc, #736]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	2380      	movs	r3, #128	; 0x80
 8004b8e:	029b      	lsls	r3, r3, #10
 8004b90:	4013      	ands	r3, r2
 8004b92:	d100      	bne.n	8004b96 <HAL_RCC_OscConfig+0x56>
 8004b94:	e070      	b.n	8004c78 <HAL_RCC_OscConfig+0x138>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d000      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x60>
 8004b9e:	e06b      	b.n	8004c78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2d8      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_RCC_OscConfig+0x7c>
 8004bac:	4baf      	ldr	r3, [pc, #700]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4bae      	ldr	r3, [pc, #696]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	2180      	movs	r1, #128	; 0x80
 8004bb4:	0249      	lsls	r1, r1, #9
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e02f      	b.n	8004c1c <HAL_RCC_OscConfig+0xdc>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10c      	bne.n	8004bde <HAL_RCC_OscConfig+0x9e>
 8004bc4:	4ba9      	ldr	r3, [pc, #676]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4ba8      	ldr	r3, [pc, #672]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bca:	49a9      	ldr	r1, [pc, #676]	; (8004e70 <HAL_RCC_OscConfig+0x330>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	4ba6      	ldr	r3, [pc, #664]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4ba5      	ldr	r3, [pc, #660]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bd6:	49a7      	ldr	r1, [pc, #668]	; (8004e74 <HAL_RCC_OscConfig+0x334>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e01e      	b.n	8004c1c <HAL_RCC_OscConfig+0xdc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b05      	cmp	r3, #5
 8004be4:	d10e      	bne.n	8004c04 <HAL_RCC_OscConfig+0xc4>
 8004be6:	4ba1      	ldr	r3, [pc, #644]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4ba0      	ldr	r3, [pc, #640]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bec:	2180      	movs	r1, #128	; 0x80
 8004bee:	02c9      	lsls	r1, r1, #11
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	4b9d      	ldr	r3, [pc, #628]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b9c      	ldr	r3, [pc, #624]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0249      	lsls	r1, r1, #9
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e00b      	b.n	8004c1c <HAL_RCC_OscConfig+0xdc>
 8004c04:	4b99      	ldr	r3, [pc, #612]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b98      	ldr	r3, [pc, #608]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c0a:	4999      	ldr	r1, [pc, #612]	; (8004e70 <HAL_RCC_OscConfig+0x330>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b95      	ldr	r3, [pc, #596]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c16:	4997      	ldr	r1, [pc, #604]	; (8004e74 <HAL_RCC_OscConfig+0x334>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d014      	beq.n	8004c4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7ff fb26 	bl	8004274 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c2e:	f7ff fb21 	bl	8004274 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b64      	cmp	r3, #100	; 0x64
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e28a      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c40:	4b8a      	ldr	r3, [pc, #552]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	029b      	lsls	r3, r3, #10
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0xee>
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7ff fb11 	bl	8004274 <HAL_GetTick>
 8004c52:	0003      	movs	r3, r0
 8004c54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c58:	f7ff fb0c 	bl	8004274 <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	; 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e275      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b80      	ldr	r3, [pc, #512]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	029b      	lsls	r3, r3, #10
 8004c72:	4013      	ands	r3, r2
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x118>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	4013      	ands	r3, r2
 8004c82:	d100      	bne.n	8004c86 <HAL_RCC_OscConfig+0x146>
 8004c84:	e069      	b.n	8004d5a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c86:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	220c      	movs	r2, #12
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c90:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	220c      	movs	r2, #12
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d11c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x196>
 8004c9c:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	025b      	lsls	r3, r3, #9
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d116      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca8:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2202      	movs	r2, #2
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d005      	beq.n	8004cbe <HAL_RCC_OscConfig+0x17e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e24b      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbe:	4b6b      	ldr	r3, [pc, #428]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	22f8      	movs	r2, #248	; 0xf8
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	00da      	lsls	r2, r3, #3
 8004cce:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd4:	e041      	b.n	8004d5a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d024      	beq.n	8004d28 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b62      	ldr	r3, [pc, #392]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cea:	f7ff fac3 	bl	8004274 <HAL_GetTick>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7ff fabe 	bl	8004274 <HAL_GetTick>
 8004cf8:	0002      	movs	r2, r0
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e227      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d06:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d0f1      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d10:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	22f8      	movs	r2, #248	; 0xf8
 8004d16:	4393      	bics	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00da      	lsls	r2, r3, #3
 8004d20:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d22:	430a      	orrs	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e018      	b.n	8004d5a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d28:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438a      	bics	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7ff fa9e 	bl	8004274 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7ff fa99 	bl	8004274 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e202      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d50:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2202      	movs	r2, #2
 8004d56:	4013      	ands	r3, r2
 8004d58:	d1f1      	bne.n	8004d3e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4013      	ands	r3, r2
 8004d62:	d036      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d019      	beq.n	8004da0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6c:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d70:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d72:	2101      	movs	r1, #1
 8004d74:	430a      	orrs	r2, r1
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7ff fa7c 	bl	8004274 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d82:	f7ff fa77 	bl	8004274 <HAL_GetTick>
 8004d86:	0002      	movs	r2, r0
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e1e0      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2202      	movs	r2, #2
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d0f1      	beq.n	8004d82 <HAL_RCC_OscConfig+0x242>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da0:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da4:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004da6:	2101      	movs	r1, #1
 8004da8:	438a      	bics	r2, r1
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dac:	f7ff fa62 	bl	8004274 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db6:	f7ff fa5d 	bl	8004274 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e1c6      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d1f1      	bne.n	8004db6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_RCC_OscConfig+0x29e>
 8004ddc:	e0b4      	b.n	8004f48 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dde:	201f      	movs	r0, #31
 8004de0:	183b      	adds	r3, r7, r0
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	055b      	lsls	r3, r3, #21
 8004dee:	4013      	ands	r3, r2
 8004df0:	d110      	bne.n	8004e14 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	0549      	lsls	r1, r1, #21
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	61da      	str	r2, [r3, #28]
 8004e00:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	055b      	lsls	r3, r3, #21
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_RCC_OscConfig+0x338>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2380      	movs	r3, #128	; 0x80
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d11a      	bne.n	8004e56 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x338>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b14      	ldr	r3, [pc, #80]	; (8004e78 <HAL_RCC_OscConfig+0x338>)
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	0049      	lsls	r1, r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2e:	f7ff fa21 	bl	8004274 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7ff fa1c 	bl	8004274 <HAL_GetTick>
 8004e3c:	0002      	movs	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e185      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x338>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCC_OscConfig+0x33c>
 8004e5e:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <HAL_RCC_OscConfig+0x32c>)
 8004e64:	2101      	movs	r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	621a      	str	r2, [r3, #32]
 8004e6a:	e035      	b.n	8004ed8 <HAL_RCC_OscConfig+0x398>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	fffeffff 	.word	0xfffeffff
 8004e74:	fffbffff 	.word	0xfffbffff
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCC_OscConfig+0x35e>
 8004e84:	4bb6      	ldr	r3, [pc, #728]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	4bb5      	ldr	r3, [pc, #724]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	4bb3      	ldr	r3, [pc, #716]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	4bb2      	ldr	r3, [pc, #712]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004e96:	2104      	movs	r1, #4
 8004e98:	438a      	bics	r2, r1
 8004e9a:	621a      	str	r2, [r3, #32]
 8004e9c:	e01c      	b.n	8004ed8 <HAL_RCC_OscConfig+0x398>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x380>
 8004ea6:	4bae      	ldr	r3, [pc, #696]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	4bad      	ldr	r3, [pc, #692]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004eac:	2104      	movs	r1, #4
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	621a      	str	r2, [r3, #32]
 8004eb2:	4bab      	ldr	r3, [pc, #684]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	4baa      	ldr	r3, [pc, #680]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	621a      	str	r2, [r3, #32]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x398>
 8004ec0:	4ba7      	ldr	r3, [pc, #668]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	621a      	str	r2, [r3, #32]
 8004ecc:	4ba4      	ldr	r3, [pc, #656]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	4ba3      	ldr	r3, [pc, #652]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee0:	f7ff f9c8 	bl	8004274 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e009      	b.n	8004efe <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7ff f9c3 	bl	8004274 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	4a9b      	ldr	r2, [pc, #620]	; (8005164 <HAL_RCC_OscConfig+0x624>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e12b      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efe:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x3aa>
 8004f08:	e013      	b.n	8004f32 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7ff f9b3 	bl	8004274 <HAL_GetTick>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	e009      	b.n	8004f28 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7ff f9ae 	bl	8004274 <HAL_GetTick>
 8004f18:	0002      	movs	r2, r0
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	4a91      	ldr	r2, [pc, #580]	; (8005164 <HAL_RCC_OscConfig+0x624>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e116      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	4b8d      	ldr	r3, [pc, #564]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f32:	231f      	movs	r3, #31
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b88      	ldr	r3, [pc, #544]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	4b87      	ldr	r3, [pc, #540]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f42:	4989      	ldr	r1, [pc, #548]	; (8005168 <HAL_RCC_OscConfig+0x628>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f5a:	4b81      	ldr	r3, [pc, #516]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5e:	4b80      	ldr	r3, [pc, #512]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f60:	2104      	movs	r1, #4
 8004f62:	430a      	orrs	r2, r1
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004f66:	4b7e      	ldr	r3, [pc, #504]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6a:	4b7d      	ldr	r3, [pc, #500]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f72:	f7ff f97f 	bl	8004274 <HAL_GetTick>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7c:	f7ff f97a 	bl	8004274 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0e3      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f8e:	4b74      	ldr	r3, [pc, #464]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2202      	movs	r2, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	d0f1      	beq.n	8004f7c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f98:	4b71      	ldr	r3, [pc, #452]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	22f8      	movs	r2, #248	; 0xf8
 8004f9e:	4393      	bics	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	00da      	lsls	r2, r3, #3
 8004fa8:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004faa:	430a      	orrs	r2, r1
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34
 8004fae:	e034      	b.n	800501a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	3305      	adds	r3, #5
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004fb8:	4b69      	ldr	r3, [pc, #420]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	4b68      	ldr	r3, [pc, #416]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fc4:	4b66      	ldr	r3, [pc, #408]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	22f8      	movs	r2, #248	; 0xf8
 8004fca:	4393      	bics	r3, r2
 8004fcc:	0019      	movs	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	00da      	lsls	r2, r3, #3
 8004fd4:	4b62      	ldr	r3, [pc, #392]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fda:	e01e      	b.n	800501a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fdc:	4b60      	ldr	r3, [pc, #384]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe0:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004fe8:	4b5d      	ldr	r3, [pc, #372]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	4b5c      	ldr	r3, [pc, #368]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff4:	f7ff f93e 	bl	8004274 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ffe:	f7ff f939 	bl	8004274 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0a2      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2202      	movs	r2, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d1f1      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d100      	bne.n	8005024 <HAL_RCC_OscConfig+0x4e4>
 8005022:	e097      	b.n	8005154 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005024:	4b4e      	ldr	r3, [pc, #312]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	220c      	movs	r2, #12
 800502a:	4013      	ands	r3, r2
 800502c:	2b08      	cmp	r3, #8
 800502e:	d100      	bne.n	8005032 <HAL_RCC_OscConfig+0x4f2>
 8005030:	e06b      	b.n	800510a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d14c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503a:	4b49      	ldr	r3, [pc, #292]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b48      	ldr	r3, [pc, #288]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005040:	494a      	ldr	r1, [pc, #296]	; (800516c <HAL_RCC_OscConfig+0x62c>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005046:	f7ff f915 	bl	8004274 <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005050:	f7ff f910 	bl	8004274 <HAL_GetTick>
 8005054:	0002      	movs	r2, r0
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e079      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005062:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	049b      	lsls	r3, r3, #18
 800506a:	4013      	ands	r3, r2
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800506e:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	220f      	movs	r2, #15
 8005074:	4393      	bics	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4b38      	ldr	r3, [pc, #224]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 800507e:	430a      	orrs	r2, r1
 8005080:	62da      	str	r2, [r3, #44]	; 0x2c
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a3a      	ldr	r2, [pc, #232]	; (8005170 <HAL_RCC_OscConfig+0x630>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	431a      	orrs	r2, r3
 8005096:	4b32      	ldr	r3, [pc, #200]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 80050a2:	2180      	movs	r1, #128	; 0x80
 80050a4:	0449      	lsls	r1, r1, #17
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050aa:	f7ff f8e3 	bl	8004274 <HAL_GetTick>
 80050ae:	0003      	movs	r3, r0
 80050b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050b4:	f7ff f8de 	bl	8004274 <HAL_GetTick>
 80050b8:	0002      	movs	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e047      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050c6:	4b26      	ldr	r3, [pc, #152]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	049b      	lsls	r3, r3, #18
 80050ce:	4013      	ands	r3, r2
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x574>
 80050d2:	e03f      	b.n	8005154 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d4:	4b22      	ldr	r3, [pc, #136]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	4b21      	ldr	r3, [pc, #132]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 80050da:	4924      	ldr	r1, [pc, #144]	; (800516c <HAL_RCC_OscConfig+0x62c>)
 80050dc:	400a      	ands	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7ff f8c8 	bl	8004274 <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ea:	f7ff f8c3 	bl	8004274 <HAL_GetTick>
 80050ee:	0002      	movs	r2, r0
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e02c      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050fc:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	049b      	lsls	r3, r3, #18
 8005104:	4013      	ands	r3, r2
 8005106:	d1f0      	bne.n	80050ea <HAL_RCC_OscConfig+0x5aa>
 8005108:	e024      	b.n	8005154 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e01f      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <HAL_RCC_OscConfig+0x620>)
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	025b      	lsls	r3, r3, #9
 8005128:	401a      	ands	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	429a      	cmp	r2, r3
 8005130:	d10e      	bne.n	8005150 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	220f      	movs	r2, #15
 8005136:	401a      	ands	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	23f0      	movs	r3, #240	; 0xf0
 8005144:	039b      	lsls	r3, r3, #14
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	0018      	movs	r0, r3
 8005158:	46bd      	mov	sp, r7
 800515a:	b008      	add	sp, #32
 800515c:	bd80      	pop	{r7, pc}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	40021000 	.word	0x40021000
 8005164:	00001388 	.word	0x00001388
 8005168:	efffffff 	.word	0xefffffff
 800516c:	feffffff 	.word	0xfeffffff
 8005170:	ffc2ffff 	.word	0xffc2ffff

08005174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b3      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005188:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2201      	movs	r2, #1
 800518e:	4013      	ands	r3, r2
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d911      	bls.n	80051ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005196:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2201      	movs	r2, #1
 800519c:	4393      	bics	r3, r2
 800519e:	0019      	movs	r1, r3
 80051a0:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a8:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	4013      	ands	r3, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e09a      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2202      	movs	r2, #2
 80051c0:	4013      	ands	r3, r2
 80051c2:	d015      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2204      	movs	r2, #4
 80051ca:	4013      	ands	r3, r2
 80051cc:	d006      	beq.n	80051dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80051ce:	4b4b      	ldr	r3, [pc, #300]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	4b4a      	ldr	r3, [pc, #296]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80051d4:	21e0      	movs	r1, #224	; 0xe0
 80051d6:	00c9      	lsls	r1, r1, #3
 80051d8:	430a      	orrs	r2, r1
 80051da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051dc:	4b47      	ldr	r3, [pc, #284]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	22f0      	movs	r2, #240	; 0xf0
 80051e2:	4393      	bics	r3, r2
 80051e4:	0019      	movs	r1, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	4b44      	ldr	r3, [pc, #272]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	4013      	ands	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	4013      	ands	r3, r2
 800520c:	d114      	bne.n	8005238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06e      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	049b      	lsls	r3, r3, #18
 8005222:	4013      	ands	r3, r2
 8005224:	d108      	bne.n	8005238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e062      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2202      	movs	r2, #2
 8005230:	4013      	ands	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e05b      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005238:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	4393      	bics	r3, r2
 8005240:	0019      	movs	r1, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800524c:	f7ff f812 	bl	8004274 <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005254:	e009      	b.n	800526a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005256:	f7ff f80d 	bl	8004274 <HAL_GetTick>
 800525a:	0002      	movs	r2, r0
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	4a27      	ldr	r2, [pc, #156]	; (8005300 <HAL_RCC_ClockConfig+0x18c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e042      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	220c      	movs	r2, #12
 8005270:	401a      	ands	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1ec      	bne.n	8005256 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2201      	movs	r2, #1
 8005282:	4013      	ands	r3, r2
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d211      	bcs.n	80052ae <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2201      	movs	r2, #1
 8005290:	4393      	bics	r3, r2
 8005292:	0019      	movs	r1, r3
 8005294:	4b18      	ldr	r3, [pc, #96]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <HAL_RCC_ClockConfig+0x184>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e020      	b.n	80052f0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2204      	movs	r2, #4
 80052b4:	4013      	ands	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4a11      	ldr	r2, [pc, #68]	; (8005304 <HAL_RCC_ClockConfig+0x190>)
 80052be:	4013      	ands	r3, r2
 80052c0:	0019      	movs	r1, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80052c8:	430a      	orrs	r2, r1
 80052ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80052cc:	f000 f820 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052d0:	0001      	movs	r1, r0
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_RCC_ClockConfig+0x188>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	091b      	lsrs	r3, r3, #4
 80052d8:	220f      	movs	r2, #15
 80052da:	4013      	ands	r3, r2
 80052dc:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x194>)
 80052de:	5cd3      	ldrb	r3, [r2, r3]
 80052e0:	000a      	movs	r2, r1
 80052e2:	40da      	lsrs	r2, r3
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_ClockConfig+0x198>)
 80052e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7fe ff7d 	bl	80041e8 <HAL_InitTick>
  
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	0018      	movs	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b004      	add	sp, #16
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
 8005300:	00001388 	.word	0x00001388
 8005304:	fffff8ff 	.word	0xfffff8ff
 8005308:	0800a1bc 	.word	0x0800a1bc
 800530c:	20000000 	.word	0x20000000

08005310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b08f      	sub	sp, #60	; 0x3c
 8005314:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005316:	2314      	movs	r3, #20
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800531c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800531e:	c313      	stmia	r3!, {r0, r1, r4}
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	4a29      	ldr	r2, [pc, #164]	; (80053cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005328:	ca13      	ldmia	r2!, {r0, r1, r4}
 800532a:	c313      	stmia	r3!, {r0, r1, r4}
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005334:	2300      	movs	r3, #0
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
 8005338:	2300      	movs	r3, #0
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005344:	4b22      	ldr	r3, [pc, #136]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	220c      	movs	r2, #12
 800534e:	4013      	ands	r3, r2
 8005350:	2b04      	cmp	r3, #4
 8005352:	d002      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x4a>
 8005354:	2b08      	cmp	r3, #8
 8005356:	d003      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x50>
 8005358:	e02d      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800535e:	e02d      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	0c9b      	lsrs	r3, r3, #18
 8005364:	220f      	movs	r2, #15
 8005366:	4013      	ands	r3, r2
 8005368:	2214      	movs	r2, #20
 800536a:	18ba      	adds	r2, r7, r2
 800536c:	5cd3      	ldrb	r3, [r2, r3]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005370:	4b17      	ldr	r3, [pc, #92]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	220f      	movs	r2, #15
 8005376:	4013      	ands	r3, r2
 8005378:	1d3a      	adds	r2, r7, #4
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	025b      	lsls	r3, r3, #9
 8005384:	4013      	ands	r3, r2
 8005386:	d009      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800538a:	4812      	ldr	r0, [pc, #72]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800538c:	f7fa fed8 	bl	8000140 <__udivsi3>
 8005390:	0003      	movs	r3, r0
 8005392:	001a      	movs	r2, r3
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	4353      	muls	r3, r2
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	e009      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800539c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800539e:	000a      	movs	r2, r1
 80053a0:	0152      	lsls	r2, r2, #5
 80053a2:	1a52      	subs	r2, r2, r1
 80053a4:	0193      	lsls	r3, r2, #6
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	185b      	adds	r3, r3, r1
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80053b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053b4:	e002      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80053ba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b00f      	add	sp, #60	; 0x3c
 80053c4:	bd90      	pop	{r4, r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	0800a11c 	.word	0x0800a11c
 80053cc:	0800a12c 	.word	0x0800a12c
 80053d0:	40021000 	.word	0x40021000
 80053d4:	007a1200 	.word	0x007a1200

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	0018      	movs	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	20000000 	.word	0x20000000

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80053f0:	f7ff fff2 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f4:	0001      	movs	r1, r0
 80053f6:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	2207      	movs	r2, #7
 80053fe:	4013      	ands	r3, r2
 8005400:	4a04      	ldr	r2, [pc, #16]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005402:	5cd3      	ldrb	r3, [r2, r3]
 8005404:	40d9      	lsrs	r1, r3
 8005406:	000b      	movs	r3, r1
}    
 8005408:	0018      	movs	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	40021000 	.word	0x40021000
 8005414:	0800a1cc 	.word	0x0800a1cc

08005418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0a8      	b.n	800557c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d109      	bne.n	8005446 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	2382      	movs	r3, #130	; 0x82
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	429a      	cmp	r2, r3
 800543c:	d009      	beq.n	8005452 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	61da      	str	r2, [r3, #28]
 8005444:	e005      	b.n	8005452 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	225d      	movs	r2, #93	; 0x5d
 800545c:	5c9b      	ldrb	r3, [r3, r2]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d107      	bne.n	8005474 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	225c      	movs	r2, #92	; 0x5c
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0018      	movs	r0, r3
 8005470:	f7fe fc8c 	bl	8003d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	225d      	movs	r2, #93	; 0x5d
 8005478:	2102      	movs	r1, #2
 800547a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2140      	movs	r1, #64	; 0x40
 8005488:	438a      	bics	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	23e0      	movs	r3, #224	; 0xe0
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	429a      	cmp	r2, r3
 8005496:	d902      	bls.n	800549e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e002      	b.n	80054a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	015b      	lsls	r3, r3, #5
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	23f0      	movs	r3, #240	; 0xf0
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d008      	beq.n	80054c2 <HAL_SPI_Init+0xaa>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	23e0      	movs	r3, #224	; 0xe0
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	2382      	movs	r3, #130	; 0x82
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	401a      	ands	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	2384      	movs	r3, #132	; 0x84
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	400b      	ands	r3, r1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2102      	movs	r1, #2
 80054de:	400b      	ands	r3, r1
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2101      	movs	r1, #1
 80054e8:	400b      	ands	r3, r1
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6999      	ldr	r1, [r3, #24]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	400b      	ands	r3, r1
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	2138      	movs	r1, #56	; 0x38
 80054fe:	400b      	ands	r3, r1
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	400b      	ands	r3, r1
 800550a:	431a      	orrs	r2, r3
 800550c:	0011      	movs	r1, r2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	019b      	lsls	r3, r3, #6
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	0c1b      	lsrs	r3, r3, #16
 8005526:	2204      	movs	r2, #4
 8005528:	401a      	ands	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2110      	movs	r1, #16
 8005530:	400b      	ands	r3, r1
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	2108      	movs	r1, #8
 800553a:	400b      	ands	r3, r1
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68d9      	ldr	r1, [r3, #12]
 8005542:	23f0      	movs	r3, #240	; 0xf0
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	400b      	ands	r3, r1
 8005548:	431a      	orrs	r2, r3
 800554a:	0011      	movs	r1, r2
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	015b      	lsls	r3, r3, #5
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4907      	ldr	r1, [pc, #28]	; (8005584 <HAL_SPI_Init+0x16c>)
 8005568:	400a      	ands	r2, r1
 800556a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	225d      	movs	r2, #93	; 0x5d
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b004      	add	sp, #16
 8005582:	bd80      	pop	{r7, pc}
 8005584:	fffff7ff 	.word	0xfffff7ff

08005588 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	1dbb      	adds	r3, r7, #6
 8005596:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005598:	231f      	movs	r3, #31
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	225c      	movs	r2, #92	; 0x5c
 80055a4:	5c9b      	ldrb	r3, [r3, r2]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Transmit+0x26>
 80055aa:	2302      	movs	r3, #2
 80055ac:	e140      	b.n	8005830 <HAL_SPI_Transmit+0x2a8>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	225c      	movs	r2, #92	; 0x5c
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b6:	f7fe fe5d 	bl	8004274 <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055be:	2316      	movs	r3, #22
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	1dba      	adds	r2, r7, #6
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	225d      	movs	r2, #93	; 0x5d
 80055cc:	5c9b      	ldrb	r3, [r3, r2]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d004      	beq.n	80055de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80055d4:	231f      	movs	r3, #31
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2202      	movs	r2, #2
 80055da:	701a      	strb	r2, [r3, #0]
    goto error;
 80055dc:	e11d      	b.n	800581a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_SPI_Transmit+0x64>
 80055e4:	1dbb      	adds	r3, r7, #6
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d104      	bne.n	80055f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80055ec:	231f      	movs	r3, #31
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80055f4:	e111      	b.n	800581a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	225d      	movs	r2, #93	; 0x5d
 80055fa:	2103      	movs	r1, #3
 80055fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1dba      	adds	r2, r7, #6
 800560e:	8812      	ldrh	r2, [r2, #0]
 8005610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1dba      	adds	r2, r7, #6
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2244      	movs	r2, #68	; 0x44
 8005624:	2100      	movs	r1, #0
 8005626:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2246      	movs	r2, #70	; 0x46
 800562c:	2100      	movs	r1, #0
 800562e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	429a      	cmp	r2, r3
 8005646:	d110      	bne.n	800566a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2140      	movs	r1, #64	; 0x40
 8005654:	438a      	bics	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2180      	movs	r1, #128	; 0x80
 8005664:	01c9      	lsls	r1, r1, #7
 8005666:	430a      	orrs	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	4013      	ands	r3, r2
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d007      	beq.n	8005688 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2140      	movs	r1, #64	; 0x40
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	23e0      	movs	r3, #224	; 0xe0
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	429a      	cmp	r2, r3
 8005692:	d94e      	bls.n	8005732 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d004      	beq.n	80056a6 <HAL_SPI_Transmit+0x11e>
 800569c:	2316      	movs	r3, #22
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d13f      	bne.n	8005726 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	1c9a      	adds	r2, r3, #2
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ca:	e02c      	b.n	8005726 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d112      	bne.n	8005700 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fe:	e012      	b.n	8005726 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005700:	f7fe fdb8 	bl	8004274 <HAL_GetTick>
 8005704:	0002      	movs	r2, r0
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d802      	bhi.n	8005716 <HAL_SPI_Transmit+0x18e>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x194>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800571c:	231f      	movs	r3, #31
 800571e:	18fb      	adds	r3, r7, r3
 8005720:	2203      	movs	r2, #3
 8005722:	701a      	strb	r2, [r3, #0]
          goto error;
 8005724:	e079      	b.n	800581a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1cd      	bne.n	80056cc <HAL_SPI_Transmit+0x144>
 8005730:	e04f      	b.n	80057d2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <HAL_SPI_Transmit+0x1bc>
 800573a:	2316      	movs	r3, #22
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d141      	bne.n	80057c8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800576a:	e02d      	b.n	80057c8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2202      	movs	r2, #2
 8005774:	4013      	ands	r3, r2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d113      	bne.n	80057a2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057a0:	e012      	b.n	80057c8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a2:	f7fe fd67 	bl	8004274 <HAL_GetTick>
 80057a6:	0002      	movs	r2, r0
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d802      	bhi.n	80057b8 <HAL_SPI_Transmit+0x230>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	d102      	bne.n	80057be <HAL_SPI_Transmit+0x236>
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80057be:	231f      	movs	r3, #31
 80057c0:	18fb      	adds	r3, r7, r3
 80057c2:	2203      	movs	r2, #3
 80057c4:	701a      	strb	r2, [r3, #0]
          goto error;
 80057c6:	e028      	b.n	800581a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1cc      	bne.n	800576c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 fcd9 	bl	8006190 <SPI_EndRxTxTransaction>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580a:	2b00      	cmp	r3, #0
 800580c:	d004      	beq.n	8005818 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800580e:	231f      	movs	r3, #31
 8005810:	18fb      	adds	r3, r7, r3
 8005812:	2201      	movs	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e000      	b.n	800581a <HAL_SPI_Transmit+0x292>
  }

error:
 8005818:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	225d      	movs	r2, #93	; 0x5d
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	225c      	movs	r2, #92	; 0x5c
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800582a:	231f      	movs	r3, #31
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	781b      	ldrb	r3, [r3, #0]
}
 8005830:	0018      	movs	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	b008      	add	sp, #32
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	1dbb      	adds	r3, r7, #6
 8005846:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005848:	2317      	movs	r3, #23
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	2382      	movs	r3, #130	; 0x82
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	429a      	cmp	r2, r3
 800585a:	d113      	bne.n	8005884 <HAL_SPI_Receive+0x4c>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10f      	bne.n	8005884 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	225d      	movs	r2, #93	; 0x5d
 8005868:	2104      	movs	r1, #4
 800586a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800586c:	1dbb      	adds	r3, r7, #6
 800586e:	881c      	ldrh	r4, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	0023      	movs	r3, r4
 800587c:	f000 f928 	bl	8005ad0 <HAL_SPI_TransmitReceive>
 8005880:	0003      	movs	r3, r0
 8005882:	e11c      	b.n	8005abe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	225c      	movs	r2, #92	; 0x5c
 8005888:	5c9b      	ldrb	r3, [r3, r2]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Receive+0x5a>
 800588e:	2302      	movs	r3, #2
 8005890:	e115      	b.n	8005abe <HAL_SPI_Receive+0x286>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	225c      	movs	r2, #92	; 0x5c
 8005896:	2101      	movs	r1, #1
 8005898:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589a:	f7fe fceb 	bl	8004274 <HAL_GetTick>
 800589e:	0003      	movs	r3, r0
 80058a0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	225d      	movs	r2, #93	; 0x5d
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d004      	beq.n	80058b8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80058ae:	2317      	movs	r3, #23
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2202      	movs	r2, #2
 80058b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80058b6:	e0f7      	b.n	8005aa8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_SPI_Receive+0x8e>
 80058be:	1dbb      	adds	r3, r7, #6
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80058c6:	2317      	movs	r3, #23
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80058ce:	e0eb      	b.n	8005aa8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	225d      	movs	r2, #93	; 0x5d
 80058d4:	2104      	movs	r1, #4
 80058d6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	1dba      	adds	r2, r7, #6
 80058e8:	2144      	movs	r1, #68	; 0x44
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1dba      	adds	r2, r7, #6
 80058f2:	2146      	movs	r1, #70	; 0x46
 80058f4:	8812      	ldrh	r2, [r2, #0]
 80058f6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	23e0      	movs	r3, #224	; 0xe0
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	429a      	cmp	r2, r3
 8005920:	d908      	bls.n	8005934 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4966      	ldr	r1, [pc, #408]	; (8005ac8 <HAL_SPI_Receive+0x290>)
 800592e:	400a      	ands	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	e008      	b.n	8005946 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2180      	movs	r1, #128	; 0x80
 8005940:	0149      	lsls	r1, r1, #5
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	2380      	movs	r3, #128	; 0x80
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	429a      	cmp	r2, r3
 8005950:	d10f      	bne.n	8005972 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2140      	movs	r1, #64	; 0x40
 800595e:	438a      	bics	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4957      	ldr	r1, [pc, #348]	; (8005acc <HAL_SPI_Receive+0x294>)
 800596e:	400a      	ands	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2240      	movs	r2, #64	; 0x40
 800597a:	4013      	ands	r3, r2
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d007      	beq.n	8005990 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2140      	movs	r1, #64	; 0x40
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	23e0      	movs	r3, #224	; 0xe0
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	429a      	cmp	r2, r3
 800599a:	d900      	bls.n	800599e <HAL_SPI_Receive+0x166>
 800599c:	e069      	b.n	8005a72 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800599e:	e031      	b.n	8005a04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2201      	movs	r2, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d117      	bne.n	80059de <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	001a      	movs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2246      	movs	r2, #70	; 0x46
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b299      	uxth	r1, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2246      	movs	r2, #70	; 0x46
 80059da:	5299      	strh	r1, [r3, r2]
 80059dc:	e012      	b.n	8005a04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059de:	f7fe fc49 	bl	8004274 <HAL_GetTick>
 80059e2:	0002      	movs	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d802      	bhi.n	80059f4 <HAL_SPI_Receive+0x1bc>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	d102      	bne.n	80059fa <HAL_SPI_Receive+0x1c2>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80059fa:	2317      	movs	r3, #23
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	2203      	movs	r2, #3
 8005a00:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a02:	e051      	b.n	8005aa8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2246      	movs	r2, #70	; 0x46
 8005a08:	5a9b      	ldrh	r3, [r3, r2]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1c7      	bne.n	80059a0 <HAL_SPI_Receive+0x168>
 8005a10:	e035      	b.n	8005a7e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d115      	bne.n	8005a4c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2246      	movs	r2, #70	; 0x46
 8005a3c:	5a9b      	ldrh	r3, [r3, r2]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b299      	uxth	r1, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2246      	movs	r2, #70	; 0x46
 8005a48:	5299      	strh	r1, [r3, r2]
 8005a4a:	e012      	b.n	8005a72 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4c:	f7fe fc12 	bl	8004274 <HAL_GetTick>
 8005a50:	0002      	movs	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d802      	bhi.n	8005a62 <HAL_SPI_Receive+0x22a>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Receive+0x230>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005a68:	2317      	movs	r3, #23
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2203      	movs	r2, #3
 8005a6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a70:	e01a      	b.n	8005aa8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2246      	movs	r2, #70	; 0x46
 8005a76:	5a9b      	ldrh	r3, [r3, r2]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1c9      	bne.n	8005a12 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0018      	movs	r0, r3
 8005a86:	f000 fb25 	bl	80060d4 <SPI_EndRxTransaction>
 8005a8a:	1e03      	subs	r3, r0, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005a9c:	2317      	movs	r3, #23
 8005a9e:	18fb      	adds	r3, r7, r3
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e000      	b.n	8005aa8 <HAL_SPI_Receive+0x270>
  }

error :
 8005aa6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	225d      	movs	r2, #93	; 0x5d
 8005aac:	2101      	movs	r1, #1
 8005aae:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	225c      	movs	r2, #92	; 0x5c
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005ab8:	2317      	movs	r3, #23
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	781b      	ldrb	r3, [r3, #0]
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b007      	add	sp, #28
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	ffffefff 	.word	0xffffefff
 8005acc:	ffffbfff 	.word	0xffffbfff

08005ad0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	001a      	movs	r2, r3
 8005ade:	1cbb      	adds	r3, r7, #2
 8005ae0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ae6:	2323      	movs	r3, #35	; 0x23
 8005ae8:	18fb      	adds	r3, r7, r3
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	225c      	movs	r2, #92	; 0x5c
 8005af2:	5c9b      	ldrb	r3, [r3, r2]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_SPI_TransmitReceive+0x2c>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e1b5      	b.n	8005e68 <HAL_SPI_TransmitReceive+0x398>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	225c      	movs	r2, #92	; 0x5c
 8005b00:	2101      	movs	r1, #1
 8005b02:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b04:	f7fe fbb6 	bl	8004274 <HAL_GetTick>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b0c:	201b      	movs	r0, #27
 8005b0e:	183b      	adds	r3, r7, r0
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	215d      	movs	r1, #93	; 0x5d
 8005b14:	5c52      	ldrb	r2, [r2, r1]
 8005b16:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005b1e:	2312      	movs	r3, #18
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	1cba      	adds	r2, r7, #2
 8005b24:	8812      	ldrh	r2, [r2, #0]
 8005b26:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b28:	183b      	adds	r3, r7, r0
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d011      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x84>
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	2382      	movs	r3, #130	; 0x82
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d107      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x7a>
 8005b42:	183b      	adds	r3, r7, r0
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d004      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005b4a:	2323      	movs	r3, #35	; 0x23
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	2202      	movs	r2, #2
 8005b50:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b52:	e17e      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d006      	beq.n	8005b68 <HAL_SPI_TransmitReceive+0x98>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_SPI_TransmitReceive+0x98>
 8005b60:	1cbb      	adds	r3, r7, #2
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d104      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005b68:	2323      	movs	r3, #35	; 0x23
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b70:	e16f      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	225d      	movs	r2, #93	; 0x5d
 8005b76:	5c9b      	ldrb	r3, [r3, r2]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d003      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	225d      	movs	r2, #93	; 0x5d
 8005b82:	2105      	movs	r1, #5
 8005b84:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1cba      	adds	r2, r7, #2
 8005b96:	2146      	movs	r1, #70	; 0x46
 8005b98:	8812      	ldrh	r2, [r2, #0]
 8005b9a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1cba      	adds	r2, r7, #2
 8005ba0:	2144      	movs	r1, #68	; 0x44
 8005ba2:	8812      	ldrh	r2, [r2, #0]
 8005ba4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1cba      	adds	r2, r7, #2
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1cba      	adds	r2, r7, #2
 8005bb8:	8812      	ldrh	r2, [r2, #0]
 8005bba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	23e0      	movs	r3, #224	; 0xe0
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d908      	bls.n	8005be6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	49a4      	ldr	r1, [pc, #656]	; (8005e70 <HAL_SPI_TransmitReceive+0x3a0>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	e008      	b.n	8005bf8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	0149      	lsls	r1, r1, #5
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2240      	movs	r2, #64	; 0x40
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d007      	beq.n	8005c16 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	23e0      	movs	r3, #224	; 0xe0
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d800      	bhi.n	8005c24 <HAL_SPI_TransmitReceive+0x154>
 8005c22:	e07f      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x168>
 8005c2c:	2312      	movs	r3, #18
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d000      	beq.n	8005c38 <HAL_SPI_TransmitReceive+0x168>
 8005c36:	e069      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	881a      	ldrh	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	1c9a      	adds	r2, r3, #2
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c5c:	e056      	b.n	8005d0c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2202      	movs	r2, #2
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d4>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d4>
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d113      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d11c      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x21c>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2246      	movs	r2, #70	; 0x46
 8005cb6:	5a9b      	ldrh	r3, [r3, r2]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2246      	movs	r2, #70	; 0x46
 8005cda:	5a9b      	ldrh	r3, [r3, r2]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b299      	uxth	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2246      	movs	r2, #70	; 0x46
 8005ce6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cec:	f7fe fac2 	bl	8004274 <HAL_GetTick>
 8005cf0:	0002      	movs	r2, r0
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d807      	bhi.n	8005d0c <HAL_SPI_TransmitReceive+0x23c>
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3301      	adds	r3, #1
 8005d00:	d004      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005d02:	2323      	movs	r3, #35	; 0x23
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2203      	movs	r2, #3
 8005d08:	701a      	strb	r2, [r3, #0]
        goto error;
 8005d0a:	e0a2      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1a3      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x18e>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2246      	movs	r2, #70	; 0x46
 8005d1a:	5a9b      	ldrh	r3, [r3, r2]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d19d      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x18e>
 8005d22:	e085      	b.n	8005e30 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x268>
 8005d2c:	2312      	movs	r3, #18
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d000      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x268>
 8005d36:	e070      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d5e:	e05c      	b.n	8005e1a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2202      	movs	r2, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d11c      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x2d8>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <HAL_SPI_TransmitReceive+0x2d8>
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d114      	bne.n	8005da8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2201      	movs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d11e      	bne.n	8005df4 <HAL_SPI_TransmitReceive+0x324>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2246      	movs	r2, #70	; 0x46
 8005dba:	5a9b      	ldrh	r3, [r3, r2]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d018      	beq.n	8005df4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	001a      	movs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2246      	movs	r2, #70	; 0x46
 8005de2:	5a9b      	ldrh	r3, [r3, r2]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b299      	uxth	r1, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2246      	movs	r2, #70	; 0x46
 8005dee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005df4:	f7fe fa3e 	bl	8004274 <HAL_GetTick>
 8005df8:	0002      	movs	r2, r0
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d802      	bhi.n	8005e0a <HAL_SPI_TransmitReceive+0x33a>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	3301      	adds	r3, #1
 8005e08:	d102      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x340>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005e10:	2323      	movs	r3, #35	; 0x23
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	2203      	movs	r2, #3
 8005e16:	701a      	strb	r2, [r3, #0]
        goto error;
 8005e18:	e01b      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d19d      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x290>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2246      	movs	r2, #70	; 0x46
 8005e28:	5a9b      	ldrh	r3, [r3, r2]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d197      	bne.n	8005d60 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 f9aa 	bl	8006190 <SPI_EndRxTxTransaction>
 8005e3c:	1e03      	subs	r3, r0, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005e40:	2323      	movs	r3, #35	; 0x23
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005e4e:	e000      	b.n	8005e52 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005e50:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	225d      	movs	r2, #93	; 0x5d
 8005e56:	2101      	movs	r1, #1
 8005e58:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	225c      	movs	r2, #92	; 0x5c
 8005e5e:	2100      	movs	r1, #0
 8005e60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005e62:	2323      	movs	r3, #35	; 0x23
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	781b      	ldrb	r3, [r3, #0]
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b00a      	add	sp, #40	; 0x28
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	ffffefff 	.word	0xffffefff

08005e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	1dfb      	adds	r3, r7, #7
 8005e82:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e84:	f7fe f9f6 	bl	8004274 <HAL_GetTick>
 8005e88:	0002      	movs	r2, r0
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	18d3      	adds	r3, r2, r3
 8005e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e94:	f7fe f9ee 	bl	8004274 <HAL_GetTick>
 8005e98:	0003      	movs	r3, r0
 8005e9a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	015b      	lsls	r3, r3, #5
 8005ea2:	0d1b      	lsrs	r3, r3, #20
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	4353      	muls	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eaa:	e058      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	d055      	beq.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eb2:	f7fe f9df 	bl	8004274 <HAL_GetTick>
 8005eb6:	0002      	movs	r2, r0
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d902      	bls.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d142      	bne.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	21e0      	movs	r1, #224	; 0xe0
 8005ed4:	438a      	bics	r2, r1
 8005ed6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	2382      	movs	r3, #130	; 0x82
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d113      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d005      	beq.n	8005efc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d107      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2140      	movs	r1, #64	; 0x40
 8005f08:	438a      	bics	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	019b      	lsls	r3, r3, #6
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d110      	bne.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	491a      	ldr	r1, [pc, #104]	; (8005f8c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005f24:	400a      	ands	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	0189      	lsls	r1, r1, #6
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	225d      	movs	r2, #93	; 0x5d
 8005f3e:	2101      	movs	r1, #1
 8005f40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	225c      	movs	r2, #92	; 0x5c
 8005f46:	2100      	movs	r1, #0
 8005f48:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e017      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	425a      	negs	r2, r3
 8005f6e:	4153      	adcs	r3, r2
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	001a      	movs	r2, r3
 8005f74:	1dfb      	adds	r3, r7, #7
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d197      	bne.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b008      	add	sp, #32
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	ffffdfff 	.word	0xffffdfff

08005f90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	; 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f9e:	2317      	movs	r3, #23
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005fa6:	f7fe f965 	bl	8004274 <HAL_GetTick>
 8005faa:	0002      	movs	r2, r0
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	18d3      	adds	r3, r2, r3
 8005fb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005fb6:	f7fe f95d 	bl	8004274 <HAL_GetTick>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	0013      	movs	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	189b      	adds	r3, r3, r2
 8005fd0:	00da      	lsls	r2, r3, #3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	0d1b      	lsrs	r3, r3, #20
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	4353      	muls	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fdc:	e068      	b.n	80060b0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	23c0      	movs	r3, #192	; 0xc0
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d10a      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	2117      	movs	r1, #23
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ffa:	187b      	adds	r3, r7, r1
 8005ffc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	d055      	beq.n	80060b0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006004:	f7fe f936 	bl	8004274 <HAL_GetTick>
 8006008:	0002      	movs	r2, r0
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006010:	429a      	cmp	r2, r3
 8006012:	d902      	bls.n	800601a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	2b00      	cmp	r3, #0
 8006018:	d142      	bne.n	80060a0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	21e0      	movs	r1, #224	; 0xe0
 8006026:	438a      	bics	r2, r1
 8006028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	2382      	movs	r3, #130	; 0x82
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	429a      	cmp	r2, r3
 8006034:	d113      	bne.n	800605e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	429a      	cmp	r2, r3
 8006040:	d005      	beq.n	800604e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	429a      	cmp	r2, r3
 800604c:	d107      	bne.n	800605e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	438a      	bics	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006062:	2380      	movs	r3, #128	; 0x80
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	429a      	cmp	r2, r3
 8006068:	d110      	bne.n	800608c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4916      	ldr	r1, [pc, #88]	; (80060d0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006076:	400a      	ands	r2, r1
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	0189      	lsls	r1, r1, #6
 8006088:	430a      	orrs	r2, r1
 800608a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	225d      	movs	r2, #93	; 0x5d
 8006090:	2101      	movs	r1, #1
 8006092:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	225c      	movs	r2, #92	; 0x5c
 8006098:	2100      	movs	r1, #0
 800609a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e010      	b.n	80060c2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d18e      	bne.n	8005fde <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b00a      	add	sp, #40	; 0x28
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	20000000 	.word	0x20000000
 80060d0:	ffffdfff 	.word	0xffffdfff

080060d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	2382      	movs	r3, #130	; 0x82
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d113      	bne.n	8006114 <SPI_EndRxTransaction+0x40>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	2380      	movs	r3, #128	; 0x80
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d005      	beq.n	8006104 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	438a      	bics	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006114:	68ba      	ldr	r2, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0013      	movs	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	2180      	movs	r1, #128	; 0x80
 8006122:	f7ff fea7 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d007      	beq.n	800613a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	2220      	movs	r2, #32
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e026      	b.n	8006188 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	2382      	movs	r3, #130	; 0x82
 8006140:	005b      	lsls	r3, r3, #1
 8006142:	429a      	cmp	r2, r3
 8006144:	d11f      	bne.n	8006186 <SPI_EndRxTransaction+0xb2>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	429a      	cmp	r2, r3
 8006150:	d005      	beq.n	800615e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	429a      	cmp	r2, r3
 800615c:	d113      	bne.n	8006186 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	23c0      	movs	r3, #192	; 0xc0
 8006162:	00d9      	lsls	r1, r3, #3
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	0013      	movs	r3, r2
 800616c:	2200      	movs	r2, #0
 800616e:	f7ff ff0f 	bl	8005f90 <SPI_WaitFifoStateUntilTimeout>
 8006172:	1e03      	subs	r3, r0, #0
 8006174:	d007      	beq.n	8006186 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617a:	2220      	movs	r2, #32
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e000      	b.n	8006188 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}

08006190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	23c0      	movs	r3, #192	; 0xc0
 80061a0:	0159      	lsls	r1, r3, #5
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	0013      	movs	r3, r2
 80061aa:	2200      	movs	r2, #0
 80061ac:	f7ff fef0 	bl	8005f90 <SPI_WaitFifoStateUntilTimeout>
 80061b0:	1e03      	subs	r3, r0, #0
 80061b2:	d007      	beq.n	80061c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b8:	2220      	movs	r2, #32
 80061ba:	431a      	orrs	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e027      	b.n	8006214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	0013      	movs	r3, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	2180      	movs	r1, #128	; 0x80
 80061d2:	f7ff fe4f 	bl	8005e74 <SPI_WaitFlagStateUntilTimeout>
 80061d6:	1e03      	subs	r3, r0, #0
 80061d8:	d007      	beq.n	80061ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061de:	2220      	movs	r2, #32
 80061e0:	431a      	orrs	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e014      	b.n	8006214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	23c0      	movs	r3, #192	; 0xc0
 80061ee:	00d9      	lsls	r1, r3, #3
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	0013      	movs	r3, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	f7ff fec9 	bl	8005f90 <SPI_WaitFifoStateUntilTimeout>
 80061fe:	1e03      	subs	r3, r0, #0
 8006200:	d007      	beq.n	8006212 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006206:	2220      	movs	r2, #32
 8006208:	431a      	orrs	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e000      	b.n	8006214 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b004      	add	sp, #16
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e044      	b.n	80062b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2274      	movs	r2, #116	; 0x74
 800623a:	2100      	movs	r1, #0
 800623c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	0018      	movs	r0, r3
 8006242:	f7fd fdef 	bl	8003e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2101      	movs	r1, #1
 8006258:	438a      	bics	r2, r1
 800625a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0018      	movs	r0, r3
 8006260:	f000 fbce 	bl	8006a00 <UART_SetConfig>
 8006264:	0003      	movs	r3, r0
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e024      	b.n	80062b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fd01 	bl	8006c80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	490d      	ldr	r1, [pc, #52]	; (80062c0 <HAL_UART_Init+0xa4>)
 800628a:	400a      	ands	r2, r1
 800628c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	212a      	movs	r1, #42	; 0x2a
 800629a:	438a      	bics	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2101      	movs	r1, #1
 80062aa:	430a      	orrs	r2, r1
 80062ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 fd99 	bl	8006de8 <UART_CheckIdleState>
 80062b6:	0003      	movs	r3, r0
}
 80062b8:	0018      	movs	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	ffffb7ff 	.word	0xffffb7ff

080062c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	1dbb      	adds	r3, r7, #6
 80062d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d000      	beq.n	80062de <HAL_UART_Transmit+0x1a>
 80062dc:	e096      	b.n	800640c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_UART_Transmit+0x28>
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e08e      	b.n	800640e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	015b      	lsls	r3, r3, #5
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d109      	bne.n	8006310 <HAL_UART_Transmit+0x4c>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2201      	movs	r2, #1
 8006308:	4013      	ands	r3, r2
 800630a:	d001      	beq.n	8006310 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e07e      	b.n	800640e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2274      	movs	r2, #116	; 0x74
 8006314:	5c9b      	ldrb	r3, [r3, r2]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_UART_Transmit+0x5a>
 800631a:	2302      	movs	r3, #2
 800631c:	e077      	b.n	800640e <HAL_UART_Transmit+0x14a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2274      	movs	r2, #116	; 0x74
 8006322:	2101      	movs	r1, #1
 8006324:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	2100      	movs	r1, #0
 800632c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2221      	movs	r2, #33	; 0x21
 8006332:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006334:	f7fd ff9e 	bl	8004274 <HAL_GetTick>
 8006338:	0003      	movs	r3, r0
 800633a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1dba      	adds	r2, r7, #6
 8006340:	2150      	movs	r1, #80	; 0x50
 8006342:	8812      	ldrh	r2, [r2, #0]
 8006344:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1dba      	adds	r2, r7, #6
 800634a:	2152      	movs	r1, #82	; 0x52
 800634c:	8812      	ldrh	r2, [r2, #0]
 800634e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	015b      	lsls	r3, r3, #5
 8006358:	429a      	cmp	r2, r3
 800635a:	d108      	bne.n	800636e <HAL_UART_Transmit+0xaa>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e003      	b.n	8006376 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2274      	movs	r2, #116	; 0x74
 800637a:	2100      	movs	r1, #0
 800637c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800637e:	e02d      	b.n	80063dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	0013      	movs	r3, r2
 800638a:	2200      	movs	r2, #0
 800638c:	2180      	movs	r1, #128	; 0x80
 800638e:	f000 fd73 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d001      	beq.n	800639a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e039      	b.n	800640e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	881a      	ldrh	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	05d2      	lsls	r2, r2, #23
 80063aa:	0dd2      	lsrs	r2, r2, #23
 80063ac:	b292      	uxth	r2, r2
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	3302      	adds	r3, #2
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e008      	b.n	80063ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	b292      	uxth	r2, r2
 80063c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	3301      	adds	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2252      	movs	r2, #82	; 0x52
 80063ce:	5a9b      	ldrh	r3, [r3, r2]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b299      	uxth	r1, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2252      	movs	r2, #82	; 0x52
 80063da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2252      	movs	r2, #82	; 0x52
 80063e0:	5a9b      	ldrh	r3, [r3, r2]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1cb      	bne.n	8006380 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	0013      	movs	r3, r2
 80063f2:	2200      	movs	r2, #0
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	f000 fd3f 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 80063fa:	1e03      	subs	r3, r0, #0
 80063fc:	d001      	beq.n	8006402 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e005      	b.n	800640e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b008      	add	sp, #32
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006418:	b590      	push	{r4, r7, lr}
 800641a:	b0ab      	sub	sp, #172	; 0xac
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	22a4      	movs	r2, #164	; 0xa4
 8006428:	18b9      	adds	r1, r7, r2
 800642a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	20a0      	movs	r0, #160	; 0xa0
 8006434:	1839      	adds	r1, r7, r0
 8006436:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	219c      	movs	r1, #156	; 0x9c
 8006440:	1879      	adds	r1, r7, r1
 8006442:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006444:	0011      	movs	r1, r2
 8006446:	18bb      	adds	r3, r7, r2
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a99      	ldr	r2, [pc, #612]	; (80066b0 <HAL_UART_IRQHandler+0x298>)
 800644c:	4013      	ands	r3, r2
 800644e:	2298      	movs	r2, #152	; 0x98
 8006450:	18bc      	adds	r4, r7, r2
 8006452:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006454:	18bb      	adds	r3, r7, r2
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800645c:	187b      	adds	r3, r7, r1
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2220      	movs	r2, #32
 8006462:	4013      	ands	r3, r2
 8006464:	d00f      	beq.n	8006486 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006466:	183b      	adds	r3, r7, r0
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2220      	movs	r2, #32
 800646c:	4013      	ands	r3, r2
 800646e:	d00a      	beq.n	8006486 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006474:	2b00      	cmp	r3, #0
 8006476:	d100      	bne.n	800647a <HAL_UART_IRQHandler+0x62>
 8006478:	e296      	b.n	80069a8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	0010      	movs	r0, r2
 8006482:	4798      	blx	r3
      }
      return;
 8006484:	e290      	b.n	80069a8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006486:	2398      	movs	r3, #152	; 0x98
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d100      	bne.n	8006492 <HAL_UART_IRQHandler+0x7a>
 8006490:	e114      	b.n	80066bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006492:	239c      	movs	r3, #156	; 0x9c
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2201      	movs	r2, #1
 800649a:	4013      	ands	r3, r2
 800649c:	d106      	bne.n	80064ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800649e:	23a0      	movs	r3, #160	; 0xa0
 80064a0:	18fb      	adds	r3, r7, r3
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a83      	ldr	r2, [pc, #524]	; (80066b4 <HAL_UART_IRQHandler+0x29c>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	d100      	bne.n	80064ac <HAL_UART_IRQHandler+0x94>
 80064aa:	e107      	b.n	80066bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064ac:	23a4      	movs	r3, #164	; 0xa4
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2201      	movs	r2, #1
 80064b4:	4013      	ands	r3, r2
 80064b6:	d012      	beq.n	80064de <HAL_UART_IRQHandler+0xc6>
 80064b8:	23a0      	movs	r3, #160	; 0xa0
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4013      	ands	r3, r2
 80064c4:	d00b      	beq.n	80064de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2201      	movs	r2, #1
 80064cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	589b      	ldr	r3, [r3, r2]
 80064d4:	2201      	movs	r2, #1
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064de:	23a4      	movs	r3, #164	; 0xa4
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2202      	movs	r2, #2
 80064e6:	4013      	ands	r3, r2
 80064e8:	d011      	beq.n	800650e <HAL_UART_IRQHandler+0xf6>
 80064ea:	239c      	movs	r3, #156	; 0x9c
 80064ec:	18fb      	adds	r3, r7, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2201      	movs	r2, #1
 80064f2:	4013      	ands	r3, r2
 80064f4:	d00b      	beq.n	800650e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2202      	movs	r2, #2
 80064fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2280      	movs	r2, #128	; 0x80
 8006502:	589b      	ldr	r3, [r3, r2]
 8006504:	2204      	movs	r2, #4
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800650e:	23a4      	movs	r3, #164	; 0xa4
 8006510:	18fb      	adds	r3, r7, r3
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2204      	movs	r2, #4
 8006516:	4013      	ands	r3, r2
 8006518:	d011      	beq.n	800653e <HAL_UART_IRQHandler+0x126>
 800651a:	239c      	movs	r3, #156	; 0x9c
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	4013      	ands	r3, r2
 8006524:	d00b      	beq.n	800653e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2204      	movs	r2, #4
 800652c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2280      	movs	r2, #128	; 0x80
 8006532:	589b      	ldr	r3, [r3, r2]
 8006534:	2202      	movs	r2, #2
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800653e:	23a4      	movs	r3, #164	; 0xa4
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2208      	movs	r2, #8
 8006546:	4013      	ands	r3, r2
 8006548:	d017      	beq.n	800657a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800654a:	23a0      	movs	r3, #160	; 0xa0
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2220      	movs	r2, #32
 8006552:	4013      	ands	r3, r2
 8006554:	d105      	bne.n	8006562 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006556:	239c      	movs	r3, #156	; 0x9c
 8006558:	18fb      	adds	r3, r7, r3
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2201      	movs	r2, #1
 800655e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006560:	d00b      	beq.n	800657a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2208      	movs	r2, #8
 8006568:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	589b      	ldr	r3, [r3, r2]
 8006570:	2208      	movs	r2, #8
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2180      	movs	r1, #128	; 0x80
 8006578:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800657a:	23a4      	movs	r3, #164	; 0xa4
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	4013      	ands	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_UART_IRQHandler+0x198>
 8006588:	23a0      	movs	r3, #160	; 0xa0
 800658a:	18fb      	adds	r3, r7, r3
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	2380      	movs	r3, #128	; 0x80
 8006590:	04db      	lsls	r3, r3, #19
 8006592:	4013      	ands	r3, r2
 8006594:	d00c      	beq.n	80065b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2280      	movs	r2, #128	; 0x80
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	589b      	ldr	r3, [r3, r2]
 80065a6:	2220      	movs	r2, #32
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2180      	movs	r1, #128	; 0x80
 80065ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	589b      	ldr	r3, [r3, r2]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d100      	bne.n	80065bc <HAL_UART_IRQHandler+0x1a4>
 80065ba:	e1f7      	b.n	80069ac <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065bc:	23a4      	movs	r3, #164	; 0xa4
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2220      	movs	r2, #32
 80065c4:	4013      	ands	r3, r2
 80065c6:	d00e      	beq.n	80065e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065c8:	23a0      	movs	r3, #160	; 0xa0
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2220      	movs	r2, #32
 80065d0:	4013      	ands	r3, r2
 80065d2:	d008      	beq.n	80065e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	0010      	movs	r0, r2
 80065e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2280      	movs	r2, #128	; 0x80
 80065ea:	589b      	ldr	r3, [r3, r2]
 80065ec:	2194      	movs	r1, #148	; 0x94
 80065ee:	187a      	adds	r2, r7, r1
 80065f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	2240      	movs	r2, #64	; 0x40
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d004      	beq.n	800660a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006600:	187b      	adds	r3, r7, r1
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2228      	movs	r2, #40	; 0x28
 8006606:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006608:	d047      	beq.n	800669a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f000 fcf7 	bl	8007000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2240      	movs	r2, #64	; 0x40
 800661a:	4013      	ands	r3, r2
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d137      	bne.n	8006690 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006620:	f3ef 8310 	mrs	r3, PRIMASK
 8006624:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006628:	2090      	movs	r0, #144	; 0x90
 800662a:	183a      	adds	r2, r7, r0
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	2301      	movs	r3, #1
 8006630:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			; (mov r8, r8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	438a      	bics	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	183b      	adds	r3, r7, r0
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <HAL_UART_IRQHandler+0x2a0>)
 8006666:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	0018      	movs	r0, r3
 800666e:	f7fd ffd5 	bl	800461c <HAL_DMA_Abort_IT>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d01a      	beq.n	80066ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006680:	0018      	movs	r0, r3
 8006682:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e012      	b.n	80066ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 f9a5 	bl	80069d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668e:	e00d      	b.n	80066ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	0018      	movs	r0, r3
 8006694:	f000 f9a0 	bl	80069d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006698:	e008      	b.n	80066ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	0018      	movs	r0, r3
 800669e:	f000 f99b 	bl	80069d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2280      	movs	r2, #128	; 0x80
 80066a6:	2100      	movs	r1, #0
 80066a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80066aa:	e17f      	b.n	80069ac <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	46c0      	nop			; (mov r8, r8)
    return;
 80066ae:	e17d      	b.n	80069ac <HAL_UART_IRQHandler+0x594>
 80066b0:	0000080f 	.word	0x0000080f
 80066b4:	04000120 	.word	0x04000120
 80066b8:	080070c5 	.word	0x080070c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d000      	beq.n	80066c6 <HAL_UART_IRQHandler+0x2ae>
 80066c4:	e131      	b.n	800692a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066c6:	23a4      	movs	r3, #164	; 0xa4
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2210      	movs	r2, #16
 80066ce:	4013      	ands	r3, r2
 80066d0:	d100      	bne.n	80066d4 <HAL_UART_IRQHandler+0x2bc>
 80066d2:	e12a      	b.n	800692a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066d4:	23a0      	movs	r3, #160	; 0xa0
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2210      	movs	r2, #16
 80066dc:	4013      	ands	r3, r2
 80066de:	d100      	bne.n	80066e2 <HAL_UART_IRQHandler+0x2ca>
 80066e0:	e123      	b.n	800692a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2210      	movs	r2, #16
 80066e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2240      	movs	r2, #64	; 0x40
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d000      	beq.n	80066fa <HAL_UART_IRQHandler+0x2e2>
 80066f8:	e09b      	b.n	8006832 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	217e      	movs	r1, #126	; 0x7e
 8006704:	187b      	adds	r3, r7, r1
 8006706:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006708:	187b      	adds	r3, r7, r1
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d100      	bne.n	8006712 <HAL_UART_IRQHandler+0x2fa>
 8006710:	e14e      	b.n	80069b0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2258      	movs	r2, #88	; 0x58
 8006716:	5a9b      	ldrh	r3, [r3, r2]
 8006718:	187a      	adds	r2, r7, r1
 800671a:	8812      	ldrh	r2, [r2, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d300      	bcc.n	8006722 <HAL_UART_IRQHandler+0x30a>
 8006720:	e146      	b.n	80069b0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	187a      	adds	r2, r7, r1
 8006726:	215a      	movs	r1, #90	; 0x5a
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b20      	cmp	r3, #32
 8006734:	d06e      	beq.n	8006814 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006736:	f3ef 8310 	mrs	r3, PRIMASK
 800673a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006740:	2301      	movs	r3, #1
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	f383 8810 	msr	PRIMASK, r3
}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	499a      	ldr	r1, [pc, #616]	; (80069c0 <HAL_UART_IRQHandler+0x5a8>)
 8006758:	400a      	ands	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	f383 8810 	msr	PRIMASK, r3
}
 8006766:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006768:	f3ef 8310 	mrs	r3, PRIMASK
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800676e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006770:	677b      	str	r3, [r7, #116]	; 0x74
 8006772:	2301      	movs	r3, #1
 8006774:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2101      	movs	r1, #1
 800678a:	438a      	bics	r2, r1
 800678c:	609a      	str	r2, [r3, #8]
 800678e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006794:	f383 8810 	msr	PRIMASK, r3
}
 8006798:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800679a:	f3ef 8310 	mrs	r3, PRIMASK
 800679e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80067a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	673b      	str	r3, [r7, #112]	; 0x70
 80067a4:	2301      	movs	r3, #1
 80067a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2140      	movs	r1, #64	; 0x40
 80067bc:	438a      	bics	r2, r1
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c6:	f383 8810 	msr	PRIMASK, r3
}
 80067ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d8:	f3ef 8310 	mrs	r3, PRIMASK
 80067dc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80067de:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067e2:	2301      	movs	r3, #1
 80067e4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e8:	f383 8810 	msr	PRIMASK, r3
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2110      	movs	r1, #16
 80067fa:	438a      	bics	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006804:	f383 8810 	msr	PRIMASK, r3
}
 8006808:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	0018      	movs	r0, r3
 8006810:	f7fd fecc 	bl	80045ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2258      	movs	r2, #88	; 0x58
 8006818:	5a9a      	ldrh	r2, [r3, r2]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	215a      	movs	r1, #90	; 0x5a
 800681e:	5a5b      	ldrh	r3, [r3, r1]
 8006820:	b29b      	uxth	r3, r3
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0011      	movs	r1, r2
 800682a:	0018      	movs	r0, r3
 800682c:	f000 f8dc 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006830:	e0be      	b.n	80069b0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2258      	movs	r2, #88	; 0x58
 8006836:	5a99      	ldrh	r1, [r3, r2]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	225a      	movs	r2, #90	; 0x5a
 800683c:	5a9b      	ldrh	r3, [r3, r2]
 800683e:	b29a      	uxth	r2, r3
 8006840:	208e      	movs	r0, #142	; 0x8e
 8006842:	183b      	adds	r3, r7, r0
 8006844:	1a8a      	subs	r2, r1, r2
 8006846:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	225a      	movs	r2, #90	; 0x5a
 800684c:	5a9b      	ldrh	r3, [r3, r2]
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d100      	bne.n	8006856 <HAL_UART_IRQHandler+0x43e>
 8006854:	e0ae      	b.n	80069b4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006856:	183b      	adds	r3, r7, r0
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d100      	bne.n	8006860 <HAL_UART_IRQHandler+0x448>
 800685e:	e0a9      	b.n	80069b4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006860:	f3ef 8310 	mrs	r3, PRIMASK
 8006864:	60fb      	str	r3, [r7, #12]
  return(result);
 8006866:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006868:	2488      	movs	r4, #136	; 0x88
 800686a:	193a      	adds	r2, r7, r4
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	2301      	movs	r3, #1
 8006870:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f383 8810 	msr	PRIMASK, r3
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	494f      	ldr	r1, [pc, #316]	; (80069c4 <HAL_UART_IRQHandler+0x5ac>)
 8006886:	400a      	ands	r2, r1
 8006888:	601a      	str	r2, [r3, #0]
 800688a:	193b      	adds	r3, r7, r4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f383 8810 	msr	PRIMASK, r3
}
 8006896:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006898:	f3ef 8310 	mrs	r3, PRIMASK
 800689c:	61bb      	str	r3, [r7, #24]
  return(result);
 800689e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	2484      	movs	r4, #132	; 0x84
 80068a2:	193a      	adds	r2, r7, r4
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	2301      	movs	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f383 8810 	msr	PRIMASK, r3
}
 80068b0:	46c0      	nop			; (mov r8, r8)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2101      	movs	r1, #1
 80068be:	438a      	bics	r2, r1
 80068c0:	609a      	str	r2, [r3, #8]
 80068c2:	193b      	adds	r3, r7, r4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	f383 8810 	msr	PRIMASK, r3
}
 80068ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e2:	f3ef 8310 	mrs	r3, PRIMASK
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	2480      	movs	r4, #128	; 0x80
 80068ec:	193a      	adds	r2, r7, r4
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	2301      	movs	r3, #1
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	f383 8810 	msr	PRIMASK, r3
}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2110      	movs	r1, #16
 8006908:	438a      	bics	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	193b      	adds	r3, r7, r4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	f383 8810 	msr	PRIMASK, r3
}
 8006918:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800691a:	183b      	adds	r3, r7, r0
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0011      	movs	r1, r2
 8006922:	0018      	movs	r0, r3
 8006924:	f000 f860 	bl	80069e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006928:	e044      	b.n	80069b4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800692a:	23a4      	movs	r3, #164	; 0xa4
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	035b      	lsls	r3, r3, #13
 8006934:	4013      	ands	r3, r2
 8006936:	d010      	beq.n	800695a <HAL_UART_IRQHandler+0x542>
 8006938:	239c      	movs	r3, #156	; 0x9c
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	03db      	lsls	r3, r3, #15
 8006942:	4013      	ands	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2280      	movs	r2, #128	; 0x80
 800694c:	0352      	lsls	r2, r2, #13
 800694e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	0018      	movs	r0, r3
 8006954:	f000 fbf8 	bl	8007148 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006958:	e02f      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800695a:	23a4      	movs	r3, #164	; 0xa4
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2280      	movs	r2, #128	; 0x80
 8006962:	4013      	ands	r3, r2
 8006964:	d00f      	beq.n	8006986 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006966:	23a0      	movs	r3, #160	; 0xa0
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2280      	movs	r2, #128	; 0x80
 800696e:	4013      	ands	r3, r2
 8006970:	d009      	beq.n	8006986 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01e      	beq.n	80069b8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	0010      	movs	r0, r2
 8006982:	4798      	blx	r3
    }
    return;
 8006984:	e018      	b.n	80069b8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006986:	23a4      	movs	r3, #164	; 0xa4
 8006988:	18fb      	adds	r3, r7, r3
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2240      	movs	r2, #64	; 0x40
 800698e:	4013      	ands	r3, r2
 8006990:	d013      	beq.n	80069ba <HAL_UART_IRQHandler+0x5a2>
 8006992:	23a0      	movs	r3, #160	; 0xa0
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2240      	movs	r2, #64	; 0x40
 800699a:	4013      	ands	r3, r2
 800699c:	d00d      	beq.n	80069ba <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 fba6 	bl	80070f2 <UART_EndTransmit_IT>
    return;
 80069a6:	e008      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	e006      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80069ac:	46c0      	nop			; (mov r8, r8)
 80069ae:	e004      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	e002      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	e000      	b.n	80069ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80069b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b02b      	add	sp, #172	; 0xac
 80069be:	bd90      	pop	{r4, r7, pc}
 80069c0:	fffffeff 	.word	0xfffffeff
 80069c4:	fffffedf 	.word	0xfffffedf

080069c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d0:	46c0      	nop			; (mov r8, r8)
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b002      	add	sp, #8
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	000a      	movs	r2, r1
 80069f2:	1cbb      	adds	r3, r7, #2
 80069f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b002      	add	sp, #8
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a08:	231e      	movs	r3, #30
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a8d      	ldr	r2, [pc, #564]	; (8006c64 <UART_SetConfig+0x264>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	0019      	movs	r1, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4a88      	ldr	r2, [pc, #544]	; (8006c68 <UART_SetConfig+0x268>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	0019      	movs	r1, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	4a7f      	ldr	r2, [pc, #508]	; (8006c6c <UART_SetConfig+0x26c>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	0019      	movs	r1, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <UART_SetConfig+0x270>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d127      	bne.n	8006ad6 <UART_SetConfig+0xd6>
 8006a86:	4b7b      	ldr	r3, [pc, #492]	; (8006c74 <UART_SetConfig+0x274>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d00d      	beq.n	8006aae <UART_SetConfig+0xae>
 8006a92:	d81b      	bhi.n	8006acc <UART_SetConfig+0xcc>
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d014      	beq.n	8006ac2 <UART_SetConfig+0xc2>
 8006a98:	d818      	bhi.n	8006acc <UART_SetConfig+0xcc>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <UART_SetConfig+0xa4>
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d00a      	beq.n	8006ab8 <UART_SetConfig+0xb8>
 8006aa2:	e013      	b.n	8006acc <UART_SetConfig+0xcc>
 8006aa4:	231f      	movs	r3, #31
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	e021      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006aae:	231f      	movs	r3, #31
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e01c      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006ab8:	231f      	movs	r3, #31
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2204      	movs	r2, #4
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	e017      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006ac2:	231f      	movs	r3, #31
 8006ac4:	18fb      	adds	r3, r7, r3
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e012      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006acc:	231f      	movs	r3, #31
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2210      	movs	r2, #16
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e00d      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a67      	ldr	r2, [pc, #412]	; (8006c78 <UART_SetConfig+0x278>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d104      	bne.n	8006aea <UART_SetConfig+0xea>
 8006ae0:	231f      	movs	r3, #31
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e003      	b.n	8006af2 <UART_SetConfig+0xf2>
 8006aea:	231f      	movs	r3, #31
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	2210      	movs	r2, #16
 8006af0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	2380      	movs	r3, #128	; 0x80
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d15d      	bne.n	8006bba <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006afe:	231f      	movs	r3, #31
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b08      	cmp	r3, #8
 8006b06:	d015      	beq.n	8006b34 <UART_SetConfig+0x134>
 8006b08:	dc18      	bgt.n	8006b3c <UART_SetConfig+0x13c>
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d00d      	beq.n	8006b2a <UART_SetConfig+0x12a>
 8006b0e:	dc15      	bgt.n	8006b3c <UART_SetConfig+0x13c>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <UART_SetConfig+0x11a>
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d005      	beq.n	8006b24 <UART_SetConfig+0x124>
 8006b18:	e010      	b.n	8006b3c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b1a:	f7fe fc67 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	61bb      	str	r3, [r7, #24]
        break;
 8006b22:	e012      	b.n	8006b4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b24:	4b55      	ldr	r3, [pc, #340]	; (8006c7c <UART_SetConfig+0x27c>)
 8006b26:	61bb      	str	r3, [r7, #24]
        break;
 8006b28:	e00f      	b.n	8006b4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2a:	f7fe fbf1 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	61bb      	str	r3, [r7, #24]
        break;
 8006b32:	e00a      	b.n	8006b4a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	021b      	lsls	r3, r3, #8
 8006b38:	61bb      	str	r3, [r7, #24]
        break;
 8006b3a:	e006      	b.n	8006b4a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b40:	231e      	movs	r3, #30
 8006b42:	18fb      	adds	r3, r7, r3
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
        break;
 8006b48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d100      	bne.n	8006b52 <UART_SetConfig+0x152>
 8006b50:	e07b      	b.n	8006c4a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	005a      	lsls	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	085b      	lsrs	r3, r3, #1
 8006b5c:	18d2      	adds	r2, r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	0019      	movs	r1, r3
 8006b64:	0010      	movs	r0, r2
 8006b66:	f7f9 faeb 	bl	8000140 <__udivsi3>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d91c      	bls.n	8006bb0 <UART_SetConfig+0x1b0>
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	2380      	movs	r3, #128	; 0x80
 8006b7a:	025b      	lsls	r3, r3, #9
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d217      	bcs.n	8006bb0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	200e      	movs	r0, #14
 8006b86:	183b      	adds	r3, r7, r0
 8006b88:	210f      	movs	r1, #15
 8006b8a:	438a      	bics	r2, r1
 8006b8c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	085b      	lsrs	r3, r3, #1
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2207      	movs	r2, #7
 8006b96:	4013      	ands	r3, r2
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	183b      	adds	r3, r7, r0
 8006b9c:	183a      	adds	r2, r7, r0
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	183a      	adds	r2, r7, r0
 8006baa:	8812      	ldrh	r2, [r2, #0]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	e04c      	b.n	8006c4a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb0:	231e      	movs	r3, #30
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e047      	b.n	8006c4a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bba:	231f      	movs	r3, #31
 8006bbc:	18fb      	adds	r3, r7, r3
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d015      	beq.n	8006bf0 <UART_SetConfig+0x1f0>
 8006bc4:	dc18      	bgt.n	8006bf8 <UART_SetConfig+0x1f8>
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00d      	beq.n	8006be6 <UART_SetConfig+0x1e6>
 8006bca:	dc15      	bgt.n	8006bf8 <UART_SetConfig+0x1f8>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <UART_SetConfig+0x1d6>
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d005      	beq.n	8006be0 <UART_SetConfig+0x1e0>
 8006bd4:	e010      	b.n	8006bf8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd6:	f7fe fc09 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8006bda:	0003      	movs	r3, r0
 8006bdc:	61bb      	str	r3, [r7, #24]
        break;
 8006bde:	e012      	b.n	8006c06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <UART_SetConfig+0x27c>)
 8006be2:	61bb      	str	r3, [r7, #24]
        break;
 8006be4:	e00f      	b.n	8006c06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006be6:	f7fe fb93 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8006bea:	0003      	movs	r3, r0
 8006bec:	61bb      	str	r3, [r7, #24]
        break;
 8006bee:	e00a      	b.n	8006c06 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	61bb      	str	r3, [r7, #24]
        break;
 8006bf6:	e006      	b.n	8006c06 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bfc:	231e      	movs	r3, #30
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
        break;
 8006c04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	085a      	lsrs	r2, r3, #1
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	18d2      	adds	r2, r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	f7f9 fa8f 	bl	8000140 <__udivsi3>
 8006c22:	0003      	movs	r3, r0
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	d909      	bls.n	8006c42 <UART_SetConfig+0x242>
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	2380      	movs	r3, #128	; 0x80
 8006c32:	025b      	lsls	r3, r3, #9
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d204      	bcs.n	8006c42 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	e003      	b.n	8006c4a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c42:	231e      	movs	r3, #30
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c56:	231e      	movs	r3, #30
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	781b      	ldrb	r3, [r3, #0]
}
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b008      	add	sp, #32
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	ffff69f3 	.word	0xffff69f3
 8006c68:	ffffcfff 	.word	0xffffcfff
 8006c6c:	fffff4ff 	.word	0xfffff4ff
 8006c70:	40013800 	.word	0x40013800
 8006c74:	40021000 	.word	0x40021000
 8006c78:	40004400 	.word	0x40004400
 8006c7c:	007a1200 	.word	0x007a1200

08006c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d00b      	beq.n	8006caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a4a      	ldr	r2, [pc, #296]	; (8006dc4 <UART_AdvFeatureConfig+0x144>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2202      	movs	r2, #2
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	4a43      	ldr	r2, [pc, #268]	; (8006dc8 <UART_AdvFeatureConfig+0x148>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d00b      	beq.n	8006cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	4a3b      	ldr	r2, [pc, #236]	; (8006dcc <UART_AdvFeatureConfig+0x14c>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	2208      	movs	r2, #8
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	4a34      	ldr	r2, [pc, #208]	; (8006dd0 <UART_AdvFeatureConfig+0x150>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	0019      	movs	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2210      	movs	r2, #16
 8006d16:	4013      	ands	r3, r2
 8006d18:	d00b      	beq.n	8006d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a2c      	ldr	r2, [pc, #176]	; (8006dd4 <UART_AdvFeatureConfig+0x154>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	0019      	movs	r1, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2220      	movs	r2, #32
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d00b      	beq.n	8006d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <UART_AdvFeatureConfig+0x158>)
 8006d44:	4013      	ands	r3, r2
 8006d46:	0019      	movs	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2240      	movs	r2, #64	; 0x40
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d01d      	beq.n	8006d9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <UART_AdvFeatureConfig+0x15c>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	0019      	movs	r1, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	035b      	lsls	r3, r3, #13
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d10b      	bne.n	8006d9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <UART_AdvFeatureConfig+0x160>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2280      	movs	r2, #128	; 0x80
 8006da0:	4013      	ands	r3, r2
 8006da2:	d00b      	beq.n	8006dbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <UART_AdvFeatureConfig+0x164>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  }
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	b002      	add	sp, #8
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	fffdffff 	.word	0xfffdffff
 8006dc8:	fffeffff 	.word	0xfffeffff
 8006dcc:	fffbffff 	.word	0xfffbffff
 8006dd0:	ffff7fff 	.word	0xffff7fff
 8006dd4:	ffffefff 	.word	0xffffefff
 8006dd8:	ffffdfff 	.word	0xffffdfff
 8006ddc:	ffefffff 	.word	0xffefffff
 8006de0:	ff9fffff 	.word	0xff9fffff
 8006de4:	fff7ffff 	.word	0xfff7ffff

08006de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	2100      	movs	r1, #0
 8006df6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006df8:	f7fd fa3c 	bl	8004274 <HAL_GetTick>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2208      	movs	r2, #8
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d10c      	bne.n	8006e28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2280      	movs	r2, #128	; 0x80
 8006e12:	0391      	lsls	r1, r2, #14
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <UART_CheckIdleState+0x8c>)
 8006e18:	9200      	str	r2, [sp, #0]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f000 f82c 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006e20:	1e03      	subs	r3, r0, #0
 8006e22:	d001      	beq.n	8006e28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e021      	b.n	8006e6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d10c      	bne.n	8006e50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	03d1      	lsls	r1, r2, #15
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4a0d      	ldr	r2, [pc, #52]	; (8006e74 <UART_CheckIdleState+0x8c>)
 8006e40:	9200      	str	r2, [sp, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f000 f818 	bl	8006e78 <UART_WaitOnFlagUntilTimeout>
 8006e48:	1e03      	subs	r3, r0, #0
 8006e4a:	d001      	beq.n	8006e50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e00d      	b.n	8006e6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2274      	movs	r2, #116	; 0x74
 8006e66:	2100      	movs	r1, #0
 8006e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b004      	add	sp, #16
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	01ffffff 	.word	0x01ffffff

08006e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b094      	sub	sp, #80	; 0x50
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	1dfb      	adds	r3, r7, #7
 8006e86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e88:	e0a3      	b.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	d100      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006e90:	e09f      	b.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fd f9ef 	bl	8004274 <HAL_GetTick>
 8006e96:	0002      	movs	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d13d      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8006eac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	f383 8810 	msr	PRIMASK, r3
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	494c      	ldr	r1, [pc, #304]	; (8006ffc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006eca:	400a      	ands	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ed0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	f383 8810 	msr	PRIMASK, r3
}
 8006ed8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eda:	f3ef 8310 	mrs	r3, PRIMASK
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2101      	movs	r1, #1
 8006efc:	438a      	bics	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2274      	movs	r2, #116	; 0x74
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e067      	b.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d050      	beq.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d146      	bne.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2280      	movs	r2, #128	; 0x80
 8006f4a:	0112      	lsls	r2, r2, #4
 8006f4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f52:	613b      	str	r3, [r7, #16]
  return(result);
 8006f54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	2301      	movs	r3, #1
 8006f5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f383 8810 	msr	PRIMASK, r3
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4923      	ldr	r1, [pc, #140]	; (8006ffc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006f70:	400a      	ands	r2, r1
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f383 8810 	msr	PRIMASK, r3
}
 8006f7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f86:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	438a      	bics	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
 8006fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	f383 8810 	msr	PRIMASK, r3
}
 8006fb0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2280      	movs	r2, #128	; 0x80
 8006fc2:	2120      	movs	r1, #32
 8006fc4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2274      	movs	r2, #116	; 0x74
 8006fca:	2100      	movs	r1, #0
 8006fcc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e010      	b.n	8006ff4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	425a      	negs	r2, r3
 8006fe2:	4153      	adcs	r3, r2
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	001a      	movs	r2, r3
 8006fe8:	1dfb      	adds	r3, r7, #7
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d100      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006ff0:	e74b      	b.n	8006e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b014      	add	sp, #80	; 0x50
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	fffffe5f 	.word	0xfffffe5f

08007000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08e      	sub	sp, #56	; 0x38
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007008:	f3ef 8310 	mrs	r3, PRIMASK
 800700c:	617b      	str	r3, [r7, #20]
  return(result);
 800700e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	2301      	movs	r3, #1
 8007014:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4925      	ldr	r1, [pc, #148]	; (80070c0 <UART_EndRxTransfer+0xc0>)
 800702a:	400a      	ands	r2, r1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007030:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800703a:	f3ef 8310 	mrs	r3, PRIMASK
 800703e:	623b      	str	r3, [r7, #32]
  return(result);
 8007040:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
 8007044:	2301      	movs	r3, #1
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	f383 8810 	msr	PRIMASK, r3
}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2101      	movs	r1, #1
 800705c:	438a      	bics	r2, r1
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f383 8810 	msr	PRIMASK, r3
}
 800706a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007070:	2b01      	cmp	r3, #1
 8007072:	d118      	bne.n	80070a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007074:	f3ef 8310 	mrs	r3, PRIMASK
 8007078:	60bb      	str	r3, [r7, #8]
  return(result);
 800707a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800707e:	2301      	movs	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f383 8810 	msr	PRIMASK, r3
}
 8007088:	46c0      	nop			; (mov r8, r8)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2110      	movs	r1, #16
 8007096:	438a      	bics	r2, r1
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f383 8810 	msr	PRIMASK, r3
}
 80070a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b00e      	add	sp, #56	; 0x38
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	fffffedf 	.word	0xfffffedf

080070c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	225a      	movs	r2, #90	; 0x5a
 80070d6:	2100      	movs	r1, #0
 80070d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2252      	movs	r2, #82	; 0x52
 80070de:	2100      	movs	r1, #0
 80070e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	0018      	movs	r0, r3
 80070e6:	f7ff fc77 	bl	80069d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b004      	add	sp, #16
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070fa:	f3ef 8310 	mrs	r3, PRIMASK
 80070fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007100:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	2301      	movs	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f383 8810 	msr	PRIMASK, r3
}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2140      	movs	r1, #64	; 0x40
 800711c:	438a      	bics	r2, r1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f383 8810 	msr	PRIMASK, r3
}
 800712a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f7ff fc44 	bl	80069c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b006      	add	sp, #24
 8007146:	bd80      	pop	{r7, pc}

08007148 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007150:	46c0      	nop			; (mov r8, r8)
 8007152:	46bd      	mov	sp, r7
 8007154:	b002      	add	sp, #8
 8007156:	bd80      	pop	{r7, pc}

08007158 <__errno>:
 8007158:	4b01      	ldr	r3, [pc, #4]	; (8007160 <__errno+0x8>)
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	4770      	bx	lr
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	2000000c 	.word	0x2000000c

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	2600      	movs	r6, #0
 8007168:	4d0c      	ldr	r5, [pc, #48]	; (800719c <__libc_init_array+0x38>)
 800716a:	4c0d      	ldr	r4, [pc, #52]	; (80071a0 <__libc_init_array+0x3c>)
 800716c:	1b64      	subs	r4, r4, r5
 800716e:	10a4      	asrs	r4, r4, #2
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	2600      	movs	r6, #0
 8007176:	f002 ffbb 	bl	800a0f0 <_init>
 800717a:	4d0a      	ldr	r5, [pc, #40]	; (80071a4 <__libc_init_array+0x40>)
 800717c:	4c0a      	ldr	r4, [pc, #40]	; (80071a8 <__libc_init_array+0x44>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	00b3      	lsls	r3, r6, #2
 800718a:	58eb      	ldr	r3, [r5, r3]
 800718c:	4798      	blx	r3
 800718e:	3601      	adds	r6, #1
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	00b3      	lsls	r3, r6, #2
 8007194:	58eb      	ldr	r3, [r5, r3]
 8007196:	4798      	blx	r3
 8007198:	3601      	adds	r6, #1
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	0800a5ac 	.word	0x0800a5ac
 80071a0:	0800a5ac 	.word	0x0800a5ac
 80071a4:	0800a5ac 	.word	0x0800a5ac
 80071a8:	0800a5b0 	.word	0x0800a5b0

080071ac <memset>:
 80071ac:	0003      	movs	r3, r0
 80071ae:	1882      	adds	r2, r0, r2
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d100      	bne.n	80071b6 <memset+0xa>
 80071b4:	4770      	bx	lr
 80071b6:	7019      	strb	r1, [r3, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	e7f9      	b.n	80071b0 <memset+0x4>

080071bc <__cvt>:
 80071bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071be:	001e      	movs	r6, r3
 80071c0:	2300      	movs	r3, #0
 80071c2:	0014      	movs	r4, r2
 80071c4:	b08b      	sub	sp, #44	; 0x2c
 80071c6:	429e      	cmp	r6, r3
 80071c8:	da04      	bge.n	80071d4 <__cvt+0x18>
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	0609      	lsls	r1, r1, #24
 80071ce:	1873      	adds	r3, r6, r1
 80071d0:	001e      	movs	r6, r3
 80071d2:	232d      	movs	r3, #45	; 0x2d
 80071d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071d6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071d8:	7013      	strb	r3, [r2, #0]
 80071da:	2320      	movs	r3, #32
 80071dc:	2203      	movs	r2, #3
 80071de:	439f      	bics	r7, r3
 80071e0:	2f46      	cmp	r7, #70	; 0x46
 80071e2:	d007      	beq.n	80071f4 <__cvt+0x38>
 80071e4:	003b      	movs	r3, r7
 80071e6:	3b45      	subs	r3, #69	; 0x45
 80071e8:	4259      	negs	r1, r3
 80071ea:	414b      	adcs	r3, r1
 80071ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 80071ee:	3a01      	subs	r2, #1
 80071f0:	18cb      	adds	r3, r1, r3
 80071f2:	9310      	str	r3, [sp, #64]	; 0x40
 80071f4:	ab09      	add	r3, sp, #36	; 0x24
 80071f6:	9304      	str	r3, [sp, #16]
 80071f8:	ab08      	add	r3, sp, #32
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071fe:	9200      	str	r2, [sp, #0]
 8007200:	9302      	str	r3, [sp, #8]
 8007202:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007204:	0022      	movs	r2, r4
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	0033      	movs	r3, r6
 800720a:	f000 fcf1 	bl	8007bf0 <_dtoa_r>
 800720e:	0005      	movs	r5, r0
 8007210:	2f47      	cmp	r7, #71	; 0x47
 8007212:	d102      	bne.n	800721a <__cvt+0x5e>
 8007214:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007216:	07db      	lsls	r3, r3, #31
 8007218:	d528      	bpl.n	800726c <__cvt+0xb0>
 800721a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800721c:	18eb      	adds	r3, r5, r3
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	2f46      	cmp	r7, #70	; 0x46
 8007222:	d114      	bne.n	800724e <__cvt+0x92>
 8007224:	782b      	ldrb	r3, [r5, #0]
 8007226:	2b30      	cmp	r3, #48	; 0x30
 8007228:	d10c      	bne.n	8007244 <__cvt+0x88>
 800722a:	2200      	movs	r2, #0
 800722c:	2300      	movs	r3, #0
 800722e:	0020      	movs	r0, r4
 8007230:	0031      	movs	r1, r6
 8007232:	f7f9 f90b 	bl	800044c <__aeabi_dcmpeq>
 8007236:	2800      	cmp	r0, #0
 8007238:	d104      	bne.n	8007244 <__cvt+0x88>
 800723a:	2301      	movs	r3, #1
 800723c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800723e:	1a9b      	subs	r3, r3, r2
 8007240:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007246:	9a07      	ldr	r2, [sp, #28]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	18d3      	adds	r3, r2, r3
 800724c:	9307      	str	r3, [sp, #28]
 800724e:	2200      	movs	r2, #0
 8007250:	2300      	movs	r3, #0
 8007252:	0020      	movs	r0, r4
 8007254:	0031      	movs	r1, r6
 8007256:	f7f9 f8f9 	bl	800044c <__aeabi_dcmpeq>
 800725a:	2800      	cmp	r0, #0
 800725c:	d001      	beq.n	8007262 <__cvt+0xa6>
 800725e:	9b07      	ldr	r3, [sp, #28]
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	2230      	movs	r2, #48	; 0x30
 8007264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007266:	9907      	ldr	r1, [sp, #28]
 8007268:	428b      	cmp	r3, r1
 800726a:	d306      	bcc.n	800727a <__cvt+0xbe>
 800726c:	0028      	movs	r0, r5
 800726e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007270:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007272:	1b5b      	subs	r3, r3, r5
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	b00b      	add	sp, #44	; 0x2c
 8007278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727a:	1c59      	adds	r1, r3, #1
 800727c:	9109      	str	r1, [sp, #36]	; 0x24
 800727e:	701a      	strb	r2, [r3, #0]
 8007280:	e7f0      	b.n	8007264 <__cvt+0xa8>

08007282 <__exponent>:
 8007282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007284:	1c83      	adds	r3, r0, #2
 8007286:	b087      	sub	sp, #28
 8007288:	9303      	str	r3, [sp, #12]
 800728a:	0005      	movs	r5, r0
 800728c:	000c      	movs	r4, r1
 800728e:	232b      	movs	r3, #43	; 0x2b
 8007290:	7002      	strb	r2, [r0, #0]
 8007292:	2900      	cmp	r1, #0
 8007294:	da01      	bge.n	800729a <__exponent+0x18>
 8007296:	424c      	negs	r4, r1
 8007298:	3302      	adds	r3, #2
 800729a:	706b      	strb	r3, [r5, #1]
 800729c:	2c09      	cmp	r4, #9
 800729e:	dd31      	ble.n	8007304 <__exponent+0x82>
 80072a0:	270a      	movs	r7, #10
 80072a2:	ab04      	add	r3, sp, #16
 80072a4:	1dde      	adds	r6, r3, #7
 80072a6:	0020      	movs	r0, r4
 80072a8:	0039      	movs	r1, r7
 80072aa:	9601      	str	r6, [sp, #4]
 80072ac:	f7f9 f8b8 	bl	8000420 <__aeabi_idivmod>
 80072b0:	3e01      	subs	r6, #1
 80072b2:	3130      	adds	r1, #48	; 0x30
 80072b4:	0020      	movs	r0, r4
 80072b6:	7031      	strb	r1, [r6, #0]
 80072b8:	0039      	movs	r1, r7
 80072ba:	9402      	str	r4, [sp, #8]
 80072bc:	f7f8 ffca 	bl	8000254 <__divsi3>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	0004      	movs	r4, r0
 80072c4:	2b63      	cmp	r3, #99	; 0x63
 80072c6:	dcee      	bgt.n	80072a6 <__exponent+0x24>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	3430      	adds	r4, #48	; 0x30
 80072cc:	1e9a      	subs	r2, r3, #2
 80072ce:	0013      	movs	r3, r2
 80072d0:	9903      	ldr	r1, [sp, #12]
 80072d2:	7014      	strb	r4, [r2, #0]
 80072d4:	a804      	add	r0, sp, #16
 80072d6:	3007      	adds	r0, #7
 80072d8:	4298      	cmp	r0, r3
 80072da:	d80e      	bhi.n	80072fa <__exponent+0x78>
 80072dc:	ab04      	add	r3, sp, #16
 80072de:	3307      	adds	r3, #7
 80072e0:	2000      	movs	r0, #0
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d804      	bhi.n	80072f0 <__exponent+0x6e>
 80072e6:	ab04      	add	r3, sp, #16
 80072e8:	3009      	adds	r0, #9
 80072ea:	18c0      	adds	r0, r0, r3
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	1ac0      	subs	r0, r0, r3
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	1818      	adds	r0, r3, r0
 80072f4:	1b40      	subs	r0, r0, r5
 80072f6:	b007      	add	sp, #28
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	7818      	ldrb	r0, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	7008      	strb	r0, [r1, #0]
 8007300:	3101      	adds	r1, #1
 8007302:	e7e7      	b.n	80072d4 <__exponent+0x52>
 8007304:	2330      	movs	r3, #48	; 0x30
 8007306:	18e4      	adds	r4, r4, r3
 8007308:	70ab      	strb	r3, [r5, #2]
 800730a:	1d28      	adds	r0, r5, #4
 800730c:	70ec      	strb	r4, [r5, #3]
 800730e:	e7f1      	b.n	80072f4 <__exponent+0x72>

08007310 <_printf_float>:
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	b095      	sub	sp, #84	; 0x54
 8007314:	000c      	movs	r4, r1
 8007316:	9209      	str	r2, [sp, #36]	; 0x24
 8007318:	001e      	movs	r6, r3
 800731a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800731c:	0007      	movs	r7, r0
 800731e:	f001 fa81 	bl	8008824 <_localeconv_r>
 8007322:	6803      	ldr	r3, [r0, #0]
 8007324:	0018      	movs	r0, r3
 8007326:	930c      	str	r3, [sp, #48]	; 0x30
 8007328:	f7f8 feee 	bl	8000108 <strlen>
 800732c:	2300      	movs	r3, #0
 800732e:	9312      	str	r3, [sp, #72]	; 0x48
 8007330:	7e23      	ldrb	r3, [r4, #24]
 8007332:	2207      	movs	r2, #7
 8007334:	930a      	str	r3, [sp, #40]	; 0x28
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	900e      	str	r0, [sp, #56]	; 0x38
 800733a:	930d      	str	r3, [sp, #52]	; 0x34
 800733c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	05c9      	lsls	r1, r1, #23
 8007342:	d547      	bpl.n	80073d4 <_printf_float+0xc4>
 8007344:	189b      	adds	r3, r3, r2
 8007346:	4393      	bics	r3, r2
 8007348:	001a      	movs	r2, r3
 800734a:	3208      	adds	r2, #8
 800734c:	602a      	str	r2, [r5, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	64a2      	str	r2, [r4, #72]	; 0x48
 8007354:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007356:	2201      	movs	r2, #1
 8007358:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800735a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800735c:	930b      	str	r3, [sp, #44]	; 0x2c
 800735e:	006b      	lsls	r3, r5, #1
 8007360:	085b      	lsrs	r3, r3, #1
 8007362:	930f      	str	r3, [sp, #60]	; 0x3c
 8007364:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007366:	4ba7      	ldr	r3, [pc, #668]	; (8007604 <_printf_float+0x2f4>)
 8007368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800736a:	4252      	negs	r2, r2
 800736c:	f7fb f9ec 	bl	8002748 <__aeabi_dcmpun>
 8007370:	2800      	cmp	r0, #0
 8007372:	d131      	bne.n	80073d8 <_printf_float+0xc8>
 8007374:	2201      	movs	r2, #1
 8007376:	4ba3      	ldr	r3, [pc, #652]	; (8007604 <_printf_float+0x2f4>)
 8007378:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800737a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800737c:	4252      	negs	r2, r2
 800737e:	f7f9 f875 	bl	800046c <__aeabi_dcmple>
 8007382:	2800      	cmp	r0, #0
 8007384:	d128      	bne.n	80073d8 <_printf_float+0xc8>
 8007386:	2200      	movs	r2, #0
 8007388:	2300      	movs	r3, #0
 800738a:	0029      	movs	r1, r5
 800738c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800738e:	f7f9 f863 	bl	8000458 <__aeabi_dcmplt>
 8007392:	2800      	cmp	r0, #0
 8007394:	d003      	beq.n	800739e <_printf_float+0x8e>
 8007396:	0023      	movs	r3, r4
 8007398:	222d      	movs	r2, #45	; 0x2d
 800739a:	3343      	adds	r3, #67	; 0x43
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a0:	4d99      	ldr	r5, [pc, #612]	; (8007608 <_printf_float+0x2f8>)
 80073a2:	2b47      	cmp	r3, #71	; 0x47
 80073a4:	d900      	bls.n	80073a8 <_printf_float+0x98>
 80073a6:	4d99      	ldr	r5, [pc, #612]	; (800760c <_printf_float+0x2fc>)
 80073a8:	2303      	movs	r3, #3
 80073aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	3301      	adds	r3, #1
 80073b0:	439a      	bics	r2, r3
 80073b2:	2300      	movs	r3, #0
 80073b4:	6022      	str	r2, [r4, #0]
 80073b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ba:	0021      	movs	r1, r4
 80073bc:	0038      	movs	r0, r7
 80073be:	9600      	str	r6, [sp, #0]
 80073c0:	aa13      	add	r2, sp, #76	; 0x4c
 80073c2:	f000 f9e7 	bl	8007794 <_printf_common>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d000      	beq.n	80073cc <_printf_float+0xbc>
 80073ca:	e0a2      	b.n	8007512 <_printf_float+0x202>
 80073cc:	2001      	movs	r0, #1
 80073ce:	4240      	negs	r0, r0
 80073d0:	b015      	add	sp, #84	; 0x54
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d4:	3307      	adds	r3, #7
 80073d6:	e7b6      	b.n	8007346 <_printf_float+0x36>
 80073d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073da:	002b      	movs	r3, r5
 80073dc:	0010      	movs	r0, r2
 80073de:	0029      	movs	r1, r5
 80073e0:	f7fb f9b2 	bl	8002748 <__aeabi_dcmpun>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d00b      	beq.n	8007400 <_printf_float+0xf0>
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_float+0xe4>
 80073ec:	0023      	movs	r3, r4
 80073ee:	222d      	movs	r2, #45	; 0x2d
 80073f0:	3343      	adds	r3, #67	; 0x43
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f6:	4d86      	ldr	r5, [pc, #536]	; (8007610 <_printf_float+0x300>)
 80073f8:	2b47      	cmp	r3, #71	; 0x47
 80073fa:	d9d5      	bls.n	80073a8 <_printf_float+0x98>
 80073fc:	4d85      	ldr	r5, [pc, #532]	; (8007614 <_printf_float+0x304>)
 80073fe:	e7d3      	b.n	80073a8 <_printf_float+0x98>
 8007400:	2220      	movs	r2, #32
 8007402:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007404:	6863      	ldr	r3, [r4, #4]
 8007406:	4391      	bics	r1, r2
 8007408:	910f      	str	r1, [sp, #60]	; 0x3c
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	d149      	bne.n	80074a2 <_printf_float+0x192>
 800740e:	3307      	adds	r3, #7
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	4313      	orrs	r3, r2
 800741a:	2200      	movs	r2, #0
 800741c:	9206      	str	r2, [sp, #24]
 800741e:	aa12      	add	r2, sp, #72	; 0x48
 8007420:	9205      	str	r2, [sp, #20]
 8007422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007424:	a908      	add	r1, sp, #32
 8007426:	9204      	str	r2, [sp, #16]
 8007428:	aa11      	add	r2, sp, #68	; 0x44
 800742a:	9203      	str	r2, [sp, #12]
 800742c:	2223      	movs	r2, #35	; 0x23
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	9301      	str	r3, [sp, #4]
 8007432:	6863      	ldr	r3, [r4, #4]
 8007434:	1852      	adds	r2, r2, r1
 8007436:	9202      	str	r2, [sp, #8]
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	0038      	movs	r0, r7
 800743c:	002b      	movs	r3, r5
 800743e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007440:	f7ff febc 	bl	80071bc <__cvt>
 8007444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007446:	0005      	movs	r5, r0
 8007448:	9911      	ldr	r1, [sp, #68]	; 0x44
 800744a:	2b47      	cmp	r3, #71	; 0x47
 800744c:	d108      	bne.n	8007460 <_printf_float+0x150>
 800744e:	1ccb      	adds	r3, r1, #3
 8007450:	db02      	blt.n	8007458 <_printf_float+0x148>
 8007452:	6863      	ldr	r3, [r4, #4]
 8007454:	4299      	cmp	r1, r3
 8007456:	dd48      	ble.n	80074ea <_printf_float+0x1da>
 8007458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745a:	3b02      	subs	r3, #2
 800745c:	b2db      	uxtb	r3, r3
 800745e:	930a      	str	r3, [sp, #40]	; 0x28
 8007460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007462:	2b65      	cmp	r3, #101	; 0x65
 8007464:	d824      	bhi.n	80074b0 <_printf_float+0x1a0>
 8007466:	0020      	movs	r0, r4
 8007468:	001a      	movs	r2, r3
 800746a:	3901      	subs	r1, #1
 800746c:	3050      	adds	r0, #80	; 0x50
 800746e:	9111      	str	r1, [sp, #68]	; 0x44
 8007470:	f7ff ff07 	bl	8007282 <__exponent>
 8007474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007476:	900b      	str	r0, [sp, #44]	; 0x2c
 8007478:	1813      	adds	r3, r2, r0
 800747a:	6123      	str	r3, [r4, #16]
 800747c:	2a01      	cmp	r2, #1
 800747e:	dc02      	bgt.n	8007486 <_printf_float+0x176>
 8007480:	6822      	ldr	r2, [r4, #0]
 8007482:	07d2      	lsls	r2, r2, #31
 8007484:	d501      	bpl.n	800748a <_printf_float+0x17a>
 8007486:	3301      	adds	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	2323      	movs	r3, #35	; 0x23
 800748c:	aa08      	add	r2, sp, #32
 800748e:	189b      	adds	r3, r3, r2
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d100      	bne.n	8007498 <_printf_float+0x188>
 8007496:	e78f      	b.n	80073b8 <_printf_float+0xa8>
 8007498:	0023      	movs	r3, r4
 800749a:	222d      	movs	r2, #45	; 0x2d
 800749c:	3343      	adds	r3, #67	; 0x43
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	e78a      	b.n	80073b8 <_printf_float+0xa8>
 80074a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074a4:	2a47      	cmp	r2, #71	; 0x47
 80074a6:	d1b4      	bne.n	8007412 <_printf_float+0x102>
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1b2      	bne.n	8007412 <_printf_float+0x102>
 80074ac:	3301      	adds	r3, #1
 80074ae:	e7af      	b.n	8007410 <_printf_float+0x100>
 80074b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b2:	2b66      	cmp	r3, #102	; 0x66
 80074b4:	d11b      	bne.n	80074ee <_printf_float+0x1de>
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	dd0d      	ble.n	80074d8 <_printf_float+0x1c8>
 80074bc:	6121      	str	r1, [r4, #16]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d102      	bne.n	80074c8 <_printf_float+0x1b8>
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	07d2      	lsls	r2, r2, #31
 80074c6:	d502      	bpl.n	80074ce <_printf_float+0x1be>
 80074c8:	3301      	adds	r3, #1
 80074ca:	1859      	adds	r1, r3, r1
 80074cc:	6121      	str	r1, [r4, #16]
 80074ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80074d2:	2300      	movs	r3, #0
 80074d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074d6:	e7d8      	b.n	800748a <_printf_float+0x17a>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <_printf_float+0x1d4>
 80074dc:	2201      	movs	r2, #1
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	4211      	tst	r1, r2
 80074e2:	d000      	beq.n	80074e6 <_printf_float+0x1d6>
 80074e4:	1c9a      	adds	r2, r3, #2
 80074e6:	6122      	str	r2, [r4, #16]
 80074e8:	e7f1      	b.n	80074ce <_printf_float+0x1be>
 80074ea:	2367      	movs	r3, #103	; 0x67
 80074ec:	930a      	str	r3, [sp, #40]	; 0x28
 80074ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074f2:	4293      	cmp	r3, r2
 80074f4:	db06      	blt.n	8007504 <_printf_float+0x1f4>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	07d2      	lsls	r2, r2, #31
 80074fc:	d5e7      	bpl.n	80074ce <_printf_float+0x1be>
 80074fe:	3301      	adds	r3, #1
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	e7e4      	b.n	80074ce <_printf_float+0x1be>
 8007504:	2101      	movs	r1, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	dc01      	bgt.n	800750e <_printf_float+0x1fe>
 800750a:	1849      	adds	r1, r1, r1
 800750c:	1ac9      	subs	r1, r1, r3
 800750e:	1852      	adds	r2, r2, r1
 8007510:	e7e9      	b.n	80074e6 <_printf_float+0x1d6>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	0553      	lsls	r3, r2, #21
 8007516:	d407      	bmi.n	8007528 <_printf_float+0x218>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	002a      	movs	r2, r5
 800751c:	0038      	movs	r0, r7
 800751e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007520:	47b0      	blx	r6
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	d128      	bne.n	8007578 <_printf_float+0x268>
 8007526:	e751      	b.n	80073cc <_printf_float+0xbc>
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	2b65      	cmp	r3, #101	; 0x65
 800752c:	d800      	bhi.n	8007530 <_printf_float+0x220>
 800752e:	e0e1      	b.n	80076f4 <_printf_float+0x3e4>
 8007530:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007532:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007534:	2200      	movs	r2, #0
 8007536:	2300      	movs	r3, #0
 8007538:	f7f8 ff88 	bl	800044c <__aeabi_dcmpeq>
 800753c:	2800      	cmp	r0, #0
 800753e:	d031      	beq.n	80075a4 <_printf_float+0x294>
 8007540:	2301      	movs	r3, #1
 8007542:	0038      	movs	r0, r7
 8007544:	4a34      	ldr	r2, [pc, #208]	; (8007618 <_printf_float+0x308>)
 8007546:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007548:	47b0      	blx	r6
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d100      	bne.n	8007550 <_printf_float+0x240>
 800754e:	e73d      	b.n	80073cc <_printf_float+0xbc>
 8007550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007554:	4293      	cmp	r3, r2
 8007556:	db02      	blt.n	800755e <_printf_float+0x24e>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	d50c      	bpl.n	8007578 <_printf_float+0x268>
 800755e:	0038      	movs	r0, r7
 8007560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007566:	47b0      	blx	r6
 8007568:	2500      	movs	r5, #0
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d100      	bne.n	8007570 <_printf_float+0x260>
 800756e:	e72d      	b.n	80073cc <_printf_float+0xbc>
 8007570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007572:	3b01      	subs	r3, #1
 8007574:	42ab      	cmp	r3, r5
 8007576:	dc0a      	bgt.n	800758e <_printf_float+0x27e>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	079b      	lsls	r3, r3, #30
 800757c:	d500      	bpl.n	8007580 <_printf_float+0x270>
 800757e:	e106      	b.n	800778e <_printf_float+0x47e>
 8007580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007582:	68e0      	ldr	r0, [r4, #12]
 8007584:	4298      	cmp	r0, r3
 8007586:	db00      	blt.n	800758a <_printf_float+0x27a>
 8007588:	e722      	b.n	80073d0 <_printf_float+0xc0>
 800758a:	0018      	movs	r0, r3
 800758c:	e720      	b.n	80073d0 <_printf_float+0xc0>
 800758e:	0022      	movs	r2, r4
 8007590:	2301      	movs	r3, #1
 8007592:	0038      	movs	r0, r7
 8007594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007596:	321a      	adds	r2, #26
 8007598:	47b0      	blx	r6
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d100      	bne.n	80075a0 <_printf_float+0x290>
 800759e:	e715      	b.n	80073cc <_printf_float+0xbc>
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7e5      	b.n	8007570 <_printf_float+0x260>
 80075a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dc38      	bgt.n	800761c <_printf_float+0x30c>
 80075aa:	2301      	movs	r3, #1
 80075ac:	0038      	movs	r0, r7
 80075ae:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <_printf_float+0x308>)
 80075b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075b2:	47b0      	blx	r6
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d100      	bne.n	80075ba <_printf_float+0x2aa>
 80075b8:	e708      	b.n	80073cc <_printf_float+0xbc>
 80075ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075be:	4313      	orrs	r3, r2
 80075c0:	d102      	bne.n	80075c8 <_printf_float+0x2b8>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	07db      	lsls	r3, r3, #31
 80075c6:	d5d7      	bpl.n	8007578 <_printf_float+0x268>
 80075c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ca:	0038      	movs	r0, r7
 80075cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075d0:	47b0      	blx	r6
 80075d2:	1c43      	adds	r3, r0, #1
 80075d4:	d100      	bne.n	80075d8 <_printf_float+0x2c8>
 80075d6:	e6f9      	b.n	80073cc <_printf_float+0xbc>
 80075d8:	2300      	movs	r3, #0
 80075da:	930a      	str	r3, [sp, #40]	; 0x28
 80075dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e0:	425b      	negs	r3, r3
 80075e2:	4293      	cmp	r3, r2
 80075e4:	dc01      	bgt.n	80075ea <_printf_float+0x2da>
 80075e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e8:	e797      	b.n	800751a <_printf_float+0x20a>
 80075ea:	0022      	movs	r2, r4
 80075ec:	2301      	movs	r3, #1
 80075ee:	0038      	movs	r0, r7
 80075f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f2:	321a      	adds	r2, #26
 80075f4:	47b0      	blx	r6
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d100      	bne.n	80075fc <_printf_float+0x2ec>
 80075fa:	e6e7      	b.n	80073cc <_printf_float+0xbc>
 80075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fe:	3301      	adds	r3, #1
 8007600:	e7eb      	b.n	80075da <_printf_float+0x2ca>
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	7fefffff 	.word	0x7fefffff
 8007608:	0800a1d8 	.word	0x0800a1d8
 800760c:	0800a1dc 	.word	0x0800a1dc
 8007610:	0800a1e0 	.word	0x0800a1e0
 8007614:	0800a1e4 	.word	0x0800a1e4
 8007618:	0800a1e8 	.word	0x0800a1e8
 800761c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800761e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007620:	920a      	str	r2, [sp, #40]	; 0x28
 8007622:	429a      	cmp	r2, r3
 8007624:	dd00      	ble.n	8007628 <_printf_float+0x318>
 8007626:	930a      	str	r3, [sp, #40]	; 0x28
 8007628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762a:	2b00      	cmp	r3, #0
 800762c:	dc3c      	bgt.n	80076a8 <_printf_float+0x398>
 800762e:	2300      	movs	r3, #0
 8007630:	930d      	str	r3, [sp, #52]	; 0x34
 8007632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007634:	43db      	mvns	r3, r3
 8007636:	17db      	asrs	r3, r3, #31
 8007638:	930f      	str	r3, [sp, #60]	; 0x3c
 800763a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800763c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800763e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007642:	4013      	ands	r3, r2
 8007644:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800764a:	4293      	cmp	r3, r2
 800764c:	dc34      	bgt.n	80076b8 <_printf_float+0x3a8>
 800764e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007652:	4293      	cmp	r3, r2
 8007654:	db3d      	blt.n	80076d2 <_printf_float+0x3c2>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d43a      	bmi.n	80076d2 <_printf_float+0x3c2>
 800765c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800765e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007660:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	1a52      	subs	r2, r2, r1
 8007666:	920a      	str	r2, [sp, #40]	; 0x28
 8007668:	429a      	cmp	r2, r3
 800766a:	dd00      	ble.n	800766e <_printf_float+0x35e>
 800766c:	930a      	str	r3, [sp, #40]	; 0x28
 800766e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007670:	2b00      	cmp	r3, #0
 8007672:	dc36      	bgt.n	80076e2 <_printf_float+0x3d2>
 8007674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007676:	2500      	movs	r5, #0
 8007678:	43db      	mvns	r3, r3
 800767a:	17db      	asrs	r3, r3, #31
 800767c:	930b      	str	r3, [sp, #44]	; 0x2c
 800767e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007680:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007688:	400a      	ands	r2, r1
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	42ab      	cmp	r3, r5
 800768e:	dc00      	bgt.n	8007692 <_printf_float+0x382>
 8007690:	e772      	b.n	8007578 <_printf_float+0x268>
 8007692:	0022      	movs	r2, r4
 8007694:	2301      	movs	r3, #1
 8007696:	0038      	movs	r0, r7
 8007698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800769a:	321a      	adds	r2, #26
 800769c:	47b0      	blx	r6
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d100      	bne.n	80076a4 <_printf_float+0x394>
 80076a2:	e693      	b.n	80073cc <_printf_float+0xbc>
 80076a4:	3501      	adds	r5, #1
 80076a6:	e7ea      	b.n	800767e <_printf_float+0x36e>
 80076a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076aa:	002a      	movs	r2, r5
 80076ac:	0038      	movs	r0, r7
 80076ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b0:	47b0      	blx	r6
 80076b2:	1c43      	adds	r3, r0, #1
 80076b4:	d1bb      	bne.n	800762e <_printf_float+0x31e>
 80076b6:	e689      	b.n	80073cc <_printf_float+0xbc>
 80076b8:	0022      	movs	r2, r4
 80076ba:	2301      	movs	r3, #1
 80076bc:	0038      	movs	r0, r7
 80076be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076c0:	321a      	adds	r2, #26
 80076c2:	47b0      	blx	r6
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d100      	bne.n	80076ca <_printf_float+0x3ba>
 80076c8:	e680      	b.n	80073cc <_printf_float+0xbc>
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	3301      	adds	r3, #1
 80076ce:	930d      	str	r3, [sp, #52]	; 0x34
 80076d0:	e7b3      	b.n	800763a <_printf_float+0x32a>
 80076d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d4:	0038      	movs	r0, r7
 80076d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076da:	47b0      	blx	r6
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d1bd      	bne.n	800765c <_printf_float+0x34c>
 80076e0:	e674      	b.n	80073cc <_printf_float+0xbc>
 80076e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e4:	0038      	movs	r0, r7
 80076e6:	18ea      	adds	r2, r5, r3
 80076e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ec:	47b0      	blx	r6
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d1c0      	bne.n	8007674 <_printf_float+0x364>
 80076f2:	e66b      	b.n	80073cc <_printf_float+0xbc>
 80076f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	dc02      	bgt.n	8007700 <_printf_float+0x3f0>
 80076fa:	2301      	movs	r3, #1
 80076fc:	421a      	tst	r2, r3
 80076fe:	d034      	beq.n	800776a <_printf_float+0x45a>
 8007700:	2301      	movs	r3, #1
 8007702:	002a      	movs	r2, r5
 8007704:	0038      	movs	r0, r7
 8007706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007708:	47b0      	blx	r6
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d100      	bne.n	8007710 <_printf_float+0x400>
 800770e:	e65d      	b.n	80073cc <_printf_float+0xbc>
 8007710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007712:	0038      	movs	r0, r7
 8007714:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007718:	47b0      	blx	r6
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	d100      	bne.n	8007720 <_printf_float+0x410>
 800771e:	e655      	b.n	80073cc <_printf_float+0xbc>
 8007720:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007722:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007724:	2200      	movs	r2, #0
 8007726:	2300      	movs	r3, #0
 8007728:	f7f8 fe90 	bl	800044c <__aeabi_dcmpeq>
 800772c:	2800      	cmp	r0, #0
 800772e:	d11a      	bne.n	8007766 <_printf_float+0x456>
 8007730:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007732:	1c6a      	adds	r2, r5, #1
 8007734:	3b01      	subs	r3, #1
 8007736:	0038      	movs	r0, r7
 8007738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800773a:	47b0      	blx	r6
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d10e      	bne.n	800775e <_printf_float+0x44e>
 8007740:	e644      	b.n	80073cc <_printf_float+0xbc>
 8007742:	0022      	movs	r2, r4
 8007744:	2301      	movs	r3, #1
 8007746:	0038      	movs	r0, r7
 8007748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800774a:	321a      	adds	r2, #26
 800774c:	47b0      	blx	r6
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d100      	bne.n	8007754 <_printf_float+0x444>
 8007752:	e63b      	b.n	80073cc <_printf_float+0xbc>
 8007754:	3501      	adds	r5, #1
 8007756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007758:	3b01      	subs	r3, #1
 800775a:	42ab      	cmp	r3, r5
 800775c:	dcf1      	bgt.n	8007742 <_printf_float+0x432>
 800775e:	0022      	movs	r2, r4
 8007760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007762:	3250      	adds	r2, #80	; 0x50
 8007764:	e6da      	b.n	800751c <_printf_float+0x20c>
 8007766:	2500      	movs	r5, #0
 8007768:	e7f5      	b.n	8007756 <_printf_float+0x446>
 800776a:	002a      	movs	r2, r5
 800776c:	e7e3      	b.n	8007736 <_printf_float+0x426>
 800776e:	0022      	movs	r2, r4
 8007770:	2301      	movs	r3, #1
 8007772:	0038      	movs	r0, r7
 8007774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007776:	3219      	adds	r2, #25
 8007778:	47b0      	blx	r6
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d100      	bne.n	8007780 <_printf_float+0x470>
 800777e:	e625      	b.n	80073cc <_printf_float+0xbc>
 8007780:	3501      	adds	r5, #1
 8007782:	68e3      	ldr	r3, [r4, #12]
 8007784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	42ab      	cmp	r3, r5
 800778a:	dcf0      	bgt.n	800776e <_printf_float+0x45e>
 800778c:	e6f8      	b.n	8007580 <_printf_float+0x270>
 800778e:	2500      	movs	r5, #0
 8007790:	e7f7      	b.n	8007782 <_printf_float+0x472>
 8007792:	46c0      	nop			; (mov r8, r8)

08007794 <_printf_common>:
 8007794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007796:	0015      	movs	r5, r2
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	688a      	ldr	r2, [r1, #8]
 800779c:	690b      	ldr	r3, [r1, #16]
 800779e:	000c      	movs	r4, r1
 80077a0:	9000      	str	r0, [sp, #0]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	da00      	bge.n	80077a8 <_printf_common+0x14>
 80077a6:	0013      	movs	r3, r2
 80077a8:	0022      	movs	r2, r4
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	3243      	adds	r2, #67	; 0x43
 80077ae:	7812      	ldrb	r2, [r2, #0]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	d001      	beq.n	80077b8 <_printf_common+0x24>
 80077b4:	3301      	adds	r3, #1
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	069b      	lsls	r3, r3, #26
 80077bc:	d502      	bpl.n	80077c4 <_printf_common+0x30>
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	3302      	adds	r3, #2
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	6822      	ldr	r2, [r4, #0]
 80077c6:	2306      	movs	r3, #6
 80077c8:	0017      	movs	r7, r2
 80077ca:	401f      	ands	r7, r3
 80077cc:	421a      	tst	r2, r3
 80077ce:	d027      	beq.n	8007820 <_printf_common+0x8c>
 80077d0:	0023      	movs	r3, r4
 80077d2:	3343      	adds	r3, #67	; 0x43
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	4193      	sbcs	r3, r2
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	0692      	lsls	r2, r2, #26
 80077de:	d430      	bmi.n	8007842 <_printf_common+0xae>
 80077e0:	0022      	movs	r2, r4
 80077e2:	9901      	ldr	r1, [sp, #4]
 80077e4:	9800      	ldr	r0, [sp, #0]
 80077e6:	9e08      	ldr	r6, [sp, #32]
 80077e8:	3243      	adds	r2, #67	; 0x43
 80077ea:	47b0      	blx	r6
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d025      	beq.n	800783c <_printf_common+0xa8>
 80077f0:	2306      	movs	r3, #6
 80077f2:	6820      	ldr	r0, [r4, #0]
 80077f4:	682a      	ldr	r2, [r5, #0]
 80077f6:	68e1      	ldr	r1, [r4, #12]
 80077f8:	2500      	movs	r5, #0
 80077fa:	4003      	ands	r3, r0
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d103      	bne.n	8007808 <_printf_common+0x74>
 8007800:	1a8d      	subs	r5, r1, r2
 8007802:	43eb      	mvns	r3, r5
 8007804:	17db      	asrs	r3, r3, #31
 8007806:	401d      	ands	r5, r3
 8007808:	68a3      	ldr	r3, [r4, #8]
 800780a:	6922      	ldr	r2, [r4, #16]
 800780c:	4293      	cmp	r3, r2
 800780e:	dd01      	ble.n	8007814 <_printf_common+0x80>
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	18ed      	adds	r5, r5, r3
 8007814:	2700      	movs	r7, #0
 8007816:	42bd      	cmp	r5, r7
 8007818:	d120      	bne.n	800785c <_printf_common+0xc8>
 800781a:	2000      	movs	r0, #0
 800781c:	e010      	b.n	8007840 <_printf_common+0xac>
 800781e:	3701      	adds	r7, #1
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	682a      	ldr	r2, [r5, #0]
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	42bb      	cmp	r3, r7
 8007828:	ddd2      	ble.n	80077d0 <_printf_common+0x3c>
 800782a:	0022      	movs	r2, r4
 800782c:	2301      	movs	r3, #1
 800782e:	9901      	ldr	r1, [sp, #4]
 8007830:	9800      	ldr	r0, [sp, #0]
 8007832:	9e08      	ldr	r6, [sp, #32]
 8007834:	3219      	adds	r2, #25
 8007836:	47b0      	blx	r6
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d1f0      	bne.n	800781e <_printf_common+0x8a>
 800783c:	2001      	movs	r0, #1
 800783e:	4240      	negs	r0, r0
 8007840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007842:	2030      	movs	r0, #48	; 0x30
 8007844:	18e1      	adds	r1, r4, r3
 8007846:	3143      	adds	r1, #67	; 0x43
 8007848:	7008      	strb	r0, [r1, #0]
 800784a:	0021      	movs	r1, r4
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	3145      	adds	r1, #69	; 0x45
 8007850:	7809      	ldrb	r1, [r1, #0]
 8007852:	18a2      	adds	r2, r4, r2
 8007854:	3243      	adds	r2, #67	; 0x43
 8007856:	3302      	adds	r3, #2
 8007858:	7011      	strb	r1, [r2, #0]
 800785a:	e7c1      	b.n	80077e0 <_printf_common+0x4c>
 800785c:	0022      	movs	r2, r4
 800785e:	2301      	movs	r3, #1
 8007860:	9901      	ldr	r1, [sp, #4]
 8007862:	9800      	ldr	r0, [sp, #0]
 8007864:	9e08      	ldr	r6, [sp, #32]
 8007866:	321a      	adds	r2, #26
 8007868:	47b0      	blx	r6
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d0e6      	beq.n	800783c <_printf_common+0xa8>
 800786e:	3701      	adds	r7, #1
 8007870:	e7d1      	b.n	8007816 <_printf_common+0x82>
	...

08007874 <_printf_i>:
 8007874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007876:	b08b      	sub	sp, #44	; 0x2c
 8007878:	9206      	str	r2, [sp, #24]
 800787a:	000a      	movs	r2, r1
 800787c:	3243      	adds	r2, #67	; 0x43
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	9005      	str	r0, [sp, #20]
 8007882:	9204      	str	r2, [sp, #16]
 8007884:	7e0a      	ldrb	r2, [r1, #24]
 8007886:	000c      	movs	r4, r1
 8007888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800788a:	2a78      	cmp	r2, #120	; 0x78
 800788c:	d807      	bhi.n	800789e <_printf_i+0x2a>
 800788e:	2a62      	cmp	r2, #98	; 0x62
 8007890:	d809      	bhi.n	80078a6 <_printf_i+0x32>
 8007892:	2a00      	cmp	r2, #0
 8007894:	d100      	bne.n	8007898 <_printf_i+0x24>
 8007896:	e0c1      	b.n	8007a1c <_printf_i+0x1a8>
 8007898:	2a58      	cmp	r2, #88	; 0x58
 800789a:	d100      	bne.n	800789e <_printf_i+0x2a>
 800789c:	e08c      	b.n	80079b8 <_printf_i+0x144>
 800789e:	0026      	movs	r6, r4
 80078a0:	3642      	adds	r6, #66	; 0x42
 80078a2:	7032      	strb	r2, [r6, #0]
 80078a4:	e022      	b.n	80078ec <_printf_i+0x78>
 80078a6:	0010      	movs	r0, r2
 80078a8:	3863      	subs	r0, #99	; 0x63
 80078aa:	2815      	cmp	r0, #21
 80078ac:	d8f7      	bhi.n	800789e <_printf_i+0x2a>
 80078ae:	f7f8 fc3d 	bl	800012c <__gnu_thumb1_case_shi>
 80078b2:	0016      	.short	0x0016
 80078b4:	fff6001f 	.word	0xfff6001f
 80078b8:	fff6fff6 	.word	0xfff6fff6
 80078bc:	001ffff6 	.word	0x001ffff6
 80078c0:	fff6fff6 	.word	0xfff6fff6
 80078c4:	fff6fff6 	.word	0xfff6fff6
 80078c8:	003600a8 	.word	0x003600a8
 80078cc:	fff6009a 	.word	0xfff6009a
 80078d0:	00b9fff6 	.word	0x00b9fff6
 80078d4:	0036fff6 	.word	0x0036fff6
 80078d8:	fff6fff6 	.word	0xfff6fff6
 80078dc:	009e      	.short	0x009e
 80078de:	0026      	movs	r6, r4
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	3642      	adds	r6, #66	; 0x42
 80078e4:	1d11      	adds	r1, r2, #4
 80078e6:	6019      	str	r1, [r3, #0]
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	7033      	strb	r3, [r6, #0]
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0a7      	b.n	8007a40 <_printf_i+0x1cc>
 80078f0:	6808      	ldr	r0, [r1, #0]
 80078f2:	6819      	ldr	r1, [r3, #0]
 80078f4:	1d0a      	adds	r2, r1, #4
 80078f6:	0605      	lsls	r5, r0, #24
 80078f8:	d50b      	bpl.n	8007912 <_printf_i+0x9e>
 80078fa:	680d      	ldr	r5, [r1, #0]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	2d00      	cmp	r5, #0
 8007900:	da03      	bge.n	800790a <_printf_i+0x96>
 8007902:	232d      	movs	r3, #45	; 0x2d
 8007904:	9a04      	ldr	r2, [sp, #16]
 8007906:	426d      	negs	r5, r5
 8007908:	7013      	strb	r3, [r2, #0]
 800790a:	4b61      	ldr	r3, [pc, #388]	; (8007a90 <_printf_i+0x21c>)
 800790c:	270a      	movs	r7, #10
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	e01b      	b.n	800794a <_printf_i+0xd6>
 8007912:	680d      	ldr	r5, [r1, #0]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	0641      	lsls	r1, r0, #25
 8007918:	d5f1      	bpl.n	80078fe <_printf_i+0x8a>
 800791a:	b22d      	sxth	r5, r5
 800791c:	e7ef      	b.n	80078fe <_printf_i+0x8a>
 800791e:	680d      	ldr	r5, [r1, #0]
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	1d08      	adds	r0, r1, #4
 8007924:	6018      	str	r0, [r3, #0]
 8007926:	062e      	lsls	r6, r5, #24
 8007928:	d501      	bpl.n	800792e <_printf_i+0xba>
 800792a:	680d      	ldr	r5, [r1, #0]
 800792c:	e003      	b.n	8007936 <_printf_i+0xc2>
 800792e:	066d      	lsls	r5, r5, #25
 8007930:	d5fb      	bpl.n	800792a <_printf_i+0xb6>
 8007932:	680d      	ldr	r5, [r1, #0]
 8007934:	b2ad      	uxth	r5, r5
 8007936:	4b56      	ldr	r3, [pc, #344]	; (8007a90 <_printf_i+0x21c>)
 8007938:	2708      	movs	r7, #8
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	2a6f      	cmp	r2, #111	; 0x6f
 800793e:	d000      	beq.n	8007942 <_printf_i+0xce>
 8007940:	3702      	adds	r7, #2
 8007942:	0023      	movs	r3, r4
 8007944:	2200      	movs	r2, #0
 8007946:	3343      	adds	r3, #67	; 0x43
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	db03      	blt.n	800795a <_printf_i+0xe6>
 8007952:	2204      	movs	r2, #4
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	4391      	bics	r1, r2
 8007958:	6021      	str	r1, [r4, #0]
 800795a:	2d00      	cmp	r5, #0
 800795c:	d102      	bne.n	8007964 <_printf_i+0xf0>
 800795e:	9e04      	ldr	r6, [sp, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <_printf_i+0x10a>
 8007964:	9e04      	ldr	r6, [sp, #16]
 8007966:	0028      	movs	r0, r5
 8007968:	0039      	movs	r1, r7
 800796a:	f7f8 fc6f 	bl	800024c <__aeabi_uidivmod>
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	3e01      	subs	r6, #1
 8007972:	5c5b      	ldrb	r3, [r3, r1]
 8007974:	7033      	strb	r3, [r6, #0]
 8007976:	002b      	movs	r3, r5
 8007978:	0005      	movs	r5, r0
 800797a:	429f      	cmp	r7, r3
 800797c:	d9f3      	bls.n	8007966 <_printf_i+0xf2>
 800797e:	2f08      	cmp	r7, #8
 8007980:	d109      	bne.n	8007996 <_printf_i+0x122>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	07db      	lsls	r3, r3, #31
 8007986:	d506      	bpl.n	8007996 <_printf_i+0x122>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	6922      	ldr	r2, [r4, #16]
 800798c:	4293      	cmp	r3, r2
 800798e:	dc02      	bgt.n	8007996 <_printf_i+0x122>
 8007990:	2330      	movs	r3, #48	; 0x30
 8007992:	3e01      	subs	r6, #1
 8007994:	7033      	strb	r3, [r6, #0]
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	9b07      	ldr	r3, [sp, #28]
 800799e:	0021      	movs	r1, r4
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	9b06      	ldr	r3, [sp, #24]
 80079a6:	aa09      	add	r2, sp, #36	; 0x24
 80079a8:	f7ff fef4 	bl	8007794 <_printf_common>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d14c      	bne.n	8007a4a <_printf_i+0x1d6>
 80079b0:	2001      	movs	r0, #1
 80079b2:	4240      	negs	r0, r0
 80079b4:	b00b      	add	sp, #44	; 0x2c
 80079b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b8:	3145      	adds	r1, #69	; 0x45
 80079ba:	700a      	strb	r2, [r1, #0]
 80079bc:	4a34      	ldr	r2, [pc, #208]	; (8007a90 <_printf_i+0x21c>)
 80079be:	9203      	str	r2, [sp, #12]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	6821      	ldr	r1, [r4, #0]
 80079c4:	ca20      	ldmia	r2!, {r5}
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	0608      	lsls	r0, r1, #24
 80079ca:	d516      	bpl.n	80079fa <_printf_i+0x186>
 80079cc:	07cb      	lsls	r3, r1, #31
 80079ce:	d502      	bpl.n	80079d6 <_printf_i+0x162>
 80079d0:	2320      	movs	r3, #32
 80079d2:	4319      	orrs	r1, r3
 80079d4:	6021      	str	r1, [r4, #0]
 80079d6:	2710      	movs	r7, #16
 80079d8:	2d00      	cmp	r5, #0
 80079da:	d1b2      	bne.n	8007942 <_printf_i+0xce>
 80079dc:	2320      	movs	r3, #32
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	439a      	bics	r2, r3
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	e7ad      	b.n	8007942 <_printf_i+0xce>
 80079e6:	2220      	movs	r2, #32
 80079e8:	6809      	ldr	r1, [r1, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	0022      	movs	r2, r4
 80079f0:	2178      	movs	r1, #120	; 0x78
 80079f2:	3245      	adds	r2, #69	; 0x45
 80079f4:	7011      	strb	r1, [r2, #0]
 80079f6:	4a27      	ldr	r2, [pc, #156]	; (8007a94 <_printf_i+0x220>)
 80079f8:	e7e1      	b.n	80079be <_printf_i+0x14a>
 80079fa:	0648      	lsls	r0, r1, #25
 80079fc:	d5e6      	bpl.n	80079cc <_printf_i+0x158>
 80079fe:	b2ad      	uxth	r5, r5
 8007a00:	e7e4      	b.n	80079cc <_printf_i+0x158>
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	680d      	ldr	r5, [r1, #0]
 8007a06:	1d10      	adds	r0, r2, #4
 8007a08:	6949      	ldr	r1, [r1, #20]
 8007a0a:	6018      	str	r0, [r3, #0]
 8007a0c:	6813      	ldr	r3, [r2, #0]
 8007a0e:	062e      	lsls	r6, r5, #24
 8007a10:	d501      	bpl.n	8007a16 <_printf_i+0x1a2>
 8007a12:	6019      	str	r1, [r3, #0]
 8007a14:	e002      	b.n	8007a1c <_printf_i+0x1a8>
 8007a16:	066d      	lsls	r5, r5, #25
 8007a18:	d5fb      	bpl.n	8007a12 <_printf_i+0x19e>
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9e04      	ldr	r6, [sp, #16]
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	e7bb      	b.n	800799c <_printf_i+0x128>
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	1d11      	adds	r1, r2, #4
 8007a28:	6019      	str	r1, [r3, #0]
 8007a2a:	6816      	ldr	r6, [r2, #0]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	0030      	movs	r0, r6
 8007a30:	6862      	ldr	r2, [r4, #4]
 8007a32:	f000 ff05 	bl	8008840 <memchr>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d001      	beq.n	8007a3e <_printf_i+0x1ca>
 8007a3a:	1b80      	subs	r0, r0, r6
 8007a3c:	6060      	str	r0, [r4, #4]
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	7013      	strb	r3, [r2, #0]
 8007a48:	e7a8      	b.n	800799c <_printf_i+0x128>
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	0032      	movs	r2, r6
 8007a4e:	9906      	ldr	r1, [sp, #24]
 8007a50:	9805      	ldr	r0, [sp, #20]
 8007a52:	9d07      	ldr	r5, [sp, #28]
 8007a54:	47a8      	blx	r5
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d0aa      	beq.n	80079b0 <_printf_i+0x13c>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	079b      	lsls	r3, r3, #30
 8007a5e:	d415      	bmi.n	8007a8c <_printf_i+0x218>
 8007a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a62:	68e0      	ldr	r0, [r4, #12]
 8007a64:	4298      	cmp	r0, r3
 8007a66:	daa5      	bge.n	80079b4 <_printf_i+0x140>
 8007a68:	0018      	movs	r0, r3
 8007a6a:	e7a3      	b.n	80079b4 <_printf_i+0x140>
 8007a6c:	0022      	movs	r2, r4
 8007a6e:	2301      	movs	r3, #1
 8007a70:	9906      	ldr	r1, [sp, #24]
 8007a72:	9805      	ldr	r0, [sp, #20]
 8007a74:	9e07      	ldr	r6, [sp, #28]
 8007a76:	3219      	adds	r2, #25
 8007a78:	47b0      	blx	r6
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d098      	beq.n	80079b0 <_printf_i+0x13c>
 8007a7e:	3501      	adds	r5, #1
 8007a80:	68e3      	ldr	r3, [r4, #12]
 8007a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	42ab      	cmp	r3, r5
 8007a88:	dcf0      	bgt.n	8007a6c <_printf_i+0x1f8>
 8007a8a:	e7e9      	b.n	8007a60 <_printf_i+0x1ec>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	e7f7      	b.n	8007a80 <_printf_i+0x20c>
 8007a90:	0800a1ea 	.word	0x0800a1ea
 8007a94:	0800a1fb 	.word	0x0800a1fb

08007a98 <siprintf>:
 8007a98:	b40e      	push	{r1, r2, r3}
 8007a9a:	b500      	push	{lr}
 8007a9c:	490b      	ldr	r1, [pc, #44]	; (8007acc <siprintf+0x34>)
 8007a9e:	b09c      	sub	sp, #112	; 0x70
 8007aa0:	ab1d      	add	r3, sp, #116	; 0x74
 8007aa2:	9002      	str	r0, [sp, #8]
 8007aa4:	9006      	str	r0, [sp, #24]
 8007aa6:	9107      	str	r1, [sp, #28]
 8007aa8:	9104      	str	r1, [sp, #16]
 8007aaa:	4809      	ldr	r0, [pc, #36]	; (8007ad0 <siprintf+0x38>)
 8007aac:	4909      	ldr	r1, [pc, #36]	; (8007ad4 <siprintf+0x3c>)
 8007aae:	cb04      	ldmia	r3!, {r2}
 8007ab0:	9105      	str	r1, [sp, #20]
 8007ab2:	6800      	ldr	r0, [r0, #0]
 8007ab4:	a902      	add	r1, sp, #8
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	f001 fbe2 	bl	8009280 <_svfiprintf_r>
 8007abc:	2300      	movs	r3, #0
 8007abe:	9a02      	ldr	r2, [sp, #8]
 8007ac0:	7013      	strb	r3, [r2, #0]
 8007ac2:	b01c      	add	sp, #112	; 0x70
 8007ac4:	bc08      	pop	{r3}
 8007ac6:	b003      	add	sp, #12
 8007ac8:	4718      	bx	r3
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	7fffffff 	.word	0x7fffffff
 8007ad0:	2000000c 	.word	0x2000000c
 8007ad4:	ffff0208 	.word	0xffff0208

08007ad8 <quorem>:
 8007ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ada:	0006      	movs	r6, r0
 8007adc:	690b      	ldr	r3, [r1, #16]
 8007ade:	6932      	ldr	r2, [r6, #16]
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	2000      	movs	r0, #0
 8007ae4:	9103      	str	r1, [sp, #12]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	db65      	blt.n	8007bb6 <quorem+0xde>
 8007aea:	3b01      	subs	r3, #1
 8007aec:	009c      	lsls	r4, r3, #2
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	000b      	movs	r3, r1
 8007af2:	3314      	adds	r3, #20
 8007af4:	9305      	str	r3, [sp, #20]
 8007af6:	191b      	adds	r3, r3, r4
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	0033      	movs	r3, r6
 8007afc:	3314      	adds	r3, #20
 8007afe:	9302      	str	r3, [sp, #8]
 8007b00:	191c      	adds	r4, r3, r4
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	6827      	ldr	r7, [r4, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	0038      	movs	r0, r7
 8007b0a:	1c5d      	adds	r5, r3, #1
 8007b0c:	0029      	movs	r1, r5
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	f7f8 fb16 	bl	8000140 <__udivsi3>
 8007b14:	9001      	str	r0, [sp, #4]
 8007b16:	42af      	cmp	r7, r5
 8007b18:	d324      	bcc.n	8007b64 <quorem+0x8c>
 8007b1a:	2500      	movs	r5, #0
 8007b1c:	46ac      	mov	ip, r5
 8007b1e:	9802      	ldr	r0, [sp, #8]
 8007b20:	9f05      	ldr	r7, [sp, #20]
 8007b22:	cf08      	ldmia	r7!, {r3}
 8007b24:	9a01      	ldr	r2, [sp, #4]
 8007b26:	b299      	uxth	r1, r3
 8007b28:	4351      	muls	r1, r2
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	4353      	muls	r3, r2
 8007b2e:	1949      	adds	r1, r1, r5
 8007b30:	0c0a      	lsrs	r2, r1, #16
 8007b32:	189b      	adds	r3, r3, r2
 8007b34:	6802      	ldr	r2, [r0, #0]
 8007b36:	b289      	uxth	r1, r1
 8007b38:	b292      	uxth	r2, r2
 8007b3a:	4462      	add	r2, ip
 8007b3c:	1a52      	subs	r2, r2, r1
 8007b3e:	6801      	ldr	r1, [r0, #0]
 8007b40:	0c1d      	lsrs	r5, r3, #16
 8007b42:	0c09      	lsrs	r1, r1, #16
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	1acb      	subs	r3, r1, r3
 8007b48:	1411      	asrs	r1, r2, #16
 8007b4a:	185b      	adds	r3, r3, r1
 8007b4c:	1419      	asrs	r1, r3, #16
 8007b4e:	b292      	uxth	r2, r2
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	431a      	orrs	r2, r3
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	468c      	mov	ip, r1
 8007b58:	c004      	stmia	r0!, {r2}
 8007b5a:	42bb      	cmp	r3, r7
 8007b5c:	d2e1      	bcs.n	8007b22 <quorem+0x4a>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d030      	beq.n	8007bc6 <quorem+0xee>
 8007b64:	0030      	movs	r0, r6
 8007b66:	9903      	ldr	r1, [sp, #12]
 8007b68:	f001 f902 	bl	8008d70 <__mcmp>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	db21      	blt.n	8007bb4 <quorem+0xdc>
 8007b70:	0030      	movs	r0, r6
 8007b72:	2400      	movs	r4, #0
 8007b74:	9b01      	ldr	r3, [sp, #4]
 8007b76:	9903      	ldr	r1, [sp, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	3014      	adds	r0, #20
 8007b7e:	3114      	adds	r1, #20
 8007b80:	6803      	ldr	r3, [r0, #0]
 8007b82:	c920      	ldmia	r1!, {r5}
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	1914      	adds	r4, r2, r4
 8007b88:	b2aa      	uxth	r2, r5
 8007b8a:	1aa2      	subs	r2, r4, r2
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	0c2d      	lsrs	r5, r5, #16
 8007b90:	1414      	asrs	r4, r2, #16
 8007b92:	1b5b      	subs	r3, r3, r5
 8007b94:	191b      	adds	r3, r3, r4
 8007b96:	141c      	asrs	r4, r3, #16
 8007b98:	b292      	uxth	r2, r2
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	c008      	stmia	r0!, {r3}
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	428b      	cmp	r3, r1
 8007ba4:	d2ec      	bcs.n	8007b80 <quorem+0xa8>
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	9a02      	ldr	r2, [sp, #8]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	2a00      	cmp	r2, #0
 8007bb2:	d015      	beq.n	8007be0 <quorem+0x108>
 8007bb4:	9801      	ldr	r0, [sp, #4]
 8007bb6:	b007      	add	sp, #28
 8007bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <quorem+0xf6>
 8007bc0:	9b00      	ldr	r3, [sp, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	3c04      	subs	r4, #4
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	d3f5      	bcc.n	8007bba <quorem+0xe2>
 8007bce:	9b00      	ldr	r3, [sp, #0]
 8007bd0:	6133      	str	r3, [r6, #16]
 8007bd2:	e7c7      	b.n	8007b64 <quorem+0x8c>
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	2a00      	cmp	r2, #0
 8007bd8:	d106      	bne.n	8007be8 <quorem+0x110>
 8007bda:	9a00      	ldr	r2, [sp, #0]
 8007bdc:	3a01      	subs	r2, #1
 8007bde:	9200      	str	r2, [sp, #0]
 8007be0:	9a02      	ldr	r2, [sp, #8]
 8007be2:	3b04      	subs	r3, #4
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d3f5      	bcc.n	8007bd4 <quorem+0xfc>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	6133      	str	r3, [r6, #16]
 8007bec:	e7e2      	b.n	8007bb4 <quorem+0xdc>
	...

08007bf0 <_dtoa_r>:
 8007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bf2:	b09d      	sub	sp, #116	; 0x74
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	9c03      	ldr	r4, [sp, #12]
 8007bfc:	9308      	str	r3, [sp, #32]
 8007bfe:	9409      	str	r4, [sp, #36]	; 0x24
 8007c00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c02:	0007      	movs	r7, r0
 8007c04:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007c06:	2c00      	cmp	r4, #0
 8007c08:	d10e      	bne.n	8007c28 <_dtoa_r+0x38>
 8007c0a:	2010      	movs	r0, #16
 8007c0c:	f000 fe0e 	bl	800882c <malloc>
 8007c10:	1e02      	subs	r2, r0, #0
 8007c12:	6278      	str	r0, [r7, #36]	; 0x24
 8007c14:	d104      	bne.n	8007c20 <_dtoa_r+0x30>
 8007c16:	21ea      	movs	r1, #234	; 0xea
 8007c18:	4bc7      	ldr	r3, [pc, #796]	; (8007f38 <_dtoa_r+0x348>)
 8007c1a:	48c8      	ldr	r0, [pc, #800]	; (8007f3c <_dtoa_r+0x34c>)
 8007c1c:	f001 fc42 	bl	80094a4 <__assert_func>
 8007c20:	6044      	str	r4, [r0, #4]
 8007c22:	6084      	str	r4, [r0, #8]
 8007c24:	6004      	str	r4, [r0, #0]
 8007c26:	60c4      	str	r4, [r0, #12]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	6819      	ldr	r1, [r3, #0]
 8007c2c:	2900      	cmp	r1, #0
 8007c2e:	d00a      	beq.n	8007c46 <_dtoa_r+0x56>
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	2301      	movs	r3, #1
 8007c34:	4093      	lsls	r3, r2
 8007c36:	604a      	str	r2, [r1, #4]
 8007c38:	608b      	str	r3, [r1, #8]
 8007c3a:	0038      	movs	r0, r7
 8007c3c:	f000 fe58 	bl	80088f0 <_Bfree>
 8007c40:	2200      	movs	r2, #0
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da20      	bge.n	8007c8e <_dtoa_r+0x9e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	085b      	lsrs	r3, r3, #1
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c5a:	4bb9      	ldr	r3, [pc, #740]	; (8007f40 <_dtoa_r+0x350>)
 8007c5c:	4ab8      	ldr	r2, [pc, #736]	; (8007f40 <_dtoa_r+0x350>)
 8007c5e:	402b      	ands	r3, r5
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d117      	bne.n	8007c94 <_dtoa_r+0xa4>
 8007c64:	4bb7      	ldr	r3, [pc, #732]	; (8007f44 <_dtoa_r+0x354>)
 8007c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c68:	0328      	lsls	r0, r5, #12
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	9b02      	ldr	r3, [sp, #8]
 8007c6e:	0b00      	lsrs	r0, r0, #12
 8007c70:	4318      	orrs	r0, r3
 8007c72:	d101      	bne.n	8007c78 <_dtoa_r+0x88>
 8007c74:	f000 fdbf 	bl	80087f6 <_dtoa_r+0xc06>
 8007c78:	48b3      	ldr	r0, [pc, #716]	; (8007f48 <_dtoa_r+0x358>)
 8007c7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c7c:	9006      	str	r0, [sp, #24]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <_dtoa_r+0x98>
 8007c82:	4bb2      	ldr	r3, [pc, #712]	; (8007f4c <_dtoa_r+0x35c>)
 8007c84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	9806      	ldr	r0, [sp, #24]
 8007c8a:	b01d      	add	sp, #116	; 0x74
 8007c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8e:	2300      	movs	r3, #0
 8007c90:	602b      	str	r3, [r5, #0]
 8007c92:	e7e1      	b.n	8007c58 <_dtoa_r+0x68>
 8007c94:	9b08      	ldr	r3, [sp, #32]
 8007c96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007c98:	9312      	str	r3, [sp, #72]	; 0x48
 8007c9a:	9413      	str	r4, [sp, #76]	; 0x4c
 8007c9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f7f8 fbd2 	bl	800044c <__aeabi_dcmpeq>
 8007ca8:	1e04      	subs	r4, r0, #0
 8007caa:	d009      	beq.n	8007cc0 <_dtoa_r+0xd0>
 8007cac:	2301      	movs	r3, #1
 8007cae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	4ba7      	ldr	r3, [pc, #668]	; (8007f50 <_dtoa_r+0x360>)
 8007cb4:	9306      	str	r3, [sp, #24]
 8007cb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0e5      	beq.n	8007c88 <_dtoa_r+0x98>
 8007cbc:	4ba5      	ldr	r3, [pc, #660]	; (8007f54 <_dtoa_r+0x364>)
 8007cbe:	e7e1      	b.n	8007c84 <_dtoa_r+0x94>
 8007cc0:	ab1a      	add	r3, sp, #104	; 0x68
 8007cc2:	9301      	str	r3, [sp, #4]
 8007cc4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	0038      	movs	r0, r7
 8007cca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cce:	f001 f903 	bl	8008ed8 <__d2b>
 8007cd2:	006e      	lsls	r6, r5, #1
 8007cd4:	9005      	str	r0, [sp, #20]
 8007cd6:	0d76      	lsrs	r6, r6, #21
 8007cd8:	d100      	bne.n	8007cdc <_dtoa_r+0xec>
 8007cda:	e07c      	b.n	8007dd6 <_dtoa_r+0x1e6>
 8007cdc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007cde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ce0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ce2:	4a9d      	ldr	r2, [pc, #628]	; (8007f58 <_dtoa_r+0x368>)
 8007ce4:	031b      	lsls	r3, r3, #12
 8007ce6:	0b1b      	lsrs	r3, r3, #12
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	0011      	movs	r1, r2
 8007cec:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <_dtoa_r+0x36c>)
 8007cee:	9418      	str	r4, [sp, #96]	; 0x60
 8007cf0:	18f6      	adds	r6, r6, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4b9a      	ldr	r3, [pc, #616]	; (8007f60 <_dtoa_r+0x370>)
 8007cf6:	f7fa f995 	bl	8002024 <__aeabi_dsub>
 8007cfa:	4a9a      	ldr	r2, [pc, #616]	; (8007f64 <_dtoa_r+0x374>)
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <_dtoa_r+0x378>)
 8007cfe:	f7f9 ff25 	bl	8001b4c <__aeabi_dmul>
 8007d02:	4a9a      	ldr	r2, [pc, #616]	; (8007f6c <_dtoa_r+0x37c>)
 8007d04:	4b9a      	ldr	r3, [pc, #616]	; (8007f70 <_dtoa_r+0x380>)
 8007d06:	f7f8 ffe3 	bl	8000cd0 <__aeabi_dadd>
 8007d0a:	0004      	movs	r4, r0
 8007d0c:	0030      	movs	r0, r6
 8007d0e:	000d      	movs	r5, r1
 8007d10:	f7fa fd6e 	bl	80027f0 <__aeabi_i2d>
 8007d14:	4a97      	ldr	r2, [pc, #604]	; (8007f74 <_dtoa_r+0x384>)
 8007d16:	4b98      	ldr	r3, [pc, #608]	; (8007f78 <_dtoa_r+0x388>)
 8007d18:	f7f9 ff18 	bl	8001b4c <__aeabi_dmul>
 8007d1c:	0002      	movs	r2, r0
 8007d1e:	000b      	movs	r3, r1
 8007d20:	0020      	movs	r0, r4
 8007d22:	0029      	movs	r1, r5
 8007d24:	f7f8 ffd4 	bl	8000cd0 <__aeabi_dadd>
 8007d28:	0004      	movs	r4, r0
 8007d2a:	000d      	movs	r5, r1
 8007d2c:	f7fa fd2a 	bl	8002784 <__aeabi_d2iz>
 8007d30:	2200      	movs	r2, #0
 8007d32:	9002      	str	r0, [sp, #8]
 8007d34:	2300      	movs	r3, #0
 8007d36:	0020      	movs	r0, r4
 8007d38:	0029      	movs	r1, r5
 8007d3a:	f7f8 fb8d 	bl	8000458 <__aeabi_dcmplt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d00b      	beq.n	8007d5a <_dtoa_r+0x16a>
 8007d42:	9802      	ldr	r0, [sp, #8]
 8007d44:	f7fa fd54 	bl	80027f0 <__aeabi_i2d>
 8007d48:	002b      	movs	r3, r5
 8007d4a:	0022      	movs	r2, r4
 8007d4c:	f7f8 fb7e 	bl	800044c <__aeabi_dcmpeq>
 8007d50:	4243      	negs	r3, r0
 8007d52:	4158      	adcs	r0, r3
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	1a1b      	subs	r3, r3, r0
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	9316      	str	r3, [sp, #88]	; 0x58
 8007d5e:	9b02      	ldr	r3, [sp, #8]
 8007d60:	2b16      	cmp	r3, #22
 8007d62:	d80f      	bhi.n	8007d84 <_dtoa_r+0x194>
 8007d64:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d66:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d68:	00da      	lsls	r2, r3, #3
 8007d6a:	4b84      	ldr	r3, [pc, #528]	; (8007f7c <_dtoa_r+0x38c>)
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f7f8 fb71 	bl	8000458 <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d049      	beq.n	8007e0e <_dtoa_r+0x21e>
 8007d7a:	9b02      	ldr	r3, [sp, #8]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	2300      	movs	r3, #0
 8007d82:	9316      	str	r3, [sp, #88]	; 0x58
 8007d84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d86:	1b9e      	subs	r6, r3, r6
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8c:	0033      	movs	r3, r6
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	930d      	str	r3, [sp, #52]	; 0x34
 8007d92:	d504      	bpl.n	8007d9e <_dtoa_r+0x1ae>
 8007d94:	2301      	movs	r3, #1
 8007d96:	1b9b      	subs	r3, r3, r6
 8007d98:	930a      	str	r3, [sp, #40]	; 0x28
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d9e:	9b02      	ldr	r3, [sp, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	db36      	blt.n	8007e12 <_dtoa_r+0x222>
 8007da4:	9a02      	ldr	r2, [sp, #8]
 8007da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da8:	4694      	mov	ip, r2
 8007daa:	4463      	add	r3, ip
 8007dac:	930d      	str	r3, [sp, #52]	; 0x34
 8007dae:	2300      	movs	r3, #0
 8007db0:	9215      	str	r2, [sp, #84]	; 0x54
 8007db2:	930e      	str	r3, [sp, #56]	; 0x38
 8007db4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db6:	2401      	movs	r4, #1
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d864      	bhi.n	8007e86 <_dtoa_r+0x296>
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	dd02      	ble.n	8007dc6 <_dtoa_r+0x1d6>
 8007dc0:	2400      	movs	r4, #0
 8007dc2:	3b04      	subs	r3, #4
 8007dc4:	9322      	str	r3, [sp, #136]	; 0x88
 8007dc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dc8:	1e98      	subs	r0, r3, #2
 8007dca:	2803      	cmp	r0, #3
 8007dcc:	d864      	bhi.n	8007e98 <_dtoa_r+0x2a8>
 8007dce:	f7f8 f9a3 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007dd2:	3829      	.short	0x3829
 8007dd4:	5836      	.short	0x5836
 8007dd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007dd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007dda:	189e      	adds	r6, r3, r2
 8007ddc:	4b68      	ldr	r3, [pc, #416]	; (8007f80 <_dtoa_r+0x390>)
 8007dde:	18f2      	adds	r2, r6, r3
 8007de0:	2a20      	cmp	r2, #32
 8007de2:	dd0f      	ble.n	8007e04 <_dtoa_r+0x214>
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	409d      	lsls	r5, r3
 8007dea:	4b66      	ldr	r3, [pc, #408]	; (8007f84 <_dtoa_r+0x394>)
 8007dec:	9802      	ldr	r0, [sp, #8]
 8007dee:	18f3      	adds	r3, r6, r3
 8007df0:	40d8      	lsrs	r0, r3
 8007df2:	4328      	orrs	r0, r5
 8007df4:	f7fa fd2c 	bl	8002850 <__aeabi_ui2d>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4c63      	ldr	r4, [pc, #396]	; (8007f88 <_dtoa_r+0x398>)
 8007dfc:	3e01      	subs	r6, #1
 8007dfe:	1909      	adds	r1, r1, r4
 8007e00:	9318      	str	r3, [sp, #96]	; 0x60
 8007e02:	e776      	b.n	8007cf2 <_dtoa_r+0x102>
 8007e04:	2320      	movs	r3, #32
 8007e06:	9802      	ldr	r0, [sp, #8]
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	4098      	lsls	r0, r3
 8007e0c:	e7f2      	b.n	8007df4 <_dtoa_r+0x204>
 8007e0e:	9016      	str	r0, [sp, #88]	; 0x58
 8007e10:	e7b8      	b.n	8007d84 <_dtoa_r+0x194>
 8007e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e14:	9a02      	ldr	r2, [sp, #8]
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	930a      	str	r3, [sp, #40]	; 0x28
 8007e1a:	4253      	negs	r3, r2
 8007e1c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9315      	str	r3, [sp, #84]	; 0x54
 8007e22:	e7c7      	b.n	8007db4 <_dtoa_r+0x1c4>
 8007e24:	2300      	movs	r3, #0
 8007e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e2c:	9307      	str	r3, [sp, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dc13      	bgt.n	8007e5a <_dtoa_r+0x26a>
 8007e32:	2301      	movs	r3, #1
 8007e34:	001a      	movs	r2, r3
 8007e36:	930c      	str	r3, [sp, #48]	; 0x30
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e3c:	e00d      	b.n	8007e5a <_dtoa_r+0x26a>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e7f1      	b.n	8007e26 <_dtoa_r+0x236>
 8007e42:	2300      	movs	r3, #0
 8007e44:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e48:	4694      	mov	ip, r2
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	4463      	add	r3, ip
 8007e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e50:	3301      	adds	r3, #1
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	dc00      	bgt.n	8007e5a <_dtoa_r+0x26a>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e5e:	6042      	str	r2, [r0, #4]
 8007e60:	3204      	adds	r2, #4
 8007e62:	0015      	movs	r5, r2
 8007e64:	3514      	adds	r5, #20
 8007e66:	6841      	ldr	r1, [r0, #4]
 8007e68:	429d      	cmp	r5, r3
 8007e6a:	d919      	bls.n	8007ea0 <_dtoa_r+0x2b0>
 8007e6c:	0038      	movs	r0, r7
 8007e6e:	f000 fcfb 	bl	8008868 <_Balloc>
 8007e72:	9006      	str	r0, [sp, #24]
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d117      	bne.n	8007ea8 <_dtoa_r+0x2b8>
 8007e78:	21d5      	movs	r1, #213	; 0xd5
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	4b43      	ldr	r3, [pc, #268]	; (8007f8c <_dtoa_r+0x39c>)
 8007e7e:	0049      	lsls	r1, r1, #1
 8007e80:	e6cb      	b.n	8007c1a <_dtoa_r+0x2a>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e7de      	b.n	8007e44 <_dtoa_r+0x254>
 8007e86:	2300      	movs	r3, #0
 8007e88:	940f      	str	r4, [sp, #60]	; 0x3c
 8007e8a:	9322      	str	r3, [sp, #136]	; 0x88
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e90:	9307      	str	r3, [sp, #28]
 8007e92:	2200      	movs	r2, #0
 8007e94:	3313      	adds	r3, #19
 8007e96:	e7d0      	b.n	8007e3a <_dtoa_r+0x24a>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e9c:	3b02      	subs	r3, #2
 8007e9e:	e7f6      	b.n	8007e8e <_dtoa_r+0x29e>
 8007ea0:	3101      	adds	r1, #1
 8007ea2:	6041      	str	r1, [r0, #4]
 8007ea4:	0052      	lsls	r2, r2, #1
 8007ea6:	e7dc      	b.n	8007e62 <_dtoa_r+0x272>
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	9a06      	ldr	r2, [sp, #24]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	9b07      	ldr	r3, [sp, #28]
 8007eb0:	2b0e      	cmp	r3, #14
 8007eb2:	d900      	bls.n	8007eb6 <_dtoa_r+0x2c6>
 8007eb4:	e0eb      	b.n	800808e <_dtoa_r+0x49e>
 8007eb6:	2c00      	cmp	r4, #0
 8007eb8:	d100      	bne.n	8007ebc <_dtoa_r+0x2cc>
 8007eba:	e0e8      	b.n	800808e <_dtoa_r+0x49e>
 8007ebc:	9b02      	ldr	r3, [sp, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dd68      	ble.n	8007f94 <_dtoa_r+0x3a4>
 8007ec2:	001a      	movs	r2, r3
 8007ec4:	210f      	movs	r1, #15
 8007ec6:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <_dtoa_r+0x38c>)
 8007ec8:	400a      	ands	r2, r1
 8007eca:	00d2      	lsls	r2, r2, #3
 8007ecc:	189b      	adds	r3, r3, r2
 8007ece:	681d      	ldr	r5, [r3, #0]
 8007ed0:	685e      	ldr	r6, [r3, #4]
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	111c      	asrs	r4, r3, #4
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	9310      	str	r3, [sp, #64]	; 0x40
 8007eda:	9b02      	ldr	r3, [sp, #8]
 8007edc:	05db      	lsls	r3, r3, #23
 8007ede:	d50b      	bpl.n	8007ef8 <_dtoa_r+0x308>
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	; (8007f90 <_dtoa_r+0x3a0>)
 8007ee2:	400c      	ands	r4, r1
 8007ee4:	6a1a      	ldr	r2, [r3, #32]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007eea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007eec:	f7f9 fa2c 	bl	8001348 <__aeabi_ddiv>
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	9008      	str	r0, [sp, #32]
 8007ef4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ef6:	9310      	str	r3, [sp, #64]	; 0x40
 8007ef8:	4b25      	ldr	r3, [pc, #148]	; (8007f90 <_dtoa_r+0x3a0>)
 8007efa:	9314      	str	r3, [sp, #80]	; 0x50
 8007efc:	2c00      	cmp	r4, #0
 8007efe:	d108      	bne.n	8007f12 <_dtoa_r+0x322>
 8007f00:	9808      	ldr	r0, [sp, #32]
 8007f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f04:	002a      	movs	r2, r5
 8007f06:	0033      	movs	r3, r6
 8007f08:	f7f9 fa1e 	bl	8001348 <__aeabi_ddiv>
 8007f0c:	9008      	str	r0, [sp, #32]
 8007f0e:	9109      	str	r1, [sp, #36]	; 0x24
 8007f10:	e05c      	b.n	8007fcc <_dtoa_r+0x3dc>
 8007f12:	2301      	movs	r3, #1
 8007f14:	421c      	tst	r4, r3
 8007f16:	d00b      	beq.n	8007f30 <_dtoa_r+0x340>
 8007f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f1a:	0028      	movs	r0, r5
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f22:	0031      	movs	r1, r6
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f7f9 fe10 	bl	8001b4c <__aeabi_dmul>
 8007f2c:	0005      	movs	r5, r0
 8007f2e:	000e      	movs	r6, r1
 8007f30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f32:	1064      	asrs	r4, r4, #1
 8007f34:	3308      	adds	r3, #8
 8007f36:	e7e0      	b.n	8007efa <_dtoa_r+0x30a>
 8007f38:	0800a219 	.word	0x0800a219
 8007f3c:	0800a230 	.word	0x0800a230
 8007f40:	7ff00000 	.word	0x7ff00000
 8007f44:	0000270f 	.word	0x0000270f
 8007f48:	0800a215 	.word	0x0800a215
 8007f4c:	0800a218 	.word	0x0800a218
 8007f50:	0800a1e8 	.word	0x0800a1e8
 8007f54:	0800a1e9 	.word	0x0800a1e9
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	fffffc01 	.word	0xfffffc01
 8007f60:	3ff80000 	.word	0x3ff80000
 8007f64:	636f4361 	.word	0x636f4361
 8007f68:	3fd287a7 	.word	0x3fd287a7
 8007f6c:	8b60c8b3 	.word	0x8b60c8b3
 8007f70:	3fc68a28 	.word	0x3fc68a28
 8007f74:	509f79fb 	.word	0x509f79fb
 8007f78:	3fd34413 	.word	0x3fd34413
 8007f7c:	0800a320 	.word	0x0800a320
 8007f80:	00000432 	.word	0x00000432
 8007f84:	00000412 	.word	0x00000412
 8007f88:	fe100000 	.word	0xfe100000
 8007f8c:	0800a28b 	.word	0x0800a28b
 8007f90:	0800a2f8 	.word	0x0800a2f8
 8007f94:	2302      	movs	r3, #2
 8007f96:	9310      	str	r3, [sp, #64]	; 0x40
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d016      	beq.n	8007fcc <_dtoa_r+0x3dc>
 8007f9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fa0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fa2:	425c      	negs	r4, r3
 8007fa4:	230f      	movs	r3, #15
 8007fa6:	4ab6      	ldr	r2, [pc, #728]	; (8008280 <_dtoa_r+0x690>)
 8007fa8:	4023      	ands	r3, r4
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	18d3      	adds	r3, r2, r3
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f7f9 fdcb 	bl	8001b4c <__aeabi_dmul>
 8007fb6:	2601      	movs	r6, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9008      	str	r0, [sp, #32]
 8007fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8007fbe:	4db1      	ldr	r5, [pc, #708]	; (8008284 <_dtoa_r+0x694>)
 8007fc0:	1124      	asrs	r4, r4, #4
 8007fc2:	2c00      	cmp	r4, #0
 8007fc4:	d000      	beq.n	8007fc8 <_dtoa_r+0x3d8>
 8007fc6:	e094      	b.n	80080f2 <_dtoa_r+0x502>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d19f      	bne.n	8007f0c <_dtoa_r+0x31c>
 8007fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d100      	bne.n	8007fd4 <_dtoa_r+0x3e4>
 8007fd2:	e09b      	b.n	800810c <_dtoa_r+0x51c>
 8007fd4:	9c08      	ldr	r4, [sp, #32]
 8007fd6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007fd8:	2200      	movs	r2, #0
 8007fda:	0020      	movs	r0, r4
 8007fdc:	0029      	movs	r1, r5
 8007fde:	4baa      	ldr	r3, [pc, #680]	; (8008288 <_dtoa_r+0x698>)
 8007fe0:	f7f8 fa3a 	bl	8000458 <__aeabi_dcmplt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	d100      	bne.n	8007fea <_dtoa_r+0x3fa>
 8007fe8:	e090      	b.n	800810c <_dtoa_r+0x51c>
 8007fea:	9b07      	ldr	r3, [sp, #28]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d100      	bne.n	8007ff2 <_dtoa_r+0x402>
 8007ff0:	e08c      	b.n	800810c <_dtoa_r+0x51c>
 8007ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	dd46      	ble.n	8008086 <_dtoa_r+0x496>
 8007ff8:	9b02      	ldr	r3, [sp, #8]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	0020      	movs	r0, r4
 8007ffe:	0029      	movs	r1, r5
 8008000:	1e5e      	subs	r6, r3, #1
 8008002:	4ba2      	ldr	r3, [pc, #648]	; (800828c <_dtoa_r+0x69c>)
 8008004:	f7f9 fda2 	bl	8001b4c <__aeabi_dmul>
 8008008:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800800a:	9008      	str	r0, [sp, #32]
 800800c:	9109      	str	r1, [sp, #36]	; 0x24
 800800e:	3301      	adds	r3, #1
 8008010:	9310      	str	r3, [sp, #64]	; 0x40
 8008012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008014:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008016:	9c08      	ldr	r4, [sp, #32]
 8008018:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800801a:	9314      	str	r3, [sp, #80]	; 0x50
 800801c:	f7fa fbe8 	bl	80027f0 <__aeabi_i2d>
 8008020:	0022      	movs	r2, r4
 8008022:	002b      	movs	r3, r5
 8008024:	f7f9 fd92 	bl	8001b4c <__aeabi_dmul>
 8008028:	2200      	movs	r2, #0
 800802a:	4b99      	ldr	r3, [pc, #612]	; (8008290 <_dtoa_r+0x6a0>)
 800802c:	f7f8 fe50 	bl	8000cd0 <__aeabi_dadd>
 8008030:	9010      	str	r0, [sp, #64]	; 0x40
 8008032:	9111      	str	r1, [sp, #68]	; 0x44
 8008034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008038:	9208      	str	r2, [sp, #32]
 800803a:	9309      	str	r3, [sp, #36]	; 0x24
 800803c:	4a95      	ldr	r2, [pc, #596]	; (8008294 <_dtoa_r+0x6a4>)
 800803e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008040:	4694      	mov	ip, r2
 8008042:	4463      	add	r3, ip
 8008044:	9317      	str	r3, [sp, #92]	; 0x5c
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800804a:	2b00      	cmp	r3, #0
 800804c:	d161      	bne.n	8008112 <_dtoa_r+0x522>
 800804e:	2200      	movs	r2, #0
 8008050:	0020      	movs	r0, r4
 8008052:	0029      	movs	r1, r5
 8008054:	4b90      	ldr	r3, [pc, #576]	; (8008298 <_dtoa_r+0x6a8>)
 8008056:	f7f9 ffe5 	bl	8002024 <__aeabi_dsub>
 800805a:	9a08      	ldr	r2, [sp, #32]
 800805c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800805e:	0004      	movs	r4, r0
 8008060:	000d      	movs	r5, r1
 8008062:	f7f8 fa0d 	bl	8000480 <__aeabi_dcmpgt>
 8008066:	2800      	cmp	r0, #0
 8008068:	d000      	beq.n	800806c <_dtoa_r+0x47c>
 800806a:	e2af      	b.n	80085cc <_dtoa_r+0x9dc>
 800806c:	488b      	ldr	r0, [pc, #556]	; (800829c <_dtoa_r+0x6ac>)
 800806e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008070:	4684      	mov	ip, r0
 8008072:	4461      	add	r1, ip
 8008074:	000b      	movs	r3, r1
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	9a08      	ldr	r2, [sp, #32]
 800807c:	f7f8 f9ec 	bl	8000458 <__aeabi_dcmplt>
 8008080:	2800      	cmp	r0, #0
 8008082:	d000      	beq.n	8008086 <_dtoa_r+0x496>
 8008084:	e29f      	b.n	80085c6 <_dtoa_r+0x9d6>
 8008086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008088:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800808a:	9308      	str	r3, [sp, #32]
 800808c:	9409      	str	r4, [sp, #36]	; 0x24
 800808e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008090:	2b00      	cmp	r3, #0
 8008092:	da00      	bge.n	8008096 <_dtoa_r+0x4a6>
 8008094:	e172      	b.n	800837c <_dtoa_r+0x78c>
 8008096:	9a02      	ldr	r2, [sp, #8]
 8008098:	2a0e      	cmp	r2, #14
 800809a:	dd00      	ble.n	800809e <_dtoa_r+0x4ae>
 800809c:	e16e      	b.n	800837c <_dtoa_r+0x78c>
 800809e:	4b78      	ldr	r3, [pc, #480]	; (8008280 <_dtoa_r+0x690>)
 80080a0:	00d2      	lsls	r2, r2, #3
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	685c      	ldr	r4, [r3, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	930a      	str	r3, [sp, #40]	; 0x28
 80080aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80080ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	db00      	blt.n	80080b4 <_dtoa_r+0x4c4>
 80080b2:	e0f7      	b.n	80082a4 <_dtoa_r+0x6b4>
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd00      	ble.n	80080bc <_dtoa_r+0x4cc>
 80080ba:	e0f3      	b.n	80082a4 <_dtoa_r+0x6b4>
 80080bc:	d000      	beq.n	80080c0 <_dtoa_r+0x4d0>
 80080be:	e282      	b.n	80085c6 <_dtoa_r+0x9d6>
 80080c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080c4:	2200      	movs	r2, #0
 80080c6:	4b74      	ldr	r3, [pc, #464]	; (8008298 <_dtoa_r+0x6a8>)
 80080c8:	f7f9 fd40 	bl	8001b4c <__aeabi_dmul>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d0:	f7f8 f9e0 	bl	8000494 <__aeabi_dcmpge>
 80080d4:	9e07      	ldr	r6, [sp, #28]
 80080d6:	0035      	movs	r5, r6
 80080d8:	2800      	cmp	r0, #0
 80080da:	d000      	beq.n	80080de <_dtoa_r+0x4ee>
 80080dc:	e259      	b.n	8008592 <_dtoa_r+0x9a2>
 80080de:	9b06      	ldr	r3, [sp, #24]
 80080e0:	9a06      	ldr	r2, [sp, #24]
 80080e2:	3301      	adds	r3, #1
 80080e4:	9308      	str	r3, [sp, #32]
 80080e6:	2331      	movs	r3, #49	; 0x31
 80080e8:	7013      	strb	r3, [r2, #0]
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	3301      	adds	r3, #1
 80080ee:	9302      	str	r3, [sp, #8]
 80080f0:	e254      	b.n	800859c <_dtoa_r+0x9ac>
 80080f2:	4234      	tst	r4, r6
 80080f4:	d007      	beq.n	8008106 <_dtoa_r+0x516>
 80080f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080f8:	3301      	adds	r3, #1
 80080fa:	9310      	str	r3, [sp, #64]	; 0x40
 80080fc:	682a      	ldr	r2, [r5, #0]
 80080fe:	686b      	ldr	r3, [r5, #4]
 8008100:	f7f9 fd24 	bl	8001b4c <__aeabi_dmul>
 8008104:	0033      	movs	r3, r6
 8008106:	1064      	asrs	r4, r4, #1
 8008108:	3508      	adds	r5, #8
 800810a:	e75a      	b.n	8007fc2 <_dtoa_r+0x3d2>
 800810c:	9e02      	ldr	r6, [sp, #8]
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	e780      	b.n	8008014 <_dtoa_r+0x424>
 8008112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008114:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	4b59      	ldr	r3, [pc, #356]	; (8008280 <_dtoa_r+0x690>)
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	189b      	adds	r3, r3, r2
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	2900      	cmp	r1, #0
 8008124:	d051      	beq.n	80081ca <_dtoa_r+0x5da>
 8008126:	2000      	movs	r0, #0
 8008128:	495d      	ldr	r1, [pc, #372]	; (80082a0 <_dtoa_r+0x6b0>)
 800812a:	f7f9 f90d 	bl	8001348 <__aeabi_ddiv>
 800812e:	9a08      	ldr	r2, [sp, #32]
 8008130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008132:	f7f9 ff77 	bl	8002024 <__aeabi_dsub>
 8008136:	9a06      	ldr	r2, [sp, #24]
 8008138:	9b06      	ldr	r3, [sp, #24]
 800813a:	4694      	mov	ip, r2
 800813c:	9317      	str	r3, [sp, #92]	; 0x5c
 800813e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008140:	9010      	str	r0, [sp, #64]	; 0x40
 8008142:	9111      	str	r1, [sp, #68]	; 0x44
 8008144:	4463      	add	r3, ip
 8008146:	9319      	str	r3, [sp, #100]	; 0x64
 8008148:	0029      	movs	r1, r5
 800814a:	0020      	movs	r0, r4
 800814c:	f7fa fb1a 	bl	8002784 <__aeabi_d2iz>
 8008150:	9014      	str	r0, [sp, #80]	; 0x50
 8008152:	f7fa fb4d 	bl	80027f0 <__aeabi_i2d>
 8008156:	0002      	movs	r2, r0
 8008158:	000b      	movs	r3, r1
 800815a:	0020      	movs	r0, r4
 800815c:	0029      	movs	r1, r5
 800815e:	f7f9 ff61 	bl	8002024 <__aeabi_dsub>
 8008162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008164:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008166:	3301      	adds	r3, #1
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800816c:	0004      	movs	r4, r0
 800816e:	3330      	adds	r3, #48	; 0x30
 8008170:	7013      	strb	r3, [r2, #0]
 8008172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008176:	000d      	movs	r5, r1
 8008178:	f7f8 f96e 	bl	8000458 <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	d175      	bne.n	800826c <_dtoa_r+0x67c>
 8008180:	0022      	movs	r2, r4
 8008182:	002b      	movs	r3, r5
 8008184:	2000      	movs	r0, #0
 8008186:	4940      	ldr	r1, [pc, #256]	; (8008288 <_dtoa_r+0x698>)
 8008188:	f7f9 ff4c 	bl	8002024 <__aeabi_dsub>
 800818c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008190:	f7f8 f962 	bl	8000458 <__aeabi_dcmplt>
 8008194:	2800      	cmp	r0, #0
 8008196:	d000      	beq.n	800819a <_dtoa_r+0x5aa>
 8008198:	e0d2      	b.n	8008340 <_dtoa_r+0x750>
 800819a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800819c:	9a08      	ldr	r2, [sp, #32]
 800819e:	4293      	cmp	r3, r2
 80081a0:	d100      	bne.n	80081a4 <_dtoa_r+0x5b4>
 80081a2:	e770      	b.n	8008086 <_dtoa_r+0x496>
 80081a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80081a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081a8:	2200      	movs	r2, #0
 80081aa:	4b38      	ldr	r3, [pc, #224]	; (800828c <_dtoa_r+0x69c>)
 80081ac:	f7f9 fcce 	bl	8001b4c <__aeabi_dmul>
 80081b0:	4b36      	ldr	r3, [pc, #216]	; (800828c <_dtoa_r+0x69c>)
 80081b2:	9010      	str	r0, [sp, #64]	; 0x40
 80081b4:	9111      	str	r1, [sp, #68]	; 0x44
 80081b6:	2200      	movs	r2, #0
 80081b8:	0020      	movs	r0, r4
 80081ba:	0029      	movs	r1, r5
 80081bc:	f7f9 fcc6 	bl	8001b4c <__aeabi_dmul>
 80081c0:	9b08      	ldr	r3, [sp, #32]
 80081c2:	0004      	movs	r4, r0
 80081c4:	000d      	movs	r5, r1
 80081c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081c8:	e7be      	b.n	8008148 <_dtoa_r+0x558>
 80081ca:	9808      	ldr	r0, [sp, #32]
 80081cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ce:	f7f9 fcbd 	bl	8001b4c <__aeabi_dmul>
 80081d2:	9a06      	ldr	r2, [sp, #24]
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	4694      	mov	ip, r2
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081dc:	9010      	str	r0, [sp, #64]	; 0x40
 80081de:	9111      	str	r1, [sp, #68]	; 0x44
 80081e0:	4463      	add	r3, ip
 80081e2:	9319      	str	r3, [sp, #100]	; 0x64
 80081e4:	0029      	movs	r1, r5
 80081e6:	0020      	movs	r0, r4
 80081e8:	f7fa facc 	bl	8002784 <__aeabi_d2iz>
 80081ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80081ee:	f7fa faff 	bl	80027f0 <__aeabi_i2d>
 80081f2:	0002      	movs	r2, r0
 80081f4:	000b      	movs	r3, r1
 80081f6:	0020      	movs	r0, r4
 80081f8:	0029      	movs	r1, r5
 80081fa:	f7f9 ff13 	bl	8002024 <__aeabi_dsub>
 80081fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	3330      	adds	r3, #48	; 0x30
 8008204:	7013      	strb	r3, [r2, #0]
 8008206:	0013      	movs	r3, r2
 8008208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800820a:	3301      	adds	r3, #1
 800820c:	0004      	movs	r4, r0
 800820e:	000d      	movs	r5, r1
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	4293      	cmp	r3, r2
 8008214:	d12c      	bne.n	8008270 <_dtoa_r+0x680>
 8008216:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008218:	9911      	ldr	r1, [sp, #68]	; 0x44
 800821a:	9a06      	ldr	r2, [sp, #24]
 800821c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800821e:	4694      	mov	ip, r2
 8008220:	4463      	add	r3, ip
 8008222:	2200      	movs	r2, #0
 8008224:	9308      	str	r3, [sp, #32]
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <_dtoa_r+0x6b0>)
 8008228:	f7f8 fd52 	bl	8000cd0 <__aeabi_dadd>
 800822c:	0002      	movs	r2, r0
 800822e:	000b      	movs	r3, r1
 8008230:	0020      	movs	r0, r4
 8008232:	0029      	movs	r1, r5
 8008234:	f7f8 f924 	bl	8000480 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	d000      	beq.n	800823e <_dtoa_r+0x64e>
 800823c:	e080      	b.n	8008340 <_dtoa_r+0x750>
 800823e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008240:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008242:	2000      	movs	r0, #0
 8008244:	4916      	ldr	r1, [pc, #88]	; (80082a0 <_dtoa_r+0x6b0>)
 8008246:	f7f9 feed 	bl	8002024 <__aeabi_dsub>
 800824a:	0002      	movs	r2, r0
 800824c:	000b      	movs	r3, r1
 800824e:	0020      	movs	r0, r4
 8008250:	0029      	movs	r1, r5
 8008252:	f7f8 f901 	bl	8000458 <__aeabi_dcmplt>
 8008256:	2800      	cmp	r0, #0
 8008258:	d100      	bne.n	800825c <_dtoa_r+0x66c>
 800825a:	e714      	b.n	8008086 <_dtoa_r+0x496>
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	001a      	movs	r2, r3
 8008260:	3a01      	subs	r2, #1
 8008262:	9208      	str	r2, [sp, #32]
 8008264:	7812      	ldrb	r2, [r2, #0]
 8008266:	2a30      	cmp	r2, #48	; 0x30
 8008268:	d0f8      	beq.n	800825c <_dtoa_r+0x66c>
 800826a:	9308      	str	r3, [sp, #32]
 800826c:	9602      	str	r6, [sp, #8]
 800826e:	e055      	b.n	800831c <_dtoa_r+0x72c>
 8008270:	2200      	movs	r2, #0
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <_dtoa_r+0x69c>)
 8008274:	f7f9 fc6a 	bl	8001b4c <__aeabi_dmul>
 8008278:	0004      	movs	r4, r0
 800827a:	000d      	movs	r5, r1
 800827c:	e7b2      	b.n	80081e4 <_dtoa_r+0x5f4>
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	0800a320 	.word	0x0800a320
 8008284:	0800a2f8 	.word	0x0800a2f8
 8008288:	3ff00000 	.word	0x3ff00000
 800828c:	40240000 	.word	0x40240000
 8008290:	401c0000 	.word	0x401c0000
 8008294:	fcc00000 	.word	0xfcc00000
 8008298:	40140000 	.word	0x40140000
 800829c:	7cc00000 	.word	0x7cc00000
 80082a0:	3fe00000 	.word	0x3fe00000
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	9e06      	ldr	r6, [sp, #24]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	199b      	adds	r3, r3, r6
 80082ac:	930c      	str	r3, [sp, #48]	; 0x30
 80082ae:	9c08      	ldr	r4, [sp, #32]
 80082b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082b6:	0020      	movs	r0, r4
 80082b8:	0029      	movs	r1, r5
 80082ba:	f7f9 f845 	bl	8001348 <__aeabi_ddiv>
 80082be:	f7fa fa61 	bl	8002784 <__aeabi_d2iz>
 80082c2:	9007      	str	r0, [sp, #28]
 80082c4:	f7fa fa94 	bl	80027f0 <__aeabi_i2d>
 80082c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	f7f9 fc3e 	bl	8001b4c <__aeabi_dmul>
 80082d0:	0002      	movs	r2, r0
 80082d2:	000b      	movs	r3, r1
 80082d4:	0020      	movs	r0, r4
 80082d6:	0029      	movs	r1, r5
 80082d8:	f7f9 fea4 	bl	8002024 <__aeabi_dsub>
 80082dc:	0033      	movs	r3, r6
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	3601      	adds	r6, #1
 80082e2:	3230      	adds	r2, #48	; 0x30
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e8:	9608      	str	r6, [sp, #32]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d139      	bne.n	8008362 <_dtoa_r+0x772>
 80082ee:	0002      	movs	r2, r0
 80082f0:	000b      	movs	r3, r1
 80082f2:	f7f8 fced 	bl	8000cd0 <__aeabi_dadd>
 80082f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	0004      	movs	r4, r0
 80082fc:	000d      	movs	r5, r1
 80082fe:	f7f8 f8bf 	bl	8000480 <__aeabi_dcmpgt>
 8008302:	2800      	cmp	r0, #0
 8008304:	d11b      	bne.n	800833e <_dtoa_r+0x74e>
 8008306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830a:	0020      	movs	r0, r4
 800830c:	0029      	movs	r1, r5
 800830e:	f7f8 f89d 	bl	800044c <__aeabi_dcmpeq>
 8008312:	2800      	cmp	r0, #0
 8008314:	d002      	beq.n	800831c <_dtoa_r+0x72c>
 8008316:	9b07      	ldr	r3, [sp, #28]
 8008318:	07db      	lsls	r3, r3, #31
 800831a:	d410      	bmi.n	800833e <_dtoa_r+0x74e>
 800831c:	0038      	movs	r0, r7
 800831e:	9905      	ldr	r1, [sp, #20]
 8008320:	f000 fae6 	bl	80088f0 <_Bfree>
 8008324:	2300      	movs	r3, #0
 8008326:	9a08      	ldr	r2, [sp, #32]
 8008328:	9802      	ldr	r0, [sp, #8]
 800832a:	7013      	strb	r3, [r2, #0]
 800832c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800832e:	3001      	adds	r0, #1
 8008330:	6018      	str	r0, [r3, #0]
 8008332:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008334:	2b00      	cmp	r3, #0
 8008336:	d100      	bne.n	800833a <_dtoa_r+0x74a>
 8008338:	e4a6      	b.n	8007c88 <_dtoa_r+0x98>
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e4a4      	b.n	8007c88 <_dtoa_r+0x98>
 800833e:	9e02      	ldr	r6, [sp, #8]
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	9308      	str	r3, [sp, #32]
 8008344:	3b01      	subs	r3, #1
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	2a39      	cmp	r2, #57	; 0x39
 800834a:	d106      	bne.n	800835a <_dtoa_r+0x76a>
 800834c:	9a06      	ldr	r2, [sp, #24]
 800834e:	429a      	cmp	r2, r3
 8008350:	d1f7      	bne.n	8008342 <_dtoa_r+0x752>
 8008352:	2230      	movs	r2, #48	; 0x30
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	3601      	adds	r6, #1
 8008358:	700a      	strb	r2, [r1, #0]
 800835a:	781a      	ldrb	r2, [r3, #0]
 800835c:	3201      	adds	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e784      	b.n	800826c <_dtoa_r+0x67c>
 8008362:	2200      	movs	r2, #0
 8008364:	4baa      	ldr	r3, [pc, #680]	; (8008610 <_dtoa_r+0xa20>)
 8008366:	f7f9 fbf1 	bl	8001b4c <__aeabi_dmul>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	0004      	movs	r4, r0
 8008370:	000d      	movs	r5, r1
 8008372:	f7f8 f86b 	bl	800044c <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	d09b      	beq.n	80082b2 <_dtoa_r+0x6c2>
 800837a:	e7cf      	b.n	800831c <_dtoa_r+0x72c>
 800837c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800837e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008380:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008382:	2d00      	cmp	r5, #0
 8008384:	d012      	beq.n	80083ac <_dtoa_r+0x7bc>
 8008386:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008388:	2a01      	cmp	r2, #1
 800838a:	dc66      	bgt.n	800845a <_dtoa_r+0x86a>
 800838c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800838e:	2a00      	cmp	r2, #0
 8008390:	d05d      	beq.n	800844e <_dtoa_r+0x85e>
 8008392:	4aa0      	ldr	r2, [pc, #640]	; (8008614 <_dtoa_r+0xa24>)
 8008394:	189b      	adds	r3, r3, r2
 8008396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008398:	2101      	movs	r1, #1
 800839a:	18d2      	adds	r2, r2, r3
 800839c:	920a      	str	r2, [sp, #40]	; 0x28
 800839e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083a0:	0038      	movs	r0, r7
 80083a2:	18d3      	adds	r3, r2, r3
 80083a4:	930d      	str	r3, [sp, #52]	; 0x34
 80083a6:	f000 fb53 	bl	8008a50 <__i2b>
 80083aa:	0005      	movs	r5, r0
 80083ac:	2c00      	cmp	r4, #0
 80083ae:	dd0e      	ble.n	80083ce <_dtoa_r+0x7de>
 80083b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd0b      	ble.n	80083ce <_dtoa_r+0x7de>
 80083b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b8:	0023      	movs	r3, r4
 80083ba:	4294      	cmp	r4, r2
 80083bc:	dd00      	ble.n	80083c0 <_dtoa_r+0x7d0>
 80083be:	0013      	movs	r3, r2
 80083c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c2:	1ae4      	subs	r4, r4, r3
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	920a      	str	r2, [sp, #40]	; 0x28
 80083c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	930d      	str	r3, [sp, #52]	; 0x34
 80083ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d01f      	beq.n	8008414 <_dtoa_r+0x824>
 80083d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d054      	beq.n	8008484 <_dtoa_r+0x894>
 80083da:	2e00      	cmp	r6, #0
 80083dc:	dd11      	ble.n	8008402 <_dtoa_r+0x812>
 80083de:	0029      	movs	r1, r5
 80083e0:	0032      	movs	r2, r6
 80083e2:	0038      	movs	r0, r7
 80083e4:	f000 fbfa 	bl	8008bdc <__pow5mult>
 80083e8:	9a05      	ldr	r2, [sp, #20]
 80083ea:	0001      	movs	r1, r0
 80083ec:	0005      	movs	r5, r0
 80083ee:	0038      	movs	r0, r7
 80083f0:	f000 fb44 	bl	8008a7c <__multiply>
 80083f4:	9905      	ldr	r1, [sp, #20]
 80083f6:	9014      	str	r0, [sp, #80]	; 0x50
 80083f8:	0038      	movs	r0, r7
 80083fa:	f000 fa79 	bl	80088f0 <_Bfree>
 80083fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008404:	1b9a      	subs	r2, r3, r6
 8008406:	42b3      	cmp	r3, r6
 8008408:	d004      	beq.n	8008414 <_dtoa_r+0x824>
 800840a:	0038      	movs	r0, r7
 800840c:	9905      	ldr	r1, [sp, #20]
 800840e:	f000 fbe5 	bl	8008bdc <__pow5mult>
 8008412:	9005      	str	r0, [sp, #20]
 8008414:	2101      	movs	r1, #1
 8008416:	0038      	movs	r0, r7
 8008418:	f000 fb1a 	bl	8008a50 <__i2b>
 800841c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800841e:	0006      	movs	r6, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd31      	ble.n	8008488 <_dtoa_r+0x898>
 8008424:	001a      	movs	r2, r3
 8008426:	0001      	movs	r1, r0
 8008428:	0038      	movs	r0, r7
 800842a:	f000 fbd7 	bl	8008bdc <__pow5mult>
 800842e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008430:	0006      	movs	r6, r0
 8008432:	2b01      	cmp	r3, #1
 8008434:	dd2d      	ble.n	8008492 <_dtoa_r+0x8a2>
 8008436:	2300      	movs	r3, #0
 8008438:	930e      	str	r3, [sp, #56]	; 0x38
 800843a:	6933      	ldr	r3, [r6, #16]
 800843c:	3303      	adds	r3, #3
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	18f3      	adds	r3, r6, r3
 8008442:	6858      	ldr	r0, [r3, #4]
 8008444:	f000 fabc 	bl	80089c0 <__hi0bits>
 8008448:	2320      	movs	r3, #32
 800844a:	1a18      	subs	r0, r3, r0
 800844c:	e039      	b.n	80084c2 <_dtoa_r+0x8d2>
 800844e:	2336      	movs	r3, #54	; 0x36
 8008450:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008452:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008454:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008456:	1a9b      	subs	r3, r3, r2
 8008458:	e79d      	b.n	8008396 <_dtoa_r+0x7a6>
 800845a:	9b07      	ldr	r3, [sp, #28]
 800845c:	1e5e      	subs	r6, r3, #1
 800845e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008460:	42b3      	cmp	r3, r6
 8008462:	db07      	blt.n	8008474 <_dtoa_r+0x884>
 8008464:	1b9e      	subs	r6, r3, r6
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	da93      	bge.n	8008396 <_dtoa_r+0x7a6>
 800846e:	1ae4      	subs	r4, r4, r3
 8008470:	2300      	movs	r3, #0
 8008472:	e790      	b.n	8008396 <_dtoa_r+0x7a6>
 8008474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008476:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008478:	1af3      	subs	r3, r6, r3
 800847a:	18d3      	adds	r3, r2, r3
 800847c:	960e      	str	r6, [sp, #56]	; 0x38
 800847e:	9315      	str	r3, [sp, #84]	; 0x54
 8008480:	2600      	movs	r6, #0
 8008482:	e7f0      	b.n	8008466 <_dtoa_r+0x876>
 8008484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008486:	e7c0      	b.n	800840a <_dtoa_r+0x81a>
 8008488:	2300      	movs	r3, #0
 800848a:	930e      	str	r3, [sp, #56]	; 0x38
 800848c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800848e:	2b01      	cmp	r3, #1
 8008490:	dc13      	bgt.n	80084ba <_dtoa_r+0x8ca>
 8008492:	2300      	movs	r3, #0
 8008494:	930e      	str	r3, [sp, #56]	; 0x38
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10e      	bne.n	80084ba <_dtoa_r+0x8ca>
 800849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849e:	031b      	lsls	r3, r3, #12
 80084a0:	d10b      	bne.n	80084ba <_dtoa_r+0x8ca>
 80084a2:	4b5d      	ldr	r3, [pc, #372]	; (8008618 <_dtoa_r+0xa28>)
 80084a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a6:	4213      	tst	r3, r2
 80084a8:	d007      	beq.n	80084ba <_dtoa_r+0x8ca>
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	3301      	adds	r3, #1
 80084ae:	930a      	str	r3, [sp, #40]	; 0x28
 80084b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b2:	3301      	adds	r3, #1
 80084b4:	930d      	str	r3, [sp, #52]	; 0x34
 80084b6:	2301      	movs	r3, #1
 80084b8:	930e      	str	r3, [sp, #56]	; 0x38
 80084ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084bc:	2001      	movs	r0, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bb      	bne.n	800843a <_dtoa_r+0x84a>
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	221f      	movs	r2, #31
 80084c6:	1818      	adds	r0, r3, r0
 80084c8:	0003      	movs	r3, r0
 80084ca:	4013      	ands	r3, r2
 80084cc:	4210      	tst	r0, r2
 80084ce:	d046      	beq.n	800855e <_dtoa_r+0x96e>
 80084d0:	3201      	adds	r2, #1
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	2a04      	cmp	r2, #4
 80084d6:	dd3f      	ble.n	8008558 <_dtoa_r+0x968>
 80084d8:	221c      	movs	r2, #28
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084de:	18e4      	adds	r4, r4, r3
 80084e0:	18d2      	adds	r2, r2, r3
 80084e2:	920a      	str	r2, [sp, #40]	; 0x28
 80084e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e6:	18d3      	adds	r3, r2, r3
 80084e8:	930d      	str	r3, [sp, #52]	; 0x34
 80084ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd05      	ble.n	80084fc <_dtoa_r+0x90c>
 80084f0:	001a      	movs	r2, r3
 80084f2:	0038      	movs	r0, r7
 80084f4:	9905      	ldr	r1, [sp, #20]
 80084f6:	f000 fbcd 	bl	8008c94 <__lshift>
 80084fa:	9005      	str	r0, [sp, #20]
 80084fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dd05      	ble.n	800850e <_dtoa_r+0x91e>
 8008502:	0031      	movs	r1, r6
 8008504:	001a      	movs	r2, r3
 8008506:	0038      	movs	r0, r7
 8008508:	f000 fbc4 	bl	8008c94 <__lshift>
 800850c:	0006      	movs	r6, r0
 800850e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008510:	2b00      	cmp	r3, #0
 8008512:	d026      	beq.n	8008562 <_dtoa_r+0x972>
 8008514:	0031      	movs	r1, r6
 8008516:	9805      	ldr	r0, [sp, #20]
 8008518:	f000 fc2a 	bl	8008d70 <__mcmp>
 800851c:	2800      	cmp	r0, #0
 800851e:	da20      	bge.n	8008562 <_dtoa_r+0x972>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	220a      	movs	r2, #10
 8008524:	3b01      	subs	r3, #1
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	0038      	movs	r0, r7
 800852a:	2300      	movs	r3, #0
 800852c:	9905      	ldr	r1, [sp, #20]
 800852e:	f000 fa03 	bl	8008938 <__multadd>
 8008532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008534:	9005      	str	r0, [sp, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d100      	bne.n	800853c <_dtoa_r+0x94c>
 800853a:	e166      	b.n	800880a <_dtoa_r+0xc1a>
 800853c:	2300      	movs	r3, #0
 800853e:	0029      	movs	r1, r5
 8008540:	220a      	movs	r2, #10
 8008542:	0038      	movs	r0, r7
 8008544:	f000 f9f8 	bl	8008938 <__multadd>
 8008548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800854a:	0005      	movs	r5, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	dc47      	bgt.n	80085e0 <_dtoa_r+0x9f0>
 8008550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008552:	2b02      	cmp	r3, #2
 8008554:	dc0d      	bgt.n	8008572 <_dtoa_r+0x982>
 8008556:	e043      	b.n	80085e0 <_dtoa_r+0x9f0>
 8008558:	2a04      	cmp	r2, #4
 800855a:	d0c6      	beq.n	80084ea <_dtoa_r+0x8fa>
 800855c:	0013      	movs	r3, r2
 800855e:	331c      	adds	r3, #28
 8008560:	e7bc      	b.n	80084dc <_dtoa_r+0x8ec>
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dc35      	bgt.n	80085d4 <_dtoa_r+0x9e4>
 8008568:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800856a:	2b02      	cmp	r3, #2
 800856c:	dd32      	ble.n	80085d4 <_dtoa_r+0x9e4>
 800856e:	9b07      	ldr	r3, [sp, #28]
 8008570:	930c      	str	r3, [sp, #48]	; 0x30
 8008572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10c      	bne.n	8008592 <_dtoa_r+0x9a2>
 8008578:	0031      	movs	r1, r6
 800857a:	2205      	movs	r2, #5
 800857c:	0038      	movs	r0, r7
 800857e:	f000 f9db 	bl	8008938 <__multadd>
 8008582:	0006      	movs	r6, r0
 8008584:	0001      	movs	r1, r0
 8008586:	9805      	ldr	r0, [sp, #20]
 8008588:	f000 fbf2 	bl	8008d70 <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	dd00      	ble.n	8008592 <_dtoa_r+0x9a2>
 8008590:	e5a5      	b.n	80080de <_dtoa_r+0x4ee>
 8008592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008594:	43db      	mvns	r3, r3
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	9b06      	ldr	r3, [sp, #24]
 800859a:	9308      	str	r3, [sp, #32]
 800859c:	2400      	movs	r4, #0
 800859e:	0031      	movs	r1, r6
 80085a0:	0038      	movs	r0, r7
 80085a2:	f000 f9a5 	bl	80088f0 <_Bfree>
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	d100      	bne.n	80085ac <_dtoa_r+0x9bc>
 80085aa:	e6b7      	b.n	800831c <_dtoa_r+0x72c>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	d005      	beq.n	80085bc <_dtoa_r+0x9cc>
 80085b0:	42ac      	cmp	r4, r5
 80085b2:	d003      	beq.n	80085bc <_dtoa_r+0x9cc>
 80085b4:	0021      	movs	r1, r4
 80085b6:	0038      	movs	r0, r7
 80085b8:	f000 f99a 	bl	80088f0 <_Bfree>
 80085bc:	0029      	movs	r1, r5
 80085be:	0038      	movs	r0, r7
 80085c0:	f000 f996 	bl	80088f0 <_Bfree>
 80085c4:	e6aa      	b.n	800831c <_dtoa_r+0x72c>
 80085c6:	2600      	movs	r6, #0
 80085c8:	0035      	movs	r5, r6
 80085ca:	e7e2      	b.n	8008592 <_dtoa_r+0x9a2>
 80085cc:	9602      	str	r6, [sp, #8]
 80085ce:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80085d0:	0035      	movs	r5, r6
 80085d2:	e584      	b.n	80080de <_dtoa_r+0x4ee>
 80085d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d100      	bne.n	80085dc <_dtoa_r+0x9ec>
 80085da:	e0ce      	b.n	800877a <_dtoa_r+0xb8a>
 80085dc:	9b07      	ldr	r3, [sp, #28]
 80085de:	930c      	str	r3, [sp, #48]	; 0x30
 80085e0:	2c00      	cmp	r4, #0
 80085e2:	dd05      	ble.n	80085f0 <_dtoa_r+0xa00>
 80085e4:	0029      	movs	r1, r5
 80085e6:	0022      	movs	r2, r4
 80085e8:	0038      	movs	r0, r7
 80085ea:	f000 fb53 	bl	8008c94 <__lshift>
 80085ee:	0005      	movs	r5, r0
 80085f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085f2:	0028      	movs	r0, r5
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d022      	beq.n	800863e <_dtoa_r+0xa4e>
 80085f8:	0038      	movs	r0, r7
 80085fa:	6869      	ldr	r1, [r5, #4]
 80085fc:	f000 f934 	bl	8008868 <_Balloc>
 8008600:	1e04      	subs	r4, r0, #0
 8008602:	d10f      	bne.n	8008624 <_dtoa_r+0xa34>
 8008604:	0002      	movs	r2, r0
 8008606:	4b05      	ldr	r3, [pc, #20]	; (800861c <_dtoa_r+0xa2c>)
 8008608:	4905      	ldr	r1, [pc, #20]	; (8008620 <_dtoa_r+0xa30>)
 800860a:	f7ff fb06 	bl	8007c1a <_dtoa_r+0x2a>
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	40240000 	.word	0x40240000
 8008614:	00000433 	.word	0x00000433
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	0800a28b 	.word	0x0800a28b
 8008620:	000002ea 	.word	0x000002ea
 8008624:	0029      	movs	r1, r5
 8008626:	692b      	ldr	r3, [r5, #16]
 8008628:	310c      	adds	r1, #12
 800862a:	1c9a      	adds	r2, r3, #2
 800862c:	0092      	lsls	r2, r2, #2
 800862e:	300c      	adds	r0, #12
 8008630:	f000 f911 	bl	8008856 <memcpy>
 8008634:	2201      	movs	r2, #1
 8008636:	0021      	movs	r1, r4
 8008638:	0038      	movs	r0, r7
 800863a:	f000 fb2b 	bl	8008c94 <__lshift>
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	3b01      	subs	r3, #1
 8008646:	189b      	adds	r3, r3, r2
 8008648:	2201      	movs	r2, #1
 800864a:	002c      	movs	r4, r5
 800864c:	0005      	movs	r5, r0
 800864e:	9314      	str	r3, [sp, #80]	; 0x50
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	4013      	ands	r3, r2
 8008654:	930f      	str	r3, [sp, #60]	; 0x3c
 8008656:	0031      	movs	r1, r6
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	f7ff fa3d 	bl	8007ad8 <quorem>
 800865e:	0003      	movs	r3, r0
 8008660:	0021      	movs	r1, r4
 8008662:	3330      	adds	r3, #48	; 0x30
 8008664:	900d      	str	r0, [sp, #52]	; 0x34
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	9307      	str	r3, [sp, #28]
 800866a:	f000 fb81 	bl	8008d70 <__mcmp>
 800866e:	002a      	movs	r2, r5
 8008670:	900e      	str	r0, [sp, #56]	; 0x38
 8008672:	0031      	movs	r1, r6
 8008674:	0038      	movs	r0, r7
 8008676:	f000 fb97 	bl	8008da8 <__mdiff>
 800867a:	68c3      	ldr	r3, [r0, #12]
 800867c:	9008      	str	r0, [sp, #32]
 800867e:	9310      	str	r3, [sp, #64]	; 0x40
 8008680:	2301      	movs	r3, #1
 8008682:	930c      	str	r3, [sp, #48]	; 0x30
 8008684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <_dtoa_r+0xaa4>
 800868a:	0001      	movs	r1, r0
 800868c:	9805      	ldr	r0, [sp, #20]
 800868e:	f000 fb6f 	bl	8008d70 <__mcmp>
 8008692:	900c      	str	r0, [sp, #48]	; 0x30
 8008694:	0038      	movs	r0, r7
 8008696:	9908      	ldr	r1, [sp, #32]
 8008698:	f000 f92a 	bl	80088f0 <_Bfree>
 800869c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a0:	3301      	adds	r3, #1
 80086a2:	9308      	str	r3, [sp, #32]
 80086a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086a6:	4313      	orrs	r3, r2
 80086a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086aa:	4313      	orrs	r3, r2
 80086ac:	d10c      	bne.n	80086c8 <_dtoa_r+0xad8>
 80086ae:	9b07      	ldr	r3, [sp, #28]
 80086b0:	2b39      	cmp	r3, #57	; 0x39
 80086b2:	d026      	beq.n	8008702 <_dtoa_r+0xb12>
 80086b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd02      	ble.n	80086c0 <_dtoa_r+0xad0>
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	3331      	adds	r3, #49	; 0x31
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e76a      	b.n	800859e <_dtoa_r+0x9ae>
 80086c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db04      	blt.n	80086d8 <_dtoa_r+0xae8>
 80086ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086d4:	4313      	orrs	r3, r2
 80086d6:	d11f      	bne.n	8008718 <_dtoa_r+0xb28>
 80086d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086da:	2b00      	cmp	r3, #0
 80086dc:	ddf0      	ble.n	80086c0 <_dtoa_r+0xad0>
 80086de:	9905      	ldr	r1, [sp, #20]
 80086e0:	2201      	movs	r2, #1
 80086e2:	0038      	movs	r0, r7
 80086e4:	f000 fad6 	bl	8008c94 <__lshift>
 80086e8:	0031      	movs	r1, r6
 80086ea:	9005      	str	r0, [sp, #20]
 80086ec:	f000 fb40 	bl	8008d70 <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dc03      	bgt.n	80086fc <_dtoa_r+0xb0c>
 80086f4:	d1e4      	bne.n	80086c0 <_dtoa_r+0xad0>
 80086f6:	9b07      	ldr	r3, [sp, #28]
 80086f8:	07db      	lsls	r3, r3, #31
 80086fa:	d5e1      	bpl.n	80086c0 <_dtoa_r+0xad0>
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	2b39      	cmp	r3, #57	; 0x39
 8008700:	d1db      	bne.n	80086ba <_dtoa_r+0xaca>
 8008702:	2339      	movs	r3, #57	; 0x39
 8008704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008706:	7013      	strb	r3, [r2, #0]
 8008708:	9b08      	ldr	r3, [sp, #32]
 800870a:	9308      	str	r3, [sp, #32]
 800870c:	3b01      	subs	r3, #1
 800870e:	781a      	ldrb	r2, [r3, #0]
 8008710:	2a39      	cmp	r2, #57	; 0x39
 8008712:	d068      	beq.n	80087e6 <_dtoa_r+0xbf6>
 8008714:	3201      	adds	r2, #1
 8008716:	e7d5      	b.n	80086c4 <_dtoa_r+0xad4>
 8008718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd07      	ble.n	800872e <_dtoa_r+0xb3e>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	2b39      	cmp	r3, #57	; 0x39
 8008722:	d0ee      	beq.n	8008702 <_dtoa_r+0xb12>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008728:	3301      	adds	r3, #1
 800872a:	7013      	strb	r3, [r2, #0]
 800872c:	e737      	b.n	800859e <_dtoa_r+0x9ae>
 800872e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008738:	4293      	cmp	r3, r2
 800873a:	d03e      	beq.n	80087ba <_dtoa_r+0xbca>
 800873c:	2300      	movs	r3, #0
 800873e:	220a      	movs	r2, #10
 8008740:	9905      	ldr	r1, [sp, #20]
 8008742:	0038      	movs	r0, r7
 8008744:	f000 f8f8 	bl	8008938 <__multadd>
 8008748:	2300      	movs	r3, #0
 800874a:	9005      	str	r0, [sp, #20]
 800874c:	220a      	movs	r2, #10
 800874e:	0021      	movs	r1, r4
 8008750:	0038      	movs	r0, r7
 8008752:	42ac      	cmp	r4, r5
 8008754:	d106      	bne.n	8008764 <_dtoa_r+0xb74>
 8008756:	f000 f8ef 	bl	8008938 <__multadd>
 800875a:	0004      	movs	r4, r0
 800875c:	0005      	movs	r5, r0
 800875e:	9b08      	ldr	r3, [sp, #32]
 8008760:	930a      	str	r3, [sp, #40]	; 0x28
 8008762:	e778      	b.n	8008656 <_dtoa_r+0xa66>
 8008764:	f000 f8e8 	bl	8008938 <__multadd>
 8008768:	0029      	movs	r1, r5
 800876a:	0004      	movs	r4, r0
 800876c:	2300      	movs	r3, #0
 800876e:	220a      	movs	r2, #10
 8008770:	0038      	movs	r0, r7
 8008772:	f000 f8e1 	bl	8008938 <__multadd>
 8008776:	0005      	movs	r5, r0
 8008778:	e7f1      	b.n	800875e <_dtoa_r+0xb6e>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	930c      	str	r3, [sp, #48]	; 0x30
 800877e:	2400      	movs	r4, #0
 8008780:	0031      	movs	r1, r6
 8008782:	9805      	ldr	r0, [sp, #20]
 8008784:	f7ff f9a8 	bl	8007ad8 <quorem>
 8008788:	9b06      	ldr	r3, [sp, #24]
 800878a:	3030      	adds	r0, #48	; 0x30
 800878c:	5518      	strb	r0, [r3, r4]
 800878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008790:	3401      	adds	r4, #1
 8008792:	9007      	str	r0, [sp, #28]
 8008794:	42a3      	cmp	r3, r4
 8008796:	dd07      	ble.n	80087a8 <_dtoa_r+0xbb8>
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	0038      	movs	r0, r7
 800879e:	9905      	ldr	r1, [sp, #20]
 80087a0:	f000 f8ca 	bl	8008938 <__multadd>
 80087a4:	9005      	str	r0, [sp, #20]
 80087a6:	e7eb      	b.n	8008780 <_dtoa_r+0xb90>
 80087a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087aa:	2001      	movs	r0, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd00      	ble.n	80087b2 <_dtoa_r+0xbc2>
 80087b0:	0018      	movs	r0, r3
 80087b2:	2400      	movs	r4, #0
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	181b      	adds	r3, r3, r0
 80087b8:	9308      	str	r3, [sp, #32]
 80087ba:	9905      	ldr	r1, [sp, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	0038      	movs	r0, r7
 80087c0:	f000 fa68 	bl	8008c94 <__lshift>
 80087c4:	0031      	movs	r1, r6
 80087c6:	9005      	str	r0, [sp, #20]
 80087c8:	f000 fad2 	bl	8008d70 <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	dc9b      	bgt.n	8008708 <_dtoa_r+0xb18>
 80087d0:	d102      	bne.n	80087d8 <_dtoa_r+0xbe8>
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	07db      	lsls	r3, r3, #31
 80087d6:	d497      	bmi.n	8008708 <_dtoa_r+0xb18>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	9308      	str	r3, [sp, #32]
 80087dc:	3b01      	subs	r3, #1
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	2a30      	cmp	r2, #48	; 0x30
 80087e2:	d0fa      	beq.n	80087da <_dtoa_r+0xbea>
 80087e4:	e6db      	b.n	800859e <_dtoa_r+0x9ae>
 80087e6:	9a06      	ldr	r2, [sp, #24]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d18e      	bne.n	800870a <_dtoa_r+0xb1a>
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	3301      	adds	r3, #1
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	2331      	movs	r3, #49	; 0x31
 80087f4:	e799      	b.n	800872a <_dtoa_r+0xb3a>
 80087f6:	4b09      	ldr	r3, [pc, #36]	; (800881c <_dtoa_r+0xc2c>)
 80087f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087fa:	9306      	str	r3, [sp, #24]
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <_dtoa_r+0xc30>)
 80087fe:	2a00      	cmp	r2, #0
 8008800:	d001      	beq.n	8008806 <_dtoa_r+0xc16>
 8008802:	f7ff fa3f 	bl	8007c84 <_dtoa_r+0x94>
 8008806:	f7ff fa3f 	bl	8007c88 <_dtoa_r+0x98>
 800880a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880c:	2b00      	cmp	r3, #0
 800880e:	dcb6      	bgt.n	800877e <_dtoa_r+0xb8e>
 8008810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008812:	2b02      	cmp	r3, #2
 8008814:	dd00      	ble.n	8008818 <_dtoa_r+0xc28>
 8008816:	e6ac      	b.n	8008572 <_dtoa_r+0x982>
 8008818:	e7b1      	b.n	800877e <_dtoa_r+0xb8e>
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	0800a20c 	.word	0x0800a20c
 8008820:	0800a214 	.word	0x0800a214

08008824 <_localeconv_r>:
 8008824:	4800      	ldr	r0, [pc, #0]	; (8008828 <_localeconv_r+0x4>)
 8008826:	4770      	bx	lr
 8008828:	20000160 	.word	0x20000160

0800882c <malloc>:
 800882c:	b510      	push	{r4, lr}
 800882e:	4b03      	ldr	r3, [pc, #12]	; (800883c <malloc+0x10>)
 8008830:	0001      	movs	r1, r0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	f000 fc4c 	bl	80090d0 <_malloc_r>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	2000000c 	.word	0x2000000c

08008840 <memchr>:
 8008840:	b2c9      	uxtb	r1, r1
 8008842:	1882      	adds	r2, r0, r2
 8008844:	4290      	cmp	r0, r2
 8008846:	d101      	bne.n	800884c <memchr+0xc>
 8008848:	2000      	movs	r0, #0
 800884a:	4770      	bx	lr
 800884c:	7803      	ldrb	r3, [r0, #0]
 800884e:	428b      	cmp	r3, r1
 8008850:	d0fb      	beq.n	800884a <memchr+0xa>
 8008852:	3001      	adds	r0, #1
 8008854:	e7f6      	b.n	8008844 <memchr+0x4>

08008856 <memcpy>:
 8008856:	2300      	movs	r3, #0
 8008858:	b510      	push	{r4, lr}
 800885a:	429a      	cmp	r2, r3
 800885c:	d100      	bne.n	8008860 <memcpy+0xa>
 800885e:	bd10      	pop	{r4, pc}
 8008860:	5ccc      	ldrb	r4, [r1, r3]
 8008862:	54c4      	strb	r4, [r0, r3]
 8008864:	3301      	adds	r3, #1
 8008866:	e7f8      	b.n	800885a <memcpy+0x4>

08008868 <_Balloc>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800886c:	0006      	movs	r6, r0
 800886e:	000c      	movs	r4, r1
 8008870:	2d00      	cmp	r5, #0
 8008872:	d10e      	bne.n	8008892 <_Balloc+0x2a>
 8008874:	2010      	movs	r0, #16
 8008876:	f7ff ffd9 	bl	800882c <malloc>
 800887a:	1e02      	subs	r2, r0, #0
 800887c:	6270      	str	r0, [r6, #36]	; 0x24
 800887e:	d104      	bne.n	800888a <_Balloc+0x22>
 8008880:	2166      	movs	r1, #102	; 0x66
 8008882:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <_Balloc+0x80>)
 8008884:	4819      	ldr	r0, [pc, #100]	; (80088ec <_Balloc+0x84>)
 8008886:	f000 fe0d 	bl	80094a4 <__assert_func>
 800888a:	6045      	str	r5, [r0, #4]
 800888c:	6085      	str	r5, [r0, #8]
 800888e:	6005      	str	r5, [r0, #0]
 8008890:	60c5      	str	r5, [r0, #12]
 8008892:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008894:	68eb      	ldr	r3, [r5, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d013      	beq.n	80088c2 <_Balloc+0x5a>
 800889a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800889c:	00a2      	lsls	r2, r4, #2
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	189b      	adds	r3, r3, r2
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d118      	bne.n	80088da <_Balloc+0x72>
 80088a8:	2101      	movs	r1, #1
 80088aa:	000d      	movs	r5, r1
 80088ac:	40a5      	lsls	r5, r4
 80088ae:	1d6a      	adds	r2, r5, #5
 80088b0:	0030      	movs	r0, r6
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	f000 fb74 	bl	8008fa0 <_calloc_r>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d00c      	beq.n	80088d6 <_Balloc+0x6e>
 80088bc:	6044      	str	r4, [r0, #4]
 80088be:	6085      	str	r5, [r0, #8]
 80088c0:	e00d      	b.n	80088de <_Balloc+0x76>
 80088c2:	2221      	movs	r2, #33	; 0x21
 80088c4:	2104      	movs	r1, #4
 80088c6:	0030      	movs	r0, r6
 80088c8:	f000 fb6a 	bl	8008fa0 <_calloc_r>
 80088cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80088ce:	60e8      	str	r0, [r5, #12]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e1      	bne.n	800889a <_Balloc+0x32>
 80088d6:	2000      	movs	r0, #0
 80088d8:	bd70      	pop	{r4, r5, r6, pc}
 80088da:	6802      	ldr	r2, [r0, #0]
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	2300      	movs	r3, #0
 80088e0:	6103      	str	r3, [r0, #16]
 80088e2:	60c3      	str	r3, [r0, #12]
 80088e4:	e7f8      	b.n	80088d8 <_Balloc+0x70>
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	0800a219 	.word	0x0800a219
 80088ec:	0800a29c 	.word	0x0800a29c

080088f0 <_Bfree>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088f4:	0005      	movs	r5, r0
 80088f6:	000c      	movs	r4, r1
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	d10e      	bne.n	800891a <_Bfree+0x2a>
 80088fc:	2010      	movs	r0, #16
 80088fe:	f7ff ff95 	bl	800882c <malloc>
 8008902:	1e02      	subs	r2, r0, #0
 8008904:	6268      	str	r0, [r5, #36]	; 0x24
 8008906:	d104      	bne.n	8008912 <_Bfree+0x22>
 8008908:	218a      	movs	r1, #138	; 0x8a
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <_Bfree+0x40>)
 800890c:	4809      	ldr	r0, [pc, #36]	; (8008934 <_Bfree+0x44>)
 800890e:	f000 fdc9 	bl	80094a4 <__assert_func>
 8008912:	6046      	str	r6, [r0, #4]
 8008914:	6086      	str	r6, [r0, #8]
 8008916:	6006      	str	r6, [r0, #0]
 8008918:	60c6      	str	r6, [r0, #12]
 800891a:	2c00      	cmp	r4, #0
 800891c:	d007      	beq.n	800892e <_Bfree+0x3e>
 800891e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008920:	6862      	ldr	r2, [r4, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	189b      	adds	r3, r3, r2
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	6022      	str	r2, [r4, #0]
 800892c:	601c      	str	r4, [r3, #0]
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	0800a219 	.word	0x0800a219
 8008934:	0800a29c 	.word	0x0800a29c

08008938 <__multadd>:
 8008938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893a:	000e      	movs	r6, r1
 800893c:	9001      	str	r0, [sp, #4]
 800893e:	000c      	movs	r4, r1
 8008940:	001d      	movs	r5, r3
 8008942:	2000      	movs	r0, #0
 8008944:	690f      	ldr	r7, [r1, #16]
 8008946:	3614      	adds	r6, #20
 8008948:	6833      	ldr	r3, [r6, #0]
 800894a:	3001      	adds	r0, #1
 800894c:	b299      	uxth	r1, r3
 800894e:	4351      	muls	r1, r2
 8008950:	0c1b      	lsrs	r3, r3, #16
 8008952:	4353      	muls	r3, r2
 8008954:	1949      	adds	r1, r1, r5
 8008956:	0c0d      	lsrs	r5, r1, #16
 8008958:	195b      	adds	r3, r3, r5
 800895a:	0c1d      	lsrs	r5, r3, #16
 800895c:	b289      	uxth	r1, r1
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	185b      	adds	r3, r3, r1
 8008962:	c608      	stmia	r6!, {r3}
 8008964:	4287      	cmp	r7, r0
 8008966:	dcef      	bgt.n	8008948 <__multadd+0x10>
 8008968:	2d00      	cmp	r5, #0
 800896a:	d022      	beq.n	80089b2 <__multadd+0x7a>
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	42bb      	cmp	r3, r7
 8008970:	dc19      	bgt.n	80089a6 <__multadd+0x6e>
 8008972:	6863      	ldr	r3, [r4, #4]
 8008974:	9801      	ldr	r0, [sp, #4]
 8008976:	1c59      	adds	r1, r3, #1
 8008978:	f7ff ff76 	bl	8008868 <_Balloc>
 800897c:	1e06      	subs	r6, r0, #0
 800897e:	d105      	bne.n	800898c <__multadd+0x54>
 8008980:	0002      	movs	r2, r0
 8008982:	21b5      	movs	r1, #181	; 0xb5
 8008984:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <__multadd+0x80>)
 8008986:	480d      	ldr	r0, [pc, #52]	; (80089bc <__multadd+0x84>)
 8008988:	f000 fd8c 	bl	80094a4 <__assert_func>
 800898c:	0021      	movs	r1, r4
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	310c      	adds	r1, #12
 8008992:	1c9a      	adds	r2, r3, #2
 8008994:	0092      	lsls	r2, r2, #2
 8008996:	300c      	adds	r0, #12
 8008998:	f7ff ff5d 	bl	8008856 <memcpy>
 800899c:	0021      	movs	r1, r4
 800899e:	9801      	ldr	r0, [sp, #4]
 80089a0:	f7ff ffa6 	bl	80088f0 <_Bfree>
 80089a4:	0034      	movs	r4, r6
 80089a6:	1d3b      	adds	r3, r7, #4
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	18e3      	adds	r3, r4, r3
 80089ac:	605d      	str	r5, [r3, #4]
 80089ae:	1c7b      	adds	r3, r7, #1
 80089b0:	6123      	str	r3, [r4, #16]
 80089b2:	0020      	movs	r0, r4
 80089b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089b6:	46c0      	nop			; (mov r8, r8)
 80089b8:	0800a28b 	.word	0x0800a28b
 80089bc:	0800a29c 	.word	0x0800a29c

080089c0 <__hi0bits>:
 80089c0:	0003      	movs	r3, r0
 80089c2:	0c02      	lsrs	r2, r0, #16
 80089c4:	2000      	movs	r0, #0
 80089c6:	4282      	cmp	r2, r0
 80089c8:	d101      	bne.n	80089ce <__hi0bits+0xe>
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	3010      	adds	r0, #16
 80089ce:	0e1a      	lsrs	r2, r3, #24
 80089d0:	d101      	bne.n	80089d6 <__hi0bits+0x16>
 80089d2:	3008      	adds	r0, #8
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	0f1a      	lsrs	r2, r3, #28
 80089d8:	d101      	bne.n	80089de <__hi0bits+0x1e>
 80089da:	3004      	adds	r0, #4
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	0f9a      	lsrs	r2, r3, #30
 80089e0:	d101      	bne.n	80089e6 <__hi0bits+0x26>
 80089e2:	3002      	adds	r0, #2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	db03      	blt.n	80089f2 <__hi0bits+0x32>
 80089ea:	3001      	adds	r0, #1
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	d400      	bmi.n	80089f2 <__hi0bits+0x32>
 80089f0:	2020      	movs	r0, #32
 80089f2:	4770      	bx	lr

080089f4 <__lo0bits>:
 80089f4:	6803      	ldr	r3, [r0, #0]
 80089f6:	0002      	movs	r2, r0
 80089f8:	2107      	movs	r1, #7
 80089fa:	0018      	movs	r0, r3
 80089fc:	4008      	ands	r0, r1
 80089fe:	420b      	tst	r3, r1
 8008a00:	d00d      	beq.n	8008a1e <__lo0bits+0x2a>
 8008a02:	3906      	subs	r1, #6
 8008a04:	2000      	movs	r0, #0
 8008a06:	420b      	tst	r3, r1
 8008a08:	d105      	bne.n	8008a16 <__lo0bits+0x22>
 8008a0a:	3002      	adds	r0, #2
 8008a0c:	4203      	tst	r3, r0
 8008a0e:	d003      	beq.n	8008a18 <__lo0bits+0x24>
 8008a10:	40cb      	lsrs	r3, r1
 8008a12:	0008      	movs	r0, r1
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	4770      	bx	lr
 8008a18:	089b      	lsrs	r3, r3, #2
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e7fb      	b.n	8008a16 <__lo0bits+0x22>
 8008a1e:	b299      	uxth	r1, r3
 8008a20:	2900      	cmp	r1, #0
 8008a22:	d101      	bne.n	8008a28 <__lo0bits+0x34>
 8008a24:	2010      	movs	r0, #16
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	b2d9      	uxtb	r1, r3
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d101      	bne.n	8008a32 <__lo0bits+0x3e>
 8008a2e:	3008      	adds	r0, #8
 8008a30:	0a1b      	lsrs	r3, r3, #8
 8008a32:	0719      	lsls	r1, r3, #28
 8008a34:	d101      	bne.n	8008a3a <__lo0bits+0x46>
 8008a36:	3004      	adds	r0, #4
 8008a38:	091b      	lsrs	r3, r3, #4
 8008a3a:	0799      	lsls	r1, r3, #30
 8008a3c:	d101      	bne.n	8008a42 <__lo0bits+0x4e>
 8008a3e:	3002      	adds	r0, #2
 8008a40:	089b      	lsrs	r3, r3, #2
 8008a42:	07d9      	lsls	r1, r3, #31
 8008a44:	d4e9      	bmi.n	8008a1a <__lo0bits+0x26>
 8008a46:	3001      	adds	r0, #1
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	d1e6      	bne.n	8008a1a <__lo0bits+0x26>
 8008a4c:	2020      	movs	r0, #32
 8008a4e:	e7e2      	b.n	8008a16 <__lo0bits+0x22>

08008a50 <__i2b>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	000c      	movs	r4, r1
 8008a54:	2101      	movs	r1, #1
 8008a56:	f7ff ff07 	bl	8008868 <_Balloc>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d106      	bne.n	8008a6c <__i2b+0x1c>
 8008a5e:	21a0      	movs	r1, #160	; 0xa0
 8008a60:	0002      	movs	r2, r0
 8008a62:	4b04      	ldr	r3, [pc, #16]	; (8008a74 <__i2b+0x24>)
 8008a64:	4804      	ldr	r0, [pc, #16]	; (8008a78 <__i2b+0x28>)
 8008a66:	0049      	lsls	r1, r1, #1
 8008a68:	f000 fd1c 	bl	80094a4 <__assert_func>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	6144      	str	r4, [r0, #20]
 8008a70:	6103      	str	r3, [r0, #16]
 8008a72:	bd10      	pop	{r4, pc}
 8008a74:	0800a28b 	.word	0x0800a28b
 8008a78:	0800a29c 	.word	0x0800a29c

08008a7c <__multiply>:
 8008a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a7e:	690b      	ldr	r3, [r1, #16]
 8008a80:	0014      	movs	r4, r2
 8008a82:	6912      	ldr	r2, [r2, #16]
 8008a84:	000d      	movs	r5, r1
 8008a86:	b089      	sub	sp, #36	; 0x24
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	da01      	bge.n	8008a90 <__multiply+0x14>
 8008a8c:	0025      	movs	r5, r4
 8008a8e:	000c      	movs	r4, r1
 8008a90:	692f      	ldr	r7, [r5, #16]
 8008a92:	6926      	ldr	r6, [r4, #16]
 8008a94:	6869      	ldr	r1, [r5, #4]
 8008a96:	19bb      	adds	r3, r7, r6
 8008a98:	9302      	str	r3, [sp, #8]
 8008a9a:	68ab      	ldr	r3, [r5, #8]
 8008a9c:	19ba      	adds	r2, r7, r6
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	da00      	bge.n	8008aa4 <__multiply+0x28>
 8008aa2:	3101      	adds	r1, #1
 8008aa4:	f7ff fee0 	bl	8008868 <_Balloc>
 8008aa8:	9001      	str	r0, [sp, #4]
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d106      	bne.n	8008abc <__multiply+0x40>
 8008aae:	215e      	movs	r1, #94	; 0x5e
 8008ab0:	0002      	movs	r2, r0
 8008ab2:	4b48      	ldr	r3, [pc, #288]	; (8008bd4 <__multiply+0x158>)
 8008ab4:	4848      	ldr	r0, [pc, #288]	; (8008bd8 <__multiply+0x15c>)
 8008ab6:	31ff      	adds	r1, #255	; 0xff
 8008ab8:	f000 fcf4 	bl	80094a4 <__assert_func>
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	469c      	mov	ip, r3
 8008ac4:	19bb      	adds	r3, r7, r6
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4463      	add	r3, ip
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	4663      	mov	r3, ip
 8008ace:	9903      	ldr	r1, [sp, #12]
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	d32c      	bcc.n	8008b2e <__multiply+0xb2>
 8008ad4:	002b      	movs	r3, r5
 8008ad6:	0022      	movs	r2, r4
 8008ad8:	3314      	adds	r3, #20
 8008ada:	00bf      	lsls	r7, r7, #2
 8008adc:	3214      	adds	r2, #20
 8008ade:	9306      	str	r3, [sp, #24]
 8008ae0:	00b6      	lsls	r6, r6, #2
 8008ae2:	19db      	adds	r3, r3, r7
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	1993      	adds	r3, r2, r6
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	2304      	movs	r3, #4
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	002b      	movs	r3, r5
 8008af0:	9904      	ldr	r1, [sp, #16]
 8008af2:	3315      	adds	r3, #21
 8008af4:	9200      	str	r2, [sp, #0]
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d305      	bcc.n	8008b06 <__multiply+0x8a>
 8008afa:	1b4b      	subs	r3, r1, r5
 8008afc:	3b15      	subs	r3, #21
 8008afe:	089b      	lsrs	r3, r3, #2
 8008b00:	3301      	adds	r3, #1
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	9a00      	ldr	r2, [sp, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d311      	bcc.n	8008b32 <__multiply+0xb6>
 8008b0e:	9b02      	ldr	r3, [sp, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd06      	ble.n	8008b22 <__multiply+0xa6>
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	3b04      	subs	r3, #4
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d053      	beq.n	8008bca <__multiply+0x14e>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	9a02      	ldr	r2, [sp, #8]
 8008b26:	0018      	movs	r0, r3
 8008b28:	611a      	str	r2, [r3, #16]
 8008b2a:	b009      	add	sp, #36	; 0x24
 8008b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2e:	c304      	stmia	r3!, {r2}
 8008b30:	e7cd      	b.n	8008ace <__multiply+0x52>
 8008b32:	9b00      	ldr	r3, [sp, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b298      	uxth	r0, r3
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d01b      	beq.n	8008b74 <__multiply+0xf8>
 8008b3c:	4667      	mov	r7, ip
 8008b3e:	2400      	movs	r4, #0
 8008b40:	9e06      	ldr	r6, [sp, #24]
 8008b42:	ce02      	ldmia	r6!, {r1}
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	b28b      	uxth	r3, r1
 8008b48:	4343      	muls	r3, r0
 8008b4a:	b292      	uxth	r2, r2
 8008b4c:	189b      	adds	r3, r3, r2
 8008b4e:	191b      	adds	r3, r3, r4
 8008b50:	0c0c      	lsrs	r4, r1, #16
 8008b52:	4344      	muls	r4, r0
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	0c11      	lsrs	r1, r2, #16
 8008b58:	1861      	adds	r1, r4, r1
 8008b5a:	0c1c      	lsrs	r4, r3, #16
 8008b5c:	1909      	adds	r1, r1, r4
 8008b5e:	0c0c      	lsrs	r4, r1, #16
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	0409      	lsls	r1, r1, #16
 8008b64:	430b      	orrs	r3, r1
 8008b66:	c708      	stmia	r7!, {r3}
 8008b68:	9b04      	ldr	r3, [sp, #16]
 8008b6a:	42b3      	cmp	r3, r6
 8008b6c:	d8e9      	bhi.n	8008b42 <__multiply+0xc6>
 8008b6e:	4663      	mov	r3, ip
 8008b70:	9a05      	ldr	r2, [sp, #20]
 8008b72:	509c      	str	r4, [r3, r2]
 8008b74:	9b00      	ldr	r3, [sp, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	0c1e      	lsrs	r6, r3, #16
 8008b7a:	d020      	beq.n	8008bbe <__multiply+0x142>
 8008b7c:	4663      	mov	r3, ip
 8008b7e:	002c      	movs	r4, r5
 8008b80:	4660      	mov	r0, ip
 8008b82:	2700      	movs	r7, #0
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3414      	adds	r4, #20
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	b291      	uxth	r1, r2
 8008b8e:	4371      	muls	r1, r6
 8008b90:	6802      	ldr	r2, [r0, #0]
 8008b92:	0c12      	lsrs	r2, r2, #16
 8008b94:	1889      	adds	r1, r1, r2
 8008b96:	19cf      	adds	r7, r1, r7
 8008b98:	0439      	lsls	r1, r7, #16
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	6003      	str	r3, [r0, #0]
 8008b9e:	cc02      	ldmia	r4!, {r1}
 8008ba0:	6843      	ldr	r3, [r0, #4]
 8008ba2:	0c09      	lsrs	r1, r1, #16
 8008ba4:	4371      	muls	r1, r6
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	0c3f      	lsrs	r7, r7, #16
 8008baa:	18cb      	adds	r3, r1, r3
 8008bac:	9a04      	ldr	r2, [sp, #16]
 8008bae:	19db      	adds	r3, r3, r7
 8008bb0:	0c1f      	lsrs	r7, r3, #16
 8008bb2:	3004      	adds	r0, #4
 8008bb4:	42a2      	cmp	r2, r4
 8008bb6:	d8e7      	bhi.n	8008b88 <__multiply+0x10c>
 8008bb8:	4662      	mov	r2, ip
 8008bba:	9905      	ldr	r1, [sp, #20]
 8008bbc:	5053      	str	r3, [r2, r1]
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	449c      	add	ip, r3
 8008bc8:	e79d      	b.n	8008b06 <__multiply+0x8a>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	9302      	str	r3, [sp, #8]
 8008bd0:	e79d      	b.n	8008b0e <__multiply+0x92>
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	0800a28b 	.word	0x0800a28b
 8008bd8:	0800a29c 	.word	0x0800a29c

08008bdc <__pow5mult>:
 8008bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bde:	2303      	movs	r3, #3
 8008be0:	0015      	movs	r5, r2
 8008be2:	0007      	movs	r7, r0
 8008be4:	000e      	movs	r6, r1
 8008be6:	401a      	ands	r2, r3
 8008be8:	421d      	tst	r5, r3
 8008bea:	d008      	beq.n	8008bfe <__pow5mult+0x22>
 8008bec:	4925      	ldr	r1, [pc, #148]	; (8008c84 <__pow5mult+0xa8>)
 8008bee:	3a01      	subs	r2, #1
 8008bf0:	0092      	lsls	r2, r2, #2
 8008bf2:	5852      	ldr	r2, [r2, r1]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	0031      	movs	r1, r6
 8008bf8:	f7ff fe9e 	bl	8008938 <__multadd>
 8008bfc:	0006      	movs	r6, r0
 8008bfe:	10ad      	asrs	r5, r5, #2
 8008c00:	d03d      	beq.n	8008c7e <__pow5mult+0xa2>
 8008c02:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008c04:	2c00      	cmp	r4, #0
 8008c06:	d10f      	bne.n	8008c28 <__pow5mult+0x4c>
 8008c08:	2010      	movs	r0, #16
 8008c0a:	f7ff fe0f 	bl	800882c <malloc>
 8008c0e:	1e02      	subs	r2, r0, #0
 8008c10:	6278      	str	r0, [r7, #36]	; 0x24
 8008c12:	d105      	bne.n	8008c20 <__pow5mult+0x44>
 8008c14:	21d7      	movs	r1, #215	; 0xd7
 8008c16:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <__pow5mult+0xac>)
 8008c18:	481c      	ldr	r0, [pc, #112]	; (8008c8c <__pow5mult+0xb0>)
 8008c1a:	0049      	lsls	r1, r1, #1
 8008c1c:	f000 fc42 	bl	80094a4 <__assert_func>
 8008c20:	6044      	str	r4, [r0, #4]
 8008c22:	6084      	str	r4, [r0, #8]
 8008c24:	6004      	str	r4, [r0, #0]
 8008c26:	60c4      	str	r4, [r0, #12]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	689c      	ldr	r4, [r3, #8]
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	2c00      	cmp	r4, #0
 8008c30:	d108      	bne.n	8008c44 <__pow5mult+0x68>
 8008c32:	0038      	movs	r0, r7
 8008c34:	4916      	ldr	r1, [pc, #88]	; (8008c90 <__pow5mult+0xb4>)
 8008c36:	f7ff ff0b 	bl	8008a50 <__i2b>
 8008c3a:	9b01      	ldr	r3, [sp, #4]
 8008c3c:	0004      	movs	r4, r0
 8008c3e:	6098      	str	r0, [r3, #8]
 8008c40:	2300      	movs	r3, #0
 8008c42:	6003      	str	r3, [r0, #0]
 8008c44:	2301      	movs	r3, #1
 8008c46:	421d      	tst	r5, r3
 8008c48:	d00a      	beq.n	8008c60 <__pow5mult+0x84>
 8008c4a:	0031      	movs	r1, r6
 8008c4c:	0022      	movs	r2, r4
 8008c4e:	0038      	movs	r0, r7
 8008c50:	f7ff ff14 	bl	8008a7c <__multiply>
 8008c54:	0031      	movs	r1, r6
 8008c56:	9001      	str	r0, [sp, #4]
 8008c58:	0038      	movs	r0, r7
 8008c5a:	f7ff fe49 	bl	80088f0 <_Bfree>
 8008c5e:	9e01      	ldr	r6, [sp, #4]
 8008c60:	106d      	asrs	r5, r5, #1
 8008c62:	d00c      	beq.n	8008c7e <__pow5mult+0xa2>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d107      	bne.n	8008c7a <__pow5mult+0x9e>
 8008c6a:	0022      	movs	r2, r4
 8008c6c:	0021      	movs	r1, r4
 8008c6e:	0038      	movs	r0, r7
 8008c70:	f7ff ff04 	bl	8008a7c <__multiply>
 8008c74:	2300      	movs	r3, #0
 8008c76:	6020      	str	r0, [r4, #0]
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	0004      	movs	r4, r0
 8008c7c:	e7e2      	b.n	8008c44 <__pow5mult+0x68>
 8008c7e:	0030      	movs	r0, r6
 8008c80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	0800a3e8 	.word	0x0800a3e8
 8008c88:	0800a219 	.word	0x0800a219
 8008c8c:	0800a29c 	.word	0x0800a29c
 8008c90:	00000271 	.word	0x00000271

08008c94 <__lshift>:
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	000c      	movs	r4, r1
 8008c98:	0017      	movs	r7, r2
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	1155      	asrs	r5, r2, #5
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	18eb      	adds	r3, r5, r3
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	6849      	ldr	r1, [r1, #4]
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	9004      	str	r0, [sp, #16]
 8008cae:	9a01      	ldr	r2, [sp, #4]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	db10      	blt.n	8008cd6 <__lshift+0x42>
 8008cb4:	9804      	ldr	r0, [sp, #16]
 8008cb6:	f7ff fdd7 	bl	8008868 <_Balloc>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	0002      	movs	r2, r0
 8008cbe:	0006      	movs	r6, r0
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	3214      	adds	r2, #20
 8008cc4:	4298      	cmp	r0, r3
 8008cc6:	d10c      	bne.n	8008ce2 <__lshift+0x4e>
 8008cc8:	21da      	movs	r1, #218	; 0xda
 8008cca:	0002      	movs	r2, r0
 8008ccc:	4b26      	ldr	r3, [pc, #152]	; (8008d68 <__lshift+0xd4>)
 8008cce:	4827      	ldr	r0, [pc, #156]	; (8008d6c <__lshift+0xd8>)
 8008cd0:	31ff      	adds	r1, #255	; 0xff
 8008cd2:	f000 fbe7 	bl	80094a4 <__assert_func>
 8008cd6:	3101      	adds	r1, #1
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	e7e8      	b.n	8008cae <__lshift+0x1a>
 8008cdc:	0098      	lsls	r0, r3, #2
 8008cde:	5011      	str	r1, [r2, r0]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	42ab      	cmp	r3, r5
 8008ce4:	dbfa      	blt.n	8008cdc <__lshift+0x48>
 8008ce6:	43eb      	mvns	r3, r5
 8008ce8:	17db      	asrs	r3, r3, #31
 8008cea:	401d      	ands	r5, r3
 8008cec:	211f      	movs	r1, #31
 8008cee:	0023      	movs	r3, r4
 8008cf0:	0038      	movs	r0, r7
 8008cf2:	00ad      	lsls	r5, r5, #2
 8008cf4:	1955      	adds	r5, r2, r5
 8008cf6:	6922      	ldr	r2, [r4, #16]
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	0092      	lsls	r2, r2, #2
 8008cfc:	4008      	ands	r0, r1
 8008cfe:	4684      	mov	ip, r0
 8008d00:	189a      	adds	r2, r3, r2
 8008d02:	420f      	tst	r7, r1
 8008d04:	d02a      	beq.n	8008d5c <__lshift+0xc8>
 8008d06:	3101      	adds	r1, #1
 8008d08:	1a09      	subs	r1, r1, r0
 8008d0a:	9105      	str	r1, [sp, #20]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	9503      	str	r5, [sp, #12]
 8008d10:	4667      	mov	r7, ip
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	40b8      	lsls	r0, r7
 8008d16:	4301      	orrs	r1, r0
 8008d18:	9803      	ldr	r0, [sp, #12]
 8008d1a:	c002      	stmia	r0!, {r1}
 8008d1c:	cb02      	ldmia	r3!, {r1}
 8008d1e:	9003      	str	r0, [sp, #12]
 8008d20:	9805      	ldr	r0, [sp, #20]
 8008d22:	40c1      	lsrs	r1, r0
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d8f3      	bhi.n	8008d10 <__lshift+0x7c>
 8008d28:	0020      	movs	r0, r4
 8008d2a:	3015      	adds	r0, #21
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	4282      	cmp	r2, r0
 8008d30:	d304      	bcc.n	8008d3c <__lshift+0xa8>
 8008d32:	1b13      	subs	r3, r2, r4
 8008d34:	3b15      	subs	r3, #21
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	3301      	adds	r3, #1
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	50e9      	str	r1, [r5, r3]
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d002      	beq.n	8008d48 <__lshift+0xb4>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	3302      	adds	r3, #2
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	9b01      	ldr	r3, [sp, #4]
 8008d4a:	9804      	ldr	r0, [sp, #16]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	0021      	movs	r1, r4
 8008d50:	6133      	str	r3, [r6, #16]
 8008d52:	f7ff fdcd 	bl	80088f0 <_Bfree>
 8008d56:	0030      	movs	r0, r6
 8008d58:	b007      	add	sp, #28
 8008d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d5c:	cb02      	ldmia	r3!, {r1}
 8008d5e:	c502      	stmia	r5!, {r1}
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d8fb      	bhi.n	8008d5c <__lshift+0xc8>
 8008d64:	e7f0      	b.n	8008d48 <__lshift+0xb4>
 8008d66:	46c0      	nop			; (mov r8, r8)
 8008d68:	0800a28b 	.word	0x0800a28b
 8008d6c:	0800a29c 	.word	0x0800a29c

08008d70 <__mcmp>:
 8008d70:	6902      	ldr	r2, [r0, #16]
 8008d72:	690b      	ldr	r3, [r1, #16]
 8008d74:	b530      	push	{r4, r5, lr}
 8008d76:	0004      	movs	r4, r0
 8008d78:	1ad0      	subs	r0, r2, r3
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d10d      	bne.n	8008d9a <__mcmp+0x2a>
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	3414      	adds	r4, #20
 8008d82:	3114      	adds	r1, #20
 8008d84:	18e2      	adds	r2, r4, r3
 8008d86:	18c9      	adds	r1, r1, r3
 8008d88:	3a04      	subs	r2, #4
 8008d8a:	3904      	subs	r1, #4
 8008d8c:	6815      	ldr	r5, [r2, #0]
 8008d8e:	680b      	ldr	r3, [r1, #0]
 8008d90:	429d      	cmp	r5, r3
 8008d92:	d003      	beq.n	8008d9c <__mcmp+0x2c>
 8008d94:	2001      	movs	r0, #1
 8008d96:	429d      	cmp	r5, r3
 8008d98:	d303      	bcc.n	8008da2 <__mcmp+0x32>
 8008d9a:	bd30      	pop	{r4, r5, pc}
 8008d9c:	4294      	cmp	r4, r2
 8008d9e:	d3f3      	bcc.n	8008d88 <__mcmp+0x18>
 8008da0:	e7fb      	b.n	8008d9a <__mcmp+0x2a>
 8008da2:	4240      	negs	r0, r0
 8008da4:	e7f9      	b.n	8008d9a <__mcmp+0x2a>
	...

08008da8 <__mdiff>:
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	000e      	movs	r6, r1
 8008dac:	0007      	movs	r7, r0
 8008dae:	0011      	movs	r1, r2
 8008db0:	0030      	movs	r0, r6
 8008db2:	b087      	sub	sp, #28
 8008db4:	0014      	movs	r4, r2
 8008db6:	f7ff ffdb 	bl	8008d70 <__mcmp>
 8008dba:	1e05      	subs	r5, r0, #0
 8008dbc:	d110      	bne.n	8008de0 <__mdiff+0x38>
 8008dbe:	0001      	movs	r1, r0
 8008dc0:	0038      	movs	r0, r7
 8008dc2:	f7ff fd51 	bl	8008868 <_Balloc>
 8008dc6:	1e02      	subs	r2, r0, #0
 8008dc8:	d104      	bne.n	8008dd4 <__mdiff+0x2c>
 8008dca:	4b40      	ldr	r3, [pc, #256]	; (8008ecc <__mdiff+0x124>)
 8008dcc:	4940      	ldr	r1, [pc, #256]	; (8008ed0 <__mdiff+0x128>)
 8008dce:	4841      	ldr	r0, [pc, #260]	; (8008ed4 <__mdiff+0x12c>)
 8008dd0:	f000 fb68 	bl	80094a4 <__assert_func>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	6145      	str	r5, [r0, #20]
 8008dd8:	6103      	str	r3, [r0, #16]
 8008dda:	0010      	movs	r0, r2
 8008ddc:	b007      	add	sp, #28
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de0:	2301      	movs	r3, #1
 8008de2:	9301      	str	r3, [sp, #4]
 8008de4:	2800      	cmp	r0, #0
 8008de6:	db04      	blt.n	8008df2 <__mdiff+0x4a>
 8008de8:	0023      	movs	r3, r4
 8008dea:	0034      	movs	r4, r6
 8008dec:	001e      	movs	r6, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	0038      	movs	r0, r7
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	f7ff fd37 	bl	8008868 <_Balloc>
 8008dfa:	1e02      	subs	r2, r0, #0
 8008dfc:	d103      	bne.n	8008e06 <__mdiff+0x5e>
 8008dfe:	2190      	movs	r1, #144	; 0x90
 8008e00:	4b32      	ldr	r3, [pc, #200]	; (8008ecc <__mdiff+0x124>)
 8008e02:	0089      	lsls	r1, r1, #2
 8008e04:	e7e3      	b.n	8008dce <__mdiff+0x26>
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	2700      	movs	r7, #0
 8008e0a:	60c3      	str	r3, [r0, #12]
 8008e0c:	6920      	ldr	r0, [r4, #16]
 8008e0e:	3414      	adds	r4, #20
 8008e10:	9401      	str	r4, [sp, #4]
 8008e12:	9b01      	ldr	r3, [sp, #4]
 8008e14:	0084      	lsls	r4, r0, #2
 8008e16:	191b      	adds	r3, r3, r4
 8008e18:	0034      	movs	r4, r6
 8008e1a:	9302      	str	r3, [sp, #8]
 8008e1c:	6933      	ldr	r3, [r6, #16]
 8008e1e:	3414      	adds	r4, #20
 8008e20:	0099      	lsls	r1, r3, #2
 8008e22:	1863      	adds	r3, r4, r1
 8008e24:	9303      	str	r3, [sp, #12]
 8008e26:	0013      	movs	r3, r2
 8008e28:	3314      	adds	r3, #20
 8008e2a:	469c      	mov	ip, r3
 8008e2c:	9305      	str	r3, [sp, #20]
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	cc02      	ldmia	r4!, {r1}
 8008e36:	cb20      	ldmia	r3!, {r5}
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	b2ab      	uxth	r3, r5
 8008e3c:	19df      	adds	r7, r3, r7
 8008e3e:	b28b      	uxth	r3, r1
 8008e40:	1afb      	subs	r3, r7, r3
 8008e42:	0c09      	lsrs	r1, r1, #16
 8008e44:	0c2d      	lsrs	r5, r5, #16
 8008e46:	1a6d      	subs	r5, r5, r1
 8008e48:	1419      	asrs	r1, r3, #16
 8008e4a:	186d      	adds	r5, r5, r1
 8008e4c:	4661      	mov	r1, ip
 8008e4e:	142f      	asrs	r7, r5, #16
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	042d      	lsls	r5, r5, #16
 8008e54:	432b      	orrs	r3, r5
 8008e56:	c108      	stmia	r1!, {r3}
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	468c      	mov	ip, r1
 8008e5c:	42a3      	cmp	r3, r4
 8008e5e:	d8e8      	bhi.n	8008e32 <__mdiff+0x8a>
 8008e60:	0031      	movs	r1, r6
 8008e62:	9c03      	ldr	r4, [sp, #12]
 8008e64:	3115      	adds	r1, #21
 8008e66:	2304      	movs	r3, #4
 8008e68:	428c      	cmp	r4, r1
 8008e6a:	d304      	bcc.n	8008e76 <__mdiff+0xce>
 8008e6c:	1ba3      	subs	r3, r4, r6
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	089b      	lsrs	r3, r3, #2
 8008e72:	3301      	adds	r3, #1
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	9901      	ldr	r1, [sp, #4]
 8008e78:	18cc      	adds	r4, r1, r3
 8008e7a:	9905      	ldr	r1, [sp, #20]
 8008e7c:	0026      	movs	r6, r4
 8008e7e:	18cb      	adds	r3, r1, r3
 8008e80:	469c      	mov	ip, r3
 8008e82:	9902      	ldr	r1, [sp, #8]
 8008e84:	428e      	cmp	r6, r1
 8008e86:	d310      	bcc.n	8008eaa <__mdiff+0x102>
 8008e88:	9e02      	ldr	r6, [sp, #8]
 8008e8a:	1ee1      	subs	r1, r4, #3
 8008e8c:	2500      	movs	r5, #0
 8008e8e:	428e      	cmp	r6, r1
 8008e90:	d304      	bcc.n	8008e9c <__mdiff+0xf4>
 8008e92:	0031      	movs	r1, r6
 8008e94:	3103      	adds	r1, #3
 8008e96:	1b0c      	subs	r4, r1, r4
 8008e98:	08a4      	lsrs	r4, r4, #2
 8008e9a:	00a5      	lsls	r5, r4, #2
 8008e9c:	195b      	adds	r3, r3, r5
 8008e9e:	3b04      	subs	r3, #4
 8008ea0:	6819      	ldr	r1, [r3, #0]
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	d00f      	beq.n	8008ec6 <__mdiff+0x11e>
 8008ea6:	6110      	str	r0, [r2, #16]
 8008ea8:	e797      	b.n	8008dda <__mdiff+0x32>
 8008eaa:	ce02      	ldmia	r6!, {r1}
 8008eac:	b28d      	uxth	r5, r1
 8008eae:	19ed      	adds	r5, r5, r7
 8008eb0:	0c0f      	lsrs	r7, r1, #16
 8008eb2:	1429      	asrs	r1, r5, #16
 8008eb4:	1879      	adds	r1, r7, r1
 8008eb6:	140f      	asrs	r7, r1, #16
 8008eb8:	b2ad      	uxth	r5, r5
 8008eba:	0409      	lsls	r1, r1, #16
 8008ebc:	430d      	orrs	r5, r1
 8008ebe:	4661      	mov	r1, ip
 8008ec0:	c120      	stmia	r1!, {r5}
 8008ec2:	468c      	mov	ip, r1
 8008ec4:	e7dd      	b.n	8008e82 <__mdiff+0xda>
 8008ec6:	3801      	subs	r0, #1
 8008ec8:	e7e9      	b.n	8008e9e <__mdiff+0xf6>
 8008eca:	46c0      	nop			; (mov r8, r8)
 8008ecc:	0800a28b 	.word	0x0800a28b
 8008ed0:	00000232 	.word	0x00000232
 8008ed4:	0800a29c 	.word	0x0800a29c

08008ed8 <__d2b>:
 8008ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eda:	2101      	movs	r1, #1
 8008edc:	0014      	movs	r4, r2
 8008ede:	001e      	movs	r6, r3
 8008ee0:	9f08      	ldr	r7, [sp, #32]
 8008ee2:	f7ff fcc1 	bl	8008868 <_Balloc>
 8008ee6:	1e05      	subs	r5, r0, #0
 8008ee8:	d105      	bne.n	8008ef6 <__d2b+0x1e>
 8008eea:	0002      	movs	r2, r0
 8008eec:	4b26      	ldr	r3, [pc, #152]	; (8008f88 <__d2b+0xb0>)
 8008eee:	4927      	ldr	r1, [pc, #156]	; (8008f8c <__d2b+0xb4>)
 8008ef0:	4827      	ldr	r0, [pc, #156]	; (8008f90 <__d2b+0xb8>)
 8008ef2:	f000 fad7 	bl	80094a4 <__assert_func>
 8008ef6:	0333      	lsls	r3, r6, #12
 8008ef8:	0076      	lsls	r6, r6, #1
 8008efa:	0b1b      	lsrs	r3, r3, #12
 8008efc:	0d76      	lsrs	r6, r6, #21
 8008efe:	d124      	bne.n	8008f4a <__d2b+0x72>
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	2c00      	cmp	r4, #0
 8008f04:	d027      	beq.n	8008f56 <__d2b+0x7e>
 8008f06:	4668      	mov	r0, sp
 8008f08:	9400      	str	r4, [sp, #0]
 8008f0a:	f7ff fd73 	bl	80089f4 <__lo0bits>
 8008f0e:	9c00      	ldr	r4, [sp, #0]
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d01e      	beq.n	8008f52 <__d2b+0x7a>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	2120      	movs	r1, #32
 8008f18:	001a      	movs	r2, r3
 8008f1a:	1a09      	subs	r1, r1, r0
 8008f1c:	408a      	lsls	r2, r1
 8008f1e:	40c3      	lsrs	r3, r0
 8008f20:	4322      	orrs	r2, r4
 8008f22:	616a      	str	r2, [r5, #20]
 8008f24:	9301      	str	r3, [sp, #4]
 8008f26:	9c01      	ldr	r4, [sp, #4]
 8008f28:	61ac      	str	r4, [r5, #24]
 8008f2a:	1e63      	subs	r3, r4, #1
 8008f2c:	419c      	sbcs	r4, r3
 8008f2e:	3401      	adds	r4, #1
 8008f30:	612c      	str	r4, [r5, #16]
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	d018      	beq.n	8008f68 <__d2b+0x90>
 8008f36:	4b17      	ldr	r3, [pc, #92]	; (8008f94 <__d2b+0xbc>)
 8008f38:	18f6      	adds	r6, r6, r3
 8008f3a:	2335      	movs	r3, #53	; 0x35
 8008f3c:	1836      	adds	r6, r6, r0
 8008f3e:	1a18      	subs	r0, r3, r0
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	603e      	str	r6, [r7, #0]
 8008f44:	6018      	str	r0, [r3, #0]
 8008f46:	0028      	movs	r0, r5
 8008f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f4a:	2280      	movs	r2, #128	; 0x80
 8008f4c:	0352      	lsls	r2, r2, #13
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	e7d6      	b.n	8008f00 <__d2b+0x28>
 8008f52:	616c      	str	r4, [r5, #20]
 8008f54:	e7e7      	b.n	8008f26 <__d2b+0x4e>
 8008f56:	a801      	add	r0, sp, #4
 8008f58:	f7ff fd4c 	bl	80089f4 <__lo0bits>
 8008f5c:	2401      	movs	r4, #1
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	612c      	str	r4, [r5, #16]
 8008f62:	616b      	str	r3, [r5, #20]
 8008f64:	3020      	adds	r0, #32
 8008f66:	e7e4      	b.n	8008f32 <__d2b+0x5a>
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <__d2b+0xc0>)
 8008f6a:	18c0      	adds	r0, r0, r3
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	; (8008f9c <__d2b+0xc4>)
 8008f6e:	6038      	str	r0, [r7, #0]
 8008f70:	18e3      	adds	r3, r4, r3
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	18eb      	adds	r3, r5, r3
 8008f76:	6958      	ldr	r0, [r3, #20]
 8008f78:	f7ff fd22 	bl	80089c0 <__hi0bits>
 8008f7c:	0164      	lsls	r4, r4, #5
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	1a24      	subs	r4, r4, r0
 8008f82:	601c      	str	r4, [r3, #0]
 8008f84:	e7df      	b.n	8008f46 <__d2b+0x6e>
 8008f86:	46c0      	nop			; (mov r8, r8)
 8008f88:	0800a28b 	.word	0x0800a28b
 8008f8c:	0000030a 	.word	0x0000030a
 8008f90:	0800a29c 	.word	0x0800a29c
 8008f94:	fffffbcd 	.word	0xfffffbcd
 8008f98:	fffffbce 	.word	0xfffffbce
 8008f9c:	3fffffff 	.word	0x3fffffff

08008fa0 <_calloc_r>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	0c13      	lsrs	r3, r2, #16
 8008fa4:	0c0d      	lsrs	r5, r1, #16
 8008fa6:	d11e      	bne.n	8008fe6 <_calloc_r+0x46>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10c      	bne.n	8008fc6 <_calloc_r+0x26>
 8008fac:	b289      	uxth	r1, r1
 8008fae:	b294      	uxth	r4, r2
 8008fb0:	434c      	muls	r4, r1
 8008fb2:	0021      	movs	r1, r4
 8008fb4:	f000 f88c 	bl	80090d0 <_malloc_r>
 8008fb8:	1e05      	subs	r5, r0, #0
 8008fba:	d01b      	beq.n	8008ff4 <_calloc_r+0x54>
 8008fbc:	0022      	movs	r2, r4
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f7fe f8f4 	bl	80071ac <memset>
 8008fc4:	e016      	b.n	8008ff4 <_calloc_r+0x54>
 8008fc6:	1c1d      	adds	r5, r3, #0
 8008fc8:	1c0b      	adds	r3, r1, #0
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	b289      	uxth	r1, r1
 8008fce:	b29c      	uxth	r4, r3
 8008fd0:	4351      	muls	r1, r2
 8008fd2:	b2ab      	uxth	r3, r5
 8008fd4:	4363      	muls	r3, r4
 8008fd6:	0c0c      	lsrs	r4, r1, #16
 8008fd8:	191c      	adds	r4, r3, r4
 8008fda:	0c22      	lsrs	r2, r4, #16
 8008fdc:	d107      	bne.n	8008fee <_calloc_r+0x4e>
 8008fde:	0424      	lsls	r4, r4, #16
 8008fe0:	b289      	uxth	r1, r1
 8008fe2:	430c      	orrs	r4, r1
 8008fe4:	e7e5      	b.n	8008fb2 <_calloc_r+0x12>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d101      	bne.n	8008fee <_calloc_r+0x4e>
 8008fea:	1c13      	adds	r3, r2, #0
 8008fec:	e7ed      	b.n	8008fca <_calloc_r+0x2a>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	2500      	movs	r5, #0
 8008ff2:	6003      	str	r3, [r0, #0]
 8008ff4:	0028      	movs	r0, r5
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}

08008ff8 <_free_r>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	0005      	movs	r5, r0
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d010      	beq.n	8009022 <_free_r+0x2a>
 8009000:	1f0c      	subs	r4, r1, #4
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	da00      	bge.n	800900a <_free_r+0x12>
 8009008:	18e4      	adds	r4, r4, r3
 800900a:	0028      	movs	r0, r5
 800900c:	f000 fa9e 	bl	800954c <__malloc_lock>
 8009010:	4a1d      	ldr	r2, [pc, #116]	; (8009088 <_free_r+0x90>)
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d105      	bne.n	8009024 <_free_r+0x2c>
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	6014      	str	r4, [r2, #0]
 800901c:	0028      	movs	r0, r5
 800901e:	f000 fa9d 	bl	800955c <__malloc_unlock>
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	42a3      	cmp	r3, r4
 8009026:	d908      	bls.n	800903a <_free_r+0x42>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	1860      	adds	r0, r4, r1
 800902c:	4283      	cmp	r3, r0
 800902e:	d1f3      	bne.n	8009018 <_free_r+0x20>
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	1841      	adds	r1, r0, r1
 8009036:	6021      	str	r1, [r4, #0]
 8009038:	e7ee      	b.n	8009018 <_free_r+0x20>
 800903a:	001a      	movs	r2, r3
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <_free_r+0x4e>
 8009042:	42a3      	cmp	r3, r4
 8009044:	d9f9      	bls.n	800903a <_free_r+0x42>
 8009046:	6811      	ldr	r1, [r2, #0]
 8009048:	1850      	adds	r0, r2, r1
 800904a:	42a0      	cmp	r0, r4
 800904c:	d10b      	bne.n	8009066 <_free_r+0x6e>
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	1809      	adds	r1, r1, r0
 8009052:	1850      	adds	r0, r2, r1
 8009054:	6011      	str	r1, [r2, #0]
 8009056:	4283      	cmp	r3, r0
 8009058:	d1e0      	bne.n	800901c <_free_r+0x24>
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	1841      	adds	r1, r0, r1
 8009060:	6011      	str	r1, [r2, #0]
 8009062:	6053      	str	r3, [r2, #4]
 8009064:	e7da      	b.n	800901c <_free_r+0x24>
 8009066:	42a0      	cmp	r0, r4
 8009068:	d902      	bls.n	8009070 <_free_r+0x78>
 800906a:	230c      	movs	r3, #12
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	e7d5      	b.n	800901c <_free_r+0x24>
 8009070:	6821      	ldr	r1, [r4, #0]
 8009072:	1860      	adds	r0, r4, r1
 8009074:	4283      	cmp	r3, r0
 8009076:	d103      	bne.n	8009080 <_free_r+0x88>
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	1841      	adds	r1, r0, r1
 800907e:	6021      	str	r1, [r4, #0]
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	6054      	str	r4, [r2, #4]
 8009084:	e7ca      	b.n	800901c <_free_r+0x24>
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	200003e8 	.word	0x200003e8

0800908c <sbrk_aligned>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	4e0f      	ldr	r6, [pc, #60]	; (80090cc <sbrk_aligned+0x40>)
 8009090:	000d      	movs	r5, r1
 8009092:	6831      	ldr	r1, [r6, #0]
 8009094:	0004      	movs	r4, r0
 8009096:	2900      	cmp	r1, #0
 8009098:	d102      	bne.n	80090a0 <sbrk_aligned+0x14>
 800909a:	f000 f9f1 	bl	8009480 <_sbrk_r>
 800909e:	6030      	str	r0, [r6, #0]
 80090a0:	0029      	movs	r1, r5
 80090a2:	0020      	movs	r0, r4
 80090a4:	f000 f9ec 	bl	8009480 <_sbrk_r>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d00a      	beq.n	80090c2 <sbrk_aligned+0x36>
 80090ac:	2303      	movs	r3, #3
 80090ae:	1cc5      	adds	r5, r0, #3
 80090b0:	439d      	bics	r5, r3
 80090b2:	42a8      	cmp	r0, r5
 80090b4:	d007      	beq.n	80090c6 <sbrk_aligned+0x3a>
 80090b6:	1a29      	subs	r1, r5, r0
 80090b8:	0020      	movs	r0, r4
 80090ba:	f000 f9e1 	bl	8009480 <_sbrk_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d101      	bne.n	80090c6 <sbrk_aligned+0x3a>
 80090c2:	2501      	movs	r5, #1
 80090c4:	426d      	negs	r5, r5
 80090c6:	0028      	movs	r0, r5
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	46c0      	nop			; (mov r8, r8)
 80090cc:	200003ec 	.word	0x200003ec

080090d0 <_malloc_r>:
 80090d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090d2:	2203      	movs	r2, #3
 80090d4:	1ccb      	adds	r3, r1, #3
 80090d6:	4393      	bics	r3, r2
 80090d8:	3308      	adds	r3, #8
 80090da:	0006      	movs	r6, r0
 80090dc:	001f      	movs	r7, r3
 80090de:	2b0c      	cmp	r3, #12
 80090e0:	d232      	bcs.n	8009148 <_malloc_r+0x78>
 80090e2:	270c      	movs	r7, #12
 80090e4:	42b9      	cmp	r1, r7
 80090e6:	d831      	bhi.n	800914c <_malloc_r+0x7c>
 80090e8:	0030      	movs	r0, r6
 80090ea:	f000 fa2f 	bl	800954c <__malloc_lock>
 80090ee:	4d32      	ldr	r5, [pc, #200]	; (80091b8 <_malloc_r+0xe8>)
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	001c      	movs	r4, r3
 80090f4:	2c00      	cmp	r4, #0
 80090f6:	d12e      	bne.n	8009156 <_malloc_r+0x86>
 80090f8:	0039      	movs	r1, r7
 80090fa:	0030      	movs	r0, r6
 80090fc:	f7ff ffc6 	bl	800908c <sbrk_aligned>
 8009100:	0004      	movs	r4, r0
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d11e      	bne.n	8009144 <_malloc_r+0x74>
 8009106:	682c      	ldr	r4, [r5, #0]
 8009108:	0025      	movs	r5, r4
 800910a:	2d00      	cmp	r5, #0
 800910c:	d14a      	bne.n	80091a4 <_malloc_r+0xd4>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	0029      	movs	r1, r5
 8009112:	18e3      	adds	r3, r4, r3
 8009114:	0030      	movs	r0, r6
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	f000 f9b2 	bl	8009480 <_sbrk_r>
 800911c:	9b01      	ldr	r3, [sp, #4]
 800911e:	4283      	cmp	r3, r0
 8009120:	d143      	bne.n	80091aa <_malloc_r+0xda>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	3703      	adds	r7, #3
 8009126:	1aff      	subs	r7, r7, r3
 8009128:	2303      	movs	r3, #3
 800912a:	439f      	bics	r7, r3
 800912c:	3708      	adds	r7, #8
 800912e:	2f0c      	cmp	r7, #12
 8009130:	d200      	bcs.n	8009134 <_malloc_r+0x64>
 8009132:	270c      	movs	r7, #12
 8009134:	0039      	movs	r1, r7
 8009136:	0030      	movs	r0, r6
 8009138:	f7ff ffa8 	bl	800908c <sbrk_aligned>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d034      	beq.n	80091aa <_malloc_r+0xda>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	19df      	adds	r7, r3, r7
 8009144:	6027      	str	r7, [r4, #0]
 8009146:	e013      	b.n	8009170 <_malloc_r+0xa0>
 8009148:	2b00      	cmp	r3, #0
 800914a:	dacb      	bge.n	80090e4 <_malloc_r+0x14>
 800914c:	230c      	movs	r3, #12
 800914e:	2500      	movs	r5, #0
 8009150:	6033      	str	r3, [r6, #0]
 8009152:	0028      	movs	r0, r5
 8009154:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009156:	6822      	ldr	r2, [r4, #0]
 8009158:	1bd1      	subs	r1, r2, r7
 800915a:	d420      	bmi.n	800919e <_malloc_r+0xce>
 800915c:	290b      	cmp	r1, #11
 800915e:	d917      	bls.n	8009190 <_malloc_r+0xc0>
 8009160:	19e2      	adds	r2, r4, r7
 8009162:	6027      	str	r7, [r4, #0]
 8009164:	42a3      	cmp	r3, r4
 8009166:	d111      	bne.n	800918c <_malloc_r+0xbc>
 8009168:	602a      	str	r2, [r5, #0]
 800916a:	6863      	ldr	r3, [r4, #4]
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	6053      	str	r3, [r2, #4]
 8009170:	0030      	movs	r0, r6
 8009172:	0025      	movs	r5, r4
 8009174:	f000 f9f2 	bl	800955c <__malloc_unlock>
 8009178:	2207      	movs	r2, #7
 800917a:	350b      	adds	r5, #11
 800917c:	1d23      	adds	r3, r4, #4
 800917e:	4395      	bics	r5, r2
 8009180:	1aea      	subs	r2, r5, r3
 8009182:	429d      	cmp	r5, r3
 8009184:	d0e5      	beq.n	8009152 <_malloc_r+0x82>
 8009186:	1b5b      	subs	r3, r3, r5
 8009188:	50a3      	str	r3, [r4, r2]
 800918a:	e7e2      	b.n	8009152 <_malloc_r+0x82>
 800918c:	605a      	str	r2, [r3, #4]
 800918e:	e7ec      	b.n	800916a <_malloc_r+0x9a>
 8009190:	6862      	ldr	r2, [r4, #4]
 8009192:	42a3      	cmp	r3, r4
 8009194:	d101      	bne.n	800919a <_malloc_r+0xca>
 8009196:	602a      	str	r2, [r5, #0]
 8009198:	e7ea      	b.n	8009170 <_malloc_r+0xa0>
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	e7e8      	b.n	8009170 <_malloc_r+0xa0>
 800919e:	0023      	movs	r3, r4
 80091a0:	6864      	ldr	r4, [r4, #4]
 80091a2:	e7a7      	b.n	80090f4 <_malloc_r+0x24>
 80091a4:	002c      	movs	r4, r5
 80091a6:	686d      	ldr	r5, [r5, #4]
 80091a8:	e7af      	b.n	800910a <_malloc_r+0x3a>
 80091aa:	230c      	movs	r3, #12
 80091ac:	0030      	movs	r0, r6
 80091ae:	6033      	str	r3, [r6, #0]
 80091b0:	f000 f9d4 	bl	800955c <__malloc_unlock>
 80091b4:	e7cd      	b.n	8009152 <_malloc_r+0x82>
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	200003e8 	.word	0x200003e8

080091bc <__ssputs_r>:
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	688e      	ldr	r6, [r1, #8]
 80091c0:	b085      	sub	sp, #20
 80091c2:	0007      	movs	r7, r0
 80091c4:	000c      	movs	r4, r1
 80091c6:	9203      	str	r2, [sp, #12]
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	429e      	cmp	r6, r3
 80091cc:	d83c      	bhi.n	8009248 <__ssputs_r+0x8c>
 80091ce:	2390      	movs	r3, #144	; 0x90
 80091d0:	898a      	ldrh	r2, [r1, #12]
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	421a      	tst	r2, r3
 80091d6:	d034      	beq.n	8009242 <__ssputs_r+0x86>
 80091d8:	6909      	ldr	r1, [r1, #16]
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	6960      	ldr	r0, [r4, #20]
 80091de:	1a5b      	subs	r3, r3, r1
 80091e0:	9302      	str	r3, [sp, #8]
 80091e2:	2303      	movs	r3, #3
 80091e4:	4343      	muls	r3, r0
 80091e6:	0fdd      	lsrs	r5, r3, #31
 80091e8:	18ed      	adds	r5, r5, r3
 80091ea:	9b01      	ldr	r3, [sp, #4]
 80091ec:	9802      	ldr	r0, [sp, #8]
 80091ee:	3301      	adds	r3, #1
 80091f0:	181b      	adds	r3, r3, r0
 80091f2:	106d      	asrs	r5, r5, #1
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	d900      	bls.n	80091fa <__ssputs_r+0x3e>
 80091f8:	001d      	movs	r5, r3
 80091fa:	0553      	lsls	r3, r2, #21
 80091fc:	d532      	bpl.n	8009264 <__ssputs_r+0xa8>
 80091fe:	0029      	movs	r1, r5
 8009200:	0038      	movs	r0, r7
 8009202:	f7ff ff65 	bl	80090d0 <_malloc_r>
 8009206:	1e06      	subs	r6, r0, #0
 8009208:	d109      	bne.n	800921e <__ssputs_r+0x62>
 800920a:	230c      	movs	r3, #12
 800920c:	603b      	str	r3, [r7, #0]
 800920e:	2340      	movs	r3, #64	; 0x40
 8009210:	2001      	movs	r0, #1
 8009212:	89a2      	ldrh	r2, [r4, #12]
 8009214:	4240      	negs	r0, r0
 8009216:	4313      	orrs	r3, r2
 8009218:	81a3      	strh	r3, [r4, #12]
 800921a:	b005      	add	sp, #20
 800921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921e:	9a02      	ldr	r2, [sp, #8]
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	f7ff fb18 	bl	8008856 <memcpy>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	4a14      	ldr	r2, [pc, #80]	; (800927c <__ssputs_r+0xc0>)
 800922a:	401a      	ands	r2, r3
 800922c:	2380      	movs	r3, #128	; 0x80
 800922e:	4313      	orrs	r3, r2
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	9b02      	ldr	r3, [sp, #8]
 8009234:	6126      	str	r6, [r4, #16]
 8009236:	18f6      	adds	r6, r6, r3
 8009238:	6026      	str	r6, [r4, #0]
 800923a:	6165      	str	r5, [r4, #20]
 800923c:	9e01      	ldr	r6, [sp, #4]
 800923e:	1aed      	subs	r5, r5, r3
 8009240:	60a5      	str	r5, [r4, #8]
 8009242:	9b01      	ldr	r3, [sp, #4]
 8009244:	429e      	cmp	r6, r3
 8009246:	d900      	bls.n	800924a <__ssputs_r+0x8e>
 8009248:	9e01      	ldr	r6, [sp, #4]
 800924a:	0032      	movs	r2, r6
 800924c:	9903      	ldr	r1, [sp, #12]
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	f000 f968 	bl	8009524 <memmove>
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	2000      	movs	r0, #0
 8009258:	1b9b      	subs	r3, r3, r6
 800925a:	60a3      	str	r3, [r4, #8]
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	199e      	adds	r6, r3, r6
 8009260:	6026      	str	r6, [r4, #0]
 8009262:	e7da      	b.n	800921a <__ssputs_r+0x5e>
 8009264:	002a      	movs	r2, r5
 8009266:	0038      	movs	r0, r7
 8009268:	f000 f980 	bl	800956c <_realloc_r>
 800926c:	1e06      	subs	r6, r0, #0
 800926e:	d1e0      	bne.n	8009232 <__ssputs_r+0x76>
 8009270:	0038      	movs	r0, r7
 8009272:	6921      	ldr	r1, [r4, #16]
 8009274:	f7ff fec0 	bl	8008ff8 <_free_r>
 8009278:	e7c7      	b.n	800920a <__ssputs_r+0x4e>
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	fffffb7f 	.word	0xfffffb7f

08009280 <_svfiprintf_r>:
 8009280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009282:	b0a1      	sub	sp, #132	; 0x84
 8009284:	9003      	str	r0, [sp, #12]
 8009286:	001d      	movs	r5, r3
 8009288:	898b      	ldrh	r3, [r1, #12]
 800928a:	000f      	movs	r7, r1
 800928c:	0016      	movs	r6, r2
 800928e:	061b      	lsls	r3, r3, #24
 8009290:	d511      	bpl.n	80092b6 <_svfiprintf_r+0x36>
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10e      	bne.n	80092b6 <_svfiprintf_r+0x36>
 8009298:	2140      	movs	r1, #64	; 0x40
 800929a:	f7ff ff19 	bl	80090d0 <_malloc_r>
 800929e:	6038      	str	r0, [r7, #0]
 80092a0:	6138      	str	r0, [r7, #16]
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d105      	bne.n	80092b2 <_svfiprintf_r+0x32>
 80092a6:	230c      	movs	r3, #12
 80092a8:	9a03      	ldr	r2, [sp, #12]
 80092aa:	3801      	subs	r0, #1
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	b021      	add	sp, #132	; 0x84
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b2:	2340      	movs	r3, #64	; 0x40
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	2300      	movs	r3, #0
 80092b8:	ac08      	add	r4, sp, #32
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	3320      	adds	r3, #32
 80092be:	7663      	strb	r3, [r4, #25]
 80092c0:	3310      	adds	r3, #16
 80092c2:	76a3      	strb	r3, [r4, #26]
 80092c4:	9507      	str	r5, [sp, #28]
 80092c6:	0035      	movs	r5, r6
 80092c8:	782b      	ldrb	r3, [r5, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d001      	beq.n	80092d2 <_svfiprintf_r+0x52>
 80092ce:	2b25      	cmp	r3, #37	; 0x25
 80092d0:	d147      	bne.n	8009362 <_svfiprintf_r+0xe2>
 80092d2:	1bab      	subs	r3, r5, r6
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	42b5      	cmp	r5, r6
 80092d8:	d00c      	beq.n	80092f4 <_svfiprintf_r+0x74>
 80092da:	0032      	movs	r2, r6
 80092dc:	0039      	movs	r1, r7
 80092de:	9803      	ldr	r0, [sp, #12]
 80092e0:	f7ff ff6c 	bl	80091bc <__ssputs_r>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d100      	bne.n	80092ea <_svfiprintf_r+0x6a>
 80092e8:	e0ae      	b.n	8009448 <_svfiprintf_r+0x1c8>
 80092ea:	6962      	ldr	r2, [r4, #20]
 80092ec:	9b05      	ldr	r3, [sp, #20]
 80092ee:	4694      	mov	ip, r2
 80092f0:	4463      	add	r3, ip
 80092f2:	6163      	str	r3, [r4, #20]
 80092f4:	782b      	ldrb	r3, [r5, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d100      	bne.n	80092fc <_svfiprintf_r+0x7c>
 80092fa:	e0a5      	b.n	8009448 <_svfiprintf_r+0x1c8>
 80092fc:	2201      	movs	r2, #1
 80092fe:	2300      	movs	r3, #0
 8009300:	4252      	negs	r2, r2
 8009302:	6062      	str	r2, [r4, #4]
 8009304:	a904      	add	r1, sp, #16
 8009306:	3254      	adds	r2, #84	; 0x54
 8009308:	1852      	adds	r2, r2, r1
 800930a:	1c6e      	adds	r6, r5, #1
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	60e3      	str	r3, [r4, #12]
 8009310:	60a3      	str	r3, [r4, #8]
 8009312:	7013      	strb	r3, [r2, #0]
 8009314:	65a3      	str	r3, [r4, #88]	; 0x58
 8009316:	2205      	movs	r2, #5
 8009318:	7831      	ldrb	r1, [r6, #0]
 800931a:	4854      	ldr	r0, [pc, #336]	; (800946c <_svfiprintf_r+0x1ec>)
 800931c:	f7ff fa90 	bl	8008840 <memchr>
 8009320:	1c75      	adds	r5, r6, #1
 8009322:	2800      	cmp	r0, #0
 8009324:	d11f      	bne.n	8009366 <_svfiprintf_r+0xe6>
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	06d3      	lsls	r3, r2, #27
 800932a:	d504      	bpl.n	8009336 <_svfiprintf_r+0xb6>
 800932c:	2353      	movs	r3, #83	; 0x53
 800932e:	a904      	add	r1, sp, #16
 8009330:	185b      	adds	r3, r3, r1
 8009332:	2120      	movs	r1, #32
 8009334:	7019      	strb	r1, [r3, #0]
 8009336:	0713      	lsls	r3, r2, #28
 8009338:	d504      	bpl.n	8009344 <_svfiprintf_r+0xc4>
 800933a:	2353      	movs	r3, #83	; 0x53
 800933c:	a904      	add	r1, sp, #16
 800933e:	185b      	adds	r3, r3, r1
 8009340:	212b      	movs	r1, #43	; 0x2b
 8009342:	7019      	strb	r1, [r3, #0]
 8009344:	7833      	ldrb	r3, [r6, #0]
 8009346:	2b2a      	cmp	r3, #42	; 0x2a
 8009348:	d016      	beq.n	8009378 <_svfiprintf_r+0xf8>
 800934a:	0035      	movs	r5, r6
 800934c:	2100      	movs	r1, #0
 800934e:	200a      	movs	r0, #10
 8009350:	68e3      	ldr	r3, [r4, #12]
 8009352:	782a      	ldrb	r2, [r5, #0]
 8009354:	1c6e      	adds	r6, r5, #1
 8009356:	3a30      	subs	r2, #48	; 0x30
 8009358:	2a09      	cmp	r2, #9
 800935a:	d94e      	bls.n	80093fa <_svfiprintf_r+0x17a>
 800935c:	2900      	cmp	r1, #0
 800935e:	d111      	bne.n	8009384 <_svfiprintf_r+0x104>
 8009360:	e017      	b.n	8009392 <_svfiprintf_r+0x112>
 8009362:	3501      	adds	r5, #1
 8009364:	e7b0      	b.n	80092c8 <_svfiprintf_r+0x48>
 8009366:	4b41      	ldr	r3, [pc, #260]	; (800946c <_svfiprintf_r+0x1ec>)
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	1ac0      	subs	r0, r0, r3
 800936c:	2301      	movs	r3, #1
 800936e:	4083      	lsls	r3, r0
 8009370:	4313      	orrs	r3, r2
 8009372:	002e      	movs	r6, r5
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	e7ce      	b.n	8009316 <_svfiprintf_r+0x96>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	1d19      	adds	r1, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	9107      	str	r1, [sp, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	db01      	blt.n	8009388 <_svfiprintf_r+0x108>
 8009384:	930b      	str	r3, [sp, #44]	; 0x2c
 8009386:	e004      	b.n	8009392 <_svfiprintf_r+0x112>
 8009388:	425b      	negs	r3, r3
 800938a:	60e3      	str	r3, [r4, #12]
 800938c:	2302      	movs	r3, #2
 800938e:	4313      	orrs	r3, r2
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	782b      	ldrb	r3, [r5, #0]
 8009394:	2b2e      	cmp	r3, #46	; 0x2e
 8009396:	d10a      	bne.n	80093ae <_svfiprintf_r+0x12e>
 8009398:	786b      	ldrb	r3, [r5, #1]
 800939a:	2b2a      	cmp	r3, #42	; 0x2a
 800939c:	d135      	bne.n	800940a <_svfiprintf_r+0x18a>
 800939e:	9b07      	ldr	r3, [sp, #28]
 80093a0:	3502      	adds	r5, #2
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	9207      	str	r2, [sp, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	db2b      	blt.n	8009404 <_svfiprintf_r+0x184>
 80093ac:	9309      	str	r3, [sp, #36]	; 0x24
 80093ae:	4e30      	ldr	r6, [pc, #192]	; (8009470 <_svfiprintf_r+0x1f0>)
 80093b0:	2203      	movs	r2, #3
 80093b2:	0030      	movs	r0, r6
 80093b4:	7829      	ldrb	r1, [r5, #0]
 80093b6:	f7ff fa43 	bl	8008840 <memchr>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d006      	beq.n	80093cc <_svfiprintf_r+0x14c>
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	1b80      	subs	r0, r0, r6
 80093c2:	4083      	lsls	r3, r0
 80093c4:	6822      	ldr	r2, [r4, #0]
 80093c6:	3501      	adds	r5, #1
 80093c8:	4313      	orrs	r3, r2
 80093ca:	6023      	str	r3, [r4, #0]
 80093cc:	7829      	ldrb	r1, [r5, #0]
 80093ce:	2206      	movs	r2, #6
 80093d0:	4828      	ldr	r0, [pc, #160]	; (8009474 <_svfiprintf_r+0x1f4>)
 80093d2:	1c6e      	adds	r6, r5, #1
 80093d4:	7621      	strb	r1, [r4, #24]
 80093d6:	f7ff fa33 	bl	8008840 <memchr>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d03c      	beq.n	8009458 <_svfiprintf_r+0x1d8>
 80093de:	4b26      	ldr	r3, [pc, #152]	; (8009478 <_svfiprintf_r+0x1f8>)
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d125      	bne.n	8009430 <_svfiprintf_r+0x1b0>
 80093e4:	2207      	movs	r2, #7
 80093e6:	9b07      	ldr	r3, [sp, #28]
 80093e8:	3307      	adds	r3, #7
 80093ea:	4393      	bics	r3, r2
 80093ec:	3308      	adds	r3, #8
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	6963      	ldr	r3, [r4, #20]
 80093f2:	9a04      	ldr	r2, [sp, #16]
 80093f4:	189b      	adds	r3, r3, r2
 80093f6:	6163      	str	r3, [r4, #20]
 80093f8:	e765      	b.n	80092c6 <_svfiprintf_r+0x46>
 80093fa:	4343      	muls	r3, r0
 80093fc:	0035      	movs	r5, r6
 80093fe:	2101      	movs	r1, #1
 8009400:	189b      	adds	r3, r3, r2
 8009402:	e7a6      	b.n	8009352 <_svfiprintf_r+0xd2>
 8009404:	2301      	movs	r3, #1
 8009406:	425b      	negs	r3, r3
 8009408:	e7d0      	b.n	80093ac <_svfiprintf_r+0x12c>
 800940a:	2300      	movs	r3, #0
 800940c:	200a      	movs	r0, #10
 800940e:	001a      	movs	r2, r3
 8009410:	3501      	adds	r5, #1
 8009412:	6063      	str	r3, [r4, #4]
 8009414:	7829      	ldrb	r1, [r5, #0]
 8009416:	1c6e      	adds	r6, r5, #1
 8009418:	3930      	subs	r1, #48	; 0x30
 800941a:	2909      	cmp	r1, #9
 800941c:	d903      	bls.n	8009426 <_svfiprintf_r+0x1a6>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0c5      	beq.n	80093ae <_svfiprintf_r+0x12e>
 8009422:	9209      	str	r2, [sp, #36]	; 0x24
 8009424:	e7c3      	b.n	80093ae <_svfiprintf_r+0x12e>
 8009426:	4342      	muls	r2, r0
 8009428:	0035      	movs	r5, r6
 800942a:	2301      	movs	r3, #1
 800942c:	1852      	adds	r2, r2, r1
 800942e:	e7f1      	b.n	8009414 <_svfiprintf_r+0x194>
 8009430:	ab07      	add	r3, sp, #28
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	003a      	movs	r2, r7
 8009436:	0021      	movs	r1, r4
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <_svfiprintf_r+0x1fc>)
 800943a:	9803      	ldr	r0, [sp, #12]
 800943c:	f7fd ff68 	bl	8007310 <_printf_float>
 8009440:	9004      	str	r0, [sp, #16]
 8009442:	9b04      	ldr	r3, [sp, #16]
 8009444:	3301      	adds	r3, #1
 8009446:	d1d3      	bne.n	80093f0 <_svfiprintf_r+0x170>
 8009448:	89bb      	ldrh	r3, [r7, #12]
 800944a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800944c:	065b      	lsls	r3, r3, #25
 800944e:	d400      	bmi.n	8009452 <_svfiprintf_r+0x1d2>
 8009450:	e72d      	b.n	80092ae <_svfiprintf_r+0x2e>
 8009452:	2001      	movs	r0, #1
 8009454:	4240      	negs	r0, r0
 8009456:	e72a      	b.n	80092ae <_svfiprintf_r+0x2e>
 8009458:	ab07      	add	r3, sp, #28
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	003a      	movs	r2, r7
 800945e:	0021      	movs	r1, r4
 8009460:	4b06      	ldr	r3, [pc, #24]	; (800947c <_svfiprintf_r+0x1fc>)
 8009462:	9803      	ldr	r0, [sp, #12]
 8009464:	f7fe fa06 	bl	8007874 <_printf_i>
 8009468:	e7ea      	b.n	8009440 <_svfiprintf_r+0x1c0>
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	0800a3f4 	.word	0x0800a3f4
 8009470:	0800a3fa 	.word	0x0800a3fa
 8009474:	0800a3fe 	.word	0x0800a3fe
 8009478:	08007311 	.word	0x08007311
 800947c:	080091bd 	.word	0x080091bd

08009480 <_sbrk_r>:
 8009480:	2300      	movs	r3, #0
 8009482:	b570      	push	{r4, r5, r6, lr}
 8009484:	4d06      	ldr	r5, [pc, #24]	; (80094a0 <_sbrk_r+0x20>)
 8009486:	0004      	movs	r4, r0
 8009488:	0008      	movs	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7fa fe32 	bl	80040f4 <_sbrk>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d103      	bne.n	800949c <_sbrk_r+0x1c>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d000      	beq.n	800949c <_sbrk_r+0x1c>
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	bd70      	pop	{r4, r5, r6, pc}
 800949e:	46c0      	nop			; (mov r8, r8)
 80094a0:	200003f0 	.word	0x200003f0

080094a4 <__assert_func>:
 80094a4:	b530      	push	{r4, r5, lr}
 80094a6:	0014      	movs	r4, r2
 80094a8:	001a      	movs	r2, r3
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <__assert_func+0x2c>)
 80094ac:	0005      	movs	r5, r0
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	b085      	sub	sp, #20
 80094b2:	68d8      	ldr	r0, [r3, #12]
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <__assert_func+0x30>)
 80094b6:	2c00      	cmp	r4, #0
 80094b8:	d101      	bne.n	80094be <__assert_func+0x1a>
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <__assert_func+0x34>)
 80094bc:	001c      	movs	r4, r3
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	9100      	str	r1, [sp, #0]
 80094c2:	002b      	movs	r3, r5
 80094c4:	4905      	ldr	r1, [pc, #20]	; (80094dc <__assert_func+0x38>)
 80094c6:	9402      	str	r4, [sp, #8]
 80094c8:	f000 f80a 	bl	80094e0 <fiprintf>
 80094cc:	f000 faba 	bl	8009a44 <abort>
 80094d0:	2000000c 	.word	0x2000000c
 80094d4:	0800a405 	.word	0x0800a405
 80094d8:	0800a440 	.word	0x0800a440
 80094dc:	0800a412 	.word	0x0800a412

080094e0 <fiprintf>:
 80094e0:	b40e      	push	{r1, r2, r3}
 80094e2:	b503      	push	{r0, r1, lr}
 80094e4:	0001      	movs	r1, r0
 80094e6:	ab03      	add	r3, sp, #12
 80094e8:	4804      	ldr	r0, [pc, #16]	; (80094fc <fiprintf+0x1c>)
 80094ea:	cb04      	ldmia	r3!, {r2}
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	f000 f892 	bl	8009618 <_vfiprintf_r>
 80094f4:	b002      	add	sp, #8
 80094f6:	bc08      	pop	{r3}
 80094f8:	b003      	add	sp, #12
 80094fa:	4718      	bx	r3
 80094fc:	2000000c 	.word	0x2000000c

08009500 <__ascii_mbtowc>:
 8009500:	b082      	sub	sp, #8
 8009502:	2900      	cmp	r1, #0
 8009504:	d100      	bne.n	8009508 <__ascii_mbtowc+0x8>
 8009506:	a901      	add	r1, sp, #4
 8009508:	1e10      	subs	r0, r2, #0
 800950a:	d006      	beq.n	800951a <__ascii_mbtowc+0x1a>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <__ascii_mbtowc+0x1e>
 8009510:	7813      	ldrb	r3, [r2, #0]
 8009512:	600b      	str	r3, [r1, #0]
 8009514:	7810      	ldrb	r0, [r2, #0]
 8009516:	1e43      	subs	r3, r0, #1
 8009518:	4198      	sbcs	r0, r3
 800951a:	b002      	add	sp, #8
 800951c:	4770      	bx	lr
 800951e:	2002      	movs	r0, #2
 8009520:	4240      	negs	r0, r0
 8009522:	e7fa      	b.n	800951a <__ascii_mbtowc+0x1a>

08009524 <memmove>:
 8009524:	b510      	push	{r4, lr}
 8009526:	4288      	cmp	r0, r1
 8009528:	d902      	bls.n	8009530 <memmove+0xc>
 800952a:	188b      	adds	r3, r1, r2
 800952c:	4298      	cmp	r0, r3
 800952e:	d303      	bcc.n	8009538 <memmove+0x14>
 8009530:	2300      	movs	r3, #0
 8009532:	e007      	b.n	8009544 <memmove+0x20>
 8009534:	5c8b      	ldrb	r3, [r1, r2]
 8009536:	5483      	strb	r3, [r0, r2]
 8009538:	3a01      	subs	r2, #1
 800953a:	d2fb      	bcs.n	8009534 <memmove+0x10>
 800953c:	bd10      	pop	{r4, pc}
 800953e:	5ccc      	ldrb	r4, [r1, r3]
 8009540:	54c4      	strb	r4, [r0, r3]
 8009542:	3301      	adds	r3, #1
 8009544:	429a      	cmp	r2, r3
 8009546:	d1fa      	bne.n	800953e <memmove+0x1a>
 8009548:	e7f8      	b.n	800953c <memmove+0x18>
	...

0800954c <__malloc_lock>:
 800954c:	b510      	push	{r4, lr}
 800954e:	4802      	ldr	r0, [pc, #8]	; (8009558 <__malloc_lock+0xc>)
 8009550:	f000 fc4f 	bl	8009df2 <__retarget_lock_acquire_recursive>
 8009554:	bd10      	pop	{r4, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	200003f4 	.word	0x200003f4

0800955c <__malloc_unlock>:
 800955c:	b510      	push	{r4, lr}
 800955e:	4802      	ldr	r0, [pc, #8]	; (8009568 <__malloc_unlock+0xc>)
 8009560:	f000 fc48 	bl	8009df4 <__retarget_lock_release_recursive>
 8009564:	bd10      	pop	{r4, pc}
 8009566:	46c0      	nop			; (mov r8, r8)
 8009568:	200003f4 	.word	0x200003f4

0800956c <_realloc_r>:
 800956c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800956e:	0007      	movs	r7, r0
 8009570:	000e      	movs	r6, r1
 8009572:	0014      	movs	r4, r2
 8009574:	2900      	cmp	r1, #0
 8009576:	d105      	bne.n	8009584 <_realloc_r+0x18>
 8009578:	0011      	movs	r1, r2
 800957a:	f7ff fda9 	bl	80090d0 <_malloc_r>
 800957e:	0005      	movs	r5, r0
 8009580:	0028      	movs	r0, r5
 8009582:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009584:	2a00      	cmp	r2, #0
 8009586:	d103      	bne.n	8009590 <_realloc_r+0x24>
 8009588:	f7ff fd36 	bl	8008ff8 <_free_r>
 800958c:	0025      	movs	r5, r4
 800958e:	e7f7      	b.n	8009580 <_realloc_r+0x14>
 8009590:	f000 fc9e 	bl	8009ed0 <_malloc_usable_size_r>
 8009594:	9001      	str	r0, [sp, #4]
 8009596:	4284      	cmp	r4, r0
 8009598:	d803      	bhi.n	80095a2 <_realloc_r+0x36>
 800959a:	0035      	movs	r5, r6
 800959c:	0843      	lsrs	r3, r0, #1
 800959e:	42a3      	cmp	r3, r4
 80095a0:	d3ee      	bcc.n	8009580 <_realloc_r+0x14>
 80095a2:	0021      	movs	r1, r4
 80095a4:	0038      	movs	r0, r7
 80095a6:	f7ff fd93 	bl	80090d0 <_malloc_r>
 80095aa:	1e05      	subs	r5, r0, #0
 80095ac:	d0e8      	beq.n	8009580 <_realloc_r+0x14>
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	0022      	movs	r2, r4
 80095b2:	429c      	cmp	r4, r3
 80095b4:	d900      	bls.n	80095b8 <_realloc_r+0x4c>
 80095b6:	001a      	movs	r2, r3
 80095b8:	0031      	movs	r1, r6
 80095ba:	0028      	movs	r0, r5
 80095bc:	f7ff f94b 	bl	8008856 <memcpy>
 80095c0:	0031      	movs	r1, r6
 80095c2:	0038      	movs	r0, r7
 80095c4:	f7ff fd18 	bl	8008ff8 <_free_r>
 80095c8:	e7da      	b.n	8009580 <_realloc_r+0x14>

080095ca <__sfputc_r>:
 80095ca:	6893      	ldr	r3, [r2, #8]
 80095cc:	b510      	push	{r4, lr}
 80095ce:	3b01      	subs	r3, #1
 80095d0:	6093      	str	r3, [r2, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	da04      	bge.n	80095e0 <__sfputc_r+0x16>
 80095d6:	6994      	ldr	r4, [r2, #24]
 80095d8:	42a3      	cmp	r3, r4
 80095da:	db07      	blt.n	80095ec <__sfputc_r+0x22>
 80095dc:	290a      	cmp	r1, #10
 80095de:	d005      	beq.n	80095ec <__sfputc_r+0x22>
 80095e0:	6813      	ldr	r3, [r2, #0]
 80095e2:	1c58      	adds	r0, r3, #1
 80095e4:	6010      	str	r0, [r2, #0]
 80095e6:	7019      	strb	r1, [r3, #0]
 80095e8:	0008      	movs	r0, r1
 80095ea:	bd10      	pop	{r4, pc}
 80095ec:	f000 f94e 	bl	800988c <__swbuf_r>
 80095f0:	0001      	movs	r1, r0
 80095f2:	e7f9      	b.n	80095e8 <__sfputc_r+0x1e>

080095f4 <__sfputs_r>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	0006      	movs	r6, r0
 80095f8:	000f      	movs	r7, r1
 80095fa:	0014      	movs	r4, r2
 80095fc:	18d5      	adds	r5, r2, r3
 80095fe:	42ac      	cmp	r4, r5
 8009600:	d101      	bne.n	8009606 <__sfputs_r+0x12>
 8009602:	2000      	movs	r0, #0
 8009604:	e007      	b.n	8009616 <__sfputs_r+0x22>
 8009606:	7821      	ldrb	r1, [r4, #0]
 8009608:	003a      	movs	r2, r7
 800960a:	0030      	movs	r0, r6
 800960c:	f7ff ffdd 	bl	80095ca <__sfputc_r>
 8009610:	3401      	adds	r4, #1
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d1f3      	bne.n	80095fe <__sfputs_r+0xa>
 8009616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009618 <_vfiprintf_r>:
 8009618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961a:	b0a1      	sub	sp, #132	; 0x84
 800961c:	0006      	movs	r6, r0
 800961e:	000c      	movs	r4, r1
 8009620:	001f      	movs	r7, r3
 8009622:	9203      	str	r2, [sp, #12]
 8009624:	2800      	cmp	r0, #0
 8009626:	d004      	beq.n	8009632 <_vfiprintf_r+0x1a>
 8009628:	6983      	ldr	r3, [r0, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <_vfiprintf_r+0x1a>
 800962e:	f000 fb3f 	bl	8009cb0 <__sinit>
 8009632:	4b8e      	ldr	r3, [pc, #568]	; (800986c <_vfiprintf_r+0x254>)
 8009634:	429c      	cmp	r4, r3
 8009636:	d11c      	bne.n	8009672 <_vfiprintf_r+0x5a>
 8009638:	6874      	ldr	r4, [r6, #4]
 800963a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800963c:	07db      	lsls	r3, r3, #31
 800963e:	d405      	bmi.n	800964c <_vfiprintf_r+0x34>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	059b      	lsls	r3, r3, #22
 8009644:	d402      	bmi.n	800964c <_vfiprintf_r+0x34>
 8009646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009648:	f000 fbd3 	bl	8009df2 <__retarget_lock_acquire_recursive>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	071b      	lsls	r3, r3, #28
 8009650:	d502      	bpl.n	8009658 <_vfiprintf_r+0x40>
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d11d      	bne.n	8009694 <_vfiprintf_r+0x7c>
 8009658:	0021      	movs	r1, r4
 800965a:	0030      	movs	r0, r6
 800965c:	f000 f97a 	bl	8009954 <__swsetup_r>
 8009660:	2800      	cmp	r0, #0
 8009662:	d017      	beq.n	8009694 <_vfiprintf_r+0x7c>
 8009664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009666:	07db      	lsls	r3, r3, #31
 8009668:	d50d      	bpl.n	8009686 <_vfiprintf_r+0x6e>
 800966a:	2001      	movs	r0, #1
 800966c:	4240      	negs	r0, r0
 800966e:	b021      	add	sp, #132	; 0x84
 8009670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009672:	4b7f      	ldr	r3, [pc, #508]	; (8009870 <_vfiprintf_r+0x258>)
 8009674:	429c      	cmp	r4, r3
 8009676:	d101      	bne.n	800967c <_vfiprintf_r+0x64>
 8009678:	68b4      	ldr	r4, [r6, #8]
 800967a:	e7de      	b.n	800963a <_vfiprintf_r+0x22>
 800967c:	4b7d      	ldr	r3, [pc, #500]	; (8009874 <_vfiprintf_r+0x25c>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d1db      	bne.n	800963a <_vfiprintf_r+0x22>
 8009682:	68f4      	ldr	r4, [r6, #12]
 8009684:	e7d9      	b.n	800963a <_vfiprintf_r+0x22>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	059b      	lsls	r3, r3, #22
 800968a:	d4ee      	bmi.n	800966a <_vfiprintf_r+0x52>
 800968c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968e:	f000 fbb1 	bl	8009df4 <__retarget_lock_release_recursive>
 8009692:	e7ea      	b.n	800966a <_vfiprintf_r+0x52>
 8009694:	2300      	movs	r3, #0
 8009696:	ad08      	add	r5, sp, #32
 8009698:	616b      	str	r3, [r5, #20]
 800969a:	3320      	adds	r3, #32
 800969c:	766b      	strb	r3, [r5, #25]
 800969e:	3310      	adds	r3, #16
 80096a0:	76ab      	strb	r3, [r5, #26]
 80096a2:	9707      	str	r7, [sp, #28]
 80096a4:	9f03      	ldr	r7, [sp, #12]
 80096a6:	783b      	ldrb	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <_vfiprintf_r+0x98>
 80096ac:	2b25      	cmp	r3, #37	; 0x25
 80096ae:	d14e      	bne.n	800974e <_vfiprintf_r+0x136>
 80096b0:	9b03      	ldr	r3, [sp, #12]
 80096b2:	1afb      	subs	r3, r7, r3
 80096b4:	9305      	str	r3, [sp, #20]
 80096b6:	9b03      	ldr	r3, [sp, #12]
 80096b8:	429f      	cmp	r7, r3
 80096ba:	d00d      	beq.n	80096d8 <_vfiprintf_r+0xc0>
 80096bc:	9b05      	ldr	r3, [sp, #20]
 80096be:	0021      	movs	r1, r4
 80096c0:	0030      	movs	r0, r6
 80096c2:	9a03      	ldr	r2, [sp, #12]
 80096c4:	f7ff ff96 	bl	80095f4 <__sfputs_r>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d100      	bne.n	80096ce <_vfiprintf_r+0xb6>
 80096cc:	e0b5      	b.n	800983a <_vfiprintf_r+0x222>
 80096ce:	696a      	ldr	r2, [r5, #20]
 80096d0:	9b05      	ldr	r3, [sp, #20]
 80096d2:	4694      	mov	ip, r2
 80096d4:	4463      	add	r3, ip
 80096d6:	616b      	str	r3, [r5, #20]
 80096d8:	783b      	ldrb	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d100      	bne.n	80096e0 <_vfiprintf_r+0xc8>
 80096de:	e0ac      	b.n	800983a <_vfiprintf_r+0x222>
 80096e0:	2201      	movs	r2, #1
 80096e2:	1c7b      	adds	r3, r7, #1
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	2300      	movs	r3, #0
 80096e8:	4252      	negs	r2, r2
 80096ea:	606a      	str	r2, [r5, #4]
 80096ec:	a904      	add	r1, sp, #16
 80096ee:	3254      	adds	r2, #84	; 0x54
 80096f0:	1852      	adds	r2, r2, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	60eb      	str	r3, [r5, #12]
 80096f6:	60ab      	str	r3, [r5, #8]
 80096f8:	7013      	strb	r3, [r2, #0]
 80096fa:	65ab      	str	r3, [r5, #88]	; 0x58
 80096fc:	9b03      	ldr	r3, [sp, #12]
 80096fe:	2205      	movs	r2, #5
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	485d      	ldr	r0, [pc, #372]	; (8009878 <_vfiprintf_r+0x260>)
 8009704:	f7ff f89c 	bl	8008840 <memchr>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	1c5f      	adds	r7, r3, #1
 800970c:	2800      	cmp	r0, #0
 800970e:	d120      	bne.n	8009752 <_vfiprintf_r+0x13a>
 8009710:	682a      	ldr	r2, [r5, #0]
 8009712:	06d3      	lsls	r3, r2, #27
 8009714:	d504      	bpl.n	8009720 <_vfiprintf_r+0x108>
 8009716:	2353      	movs	r3, #83	; 0x53
 8009718:	a904      	add	r1, sp, #16
 800971a:	185b      	adds	r3, r3, r1
 800971c:	2120      	movs	r1, #32
 800971e:	7019      	strb	r1, [r3, #0]
 8009720:	0713      	lsls	r3, r2, #28
 8009722:	d504      	bpl.n	800972e <_vfiprintf_r+0x116>
 8009724:	2353      	movs	r3, #83	; 0x53
 8009726:	a904      	add	r1, sp, #16
 8009728:	185b      	adds	r3, r3, r1
 800972a:	212b      	movs	r1, #43	; 0x2b
 800972c:	7019      	strb	r1, [r3, #0]
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b2a      	cmp	r3, #42	; 0x2a
 8009734:	d016      	beq.n	8009764 <_vfiprintf_r+0x14c>
 8009736:	2100      	movs	r1, #0
 8009738:	68eb      	ldr	r3, [r5, #12]
 800973a:	9f03      	ldr	r7, [sp, #12]
 800973c:	783a      	ldrb	r2, [r7, #0]
 800973e:	1c78      	adds	r0, r7, #1
 8009740:	3a30      	subs	r2, #48	; 0x30
 8009742:	4684      	mov	ip, r0
 8009744:	2a09      	cmp	r2, #9
 8009746:	d94f      	bls.n	80097e8 <_vfiprintf_r+0x1d0>
 8009748:	2900      	cmp	r1, #0
 800974a:	d111      	bne.n	8009770 <_vfiprintf_r+0x158>
 800974c:	e017      	b.n	800977e <_vfiprintf_r+0x166>
 800974e:	3701      	adds	r7, #1
 8009750:	e7a9      	b.n	80096a6 <_vfiprintf_r+0x8e>
 8009752:	4b49      	ldr	r3, [pc, #292]	; (8009878 <_vfiprintf_r+0x260>)
 8009754:	682a      	ldr	r2, [r5, #0]
 8009756:	1ac0      	subs	r0, r0, r3
 8009758:	2301      	movs	r3, #1
 800975a:	4083      	lsls	r3, r0
 800975c:	4313      	orrs	r3, r2
 800975e:	602b      	str	r3, [r5, #0]
 8009760:	9703      	str	r7, [sp, #12]
 8009762:	e7cb      	b.n	80096fc <_vfiprintf_r+0xe4>
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	1d19      	adds	r1, r3, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	9107      	str	r1, [sp, #28]
 800976c:	2b00      	cmp	r3, #0
 800976e:	db01      	blt.n	8009774 <_vfiprintf_r+0x15c>
 8009770:	930b      	str	r3, [sp, #44]	; 0x2c
 8009772:	e004      	b.n	800977e <_vfiprintf_r+0x166>
 8009774:	425b      	negs	r3, r3
 8009776:	60eb      	str	r3, [r5, #12]
 8009778:	2302      	movs	r3, #2
 800977a:	4313      	orrs	r3, r2
 800977c:	602b      	str	r3, [r5, #0]
 800977e:	783b      	ldrb	r3, [r7, #0]
 8009780:	2b2e      	cmp	r3, #46	; 0x2e
 8009782:	d10a      	bne.n	800979a <_vfiprintf_r+0x182>
 8009784:	787b      	ldrb	r3, [r7, #1]
 8009786:	2b2a      	cmp	r3, #42	; 0x2a
 8009788:	d137      	bne.n	80097fa <_vfiprintf_r+0x1e2>
 800978a:	9b07      	ldr	r3, [sp, #28]
 800978c:	3702      	adds	r7, #2
 800978e:	1d1a      	adds	r2, r3, #4
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	9207      	str	r2, [sp, #28]
 8009794:	2b00      	cmp	r3, #0
 8009796:	db2d      	blt.n	80097f4 <_vfiprintf_r+0x1dc>
 8009798:	9309      	str	r3, [sp, #36]	; 0x24
 800979a:	2203      	movs	r2, #3
 800979c:	7839      	ldrb	r1, [r7, #0]
 800979e:	4837      	ldr	r0, [pc, #220]	; (800987c <_vfiprintf_r+0x264>)
 80097a0:	f7ff f84e 	bl	8008840 <memchr>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d007      	beq.n	80097b8 <_vfiprintf_r+0x1a0>
 80097a8:	4b34      	ldr	r3, [pc, #208]	; (800987c <_vfiprintf_r+0x264>)
 80097aa:	682a      	ldr	r2, [r5, #0]
 80097ac:	1ac0      	subs	r0, r0, r3
 80097ae:	2340      	movs	r3, #64	; 0x40
 80097b0:	4083      	lsls	r3, r0
 80097b2:	4313      	orrs	r3, r2
 80097b4:	3701      	adds	r7, #1
 80097b6:	602b      	str	r3, [r5, #0]
 80097b8:	7839      	ldrb	r1, [r7, #0]
 80097ba:	1c7b      	adds	r3, r7, #1
 80097bc:	2206      	movs	r2, #6
 80097be:	4830      	ldr	r0, [pc, #192]	; (8009880 <_vfiprintf_r+0x268>)
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	7629      	strb	r1, [r5, #24]
 80097c4:	f7ff f83c 	bl	8008840 <memchr>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d045      	beq.n	8009858 <_vfiprintf_r+0x240>
 80097cc:	4b2d      	ldr	r3, [pc, #180]	; (8009884 <_vfiprintf_r+0x26c>)
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d127      	bne.n	8009822 <_vfiprintf_r+0x20a>
 80097d2:	2207      	movs	r2, #7
 80097d4:	9b07      	ldr	r3, [sp, #28]
 80097d6:	3307      	adds	r3, #7
 80097d8:	4393      	bics	r3, r2
 80097da:	3308      	adds	r3, #8
 80097dc:	9307      	str	r3, [sp, #28]
 80097de:	696b      	ldr	r3, [r5, #20]
 80097e0:	9a04      	ldr	r2, [sp, #16]
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	616b      	str	r3, [r5, #20]
 80097e6:	e75d      	b.n	80096a4 <_vfiprintf_r+0x8c>
 80097e8:	210a      	movs	r1, #10
 80097ea:	434b      	muls	r3, r1
 80097ec:	4667      	mov	r7, ip
 80097ee:	189b      	adds	r3, r3, r2
 80097f0:	3909      	subs	r1, #9
 80097f2:	e7a3      	b.n	800973c <_vfiprintf_r+0x124>
 80097f4:	2301      	movs	r3, #1
 80097f6:	425b      	negs	r3, r3
 80097f8:	e7ce      	b.n	8009798 <_vfiprintf_r+0x180>
 80097fa:	2300      	movs	r3, #0
 80097fc:	001a      	movs	r2, r3
 80097fe:	3701      	adds	r7, #1
 8009800:	606b      	str	r3, [r5, #4]
 8009802:	7839      	ldrb	r1, [r7, #0]
 8009804:	1c78      	adds	r0, r7, #1
 8009806:	3930      	subs	r1, #48	; 0x30
 8009808:	4684      	mov	ip, r0
 800980a:	2909      	cmp	r1, #9
 800980c:	d903      	bls.n	8009816 <_vfiprintf_r+0x1fe>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0c3      	beq.n	800979a <_vfiprintf_r+0x182>
 8009812:	9209      	str	r2, [sp, #36]	; 0x24
 8009814:	e7c1      	b.n	800979a <_vfiprintf_r+0x182>
 8009816:	230a      	movs	r3, #10
 8009818:	435a      	muls	r2, r3
 800981a:	4667      	mov	r7, ip
 800981c:	1852      	adds	r2, r2, r1
 800981e:	3b09      	subs	r3, #9
 8009820:	e7ef      	b.n	8009802 <_vfiprintf_r+0x1ea>
 8009822:	ab07      	add	r3, sp, #28
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	0022      	movs	r2, r4
 8009828:	0029      	movs	r1, r5
 800982a:	0030      	movs	r0, r6
 800982c:	4b16      	ldr	r3, [pc, #88]	; (8009888 <_vfiprintf_r+0x270>)
 800982e:	f7fd fd6f 	bl	8007310 <_printf_float>
 8009832:	9004      	str	r0, [sp, #16]
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	3301      	adds	r3, #1
 8009838:	d1d1      	bne.n	80097de <_vfiprintf_r+0x1c6>
 800983a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800983c:	07db      	lsls	r3, r3, #31
 800983e:	d405      	bmi.n	800984c <_vfiprintf_r+0x234>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	059b      	lsls	r3, r3, #22
 8009844:	d402      	bmi.n	800984c <_vfiprintf_r+0x234>
 8009846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009848:	f000 fad4 	bl	8009df4 <__retarget_lock_release_recursive>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	065b      	lsls	r3, r3, #25
 8009850:	d500      	bpl.n	8009854 <_vfiprintf_r+0x23c>
 8009852:	e70a      	b.n	800966a <_vfiprintf_r+0x52>
 8009854:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009856:	e70a      	b.n	800966e <_vfiprintf_r+0x56>
 8009858:	ab07      	add	r3, sp, #28
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	0022      	movs	r2, r4
 800985e:	0029      	movs	r1, r5
 8009860:	0030      	movs	r0, r6
 8009862:	4b09      	ldr	r3, [pc, #36]	; (8009888 <_vfiprintf_r+0x270>)
 8009864:	f7fe f806 	bl	8007874 <_printf_i>
 8009868:	e7e3      	b.n	8009832 <_vfiprintf_r+0x21a>
 800986a:	46c0      	nop			; (mov r8, r8)
 800986c:	0800a56c 	.word	0x0800a56c
 8009870:	0800a58c 	.word	0x0800a58c
 8009874:	0800a54c 	.word	0x0800a54c
 8009878:	0800a3f4 	.word	0x0800a3f4
 800987c:	0800a3fa 	.word	0x0800a3fa
 8009880:	0800a3fe 	.word	0x0800a3fe
 8009884:	08007311 	.word	0x08007311
 8009888:	080095f5 	.word	0x080095f5

0800988c <__swbuf_r>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	0005      	movs	r5, r0
 8009890:	000e      	movs	r6, r1
 8009892:	0014      	movs	r4, r2
 8009894:	2800      	cmp	r0, #0
 8009896:	d004      	beq.n	80098a2 <__swbuf_r+0x16>
 8009898:	6983      	ldr	r3, [r0, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <__swbuf_r+0x16>
 800989e:	f000 fa07 	bl	8009cb0 <__sinit>
 80098a2:	4b22      	ldr	r3, [pc, #136]	; (800992c <__swbuf_r+0xa0>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	d12e      	bne.n	8009906 <__swbuf_r+0x7a>
 80098a8:	686c      	ldr	r4, [r5, #4]
 80098aa:	69a3      	ldr	r3, [r4, #24]
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	071b      	lsls	r3, r3, #28
 80098b2:	d532      	bpl.n	800991a <__swbuf_r+0x8e>
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d02f      	beq.n	800991a <__swbuf_r+0x8e>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	6922      	ldr	r2, [r4, #16]
 80098be:	b2f7      	uxtb	r7, r6
 80098c0:	1a98      	subs	r0, r3, r2
 80098c2:	6963      	ldr	r3, [r4, #20]
 80098c4:	b2f6      	uxtb	r6, r6
 80098c6:	4283      	cmp	r3, r0
 80098c8:	dc05      	bgt.n	80098d6 <__swbuf_r+0x4a>
 80098ca:	0021      	movs	r1, r4
 80098cc:	0028      	movs	r0, r5
 80098ce:	f000 f94d 	bl	8009b6c <_fflush_r>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d127      	bne.n	8009926 <__swbuf_r+0x9a>
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	3001      	adds	r0, #1
 80098da:	3b01      	subs	r3, #1
 80098dc:	60a3      	str	r3, [r4, #8]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	6022      	str	r2, [r4, #0]
 80098e4:	701f      	strb	r7, [r3, #0]
 80098e6:	6963      	ldr	r3, [r4, #20]
 80098e8:	4283      	cmp	r3, r0
 80098ea:	d004      	beq.n	80098f6 <__swbuf_r+0x6a>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	07db      	lsls	r3, r3, #31
 80098f0:	d507      	bpl.n	8009902 <__swbuf_r+0x76>
 80098f2:	2e0a      	cmp	r6, #10
 80098f4:	d105      	bne.n	8009902 <__swbuf_r+0x76>
 80098f6:	0021      	movs	r1, r4
 80098f8:	0028      	movs	r0, r5
 80098fa:	f000 f937 	bl	8009b6c <_fflush_r>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d111      	bne.n	8009926 <__swbuf_r+0x9a>
 8009902:	0030      	movs	r0, r6
 8009904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009906:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <__swbuf_r+0xa4>)
 8009908:	429c      	cmp	r4, r3
 800990a:	d101      	bne.n	8009910 <__swbuf_r+0x84>
 800990c:	68ac      	ldr	r4, [r5, #8]
 800990e:	e7cc      	b.n	80098aa <__swbuf_r+0x1e>
 8009910:	4b08      	ldr	r3, [pc, #32]	; (8009934 <__swbuf_r+0xa8>)
 8009912:	429c      	cmp	r4, r3
 8009914:	d1c9      	bne.n	80098aa <__swbuf_r+0x1e>
 8009916:	68ec      	ldr	r4, [r5, #12]
 8009918:	e7c7      	b.n	80098aa <__swbuf_r+0x1e>
 800991a:	0021      	movs	r1, r4
 800991c:	0028      	movs	r0, r5
 800991e:	f000 f819 	bl	8009954 <__swsetup_r>
 8009922:	2800      	cmp	r0, #0
 8009924:	d0c9      	beq.n	80098ba <__swbuf_r+0x2e>
 8009926:	2601      	movs	r6, #1
 8009928:	4276      	negs	r6, r6
 800992a:	e7ea      	b.n	8009902 <__swbuf_r+0x76>
 800992c:	0800a56c 	.word	0x0800a56c
 8009930:	0800a58c 	.word	0x0800a58c
 8009934:	0800a54c 	.word	0x0800a54c

08009938 <__ascii_wctomb>:
 8009938:	0003      	movs	r3, r0
 800993a:	1e08      	subs	r0, r1, #0
 800993c:	d005      	beq.n	800994a <__ascii_wctomb+0x12>
 800993e:	2aff      	cmp	r2, #255	; 0xff
 8009940:	d904      	bls.n	800994c <__ascii_wctomb+0x14>
 8009942:	228a      	movs	r2, #138	; 0x8a
 8009944:	2001      	movs	r0, #1
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	4240      	negs	r0, r0
 800994a:	4770      	bx	lr
 800994c:	2001      	movs	r0, #1
 800994e:	700a      	strb	r2, [r1, #0]
 8009950:	e7fb      	b.n	800994a <__ascii_wctomb+0x12>
	...

08009954 <__swsetup_r>:
 8009954:	4b37      	ldr	r3, [pc, #220]	; (8009a34 <__swsetup_r+0xe0>)
 8009956:	b570      	push	{r4, r5, r6, lr}
 8009958:	681d      	ldr	r5, [r3, #0]
 800995a:	0006      	movs	r6, r0
 800995c:	000c      	movs	r4, r1
 800995e:	2d00      	cmp	r5, #0
 8009960:	d005      	beq.n	800996e <__swsetup_r+0x1a>
 8009962:	69ab      	ldr	r3, [r5, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <__swsetup_r+0x1a>
 8009968:	0028      	movs	r0, r5
 800996a:	f000 f9a1 	bl	8009cb0 <__sinit>
 800996e:	4b32      	ldr	r3, [pc, #200]	; (8009a38 <__swsetup_r+0xe4>)
 8009970:	429c      	cmp	r4, r3
 8009972:	d10f      	bne.n	8009994 <__swsetup_r+0x40>
 8009974:	686c      	ldr	r4, [r5, #4]
 8009976:	230c      	movs	r3, #12
 8009978:	5ee2      	ldrsh	r2, [r4, r3]
 800997a:	b293      	uxth	r3, r2
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	d42d      	bmi.n	80099dc <__swsetup_r+0x88>
 8009980:	06d9      	lsls	r1, r3, #27
 8009982:	d411      	bmi.n	80099a8 <__swsetup_r+0x54>
 8009984:	2309      	movs	r3, #9
 8009986:	2001      	movs	r0, #1
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	3337      	adds	r3, #55	; 0x37
 800998c:	4313      	orrs	r3, r2
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	4240      	negs	r0, r0
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	4b29      	ldr	r3, [pc, #164]	; (8009a3c <__swsetup_r+0xe8>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d101      	bne.n	800999e <__swsetup_r+0x4a>
 800999a:	68ac      	ldr	r4, [r5, #8]
 800999c:	e7eb      	b.n	8009976 <__swsetup_r+0x22>
 800999e:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <__swsetup_r+0xec>)
 80099a0:	429c      	cmp	r4, r3
 80099a2:	d1e8      	bne.n	8009976 <__swsetup_r+0x22>
 80099a4:	68ec      	ldr	r4, [r5, #12]
 80099a6:	e7e6      	b.n	8009976 <__swsetup_r+0x22>
 80099a8:	075b      	lsls	r3, r3, #29
 80099aa:	d513      	bpl.n	80099d4 <__swsetup_r+0x80>
 80099ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ae:	2900      	cmp	r1, #0
 80099b0:	d008      	beq.n	80099c4 <__swsetup_r+0x70>
 80099b2:	0023      	movs	r3, r4
 80099b4:	3344      	adds	r3, #68	; 0x44
 80099b6:	4299      	cmp	r1, r3
 80099b8:	d002      	beq.n	80099c0 <__swsetup_r+0x6c>
 80099ba:	0030      	movs	r0, r6
 80099bc:	f7ff fb1c 	bl	8008ff8 <_free_r>
 80099c0:	2300      	movs	r3, #0
 80099c2:	6363      	str	r3, [r4, #52]	; 0x34
 80099c4:	2224      	movs	r2, #36	; 0x24
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	4393      	bics	r3, r2
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	2300      	movs	r3, #0
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	2308      	movs	r3, #8
 80099d6:	89a2      	ldrh	r2, [r4, #12]
 80099d8:	4313      	orrs	r3, r2
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	6923      	ldr	r3, [r4, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10b      	bne.n	80099fa <__swsetup_r+0xa6>
 80099e2:	21a0      	movs	r1, #160	; 0xa0
 80099e4:	2280      	movs	r2, #128	; 0x80
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	0089      	lsls	r1, r1, #2
 80099ea:	0092      	lsls	r2, r2, #2
 80099ec:	400b      	ands	r3, r1
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d003      	beq.n	80099fa <__swsetup_r+0xa6>
 80099f2:	0021      	movs	r1, r4
 80099f4:	0030      	movs	r0, r6
 80099f6:	f000 fa27 	bl	8009e48 <__smakebuf_r>
 80099fa:	220c      	movs	r2, #12
 80099fc:	5ea3      	ldrsh	r3, [r4, r2]
 80099fe:	2001      	movs	r0, #1
 8009a00:	001a      	movs	r2, r3
 8009a02:	b299      	uxth	r1, r3
 8009a04:	4002      	ands	r2, r0
 8009a06:	4203      	tst	r3, r0
 8009a08:	d00f      	beq.n	8009a2a <__swsetup_r+0xd6>
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	60a2      	str	r2, [r4, #8]
 8009a0e:	6962      	ldr	r2, [r4, #20]
 8009a10:	4252      	negs	r2, r2
 8009a12:	61a2      	str	r2, [r4, #24]
 8009a14:	2000      	movs	r0, #0
 8009a16:	6922      	ldr	r2, [r4, #16]
 8009a18:	4282      	cmp	r2, r0
 8009a1a:	d1ba      	bne.n	8009992 <__swsetup_r+0x3e>
 8009a1c:	060a      	lsls	r2, r1, #24
 8009a1e:	d5b8      	bpl.n	8009992 <__swsetup_r+0x3e>
 8009a20:	2240      	movs	r2, #64	; 0x40
 8009a22:	4313      	orrs	r3, r2
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	3801      	subs	r0, #1
 8009a28:	e7b3      	b.n	8009992 <__swsetup_r+0x3e>
 8009a2a:	0788      	lsls	r0, r1, #30
 8009a2c:	d400      	bmi.n	8009a30 <__swsetup_r+0xdc>
 8009a2e:	6962      	ldr	r2, [r4, #20]
 8009a30:	60a2      	str	r2, [r4, #8]
 8009a32:	e7ef      	b.n	8009a14 <__swsetup_r+0xc0>
 8009a34:	2000000c 	.word	0x2000000c
 8009a38:	0800a56c 	.word	0x0800a56c
 8009a3c:	0800a58c 	.word	0x0800a58c
 8009a40:	0800a54c 	.word	0x0800a54c

08009a44 <abort>:
 8009a44:	2006      	movs	r0, #6
 8009a46:	b510      	push	{r4, lr}
 8009a48:	f000 fa74 	bl	8009f34 <raise>
 8009a4c:	2001      	movs	r0, #1
 8009a4e:	f7fa fadf 	bl	8004010 <_exit>
	...

08009a54 <__sflush_r>:
 8009a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a56:	898b      	ldrh	r3, [r1, #12]
 8009a58:	0005      	movs	r5, r0
 8009a5a:	000c      	movs	r4, r1
 8009a5c:	071a      	lsls	r2, r3, #28
 8009a5e:	d45f      	bmi.n	8009b20 <__sflush_r+0xcc>
 8009a60:	684a      	ldr	r2, [r1, #4]
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	dc04      	bgt.n	8009a70 <__sflush_r+0x1c>
 8009a66:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	dc01      	bgt.n	8009a70 <__sflush_r+0x1c>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d0fa      	beq.n	8009a6c <__sflush_r+0x18>
 8009a76:	2200      	movs	r2, #0
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	682e      	ldr	r6, [r5, #0]
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	001a      	movs	r2, r3
 8009a80:	0149      	lsls	r1, r1, #5
 8009a82:	400a      	ands	r2, r1
 8009a84:	420b      	tst	r3, r1
 8009a86:	d034      	beq.n	8009af2 <__sflush_r+0x9e>
 8009a88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	075b      	lsls	r3, r3, #29
 8009a8e:	d506      	bpl.n	8009a9e <__sflush_r+0x4a>
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	1ac0      	subs	r0, r0, r3
 8009a94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <__sflush_r+0x4a>
 8009a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a9c:	1ac0      	subs	r0, r0, r3
 8009a9e:	0002      	movs	r2, r0
 8009aa0:	6a21      	ldr	r1, [r4, #32]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	0028      	movs	r0, r5
 8009aa6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009aa8:	47b8      	blx	r7
 8009aaa:	89a1      	ldrh	r1, [r4, #12]
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d106      	bne.n	8009abe <__sflush_r+0x6a>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	2b1d      	cmp	r3, #29
 8009ab4:	d831      	bhi.n	8009b1a <__sflush_r+0xc6>
 8009ab6:	4a2c      	ldr	r2, [pc, #176]	; (8009b68 <__sflush_r+0x114>)
 8009ab8:	40da      	lsrs	r2, r3
 8009aba:	07d3      	lsls	r3, r2, #31
 8009abc:	d52d      	bpl.n	8009b1a <__sflush_r+0xc6>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6063      	str	r3, [r4, #4]
 8009ac2:	6923      	ldr	r3, [r4, #16]
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	04cb      	lsls	r3, r1, #19
 8009ac8:	d505      	bpl.n	8009ad6 <__sflush_r+0x82>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d102      	bne.n	8009ad4 <__sflush_r+0x80>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d100      	bne.n	8009ad6 <__sflush_r+0x82>
 8009ad4:	6560      	str	r0, [r4, #84]	; 0x54
 8009ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ad8:	602e      	str	r6, [r5, #0]
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d0c6      	beq.n	8009a6c <__sflush_r+0x18>
 8009ade:	0023      	movs	r3, r4
 8009ae0:	3344      	adds	r3, #68	; 0x44
 8009ae2:	4299      	cmp	r1, r3
 8009ae4:	d002      	beq.n	8009aec <__sflush_r+0x98>
 8009ae6:	0028      	movs	r0, r5
 8009ae8:	f7ff fa86 	bl	8008ff8 <_free_r>
 8009aec:	2000      	movs	r0, #0
 8009aee:	6360      	str	r0, [r4, #52]	; 0x34
 8009af0:	e7bd      	b.n	8009a6e <__sflush_r+0x1a>
 8009af2:	2301      	movs	r3, #1
 8009af4:	0028      	movs	r0, r5
 8009af6:	6a21      	ldr	r1, [r4, #32]
 8009af8:	47b8      	blx	r7
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d1c5      	bne.n	8009a8a <__sflush_r+0x36>
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0c2      	beq.n	8009a8a <__sflush_r+0x36>
 8009b04:	2b1d      	cmp	r3, #29
 8009b06:	d001      	beq.n	8009b0c <__sflush_r+0xb8>
 8009b08:	2b16      	cmp	r3, #22
 8009b0a:	d101      	bne.n	8009b10 <__sflush_r+0xbc>
 8009b0c:	602e      	str	r6, [r5, #0]
 8009b0e:	e7ad      	b.n	8009a6c <__sflush_r+0x18>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	89a2      	ldrh	r2, [r4, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	81a3      	strh	r3, [r4, #12]
 8009b18:	e7a9      	b.n	8009a6e <__sflush_r+0x1a>
 8009b1a:	2340      	movs	r3, #64	; 0x40
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	e7fa      	b.n	8009b16 <__sflush_r+0xc2>
 8009b20:	690f      	ldr	r7, [r1, #16]
 8009b22:	2f00      	cmp	r7, #0
 8009b24:	d0a2      	beq.n	8009a6c <__sflush_r+0x18>
 8009b26:	680a      	ldr	r2, [r1, #0]
 8009b28:	600f      	str	r7, [r1, #0]
 8009b2a:	1bd2      	subs	r2, r2, r7
 8009b2c:	9201      	str	r2, [sp, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	079b      	lsls	r3, r3, #30
 8009b32:	d100      	bne.n	8009b36 <__sflush_r+0xe2>
 8009b34:	694a      	ldr	r2, [r1, #20]
 8009b36:	60a2      	str	r2, [r4, #8]
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dc00      	bgt.n	8009b40 <__sflush_r+0xec>
 8009b3e:	e795      	b.n	8009a6c <__sflush_r+0x18>
 8009b40:	003a      	movs	r2, r7
 8009b42:	0028      	movs	r0, r5
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	6a21      	ldr	r1, [r4, #32]
 8009b48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b4a:	47b0      	blx	r6
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	dc06      	bgt.n	8009b5e <__sflush_r+0x10a>
 8009b50:	2340      	movs	r3, #64	; 0x40
 8009b52:	2001      	movs	r0, #1
 8009b54:	89a2      	ldrh	r2, [r4, #12]
 8009b56:	4240      	negs	r0, r0
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	e787      	b.n	8009a6e <__sflush_r+0x1a>
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	183f      	adds	r7, r7, r0
 8009b62:	1a1b      	subs	r3, r3, r0
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	e7e7      	b.n	8009b38 <__sflush_r+0xe4>
 8009b68:	20400001 	.word	0x20400001

08009b6c <_fflush_r>:
 8009b6c:	690b      	ldr	r3, [r1, #16]
 8009b6e:	b570      	push	{r4, r5, r6, lr}
 8009b70:	0005      	movs	r5, r0
 8009b72:	000c      	movs	r4, r1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <_fflush_r+0x12>
 8009b78:	2500      	movs	r5, #0
 8009b7a:	0028      	movs	r0, r5
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	d004      	beq.n	8009b8c <_fflush_r+0x20>
 8009b82:	6983      	ldr	r3, [r0, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <_fflush_r+0x20>
 8009b88:	f000 f892 	bl	8009cb0 <__sinit>
 8009b8c:	4b14      	ldr	r3, [pc, #80]	; (8009be0 <_fflush_r+0x74>)
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	d11b      	bne.n	8009bca <_fflush_r+0x5e>
 8009b92:	686c      	ldr	r4, [r5, #4]
 8009b94:	220c      	movs	r2, #12
 8009b96:	5ea3      	ldrsh	r3, [r4, r2]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0ed      	beq.n	8009b78 <_fflush_r+0xc>
 8009b9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b9e:	07d2      	lsls	r2, r2, #31
 8009ba0:	d404      	bmi.n	8009bac <_fflush_r+0x40>
 8009ba2:	059b      	lsls	r3, r3, #22
 8009ba4:	d402      	bmi.n	8009bac <_fflush_r+0x40>
 8009ba6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba8:	f000 f923 	bl	8009df2 <__retarget_lock_acquire_recursive>
 8009bac:	0028      	movs	r0, r5
 8009bae:	0021      	movs	r1, r4
 8009bb0:	f7ff ff50 	bl	8009a54 <__sflush_r>
 8009bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb6:	0005      	movs	r5, r0
 8009bb8:	07db      	lsls	r3, r3, #31
 8009bba:	d4de      	bmi.n	8009b7a <_fflush_r+0xe>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	059b      	lsls	r3, r3, #22
 8009bc0:	d4db      	bmi.n	8009b7a <_fflush_r+0xe>
 8009bc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc4:	f000 f916 	bl	8009df4 <__retarget_lock_release_recursive>
 8009bc8:	e7d7      	b.n	8009b7a <_fflush_r+0xe>
 8009bca:	4b06      	ldr	r3, [pc, #24]	; (8009be4 <_fflush_r+0x78>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d101      	bne.n	8009bd4 <_fflush_r+0x68>
 8009bd0:	68ac      	ldr	r4, [r5, #8]
 8009bd2:	e7df      	b.n	8009b94 <_fflush_r+0x28>
 8009bd4:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <_fflush_r+0x7c>)
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d1dc      	bne.n	8009b94 <_fflush_r+0x28>
 8009bda:	68ec      	ldr	r4, [r5, #12]
 8009bdc:	e7da      	b.n	8009b94 <_fflush_r+0x28>
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	0800a56c 	.word	0x0800a56c
 8009be4:	0800a58c 	.word	0x0800a58c
 8009be8:	0800a54c 	.word	0x0800a54c

08009bec <std>:
 8009bec:	2300      	movs	r3, #0
 8009bee:	b510      	push	{r4, lr}
 8009bf0:	0004      	movs	r4, r0
 8009bf2:	6003      	str	r3, [r0, #0]
 8009bf4:	6043      	str	r3, [r0, #4]
 8009bf6:	6083      	str	r3, [r0, #8]
 8009bf8:	8181      	strh	r1, [r0, #12]
 8009bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8009bfc:	0019      	movs	r1, r3
 8009bfe:	81c2      	strh	r2, [r0, #14]
 8009c00:	6103      	str	r3, [r0, #16]
 8009c02:	6143      	str	r3, [r0, #20]
 8009c04:	6183      	str	r3, [r0, #24]
 8009c06:	2208      	movs	r2, #8
 8009c08:	305c      	adds	r0, #92	; 0x5c
 8009c0a:	f7fd facf 	bl	80071ac <memset>
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <std+0x38>)
 8009c10:	6224      	str	r4, [r4, #32]
 8009c12:	6263      	str	r3, [r4, #36]	; 0x24
 8009c14:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <std+0x3c>)
 8009c16:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c18:	4b04      	ldr	r3, [pc, #16]	; (8009c2c <std+0x40>)
 8009c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c1c:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <std+0x44>)
 8009c1e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	08009f75 	.word	0x08009f75
 8009c28:	08009f9d 	.word	0x08009f9d
 8009c2c:	08009fd5 	.word	0x08009fd5
 8009c30:	0800a001 	.word	0x0800a001

08009c34 <_cleanup_r>:
 8009c34:	b510      	push	{r4, lr}
 8009c36:	4902      	ldr	r1, [pc, #8]	; (8009c40 <_cleanup_r+0xc>)
 8009c38:	f000 f8ba 	bl	8009db0 <_fwalk_reent>
 8009c3c:	bd10      	pop	{r4, pc}
 8009c3e:	46c0      	nop			; (mov r8, r8)
 8009c40:	08009b6d 	.word	0x08009b6d

08009c44 <__sfmoreglue>:
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	2568      	movs	r5, #104	; 0x68
 8009c48:	1e4a      	subs	r2, r1, #1
 8009c4a:	4355      	muls	r5, r2
 8009c4c:	000e      	movs	r6, r1
 8009c4e:	0029      	movs	r1, r5
 8009c50:	3174      	adds	r1, #116	; 0x74
 8009c52:	f7ff fa3d 	bl	80090d0 <_malloc_r>
 8009c56:	1e04      	subs	r4, r0, #0
 8009c58:	d008      	beq.n	8009c6c <__sfmoreglue+0x28>
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	002a      	movs	r2, r5
 8009c5e:	6001      	str	r1, [r0, #0]
 8009c60:	6046      	str	r6, [r0, #4]
 8009c62:	300c      	adds	r0, #12
 8009c64:	60a0      	str	r0, [r4, #8]
 8009c66:	3268      	adds	r2, #104	; 0x68
 8009c68:	f7fd faa0 	bl	80071ac <memset>
 8009c6c:	0020      	movs	r0, r4
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}

08009c70 <__sfp_lock_acquire>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4802      	ldr	r0, [pc, #8]	; (8009c7c <__sfp_lock_acquire+0xc>)
 8009c74:	f000 f8bd 	bl	8009df2 <__retarget_lock_acquire_recursive>
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	200003f5 	.word	0x200003f5

08009c80 <__sfp_lock_release>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	4802      	ldr	r0, [pc, #8]	; (8009c8c <__sfp_lock_release+0xc>)
 8009c84:	f000 f8b6 	bl	8009df4 <__retarget_lock_release_recursive>
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	200003f5 	.word	0x200003f5

08009c90 <__sinit_lock_acquire>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	4802      	ldr	r0, [pc, #8]	; (8009c9c <__sinit_lock_acquire+0xc>)
 8009c94:	f000 f8ad 	bl	8009df2 <__retarget_lock_acquire_recursive>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	46c0      	nop			; (mov r8, r8)
 8009c9c:	200003f6 	.word	0x200003f6

08009ca0 <__sinit_lock_release>:
 8009ca0:	b510      	push	{r4, lr}
 8009ca2:	4802      	ldr	r0, [pc, #8]	; (8009cac <__sinit_lock_release+0xc>)
 8009ca4:	f000 f8a6 	bl	8009df4 <__retarget_lock_release_recursive>
 8009ca8:	bd10      	pop	{r4, pc}
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	200003f6 	.word	0x200003f6

08009cb0 <__sinit>:
 8009cb0:	b513      	push	{r0, r1, r4, lr}
 8009cb2:	0004      	movs	r4, r0
 8009cb4:	f7ff ffec 	bl	8009c90 <__sinit_lock_acquire>
 8009cb8:	69a3      	ldr	r3, [r4, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <__sinit+0x14>
 8009cbe:	f7ff ffef 	bl	8009ca0 <__sinit_lock_release>
 8009cc2:	bd13      	pop	{r0, r1, r4, pc}
 8009cc4:	64a3      	str	r3, [r4, #72]	; 0x48
 8009cc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <__sinit+0x68>)
 8009ccc:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <__sinit+0x6c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	d101      	bne.n	8009cdc <__sinit+0x2c>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	61a3      	str	r3, [r4, #24]
 8009cdc:	0020      	movs	r0, r4
 8009cde:	f000 f81f 	bl	8009d20 <__sfp>
 8009ce2:	6060      	str	r0, [r4, #4]
 8009ce4:	0020      	movs	r0, r4
 8009ce6:	f000 f81b 	bl	8009d20 <__sfp>
 8009cea:	60a0      	str	r0, [r4, #8]
 8009cec:	0020      	movs	r0, r4
 8009cee:	f000 f817 	bl	8009d20 <__sfp>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	2104      	movs	r1, #4
 8009cf6:	60e0      	str	r0, [r4, #12]
 8009cf8:	6860      	ldr	r0, [r4, #4]
 8009cfa:	f7ff ff77 	bl	8009bec <std>
 8009cfe:	2201      	movs	r2, #1
 8009d00:	2109      	movs	r1, #9
 8009d02:	68a0      	ldr	r0, [r4, #8]
 8009d04:	f7ff ff72 	bl	8009bec <std>
 8009d08:	2202      	movs	r2, #2
 8009d0a:	2112      	movs	r1, #18
 8009d0c:	68e0      	ldr	r0, [r4, #12]
 8009d0e:	f7ff ff6d 	bl	8009bec <std>
 8009d12:	2301      	movs	r3, #1
 8009d14:	61a3      	str	r3, [r4, #24]
 8009d16:	e7d2      	b.n	8009cbe <__sinit+0xe>
 8009d18:	0800a1d4 	.word	0x0800a1d4
 8009d1c:	08009c35 	.word	0x08009c35

08009d20 <__sfp>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	0007      	movs	r7, r0
 8009d24:	f7ff ffa4 	bl	8009c70 <__sfp_lock_acquire>
 8009d28:	4b1f      	ldr	r3, [pc, #124]	; (8009da8 <__sfp+0x88>)
 8009d2a:	681e      	ldr	r6, [r3, #0]
 8009d2c:	69b3      	ldr	r3, [r6, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <__sfp+0x18>
 8009d32:	0030      	movs	r0, r6
 8009d34:	f7ff ffbc 	bl	8009cb0 <__sinit>
 8009d38:	3648      	adds	r6, #72	; 0x48
 8009d3a:	68b4      	ldr	r4, [r6, #8]
 8009d3c:	6873      	ldr	r3, [r6, #4]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	d504      	bpl.n	8009d4c <__sfp+0x2c>
 8009d42:	6833      	ldr	r3, [r6, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d022      	beq.n	8009d8e <__sfp+0x6e>
 8009d48:	6836      	ldr	r6, [r6, #0]
 8009d4a:	e7f6      	b.n	8009d3a <__sfp+0x1a>
 8009d4c:	220c      	movs	r2, #12
 8009d4e:	5ea5      	ldrsh	r5, [r4, r2]
 8009d50:	2d00      	cmp	r5, #0
 8009d52:	d11a      	bne.n	8009d8a <__sfp+0x6a>
 8009d54:	0020      	movs	r0, r4
 8009d56:	4b15      	ldr	r3, [pc, #84]	; (8009dac <__sfp+0x8c>)
 8009d58:	3058      	adds	r0, #88	; 0x58
 8009d5a:	60e3      	str	r3, [r4, #12]
 8009d5c:	6665      	str	r5, [r4, #100]	; 0x64
 8009d5e:	f000 f847 	bl	8009df0 <__retarget_lock_init_recursive>
 8009d62:	f7ff ff8d 	bl	8009c80 <__sfp_lock_release>
 8009d66:	0020      	movs	r0, r4
 8009d68:	2208      	movs	r2, #8
 8009d6a:	0029      	movs	r1, r5
 8009d6c:	6025      	str	r5, [r4, #0]
 8009d6e:	60a5      	str	r5, [r4, #8]
 8009d70:	6065      	str	r5, [r4, #4]
 8009d72:	6125      	str	r5, [r4, #16]
 8009d74:	6165      	str	r5, [r4, #20]
 8009d76:	61a5      	str	r5, [r4, #24]
 8009d78:	305c      	adds	r0, #92	; 0x5c
 8009d7a:	f7fd fa17 	bl	80071ac <memset>
 8009d7e:	6365      	str	r5, [r4, #52]	; 0x34
 8009d80:	63a5      	str	r5, [r4, #56]	; 0x38
 8009d82:	64a5      	str	r5, [r4, #72]	; 0x48
 8009d84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009d86:	0020      	movs	r0, r4
 8009d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8a:	3468      	adds	r4, #104	; 0x68
 8009d8c:	e7d7      	b.n	8009d3e <__sfp+0x1e>
 8009d8e:	2104      	movs	r1, #4
 8009d90:	0038      	movs	r0, r7
 8009d92:	f7ff ff57 	bl	8009c44 <__sfmoreglue>
 8009d96:	1e04      	subs	r4, r0, #0
 8009d98:	6030      	str	r0, [r6, #0]
 8009d9a:	d1d5      	bne.n	8009d48 <__sfp+0x28>
 8009d9c:	f7ff ff70 	bl	8009c80 <__sfp_lock_release>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	e7ef      	b.n	8009d86 <__sfp+0x66>
 8009da6:	46c0      	nop			; (mov r8, r8)
 8009da8:	0800a1d4 	.word	0x0800a1d4
 8009dac:	ffff0001 	.word	0xffff0001

08009db0 <_fwalk_reent>:
 8009db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db2:	0004      	movs	r4, r0
 8009db4:	0006      	movs	r6, r0
 8009db6:	2700      	movs	r7, #0
 8009db8:	9101      	str	r1, [sp, #4]
 8009dba:	3448      	adds	r4, #72	; 0x48
 8009dbc:	6863      	ldr	r3, [r4, #4]
 8009dbe:	68a5      	ldr	r5, [r4, #8]
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	d504      	bpl.n	8009dd4 <_fwalk_reent+0x24>
 8009dca:	6824      	ldr	r4, [r4, #0]
 8009dcc:	2c00      	cmp	r4, #0
 8009dce:	d1f5      	bne.n	8009dbc <_fwalk_reent+0xc>
 8009dd0:	0038      	movs	r0, r7
 8009dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dd4:	89ab      	ldrh	r3, [r5, #12]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d908      	bls.n	8009dec <_fwalk_reent+0x3c>
 8009dda:	220e      	movs	r2, #14
 8009ddc:	5eab      	ldrsh	r3, [r5, r2]
 8009dde:	3301      	adds	r3, #1
 8009de0:	d004      	beq.n	8009dec <_fwalk_reent+0x3c>
 8009de2:	0029      	movs	r1, r5
 8009de4:	0030      	movs	r0, r6
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	4798      	blx	r3
 8009dea:	4307      	orrs	r7, r0
 8009dec:	3568      	adds	r5, #104	; 0x68
 8009dee:	e7e8      	b.n	8009dc2 <_fwalk_reent+0x12>

08009df0 <__retarget_lock_init_recursive>:
 8009df0:	4770      	bx	lr

08009df2 <__retarget_lock_acquire_recursive>:
 8009df2:	4770      	bx	lr

08009df4 <__retarget_lock_release_recursive>:
 8009df4:	4770      	bx	lr
	...

08009df8 <__swhatbuf_r>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	000e      	movs	r6, r1
 8009dfc:	001d      	movs	r5, r3
 8009dfe:	230e      	movs	r3, #14
 8009e00:	5ec9      	ldrsh	r1, [r1, r3]
 8009e02:	0014      	movs	r4, r2
 8009e04:	b096      	sub	sp, #88	; 0x58
 8009e06:	2900      	cmp	r1, #0
 8009e08:	da08      	bge.n	8009e1c <__swhatbuf_r+0x24>
 8009e0a:	220c      	movs	r2, #12
 8009e0c:	5eb3      	ldrsh	r3, [r6, r2]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	061b      	lsls	r3, r3, #24
 8009e14:	d411      	bmi.n	8009e3a <__swhatbuf_r+0x42>
 8009e16:	2380      	movs	r3, #128	; 0x80
 8009e18:	00db      	lsls	r3, r3, #3
 8009e1a:	e00f      	b.n	8009e3c <__swhatbuf_r+0x44>
 8009e1c:	466a      	mov	r2, sp
 8009e1e:	f000 f91b 	bl	800a058 <_fstat_r>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	dbf1      	blt.n	8009e0a <__swhatbuf_r+0x12>
 8009e26:	23f0      	movs	r3, #240	; 0xf0
 8009e28:	9901      	ldr	r1, [sp, #4]
 8009e2a:	021b      	lsls	r3, r3, #8
 8009e2c:	4019      	ands	r1, r3
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <__swhatbuf_r+0x4c>)
 8009e30:	18c9      	adds	r1, r1, r3
 8009e32:	424b      	negs	r3, r1
 8009e34:	4159      	adcs	r1, r3
 8009e36:	6029      	str	r1, [r5, #0]
 8009e38:	e7ed      	b.n	8009e16 <__swhatbuf_r+0x1e>
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	b016      	add	sp, #88	; 0x58
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	ffffe000 	.word	0xffffe000

08009e48 <__smakebuf_r>:
 8009e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4a:	2602      	movs	r6, #2
 8009e4c:	898b      	ldrh	r3, [r1, #12]
 8009e4e:	0005      	movs	r5, r0
 8009e50:	000c      	movs	r4, r1
 8009e52:	4233      	tst	r3, r6
 8009e54:	d006      	beq.n	8009e64 <__smakebuf_r+0x1c>
 8009e56:	0023      	movs	r3, r4
 8009e58:	3347      	adds	r3, #71	; 0x47
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	6123      	str	r3, [r4, #16]
 8009e5e:	2301      	movs	r3, #1
 8009e60:	6163      	str	r3, [r4, #20]
 8009e62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009e64:	466a      	mov	r2, sp
 8009e66:	ab01      	add	r3, sp, #4
 8009e68:	f7ff ffc6 	bl	8009df8 <__swhatbuf_r>
 8009e6c:	9900      	ldr	r1, [sp, #0]
 8009e6e:	0007      	movs	r7, r0
 8009e70:	0028      	movs	r0, r5
 8009e72:	f7ff f92d 	bl	80090d0 <_malloc_r>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d108      	bne.n	8009e8c <__smakebuf_r+0x44>
 8009e7a:	220c      	movs	r2, #12
 8009e7c:	5ea3      	ldrsh	r3, [r4, r2]
 8009e7e:	059a      	lsls	r2, r3, #22
 8009e80:	d4ef      	bmi.n	8009e62 <__smakebuf_r+0x1a>
 8009e82:	2203      	movs	r2, #3
 8009e84:	4393      	bics	r3, r2
 8009e86:	431e      	orrs	r6, r3
 8009e88:	81a6      	strh	r6, [r4, #12]
 8009e8a:	e7e4      	b.n	8009e56 <__smakebuf_r+0xe>
 8009e8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <__smakebuf_r+0x84>)
 8009e8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8009e90:	2380      	movs	r3, #128	; 0x80
 8009e92:	89a2      	ldrh	r2, [r4, #12]
 8009e94:	6020      	str	r0, [r4, #0]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	6120      	str	r0, [r4, #16]
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	9b01      	ldr	r3, [sp, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00d      	beq.n	8009ec2 <__smakebuf_r+0x7a>
 8009ea6:	0028      	movs	r0, r5
 8009ea8:	230e      	movs	r3, #14
 8009eaa:	5ee1      	ldrsh	r1, [r4, r3]
 8009eac:	f000 f8e6 	bl	800a07c <_isatty_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d006      	beq.n	8009ec2 <__smakebuf_r+0x7a>
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	4393      	bics	r3, r2
 8009eba:	001a      	movs	r2, r3
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	89a0      	ldrh	r0, [r4, #12]
 8009ec4:	4307      	orrs	r7, r0
 8009ec6:	81a7      	strh	r7, [r4, #12]
 8009ec8:	e7cb      	b.n	8009e62 <__smakebuf_r+0x1a>
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	08009c35 	.word	0x08009c35

08009ed0 <_malloc_usable_size_r>:
 8009ed0:	1f0b      	subs	r3, r1, #4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	1f18      	subs	r0, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	da01      	bge.n	8009ede <_malloc_usable_size_r+0xe>
 8009eda:	580b      	ldr	r3, [r1, r0]
 8009edc:	18c0      	adds	r0, r0, r3
 8009ede:	4770      	bx	lr

08009ee0 <_raise_r>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	0004      	movs	r4, r0
 8009ee4:	000d      	movs	r5, r1
 8009ee6:	291f      	cmp	r1, #31
 8009ee8:	d904      	bls.n	8009ef4 <_raise_r+0x14>
 8009eea:	2316      	movs	r3, #22
 8009eec:	6003      	str	r3, [r0, #0]
 8009eee:	2001      	movs	r0, #1
 8009ef0:	4240      	negs	r0, r0
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
 8009ef4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <_raise_r+0x24>
 8009efa:	008a      	lsls	r2, r1, #2
 8009efc:	189b      	adds	r3, r3, r2
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	d108      	bne.n	8009f16 <_raise_r+0x36>
 8009f04:	0020      	movs	r0, r4
 8009f06:	f000 f831 	bl	8009f6c <_getpid_r>
 8009f0a:	002a      	movs	r2, r5
 8009f0c:	0001      	movs	r1, r0
 8009f0e:	0020      	movs	r0, r4
 8009f10:	f000 f81a 	bl	8009f48 <_kill_r>
 8009f14:	e7ed      	b.n	8009ef2 <_raise_r+0x12>
 8009f16:	2000      	movs	r0, #0
 8009f18:	2a01      	cmp	r2, #1
 8009f1a:	d0ea      	beq.n	8009ef2 <_raise_r+0x12>
 8009f1c:	1c51      	adds	r1, r2, #1
 8009f1e:	d103      	bne.n	8009f28 <_raise_r+0x48>
 8009f20:	2316      	movs	r3, #22
 8009f22:	3001      	adds	r0, #1
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	e7e4      	b.n	8009ef2 <_raise_r+0x12>
 8009f28:	2400      	movs	r4, #0
 8009f2a:	0028      	movs	r0, r5
 8009f2c:	601c      	str	r4, [r3, #0]
 8009f2e:	4790      	blx	r2
 8009f30:	0020      	movs	r0, r4
 8009f32:	e7de      	b.n	8009ef2 <_raise_r+0x12>

08009f34 <raise>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <raise+0x10>)
 8009f38:	0001      	movs	r1, r0
 8009f3a:	6818      	ldr	r0, [r3, #0]
 8009f3c:	f7ff ffd0 	bl	8009ee0 <_raise_r>
 8009f40:	bd10      	pop	{r4, pc}
 8009f42:	46c0      	nop			; (mov r8, r8)
 8009f44:	2000000c 	.word	0x2000000c

08009f48 <_kill_r>:
 8009f48:	2300      	movs	r3, #0
 8009f4a:	b570      	push	{r4, r5, r6, lr}
 8009f4c:	4d06      	ldr	r5, [pc, #24]	; (8009f68 <_kill_r+0x20>)
 8009f4e:	0004      	movs	r4, r0
 8009f50:	0008      	movs	r0, r1
 8009f52:	0011      	movs	r1, r2
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	f7fa f84b 	bl	8003ff0 <_kill>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	d103      	bne.n	8009f66 <_kill_r+0x1e>
 8009f5e:	682b      	ldr	r3, [r5, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d000      	beq.n	8009f66 <_kill_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	200003f0 	.word	0x200003f0

08009f6c <_getpid_r>:
 8009f6c:	b510      	push	{r4, lr}
 8009f6e:	f7fa f839 	bl	8003fe4 <_getpid>
 8009f72:	bd10      	pop	{r4, pc}

08009f74 <__sread>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	000c      	movs	r4, r1
 8009f78:	250e      	movs	r5, #14
 8009f7a:	5f49      	ldrsh	r1, [r1, r5]
 8009f7c:	f000 f8a4 	bl	800a0c8 <_read_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	db03      	blt.n	8009f8c <__sread+0x18>
 8009f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f86:	181b      	adds	r3, r3, r0
 8009f88:	6563      	str	r3, [r4, #84]	; 0x54
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	4a02      	ldr	r2, [pc, #8]	; (8009f98 <__sread+0x24>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	e7f9      	b.n	8009f8a <__sread+0x16>
 8009f96:	46c0      	nop			; (mov r8, r8)
 8009f98:	ffffefff 	.word	0xffffefff

08009f9c <__swrite>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	001f      	movs	r7, r3
 8009fa0:	898b      	ldrh	r3, [r1, #12]
 8009fa2:	0005      	movs	r5, r0
 8009fa4:	000c      	movs	r4, r1
 8009fa6:	0016      	movs	r6, r2
 8009fa8:	05db      	lsls	r3, r3, #23
 8009faa:	d505      	bpl.n	8009fb8 <__swrite+0x1c>
 8009fac:	230e      	movs	r3, #14
 8009fae:	5ec9      	ldrsh	r1, [r1, r3]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	f000 f874 	bl	800a0a0 <_lseek_r>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	4a05      	ldr	r2, [pc, #20]	; (8009fd0 <__swrite+0x34>)
 8009fbc:	0028      	movs	r0, r5
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	0032      	movs	r2, r6
 8009fc4:	230e      	movs	r3, #14
 8009fc6:	5ee1      	ldrsh	r1, [r4, r3]
 8009fc8:	003b      	movs	r3, r7
 8009fca:	f000 f81f 	bl	800a00c <_write_r>
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	ffffefff 	.word	0xffffefff

08009fd4 <__sseek>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	000c      	movs	r4, r1
 8009fd8:	250e      	movs	r5, #14
 8009fda:	5f49      	ldrsh	r1, [r1, r5]
 8009fdc:	f000 f860 	bl	800a0a0 <_lseek_r>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	1c42      	adds	r2, r0, #1
 8009fe4:	d103      	bne.n	8009fee <__sseek+0x1a>
 8009fe6:	4a05      	ldr	r2, [pc, #20]	; (8009ffc <__sseek+0x28>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	bd70      	pop	{r4, r5, r6, pc}
 8009fee:	2280      	movs	r2, #128	; 0x80
 8009ff0:	0152      	lsls	r2, r2, #5
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8009ff8:	e7f8      	b.n	8009fec <__sseek+0x18>
 8009ffa:	46c0      	nop			; (mov r8, r8)
 8009ffc:	ffffefff 	.word	0xffffefff

0800a000 <__sclose>:
 800a000:	b510      	push	{r4, lr}
 800a002:	230e      	movs	r3, #14
 800a004:	5ec9      	ldrsh	r1, [r1, r3]
 800a006:	f000 f815 	bl	800a034 <_close_r>
 800a00a:	bd10      	pop	{r4, pc}

0800a00c <_write_r>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	0004      	movs	r4, r0
 800a010:	0008      	movs	r0, r1
 800a012:	0011      	movs	r1, r2
 800a014:	001a      	movs	r2, r3
 800a016:	2300      	movs	r3, #0
 800a018:	4d05      	ldr	r5, [pc, #20]	; (800a030 <_write_r+0x24>)
 800a01a:	602b      	str	r3, [r5, #0]
 800a01c:	f7fa f821 	bl	8004062 <_write>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d103      	bne.n	800a02c <_write_r+0x20>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d000      	beq.n	800a02c <_write_r+0x20>
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	bd70      	pop	{r4, r5, r6, pc}
 800a02e:	46c0      	nop			; (mov r8, r8)
 800a030:	200003f0 	.word	0x200003f0

0800a034 <_close_r>:
 800a034:	2300      	movs	r3, #0
 800a036:	b570      	push	{r4, r5, r6, lr}
 800a038:	4d06      	ldr	r5, [pc, #24]	; (800a054 <_close_r+0x20>)
 800a03a:	0004      	movs	r4, r0
 800a03c:	0008      	movs	r0, r1
 800a03e:	602b      	str	r3, [r5, #0]
 800a040:	f7fa f82b 	bl	800409a <_close>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d103      	bne.n	800a050 <_close_r+0x1c>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d000      	beq.n	800a050 <_close_r+0x1c>
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	bd70      	pop	{r4, r5, r6, pc}
 800a052:	46c0      	nop			; (mov r8, r8)
 800a054:	200003f0 	.word	0x200003f0

0800a058 <_fstat_r>:
 800a058:	2300      	movs	r3, #0
 800a05a:	b570      	push	{r4, r5, r6, lr}
 800a05c:	4d06      	ldr	r5, [pc, #24]	; (800a078 <_fstat_r+0x20>)
 800a05e:	0004      	movs	r4, r0
 800a060:	0008      	movs	r0, r1
 800a062:	0011      	movs	r1, r2
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	f7fa f822 	bl	80040ae <_fstat>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d103      	bne.n	800a076 <_fstat_r+0x1e>
 800a06e:	682b      	ldr	r3, [r5, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d000      	beq.n	800a076 <_fstat_r+0x1e>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	200003f0 	.word	0x200003f0

0800a07c <_isatty_r>:
 800a07c:	2300      	movs	r3, #0
 800a07e:	b570      	push	{r4, r5, r6, lr}
 800a080:	4d06      	ldr	r5, [pc, #24]	; (800a09c <_isatty_r+0x20>)
 800a082:	0004      	movs	r4, r0
 800a084:	0008      	movs	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7fa f81f 	bl	80040ca <_isatty>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d103      	bne.n	800a098 <_isatty_r+0x1c>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d000      	beq.n	800a098 <_isatty_r+0x1c>
 800a096:	6023      	str	r3, [r4, #0]
 800a098:	bd70      	pop	{r4, r5, r6, pc}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	200003f0 	.word	0x200003f0

0800a0a0 <_lseek_r>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	0004      	movs	r4, r0
 800a0a4:	0008      	movs	r0, r1
 800a0a6:	0011      	movs	r1, r2
 800a0a8:	001a      	movs	r2, r3
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4d05      	ldr	r5, [pc, #20]	; (800a0c4 <_lseek_r+0x24>)
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	f7fa f814 	bl	80040dc <_lseek>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d103      	bne.n	800a0c0 <_lseek_r+0x20>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d000      	beq.n	800a0c0 <_lseek_r+0x20>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	200003f0 	.word	0x200003f0

0800a0c8 <_read_r>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	0004      	movs	r4, r0
 800a0cc:	0008      	movs	r0, r1
 800a0ce:	0011      	movs	r1, r2
 800a0d0:	001a      	movs	r2, r3
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4d05      	ldr	r5, [pc, #20]	; (800a0ec <_read_r+0x24>)
 800a0d6:	602b      	str	r3, [r5, #0]
 800a0d8:	f7f9 ffa6 	bl	8004028 <_read>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d103      	bne.n	800a0e8 <_read_r+0x20>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d000      	beq.n	800a0e8 <_read_r+0x20>
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	200003f0 	.word	0x200003f0

0800a0f0 <_init>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_fini>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	46c0      	nop			; (mov r8, r8)
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr
