
sensor3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a358  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800a418  0800a418  0001a418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a93c  0800a93c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a93c  0800a93c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a940  0800a940  0001a940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001dc  0800ab20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800ab20  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d38a  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002180  00000000  00000000  0002d58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013d47  00000000  00000000  00030c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e307  00000000  00000000  000449cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007085f  00000000  00000000  00052cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000c3588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a400 	.word	0x0800a400

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800a400 	.word	0x0800a400

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc39 	bl	8001cb4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb89 	bl	8001b64 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc2b 	bl	8001cb4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc21 	bl	8001cb4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fbb1 	bl	8001be8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fba7 	bl	8001be8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_f2uiz>:
 80004a8:	219e      	movs	r1, #158	; 0x9e
 80004aa:	b510      	push	{r4, lr}
 80004ac:	05c9      	lsls	r1, r1, #23
 80004ae:	1c04      	adds	r4, r0, #0
 80004b0:	f002 fb84 	bl	8002bbc <__aeabi_fcmpge>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d103      	bne.n	80004c0 <__aeabi_f2uiz+0x18>
 80004b8:	1c20      	adds	r0, r4, #0
 80004ba:	f000 fc71 	bl	8000da0 <__aeabi_f2iz>
 80004be:	bd10      	pop	{r4, pc}
 80004c0:	219e      	movs	r1, #158	; 0x9e
 80004c2:	1c20      	adds	r0, r4, #0
 80004c4:	05c9      	lsls	r1, r1, #23
 80004c6:	f000 fabd 	bl	8000a44 <__aeabi_fsub>
 80004ca:	f000 fc69 	bl	8000da0 <__aeabi_f2iz>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	061b      	lsls	r3, r3, #24
 80004d2:	469c      	mov	ip, r3
 80004d4:	4460      	add	r0, ip
 80004d6:	e7f2      	b.n	80004be <__aeabi_f2uiz+0x16>

080004d8 <__aeabi_fadd>:
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004da:	46c6      	mov	lr, r8
 80004dc:	0243      	lsls	r3, r0, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	024e      	lsls	r6, r1, #9
 80004e2:	0045      	lsls	r5, r0, #1
 80004e4:	004f      	lsls	r7, r1, #1
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	0fc4      	lsrs	r4, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0a70      	lsrs	r0, r6, #9
 80004ee:	4690      	mov	r8, r2
 80004f0:	b500      	push	{lr}
 80004f2:	0e2d      	lsrs	r5, r5, #24
 80004f4:	0e3f      	lsrs	r7, r7, #24
 80004f6:	0fc9      	lsrs	r1, r1, #31
 80004f8:	09b6      	lsrs	r6, r6, #6
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d04b      	beq.n	8000596 <__aeabi_fadd+0xbe>
 80004fe:	1bea      	subs	r2, r5, r7
 8000500:	2a00      	cmp	r2, #0
 8000502:	dd36      	ble.n	8000572 <__aeabi_fadd+0x9a>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d061      	beq.n	80005cc <__aeabi_fadd+0xf4>
 8000508:	2dff      	cmp	r5, #255	; 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x36>
 800050c:	e0ad      	b.n	800066a <__aeabi_fadd+0x192>
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	04db      	lsls	r3, r3, #19
 8000512:	431e      	orrs	r6, r3
 8000514:	2a1b      	cmp	r2, #27
 8000516:	dc00      	bgt.n	800051a <__aeabi_fadd+0x42>
 8000518:	e0d3      	b.n	80006c2 <__aeabi_fadd+0x1ea>
 800051a:	2001      	movs	r0, #1
 800051c:	4643      	mov	r3, r8
 800051e:	1a18      	subs	r0, r3, r0
 8000520:	0143      	lsls	r3, r0, #5
 8000522:	d400      	bmi.n	8000526 <__aeabi_fadd+0x4e>
 8000524:	e08c      	b.n	8000640 <__aeabi_fadd+0x168>
 8000526:	0180      	lsls	r0, r0, #6
 8000528:	0987      	lsrs	r7, r0, #6
 800052a:	0038      	movs	r0, r7
 800052c:	f002 fb50 	bl	8002bd0 <__clzsi2>
 8000530:	3805      	subs	r0, #5
 8000532:	4087      	lsls	r7, r0
 8000534:	4285      	cmp	r5, r0
 8000536:	dc00      	bgt.n	800053a <__aeabi_fadd+0x62>
 8000538:	e0b6      	b.n	80006a8 <__aeabi_fadd+0x1d0>
 800053a:	1a2d      	subs	r5, r5, r0
 800053c:	48b3      	ldr	r0, [pc, #716]	; (800080c <__aeabi_fadd+0x334>)
 800053e:	4038      	ands	r0, r7
 8000540:	0743      	lsls	r3, r0, #29
 8000542:	d004      	beq.n	800054e <__aeabi_fadd+0x76>
 8000544:	230f      	movs	r3, #15
 8000546:	4003      	ands	r3, r0
 8000548:	2b04      	cmp	r3, #4
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0x76>
 800054c:	3004      	adds	r0, #4
 800054e:	0143      	lsls	r3, r0, #5
 8000550:	d400      	bmi.n	8000554 <__aeabi_fadd+0x7c>
 8000552:	e078      	b.n	8000646 <__aeabi_fadd+0x16e>
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	2dfe      	cmp	r5, #254	; 0xfe
 8000558:	d065      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800055a:	0180      	lsls	r0, r0, #6
 800055c:	0a43      	lsrs	r3, r0, #9
 800055e:	469c      	mov	ip, r3
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	4663      	mov	r3, ip
 8000564:	05d0      	lsls	r0, r2, #23
 8000566:	4318      	orrs	r0, r3
 8000568:	07e4      	lsls	r4, r4, #31
 800056a:	4320      	orrs	r0, r4
 800056c:	bc80      	pop	{r7}
 800056e:	46b8      	mov	r8, r7
 8000570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000572:	2a00      	cmp	r2, #0
 8000574:	d035      	beq.n	80005e2 <__aeabi_fadd+0x10a>
 8000576:	1b7a      	subs	r2, r7, r5
 8000578:	2d00      	cmp	r5, #0
 800057a:	d000      	beq.n	800057e <__aeabi_fadd+0xa6>
 800057c:	e0af      	b.n	80006de <__aeabi_fadd+0x206>
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xae>
 8000584:	e0a7      	b.n	80006d6 <__aeabi_fadd+0x1fe>
 8000586:	1e53      	subs	r3, r2, #1
 8000588:	2a01      	cmp	r2, #1
 800058a:	d100      	bne.n	800058e <__aeabi_fadd+0xb6>
 800058c:	e12f      	b.n	80007ee <__aeabi_fadd+0x316>
 800058e:	2aff      	cmp	r2, #255	; 0xff
 8000590:	d069      	beq.n	8000666 <__aeabi_fadd+0x18e>
 8000592:	001a      	movs	r2, r3
 8000594:	e0aa      	b.n	80006ec <__aeabi_fadd+0x214>
 8000596:	1be9      	subs	r1, r5, r7
 8000598:	2900      	cmp	r1, #0
 800059a:	dd70      	ble.n	800067e <__aeabi_fadd+0x1a6>
 800059c:	2f00      	cmp	r7, #0
 800059e:	d037      	beq.n	8000610 <__aeabi_fadd+0x138>
 80005a0:	2dff      	cmp	r5, #255	; 0xff
 80005a2:	d062      	beq.n	800066a <__aeabi_fadd+0x192>
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	04db      	lsls	r3, r3, #19
 80005a8:	431e      	orrs	r6, r3
 80005aa:	291b      	cmp	r1, #27
 80005ac:	dc00      	bgt.n	80005b0 <__aeabi_fadd+0xd8>
 80005ae:	e0b0      	b.n	8000712 <__aeabi_fadd+0x23a>
 80005b0:	2001      	movs	r0, #1
 80005b2:	4440      	add	r0, r8
 80005b4:	0143      	lsls	r3, r0, #5
 80005b6:	d543      	bpl.n	8000640 <__aeabi_fadd+0x168>
 80005b8:	3501      	adds	r5, #1
 80005ba:	2dff      	cmp	r5, #255	; 0xff
 80005bc:	d033      	beq.n	8000626 <__aeabi_fadd+0x14e>
 80005be:	2301      	movs	r3, #1
 80005c0:	4a93      	ldr	r2, [pc, #588]	; (8000810 <__aeabi_fadd+0x338>)
 80005c2:	4003      	ands	r3, r0
 80005c4:	0840      	lsrs	r0, r0, #1
 80005c6:	4010      	ands	r0, r2
 80005c8:	4318      	orrs	r0, r3
 80005ca:	e7b9      	b.n	8000540 <__aeabi_fadd+0x68>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xfa>
 80005d0:	e083      	b.n	80006da <__aeabi_fadd+0x202>
 80005d2:	1e51      	subs	r1, r2, #1
 80005d4:	2a01      	cmp	r2, #1
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x102>
 80005d8:	e0d8      	b.n	800078c <__aeabi_fadd+0x2b4>
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d045      	beq.n	800066a <__aeabi_fadd+0x192>
 80005de:	000a      	movs	r2, r1
 80005e0:	e798      	b.n	8000514 <__aeabi_fadd+0x3c>
 80005e2:	27fe      	movs	r7, #254	; 0xfe
 80005e4:	1c6a      	adds	r2, r5, #1
 80005e6:	4217      	tst	r7, r2
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x114>
 80005ea:	e086      	b.n	80006fa <__aeabi_fadd+0x222>
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0x11a>
 80005f0:	e0b7      	b.n	8000762 <__aeabi_fadd+0x28a>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0x122>
 80005f8:	e0f3      	b.n	80007e2 <__aeabi_fadd+0x30a>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d0b0      	beq.n	8000562 <__aeabi_fadd+0x8a>
 8000600:	1b98      	subs	r0, r3, r6
 8000602:	0143      	lsls	r3, r0, #5
 8000604:	d400      	bmi.n	8000608 <__aeabi_fadd+0x130>
 8000606:	e0fa      	b.n	80007fe <__aeabi_fadd+0x326>
 8000608:	4643      	mov	r3, r8
 800060a:	000c      	movs	r4, r1
 800060c:	1af0      	subs	r0, r6, r3
 800060e:	e797      	b.n	8000540 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x13e>
 8000614:	e0c8      	b.n	80007a8 <__aeabi_fadd+0x2d0>
 8000616:	1e4a      	subs	r2, r1, #1
 8000618:	2901      	cmp	r1, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x146>
 800061c:	e0ae      	b.n	800077c <__aeabi_fadd+0x2a4>
 800061e:	29ff      	cmp	r1, #255	; 0xff
 8000620:	d023      	beq.n	800066a <__aeabi_fadd+0x192>
 8000622:	0011      	movs	r1, r2
 8000624:	e7c1      	b.n	80005aa <__aeabi_fadd+0xd2>
 8000626:	2300      	movs	r3, #0
 8000628:	22ff      	movs	r2, #255	; 0xff
 800062a:	469c      	mov	ip, r3
 800062c:	e799      	b.n	8000562 <__aeabi_fadd+0x8a>
 800062e:	21fe      	movs	r1, #254	; 0xfe
 8000630:	1c6a      	adds	r2, r5, #1
 8000632:	4211      	tst	r1, r2
 8000634:	d077      	beq.n	8000726 <__aeabi_fadd+0x24e>
 8000636:	2aff      	cmp	r2, #255	; 0xff
 8000638:	d0f5      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800063a:	0015      	movs	r5, r2
 800063c:	4446      	add	r6, r8
 800063e:	0870      	lsrs	r0, r6, #1
 8000640:	0743      	lsls	r3, r0, #29
 8000642:	d000      	beq.n	8000646 <__aeabi_fadd+0x16e>
 8000644:	e77e      	b.n	8000544 <__aeabi_fadd+0x6c>
 8000646:	08c3      	lsrs	r3, r0, #3
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d00e      	beq.n	800066a <__aeabi_fadd+0x192>
 800064c:	025b      	lsls	r3, r3, #9
 800064e:	0a5b      	lsrs	r3, r3, #9
 8000650:	469c      	mov	ip, r3
 8000652:	b2ea      	uxtb	r2, r5
 8000654:	e785      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000656:	2e00      	cmp	r6, #0
 8000658:	d007      	beq.n	800066a <__aeabi_fadd+0x192>
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	03d2      	lsls	r2, r2, #15
 800065e:	4213      	tst	r3, r2
 8000660:	d003      	beq.n	800066a <__aeabi_fadd+0x192>
 8000662:	4210      	tst	r0, r2
 8000664:	d101      	bne.n	800066a <__aeabi_fadd+0x192>
 8000666:	000c      	movs	r4, r1
 8000668:	0003      	movs	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0db      	beq.n	8000626 <__aeabi_fadd+0x14e>
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	03c0      	lsls	r0, r0, #15
 8000672:	4318      	orrs	r0, r3
 8000674:	0240      	lsls	r0, r0, #9
 8000676:	0a43      	lsrs	r3, r0, #9
 8000678:	469c      	mov	ip, r3
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	e771      	b.n	8000562 <__aeabi_fadd+0x8a>
 800067e:	2900      	cmp	r1, #0
 8000680:	d0d5      	beq.n	800062e <__aeabi_fadd+0x156>
 8000682:	1b7a      	subs	r2, r7, r5
 8000684:	2d00      	cmp	r5, #0
 8000686:	d160      	bne.n	800074a <__aeabi_fadd+0x272>
 8000688:	4643      	mov	r3, r8
 800068a:	2b00      	cmp	r3, #0
 800068c:	d024      	beq.n	80006d8 <__aeabi_fadd+0x200>
 800068e:	1e53      	subs	r3, r2, #1
 8000690:	2a01      	cmp	r2, #1
 8000692:	d073      	beq.n	800077c <__aeabi_fadd+0x2a4>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0e7      	beq.n	8000668 <__aeabi_fadd+0x190>
 8000698:	001a      	movs	r2, r3
 800069a:	2a1b      	cmp	r2, #27
 800069c:	dc00      	bgt.n	80006a0 <__aeabi_fadd+0x1c8>
 800069e:	e085      	b.n	80007ac <__aeabi_fadd+0x2d4>
 80006a0:	2001      	movs	r0, #1
 80006a2:	003d      	movs	r5, r7
 80006a4:	1980      	adds	r0, r0, r6
 80006a6:	e785      	b.n	80005b4 <__aeabi_fadd+0xdc>
 80006a8:	2320      	movs	r3, #32
 80006aa:	003a      	movs	r2, r7
 80006ac:	1b45      	subs	r5, r0, r5
 80006ae:	0038      	movs	r0, r7
 80006b0:	3501      	adds	r5, #1
 80006b2:	40ea      	lsrs	r2, r5
 80006b4:	1b5d      	subs	r5, r3, r5
 80006b6:	40a8      	lsls	r0, r5
 80006b8:	1e43      	subs	r3, r0, #1
 80006ba:	4198      	sbcs	r0, r3
 80006bc:	2500      	movs	r5, #0
 80006be:	4310      	orrs	r0, r2
 80006c0:	e73e      	b.n	8000540 <__aeabi_fadd+0x68>
 80006c2:	2320      	movs	r3, #32
 80006c4:	0030      	movs	r0, r6
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	0031      	movs	r1, r6
 80006ca:	4098      	lsls	r0, r3
 80006cc:	40d1      	lsrs	r1, r2
 80006ce:	1e43      	subs	r3, r0, #1
 80006d0:	4198      	sbcs	r0, r3
 80006d2:	4308      	orrs	r0, r1
 80006d4:	e722      	b.n	800051c <__aeabi_fadd+0x44>
 80006d6:	000c      	movs	r4, r1
 80006d8:	0003      	movs	r3, r0
 80006da:	0015      	movs	r5, r2
 80006dc:	e7b4      	b.n	8000648 <__aeabi_fadd+0x170>
 80006de:	2fff      	cmp	r7, #255	; 0xff
 80006e0:	d0c1      	beq.n	8000666 <__aeabi_fadd+0x18e>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	4640      	mov	r0, r8
 80006e6:	04db      	lsls	r3, r3, #19
 80006e8:	4318      	orrs	r0, r3
 80006ea:	4680      	mov	r8, r0
 80006ec:	2a1b      	cmp	r2, #27
 80006ee:	dd51      	ble.n	8000794 <__aeabi_fadd+0x2bc>
 80006f0:	2001      	movs	r0, #1
 80006f2:	000c      	movs	r4, r1
 80006f4:	003d      	movs	r5, r7
 80006f6:	1a30      	subs	r0, r6, r0
 80006f8:	e712      	b.n	8000520 <__aeabi_fadd+0x48>
 80006fa:	4643      	mov	r3, r8
 80006fc:	1b9f      	subs	r7, r3, r6
 80006fe:	017b      	lsls	r3, r7, #5
 8000700:	d42b      	bmi.n	800075a <__aeabi_fadd+0x282>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d000      	beq.n	8000708 <__aeabi_fadd+0x230>
 8000706:	e710      	b.n	800052a <__aeabi_fadd+0x52>
 8000708:	2300      	movs	r3, #0
 800070a:	2400      	movs	r4, #0
 800070c:	2200      	movs	r2, #0
 800070e:	469c      	mov	ip, r3
 8000710:	e727      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000712:	2320      	movs	r3, #32
 8000714:	0032      	movs	r2, r6
 8000716:	0030      	movs	r0, r6
 8000718:	40ca      	lsrs	r2, r1
 800071a:	1a59      	subs	r1, r3, r1
 800071c:	4088      	lsls	r0, r1
 800071e:	1e43      	subs	r3, r0, #1
 8000720:	4198      	sbcs	r0, r3
 8000722:	4310      	orrs	r0, r2
 8000724:	e745      	b.n	80005b2 <__aeabi_fadd+0xda>
 8000726:	2d00      	cmp	r5, #0
 8000728:	d14a      	bne.n	80007c0 <__aeabi_fadd+0x2e8>
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d063      	beq.n	80007f8 <__aeabi_fadd+0x320>
 8000730:	2200      	movs	r2, #0
 8000732:	2e00      	cmp	r6, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x260>
 8000736:	e714      	b.n	8000562 <__aeabi_fadd+0x8a>
 8000738:	0030      	movs	r0, r6
 800073a:	4440      	add	r0, r8
 800073c:	0143      	lsls	r3, r0, #5
 800073e:	d400      	bmi.n	8000742 <__aeabi_fadd+0x26a>
 8000740:	e77e      	b.n	8000640 <__aeabi_fadd+0x168>
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <__aeabi_fadd+0x334>)
 8000744:	3501      	adds	r5, #1
 8000746:	4018      	ands	r0, r3
 8000748:	e77a      	b.n	8000640 <__aeabi_fadd+0x168>
 800074a:	2fff      	cmp	r7, #255	; 0xff
 800074c:	d08c      	beq.n	8000668 <__aeabi_fadd+0x190>
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	4641      	mov	r1, r8
 8000752:	04db      	lsls	r3, r3, #19
 8000754:	4319      	orrs	r1, r3
 8000756:	4688      	mov	r8, r1
 8000758:	e79f      	b.n	800069a <__aeabi_fadd+0x1c2>
 800075a:	4643      	mov	r3, r8
 800075c:	000c      	movs	r4, r1
 800075e:	1af7      	subs	r7, r6, r3
 8000760:	e6e3      	b.n	800052a <__aeabi_fadd+0x52>
 8000762:	4642      	mov	r2, r8
 8000764:	2a00      	cmp	r2, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0x292>
 8000768:	e775      	b.n	8000656 <__aeabi_fadd+0x17e>
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x298>
 800076e:	e77a      	b.n	8000666 <__aeabi_fadd+0x18e>
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	03db      	lsls	r3, r3, #15
 8000774:	2400      	movs	r4, #0
 8000776:	469c      	mov	ip, r3
 8000778:	22ff      	movs	r2, #255	; 0xff
 800077a:	e6f2      	b.n	8000562 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	2501      	movs	r5, #1
 8000782:	0143      	lsls	r3, r0, #5
 8000784:	d400      	bmi.n	8000788 <__aeabi_fadd+0x2b0>
 8000786:	e75b      	b.n	8000640 <__aeabi_fadd+0x168>
 8000788:	2502      	movs	r5, #2
 800078a:	e718      	b.n	80005be <__aeabi_fadd+0xe6>
 800078c:	4643      	mov	r3, r8
 800078e:	2501      	movs	r5, #1
 8000790:	1b98      	subs	r0, r3, r6
 8000792:	e6c5      	b.n	8000520 <__aeabi_fadd+0x48>
 8000794:	2320      	movs	r3, #32
 8000796:	4644      	mov	r4, r8
 8000798:	4640      	mov	r0, r8
 800079a:	40d4      	lsrs	r4, r2
 800079c:	1a9a      	subs	r2, r3, r2
 800079e:	4090      	lsls	r0, r2
 80007a0:	1e43      	subs	r3, r0, #1
 80007a2:	4198      	sbcs	r0, r3
 80007a4:	4320      	orrs	r0, r4
 80007a6:	e7a4      	b.n	80006f2 <__aeabi_fadd+0x21a>
 80007a8:	000d      	movs	r5, r1
 80007aa:	e74d      	b.n	8000648 <__aeabi_fadd+0x170>
 80007ac:	2320      	movs	r3, #32
 80007ae:	4641      	mov	r1, r8
 80007b0:	4640      	mov	r0, r8
 80007b2:	40d1      	lsrs	r1, r2
 80007b4:	1a9a      	subs	r2, r3, r2
 80007b6:	4090      	lsls	r0, r2
 80007b8:	1e43      	subs	r3, r0, #1
 80007ba:	4198      	sbcs	r0, r3
 80007bc:	4308      	orrs	r0, r1
 80007be:	e770      	b.n	80006a2 <__aeabi_fadd+0x1ca>
 80007c0:	4642      	mov	r2, r8
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x2f0>
 80007c6:	e74f      	b.n	8000668 <__aeabi_fadd+0x190>
 80007c8:	2e00      	cmp	r6, #0
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x2f6>
 80007cc:	e74d      	b.n	800066a <__aeabi_fadd+0x192>
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	03d2      	lsls	r2, r2, #15
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x300>
 80007d6:	e748      	b.n	800066a <__aeabi_fadd+0x192>
 80007d8:	4210      	tst	r0, r2
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x306>
 80007dc:	e745      	b.n	800066a <__aeabi_fadd+0x192>
 80007de:	0003      	movs	r3, r0
 80007e0:	e743      	b.n	800066a <__aeabi_fadd+0x192>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d090      	beq.n	8000708 <__aeabi_fadd+0x230>
 80007e6:	000c      	movs	r4, r1
 80007e8:	4684      	mov	ip, r0
 80007ea:	2200      	movs	r2, #0
 80007ec:	e6b9      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007ee:	4643      	mov	r3, r8
 80007f0:	000c      	movs	r4, r1
 80007f2:	1af0      	subs	r0, r6, r3
 80007f4:	3501      	adds	r5, #1
 80007f6:	e693      	b.n	8000520 <__aeabi_fadd+0x48>
 80007f8:	4684      	mov	ip, r0
 80007fa:	2200      	movs	r2, #0
 80007fc:	e6b1      	b.n	8000562 <__aeabi_fadd+0x8a>
 80007fe:	2800      	cmp	r0, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x32c>
 8000802:	e71d      	b.n	8000640 <__aeabi_fadd+0x168>
 8000804:	2300      	movs	r3, #0
 8000806:	2400      	movs	r4, #0
 8000808:	469c      	mov	ip, r3
 800080a:	e6aa      	b.n	8000562 <__aeabi_fadd+0x8a>
 800080c:	fbffffff 	.word	0xfbffffff
 8000810:	7dffffff 	.word	0x7dffffff

08000814 <__aeabi_fdiv>:
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	464f      	mov	r7, r9
 8000818:	4646      	mov	r6, r8
 800081a:	46d6      	mov	lr, sl
 800081c:	0245      	lsls	r5, r0, #9
 800081e:	b5c0      	push	{r6, r7, lr}
 8000820:	0047      	lsls	r7, r0, #1
 8000822:	1c0c      	adds	r4, r1, #0
 8000824:	0a6d      	lsrs	r5, r5, #9
 8000826:	0e3f      	lsrs	r7, r7, #24
 8000828:	0fc6      	lsrs	r6, r0, #31
 800082a:	2f00      	cmp	r7, #0
 800082c:	d100      	bne.n	8000830 <__aeabi_fdiv+0x1c>
 800082e:	e070      	b.n	8000912 <__aeabi_fdiv+0xfe>
 8000830:	2fff      	cmp	r7, #255	; 0xff
 8000832:	d100      	bne.n	8000836 <__aeabi_fdiv+0x22>
 8000834:	e075      	b.n	8000922 <__aeabi_fdiv+0x10e>
 8000836:	00eb      	lsls	r3, r5, #3
 8000838:	2580      	movs	r5, #128	; 0x80
 800083a:	04ed      	lsls	r5, r5, #19
 800083c:	431d      	orrs	r5, r3
 800083e:	2300      	movs	r3, #0
 8000840:	4699      	mov	r9, r3
 8000842:	469a      	mov	sl, r3
 8000844:	3f7f      	subs	r7, #127	; 0x7f
 8000846:	0260      	lsls	r0, r4, #9
 8000848:	0a43      	lsrs	r3, r0, #9
 800084a:	4698      	mov	r8, r3
 800084c:	0063      	lsls	r3, r4, #1
 800084e:	0e1b      	lsrs	r3, r3, #24
 8000850:	0fe4      	lsrs	r4, r4, #31
 8000852:	2b00      	cmp	r3, #0
 8000854:	d04e      	beq.n	80008f4 <__aeabi_fdiv+0xe0>
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d046      	beq.n	80008e8 <__aeabi_fdiv+0xd4>
 800085a:	4642      	mov	r2, r8
 800085c:	00d0      	lsls	r0, r2, #3
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	04d2      	lsls	r2, r2, #19
 8000862:	4302      	orrs	r2, r0
 8000864:	4690      	mov	r8, r2
 8000866:	2200      	movs	r2, #0
 8000868:	3b7f      	subs	r3, #127	; 0x7f
 800086a:	0031      	movs	r1, r6
 800086c:	1aff      	subs	r7, r7, r3
 800086e:	464b      	mov	r3, r9
 8000870:	4061      	eors	r1, r4
 8000872:	b2c9      	uxtb	r1, r1
 8000874:	4313      	orrs	r3, r2
 8000876:	2b0f      	cmp	r3, #15
 8000878:	d900      	bls.n	800087c <__aeabi_fdiv+0x68>
 800087a:	e0b5      	b.n	80009e8 <__aeabi_fdiv+0x1d4>
 800087c:	486e      	ldr	r0, [pc, #440]	; (8000a38 <__aeabi_fdiv+0x224>)
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	58c3      	ldr	r3, [r0, r3]
 8000882:	469f      	mov	pc, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4698      	mov	r8, r3
 8000888:	0026      	movs	r6, r4
 800088a:	4645      	mov	r5, r8
 800088c:	4692      	mov	sl, r2
 800088e:	4653      	mov	r3, sl
 8000890:	2b02      	cmp	r3, #2
 8000892:	d100      	bne.n	8000896 <__aeabi_fdiv+0x82>
 8000894:	e089      	b.n	80009aa <__aeabi_fdiv+0x196>
 8000896:	2b03      	cmp	r3, #3
 8000898:	d100      	bne.n	800089c <__aeabi_fdiv+0x88>
 800089a:	e09e      	b.n	80009da <__aeabi_fdiv+0x1c6>
 800089c:	2b01      	cmp	r3, #1
 800089e:	d018      	beq.n	80008d2 <__aeabi_fdiv+0xbe>
 80008a0:	003b      	movs	r3, r7
 80008a2:	337f      	adds	r3, #127	; 0x7f
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dd69      	ble.n	800097c <__aeabi_fdiv+0x168>
 80008a8:	076a      	lsls	r2, r5, #29
 80008aa:	d004      	beq.n	80008b6 <__aeabi_fdiv+0xa2>
 80008ac:	220f      	movs	r2, #15
 80008ae:	402a      	ands	r2, r5
 80008b0:	2a04      	cmp	r2, #4
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fdiv+0xa2>
 80008b4:	3504      	adds	r5, #4
 80008b6:	012a      	lsls	r2, r5, #4
 80008b8:	d503      	bpl.n	80008c2 <__aeabi_fdiv+0xae>
 80008ba:	4b60      	ldr	r3, [pc, #384]	; (8000a3c <__aeabi_fdiv+0x228>)
 80008bc:	401d      	ands	r5, r3
 80008be:	003b      	movs	r3, r7
 80008c0:	3380      	adds	r3, #128	; 0x80
 80008c2:	2bfe      	cmp	r3, #254	; 0xfe
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_fdiv+0xb4>
 80008c6:	e070      	b.n	80009aa <__aeabi_fdiv+0x196>
 80008c8:	01ad      	lsls	r5, r5, #6
 80008ca:	0a6d      	lsrs	r5, r5, #9
 80008cc:	b2d8      	uxtb	r0, r3
 80008ce:	e002      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80008d0:	000e      	movs	r6, r1
 80008d2:	2000      	movs	r0, #0
 80008d4:	2500      	movs	r5, #0
 80008d6:	05c0      	lsls	r0, r0, #23
 80008d8:	4328      	orrs	r0, r5
 80008da:	07f6      	lsls	r6, r6, #31
 80008dc:	4330      	orrs	r0, r6
 80008de:	bce0      	pop	{r5, r6, r7}
 80008e0:	46ba      	mov	sl, r7
 80008e2:	46b1      	mov	r9, r6
 80008e4:	46a8      	mov	r8, r5
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	4643      	mov	r3, r8
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d13f      	bne.n	800096e <__aeabi_fdiv+0x15a>
 80008ee:	2202      	movs	r2, #2
 80008f0:	3fff      	subs	r7, #255	; 0xff
 80008f2:	e003      	b.n	80008fc <__aeabi_fdiv+0xe8>
 80008f4:	4643      	mov	r3, r8
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d12d      	bne.n	8000956 <__aeabi_fdiv+0x142>
 80008fa:	2201      	movs	r2, #1
 80008fc:	0031      	movs	r1, r6
 80008fe:	464b      	mov	r3, r9
 8000900:	4061      	eors	r1, r4
 8000902:	b2c9      	uxtb	r1, r1
 8000904:	4313      	orrs	r3, r2
 8000906:	2b0f      	cmp	r3, #15
 8000908:	d834      	bhi.n	8000974 <__aeabi_fdiv+0x160>
 800090a:	484d      	ldr	r0, [pc, #308]	; (8000a40 <__aeabi_fdiv+0x22c>)
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	58c3      	ldr	r3, [r0, r3]
 8000910:	469f      	mov	pc, r3
 8000912:	2d00      	cmp	r5, #0
 8000914:	d113      	bne.n	800093e <__aeabi_fdiv+0x12a>
 8000916:	2304      	movs	r3, #4
 8000918:	4699      	mov	r9, r3
 800091a:	3b03      	subs	r3, #3
 800091c:	2700      	movs	r7, #0
 800091e:	469a      	mov	sl, r3
 8000920:	e791      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d105      	bne.n	8000932 <__aeabi_fdiv+0x11e>
 8000926:	2308      	movs	r3, #8
 8000928:	4699      	mov	r9, r3
 800092a:	3b06      	subs	r3, #6
 800092c:	27ff      	movs	r7, #255	; 0xff
 800092e:	469a      	mov	sl, r3
 8000930:	e789      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000932:	230c      	movs	r3, #12
 8000934:	4699      	mov	r9, r3
 8000936:	3b09      	subs	r3, #9
 8000938:	27ff      	movs	r7, #255	; 0xff
 800093a:	469a      	mov	sl, r3
 800093c:	e783      	b.n	8000846 <__aeabi_fdiv+0x32>
 800093e:	0028      	movs	r0, r5
 8000940:	f002 f946 	bl	8002bd0 <__clzsi2>
 8000944:	2776      	movs	r7, #118	; 0x76
 8000946:	1f43      	subs	r3, r0, #5
 8000948:	409d      	lsls	r5, r3
 800094a:	2300      	movs	r3, #0
 800094c:	427f      	negs	r7, r7
 800094e:	4699      	mov	r9, r3
 8000950:	469a      	mov	sl, r3
 8000952:	1a3f      	subs	r7, r7, r0
 8000954:	e777      	b.n	8000846 <__aeabi_fdiv+0x32>
 8000956:	4640      	mov	r0, r8
 8000958:	f002 f93a 	bl	8002bd0 <__clzsi2>
 800095c:	4642      	mov	r2, r8
 800095e:	1f43      	subs	r3, r0, #5
 8000960:	409a      	lsls	r2, r3
 8000962:	2376      	movs	r3, #118	; 0x76
 8000964:	425b      	negs	r3, r3
 8000966:	4690      	mov	r8, r2
 8000968:	1a1b      	subs	r3, r3, r0
 800096a:	2200      	movs	r2, #0
 800096c:	e77d      	b.n	800086a <__aeabi_fdiv+0x56>
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	2203      	movs	r2, #3
 8000972:	e77a      	b.n	800086a <__aeabi_fdiv+0x56>
 8000974:	000e      	movs	r6, r1
 8000976:	20ff      	movs	r0, #255	; 0xff
 8000978:	2500      	movs	r5, #0
 800097a:	e7ac      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 800097c:	2001      	movs	r0, #1
 800097e:	1ac0      	subs	r0, r0, r3
 8000980:	281b      	cmp	r0, #27
 8000982:	dca6      	bgt.n	80008d2 <__aeabi_fdiv+0xbe>
 8000984:	379e      	adds	r7, #158	; 0x9e
 8000986:	002a      	movs	r2, r5
 8000988:	40bd      	lsls	r5, r7
 800098a:	40c2      	lsrs	r2, r0
 800098c:	1e6b      	subs	r3, r5, #1
 800098e:	419d      	sbcs	r5, r3
 8000990:	4315      	orrs	r5, r2
 8000992:	076b      	lsls	r3, r5, #29
 8000994:	d004      	beq.n	80009a0 <__aeabi_fdiv+0x18c>
 8000996:	230f      	movs	r3, #15
 8000998:	402b      	ands	r3, r5
 800099a:	2b04      	cmp	r3, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_fdiv+0x18c>
 800099e:	3504      	adds	r5, #4
 80009a0:	016b      	lsls	r3, r5, #5
 80009a2:	d544      	bpl.n	8000a2e <__aeabi_fdiv+0x21a>
 80009a4:	2001      	movs	r0, #1
 80009a6:	2500      	movs	r5, #0
 80009a8:	e795      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	2500      	movs	r5, #0
 80009ae:	e792      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009b0:	2580      	movs	r5, #128	; 0x80
 80009b2:	2600      	movs	r6, #0
 80009b4:	20ff      	movs	r0, #255	; 0xff
 80009b6:	03ed      	lsls	r5, r5, #15
 80009b8:	e78d      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009ba:	2300      	movs	r3, #0
 80009bc:	4698      	mov	r8, r3
 80009be:	2080      	movs	r0, #128	; 0x80
 80009c0:	03c0      	lsls	r0, r0, #15
 80009c2:	4205      	tst	r5, r0
 80009c4:	d009      	beq.n	80009da <__aeabi_fdiv+0x1c6>
 80009c6:	4643      	mov	r3, r8
 80009c8:	4203      	tst	r3, r0
 80009ca:	d106      	bne.n	80009da <__aeabi_fdiv+0x1c6>
 80009cc:	4645      	mov	r5, r8
 80009ce:	4305      	orrs	r5, r0
 80009d0:	026d      	lsls	r5, r5, #9
 80009d2:	0026      	movs	r6, r4
 80009d4:	20ff      	movs	r0, #255	; 0xff
 80009d6:	0a6d      	lsrs	r5, r5, #9
 80009d8:	e77d      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009da:	2080      	movs	r0, #128	; 0x80
 80009dc:	03c0      	lsls	r0, r0, #15
 80009de:	4305      	orrs	r5, r0
 80009e0:	026d      	lsls	r5, r5, #9
 80009e2:	20ff      	movs	r0, #255	; 0xff
 80009e4:	0a6d      	lsrs	r5, r5, #9
 80009e6:	e776      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 80009e8:	4642      	mov	r2, r8
 80009ea:	016b      	lsls	r3, r5, #5
 80009ec:	0150      	lsls	r0, r2, #5
 80009ee:	4283      	cmp	r3, r0
 80009f0:	d219      	bcs.n	8000a26 <__aeabi_fdiv+0x212>
 80009f2:	221b      	movs	r2, #27
 80009f4:	2500      	movs	r5, #0
 80009f6:	3f01      	subs	r7, #1
 80009f8:	2601      	movs	r6, #1
 80009fa:	001c      	movs	r4, r3
 80009fc:	006d      	lsls	r5, r5, #1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	db01      	blt.n	8000a08 <__aeabi_fdiv+0x1f4>
 8000a04:	4298      	cmp	r0, r3
 8000a06:	d801      	bhi.n	8000a0c <__aeabi_fdiv+0x1f8>
 8000a08:	1a1b      	subs	r3, r3, r0
 8000a0a:	4335      	orrs	r5, r6
 8000a0c:	3a01      	subs	r2, #1
 8000a0e:	2a00      	cmp	r2, #0
 8000a10:	d1f3      	bne.n	80009fa <__aeabi_fdiv+0x1e6>
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	4193      	sbcs	r3, r2
 8000a16:	431d      	orrs	r5, r3
 8000a18:	003b      	movs	r3, r7
 8000a1a:	337f      	adds	r3, #127	; 0x7f
 8000a1c:	000e      	movs	r6, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	dd00      	ble.n	8000a24 <__aeabi_fdiv+0x210>
 8000a22:	e741      	b.n	80008a8 <__aeabi_fdiv+0x94>
 8000a24:	e7aa      	b.n	800097c <__aeabi_fdiv+0x168>
 8000a26:	221a      	movs	r2, #26
 8000a28:	2501      	movs	r5, #1
 8000a2a:	1a1b      	subs	r3, r3, r0
 8000a2c:	e7e4      	b.n	80009f8 <__aeabi_fdiv+0x1e4>
 8000a2e:	01ad      	lsls	r5, r5, #6
 8000a30:	2000      	movs	r0, #0
 8000a32:	0a6d      	lsrs	r5, r5, #9
 8000a34:	e74f      	b.n	80008d6 <__aeabi_fdiv+0xc2>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	0800a44c 	.word	0x0800a44c
 8000a3c:	f7ffffff 	.word	0xf7ffffff
 8000a40:	0800a48c 	.word	0x0800a48c

08000a44 <__aeabi_fsub>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	46ce      	mov	lr, r9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	0243      	lsls	r3, r0, #9
 8000a4c:	0a5b      	lsrs	r3, r3, #9
 8000a4e:	024e      	lsls	r6, r1, #9
 8000a50:	00da      	lsls	r2, r3, #3
 8000a52:	4694      	mov	ip, r2
 8000a54:	0a72      	lsrs	r2, r6, #9
 8000a56:	4691      	mov	r9, r2
 8000a58:	0045      	lsls	r5, r0, #1
 8000a5a:	004a      	lsls	r2, r1, #1
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	0e2d      	lsrs	r5, r5, #24
 8000a60:	001f      	movs	r7, r3
 8000a62:	0fc4      	lsrs	r4, r0, #31
 8000a64:	0e12      	lsrs	r2, r2, #24
 8000a66:	0fc9      	lsrs	r1, r1, #31
 8000a68:	09b6      	lsrs	r6, r6, #6
 8000a6a:	2aff      	cmp	r2, #255	; 0xff
 8000a6c:	d05b      	beq.n	8000b26 <__aeabi_fsub+0xe2>
 8000a6e:	2001      	movs	r0, #1
 8000a70:	4041      	eors	r1, r0
 8000a72:	428c      	cmp	r4, r1
 8000a74:	d039      	beq.n	8000aea <__aeabi_fsub+0xa6>
 8000a76:	1aa8      	subs	r0, r5, r2
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	dd5a      	ble.n	8000b32 <__aeabi_fsub+0xee>
 8000a7c:	2a00      	cmp	r2, #0
 8000a7e:	d06a      	beq.n	8000b56 <__aeabi_fsub+0x112>
 8000a80:	2dff      	cmp	r5, #255	; 0xff
 8000a82:	d100      	bne.n	8000a86 <__aeabi_fsub+0x42>
 8000a84:	e0d9      	b.n	8000c3a <__aeabi_fsub+0x1f6>
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	04d2      	lsls	r2, r2, #19
 8000a8a:	4316      	orrs	r6, r2
 8000a8c:	281b      	cmp	r0, #27
 8000a8e:	dc00      	bgt.n	8000a92 <__aeabi_fsub+0x4e>
 8000a90:	e0e9      	b.n	8000c66 <__aeabi_fsub+0x222>
 8000a92:	2001      	movs	r0, #1
 8000a94:	4663      	mov	r3, ip
 8000a96:	1a18      	subs	r0, r3, r0
 8000a98:	0143      	lsls	r3, r0, #5
 8000a9a:	d400      	bmi.n	8000a9e <__aeabi_fsub+0x5a>
 8000a9c:	e0b4      	b.n	8000c08 <__aeabi_fsub+0x1c4>
 8000a9e:	0180      	lsls	r0, r0, #6
 8000aa0:	0987      	lsrs	r7, r0, #6
 8000aa2:	0038      	movs	r0, r7
 8000aa4:	f002 f894 	bl	8002bd0 <__clzsi2>
 8000aa8:	3805      	subs	r0, #5
 8000aaa:	4087      	lsls	r7, r0
 8000aac:	4285      	cmp	r5, r0
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_fsub+0x6e>
 8000ab0:	e0cc      	b.n	8000c4c <__aeabi_fsub+0x208>
 8000ab2:	1a2d      	subs	r5, r5, r0
 8000ab4:	48b5      	ldr	r0, [pc, #724]	; (8000d8c <__aeabi_fsub+0x348>)
 8000ab6:	4038      	ands	r0, r7
 8000ab8:	0743      	lsls	r3, r0, #29
 8000aba:	d004      	beq.n	8000ac6 <__aeabi_fsub+0x82>
 8000abc:	230f      	movs	r3, #15
 8000abe:	4003      	ands	r3, r0
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fsub+0x82>
 8000ac4:	3004      	adds	r0, #4
 8000ac6:	0143      	lsls	r3, r0, #5
 8000ac8:	d400      	bmi.n	8000acc <__aeabi_fsub+0x88>
 8000aca:	e0a0      	b.n	8000c0e <__aeabi_fsub+0x1ca>
 8000acc:	1c6a      	adds	r2, r5, #1
 8000ace:	2dfe      	cmp	r5, #254	; 0xfe
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_fsub+0x90>
 8000ad2:	e08d      	b.n	8000bf0 <__aeabi_fsub+0x1ac>
 8000ad4:	0180      	lsls	r0, r0, #6
 8000ad6:	0a47      	lsrs	r7, r0, #9
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	05d0      	lsls	r0, r2, #23
 8000adc:	4338      	orrs	r0, r7
 8000ade:	07e4      	lsls	r4, r4, #31
 8000ae0:	4320      	orrs	r0, r4
 8000ae2:	bcc0      	pop	{r6, r7}
 8000ae4:	46b9      	mov	r9, r7
 8000ae6:	46b0      	mov	r8, r6
 8000ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aea:	1aa8      	subs	r0, r5, r2
 8000aec:	4680      	mov	r8, r0
 8000aee:	2800      	cmp	r0, #0
 8000af0:	dd45      	ble.n	8000b7e <__aeabi_fsub+0x13a>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d070      	beq.n	8000bd8 <__aeabi_fsub+0x194>
 8000af6:	2dff      	cmp	r5, #255	; 0xff
 8000af8:	d100      	bne.n	8000afc <__aeabi_fsub+0xb8>
 8000afa:	e09e      	b.n	8000c3a <__aeabi_fsub+0x1f6>
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	04db      	lsls	r3, r3, #19
 8000b00:	431e      	orrs	r6, r3
 8000b02:	4643      	mov	r3, r8
 8000b04:	2b1b      	cmp	r3, #27
 8000b06:	dc00      	bgt.n	8000b0a <__aeabi_fsub+0xc6>
 8000b08:	e0d2      	b.n	8000cb0 <__aeabi_fsub+0x26c>
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4460      	add	r0, ip
 8000b0e:	0143      	lsls	r3, r0, #5
 8000b10:	d57a      	bpl.n	8000c08 <__aeabi_fsub+0x1c4>
 8000b12:	3501      	adds	r5, #1
 8000b14:	2dff      	cmp	r5, #255	; 0xff
 8000b16:	d06b      	beq.n	8000bf0 <__aeabi_fsub+0x1ac>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	4a9d      	ldr	r2, [pc, #628]	; (8000d90 <__aeabi_fsub+0x34c>)
 8000b1c:	4003      	ands	r3, r0
 8000b1e:	0840      	lsrs	r0, r0, #1
 8000b20:	4010      	ands	r0, r2
 8000b22:	4318      	orrs	r0, r3
 8000b24:	e7c8      	b.n	8000ab8 <__aeabi_fsub+0x74>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d020      	beq.n	8000b6c <__aeabi_fsub+0x128>
 8000b2a:	428c      	cmp	r4, r1
 8000b2c:	d023      	beq.n	8000b76 <__aeabi_fsub+0x132>
 8000b2e:	0028      	movs	r0, r5
 8000b30:	38ff      	subs	r0, #255	; 0xff
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d039      	beq.n	8000baa <__aeabi_fsub+0x166>
 8000b36:	1b57      	subs	r7, r2, r5
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d000      	beq.n	8000b3e <__aeabi_fsub+0xfa>
 8000b3c:	e09d      	b.n	8000c7a <__aeabi_fsub+0x236>
 8000b3e:	4663      	mov	r3, ip
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x102>
 8000b44:	e0db      	b.n	8000cfe <__aeabi_fsub+0x2ba>
 8000b46:	1e7b      	subs	r3, r7, #1
 8000b48:	2f01      	cmp	r7, #1
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_fsub+0x10a>
 8000b4c:	e10d      	b.n	8000d6a <__aeabi_fsub+0x326>
 8000b4e:	2fff      	cmp	r7, #255	; 0xff
 8000b50:	d071      	beq.n	8000c36 <__aeabi_fsub+0x1f2>
 8000b52:	001f      	movs	r7, r3
 8000b54:	e098      	b.n	8000c88 <__aeabi_fsub+0x244>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fsub+0x118>
 8000b5a:	e0a7      	b.n	8000cac <__aeabi_fsub+0x268>
 8000b5c:	1e42      	subs	r2, r0, #1
 8000b5e:	2801      	cmp	r0, #1
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fsub+0x120>
 8000b62:	e0e6      	b.n	8000d32 <__aeabi_fsub+0x2ee>
 8000b64:	28ff      	cmp	r0, #255	; 0xff
 8000b66:	d068      	beq.n	8000c3a <__aeabi_fsub+0x1f6>
 8000b68:	0010      	movs	r0, r2
 8000b6a:	e78f      	b.n	8000a8c <__aeabi_fsub+0x48>
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	4041      	eors	r1, r0
 8000b70:	42a1      	cmp	r1, r4
 8000b72:	d000      	beq.n	8000b76 <__aeabi_fsub+0x132>
 8000b74:	e77f      	b.n	8000a76 <__aeabi_fsub+0x32>
 8000b76:	20ff      	movs	r0, #255	; 0xff
 8000b78:	4240      	negs	r0, r0
 8000b7a:	4680      	mov	r8, r0
 8000b7c:	44a8      	add	r8, r5
 8000b7e:	4640      	mov	r0, r8
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d038      	beq.n	8000bf6 <__aeabi_fsub+0x1b2>
 8000b84:	1b51      	subs	r1, r2, r5
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d100      	bne.n	8000b8c <__aeabi_fsub+0x148>
 8000b8a:	e0ae      	b.n	8000cea <__aeabi_fsub+0x2a6>
 8000b8c:	2aff      	cmp	r2, #255	; 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x14e>
 8000b90:	e0df      	b.n	8000d52 <__aeabi_fsub+0x30e>
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	4660      	mov	r0, ip
 8000b96:	04db      	lsls	r3, r3, #19
 8000b98:	4318      	orrs	r0, r3
 8000b9a:	4684      	mov	ip, r0
 8000b9c:	291b      	cmp	r1, #27
 8000b9e:	dc00      	bgt.n	8000ba2 <__aeabi_fsub+0x15e>
 8000ba0:	e0d9      	b.n	8000d56 <__aeabi_fsub+0x312>
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	0015      	movs	r5, r2
 8000ba6:	1980      	adds	r0, r0, r6
 8000ba8:	e7b1      	b.n	8000b0e <__aeabi_fsub+0xca>
 8000baa:	20fe      	movs	r0, #254	; 0xfe
 8000bac:	1c6a      	adds	r2, r5, #1
 8000bae:	4210      	tst	r0, r2
 8000bb0:	d171      	bne.n	8000c96 <__aeabi_fsub+0x252>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_fsub+0x174>
 8000bb6:	e0a6      	b.n	8000d06 <__aeabi_fsub+0x2c2>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0x17c>
 8000bbe:	e0d9      	b.n	8000d74 <__aeabi_fsub+0x330>
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_fsub+0x184>
 8000bc6:	e788      	b.n	8000ada <__aeabi_fsub+0x96>
 8000bc8:	1b98      	subs	r0, r3, r6
 8000bca:	0143      	lsls	r3, r0, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x18c>
 8000bce:	e0e1      	b.n	8000d94 <__aeabi_fsub+0x350>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	000c      	movs	r4, r1
 8000bd4:	1af0      	subs	r0, r6, r3
 8000bd6:	e76f      	b.n	8000ab8 <__aeabi_fsub+0x74>
 8000bd8:	2e00      	cmp	r6, #0
 8000bda:	d100      	bne.n	8000bde <__aeabi_fsub+0x19a>
 8000bdc:	e0b7      	b.n	8000d4e <__aeabi_fsub+0x30a>
 8000bde:	0002      	movs	r2, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	2801      	cmp	r0, #1
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x1a4>
 8000be6:	e09c      	b.n	8000d22 <__aeabi_fsub+0x2de>
 8000be8:	28ff      	cmp	r0, #255	; 0xff
 8000bea:	d026      	beq.n	8000c3a <__aeabi_fsub+0x1f6>
 8000bec:	4690      	mov	r8, r2
 8000bee:	e788      	b.n	8000b02 <__aeabi_fsub+0xbe>
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	2700      	movs	r7, #0
 8000bf4:	e771      	b.n	8000ada <__aeabi_fsub+0x96>
 8000bf6:	20fe      	movs	r0, #254	; 0xfe
 8000bf8:	1c6a      	adds	r2, r5, #1
 8000bfa:	4210      	tst	r0, r2
 8000bfc:	d064      	beq.n	8000cc8 <__aeabi_fsub+0x284>
 8000bfe:	2aff      	cmp	r2, #255	; 0xff
 8000c00:	d0f6      	beq.n	8000bf0 <__aeabi_fsub+0x1ac>
 8000c02:	0015      	movs	r5, r2
 8000c04:	4466      	add	r6, ip
 8000c06:	0870      	lsrs	r0, r6, #1
 8000c08:	0743      	lsls	r3, r0, #29
 8000c0a:	d000      	beq.n	8000c0e <__aeabi_fsub+0x1ca>
 8000c0c:	e756      	b.n	8000abc <__aeabi_fsub+0x78>
 8000c0e:	08c3      	lsrs	r3, r0, #3
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d012      	beq.n	8000c3a <__aeabi_fsub+0x1f6>
 8000c14:	025b      	lsls	r3, r3, #9
 8000c16:	0a5f      	lsrs	r7, r3, #9
 8000c18:	b2ea      	uxtb	r2, r5
 8000c1a:	e75e      	b.n	8000ada <__aeabi_fsub+0x96>
 8000c1c:	4662      	mov	r2, ip
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_fsub+0x1e0>
 8000c22:	e096      	b.n	8000d52 <__aeabi_fsub+0x30e>
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d008      	beq.n	8000c3a <__aeabi_fsub+0x1f6>
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	03d2      	lsls	r2, r2, #15
 8000c2c:	4213      	tst	r3, r2
 8000c2e:	d004      	beq.n	8000c3a <__aeabi_fsub+0x1f6>
 8000c30:	4648      	mov	r0, r9
 8000c32:	4210      	tst	r0, r2
 8000c34:	d101      	bne.n	8000c3a <__aeabi_fsub+0x1f6>
 8000c36:	000c      	movs	r4, r1
 8000c38:	464b      	mov	r3, r9
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d0d8      	beq.n	8000bf0 <__aeabi_fsub+0x1ac>
 8000c3e:	2780      	movs	r7, #128	; 0x80
 8000c40:	03ff      	lsls	r7, r7, #15
 8000c42:	431f      	orrs	r7, r3
 8000c44:	027f      	lsls	r7, r7, #9
 8000c46:	22ff      	movs	r2, #255	; 0xff
 8000c48:	0a7f      	lsrs	r7, r7, #9
 8000c4a:	e746      	b.n	8000ada <__aeabi_fsub+0x96>
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	003a      	movs	r2, r7
 8000c50:	1b45      	subs	r5, r0, r5
 8000c52:	0038      	movs	r0, r7
 8000c54:	3501      	adds	r5, #1
 8000c56:	40ea      	lsrs	r2, r5
 8000c58:	1b5d      	subs	r5, r3, r5
 8000c5a:	40a8      	lsls	r0, r5
 8000c5c:	1e43      	subs	r3, r0, #1
 8000c5e:	4198      	sbcs	r0, r3
 8000c60:	2500      	movs	r5, #0
 8000c62:	4310      	orrs	r0, r2
 8000c64:	e728      	b.n	8000ab8 <__aeabi_fsub+0x74>
 8000c66:	2320      	movs	r3, #32
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	0032      	movs	r2, r6
 8000c6c:	409e      	lsls	r6, r3
 8000c6e:	40c2      	lsrs	r2, r0
 8000c70:	0030      	movs	r0, r6
 8000c72:	1e43      	subs	r3, r0, #1
 8000c74:	4198      	sbcs	r0, r3
 8000c76:	4310      	orrs	r0, r2
 8000c78:	e70c      	b.n	8000a94 <__aeabi_fsub+0x50>
 8000c7a:	2aff      	cmp	r2, #255	; 0xff
 8000c7c:	d0db      	beq.n	8000c36 <__aeabi_fsub+0x1f2>
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	4660      	mov	r0, ip
 8000c82:	04db      	lsls	r3, r3, #19
 8000c84:	4318      	orrs	r0, r3
 8000c86:	4684      	mov	ip, r0
 8000c88:	2f1b      	cmp	r7, #27
 8000c8a:	dd56      	ble.n	8000d3a <__aeabi_fsub+0x2f6>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	000c      	movs	r4, r1
 8000c90:	0015      	movs	r5, r2
 8000c92:	1a30      	subs	r0, r6, r0
 8000c94:	e700      	b.n	8000a98 <__aeabi_fsub+0x54>
 8000c96:	4663      	mov	r3, ip
 8000c98:	1b9f      	subs	r7, r3, r6
 8000c9a:	017b      	lsls	r3, r7, #5
 8000c9c:	d43d      	bmi.n	8000d1a <__aeabi_fsub+0x2d6>
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d000      	beq.n	8000ca4 <__aeabi_fsub+0x260>
 8000ca2:	e6fe      	b.n	8000aa2 <__aeabi_fsub+0x5e>
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e716      	b.n	8000ada <__aeabi_fsub+0x96>
 8000cac:	0005      	movs	r5, r0
 8000cae:	e7af      	b.n	8000c10 <__aeabi_fsub+0x1cc>
 8000cb0:	0032      	movs	r2, r6
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	40da      	lsrs	r2, r3
 8000cb8:	2320      	movs	r3, #32
 8000cba:	1a5b      	subs	r3, r3, r1
 8000cbc:	409e      	lsls	r6, r3
 8000cbe:	0030      	movs	r0, r6
 8000cc0:	1e43      	subs	r3, r0, #1
 8000cc2:	4198      	sbcs	r0, r3
 8000cc4:	4310      	orrs	r0, r2
 8000cc6:	e721      	b.n	8000b0c <__aeabi_fsub+0xc8>
 8000cc8:	2d00      	cmp	r5, #0
 8000cca:	d1a7      	bne.n	8000c1c <__aeabi_fsub+0x1d8>
 8000ccc:	4663      	mov	r3, ip
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d059      	beq.n	8000d86 <__aeabi_fsub+0x342>
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x296>
 8000cd8:	e6ff      	b.n	8000ada <__aeabi_fsub+0x96>
 8000cda:	0030      	movs	r0, r6
 8000cdc:	4460      	add	r0, ip
 8000cde:	0143      	lsls	r3, r0, #5
 8000ce0:	d592      	bpl.n	8000c08 <__aeabi_fsub+0x1c4>
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <__aeabi_fsub+0x348>)
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	4018      	ands	r0, r3
 8000ce8:	e78e      	b.n	8000c08 <__aeabi_fsub+0x1c4>
 8000cea:	4663      	mov	r3, ip
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d047      	beq.n	8000d80 <__aeabi_fsub+0x33c>
 8000cf0:	1e4b      	subs	r3, r1, #1
 8000cf2:	2901      	cmp	r1, #1
 8000cf4:	d015      	beq.n	8000d22 <__aeabi_fsub+0x2de>
 8000cf6:	29ff      	cmp	r1, #255	; 0xff
 8000cf8:	d02b      	beq.n	8000d52 <__aeabi_fsub+0x30e>
 8000cfa:	0019      	movs	r1, r3
 8000cfc:	e74e      	b.n	8000b9c <__aeabi_fsub+0x158>
 8000cfe:	000c      	movs	r4, r1
 8000d00:	464b      	mov	r3, r9
 8000d02:	003d      	movs	r5, r7
 8000d04:	e784      	b.n	8000c10 <__aeabi_fsub+0x1cc>
 8000d06:	4662      	mov	r2, ip
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d18b      	bne.n	8000c24 <__aeabi_fsub+0x1e0>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d192      	bne.n	8000c36 <__aeabi_fsub+0x1f2>
 8000d10:	2780      	movs	r7, #128	; 0x80
 8000d12:	2400      	movs	r4, #0
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	03ff      	lsls	r7, r7, #15
 8000d18:	e6df      	b.n	8000ada <__aeabi_fsub+0x96>
 8000d1a:	4663      	mov	r3, ip
 8000d1c:	000c      	movs	r4, r1
 8000d1e:	1af7      	subs	r7, r6, r3
 8000d20:	e6bf      	b.n	8000aa2 <__aeabi_fsub+0x5e>
 8000d22:	0030      	movs	r0, r6
 8000d24:	4460      	add	r0, ip
 8000d26:	2501      	movs	r5, #1
 8000d28:	0143      	lsls	r3, r0, #5
 8000d2a:	d400      	bmi.n	8000d2e <__aeabi_fsub+0x2ea>
 8000d2c:	e76c      	b.n	8000c08 <__aeabi_fsub+0x1c4>
 8000d2e:	2502      	movs	r5, #2
 8000d30:	e6f2      	b.n	8000b18 <__aeabi_fsub+0xd4>
 8000d32:	4663      	mov	r3, ip
 8000d34:	2501      	movs	r5, #1
 8000d36:	1b98      	subs	r0, r3, r6
 8000d38:	e6ae      	b.n	8000a98 <__aeabi_fsub+0x54>
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	4664      	mov	r4, ip
 8000d3e:	4660      	mov	r0, ip
 8000d40:	40fc      	lsrs	r4, r7
 8000d42:	1bdf      	subs	r7, r3, r7
 8000d44:	40b8      	lsls	r0, r7
 8000d46:	1e43      	subs	r3, r0, #1
 8000d48:	4198      	sbcs	r0, r3
 8000d4a:	4320      	orrs	r0, r4
 8000d4c:	e79f      	b.n	8000c8e <__aeabi_fsub+0x24a>
 8000d4e:	0005      	movs	r5, r0
 8000d50:	e75e      	b.n	8000c10 <__aeabi_fsub+0x1cc>
 8000d52:	464b      	mov	r3, r9
 8000d54:	e771      	b.n	8000c3a <__aeabi_fsub+0x1f6>
 8000d56:	2320      	movs	r3, #32
 8000d58:	4665      	mov	r5, ip
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	40cd      	lsrs	r5, r1
 8000d5e:	1a59      	subs	r1, r3, r1
 8000d60:	4088      	lsls	r0, r1
 8000d62:	1e43      	subs	r3, r0, #1
 8000d64:	4198      	sbcs	r0, r3
 8000d66:	4328      	orrs	r0, r5
 8000d68:	e71c      	b.n	8000ba4 <__aeabi_fsub+0x160>
 8000d6a:	4663      	mov	r3, ip
 8000d6c:	000c      	movs	r4, r1
 8000d6e:	2501      	movs	r5, #1
 8000d70:	1af0      	subs	r0, r6, r3
 8000d72:	e691      	b.n	8000a98 <__aeabi_fsub+0x54>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d095      	beq.n	8000ca4 <__aeabi_fsub+0x260>
 8000d78:	000c      	movs	r4, r1
 8000d7a:	464f      	mov	r7, r9
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e6ac      	b.n	8000ada <__aeabi_fsub+0x96>
 8000d80:	464b      	mov	r3, r9
 8000d82:	000d      	movs	r5, r1
 8000d84:	e744      	b.n	8000c10 <__aeabi_fsub+0x1cc>
 8000d86:	464f      	mov	r7, r9
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e6a6      	b.n	8000ada <__aeabi_fsub+0x96>
 8000d8c:	fbffffff 	.word	0xfbffffff
 8000d90:	7dffffff 	.word	0x7dffffff
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x356>
 8000d98:	e736      	b.n	8000c08 <__aeabi_fsub+0x1c4>
 8000d9a:	2400      	movs	r4, #0
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	e69c      	b.n	8000ada <__aeabi_fsub+0x96>

08000da0 <__aeabi_f2iz>:
 8000da0:	0241      	lsls	r1, r0, #9
 8000da2:	0042      	lsls	r2, r0, #1
 8000da4:	0fc3      	lsrs	r3, r0, #31
 8000da6:	0a49      	lsrs	r1, r1, #9
 8000da8:	2000      	movs	r0, #0
 8000daa:	0e12      	lsrs	r2, r2, #24
 8000dac:	2a7e      	cmp	r2, #126	; 0x7e
 8000dae:	dd03      	ble.n	8000db8 <__aeabi_f2iz+0x18>
 8000db0:	2a9d      	cmp	r2, #157	; 0x9d
 8000db2:	dd02      	ble.n	8000dba <__aeabi_f2iz+0x1a>
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <__aeabi_f2iz+0x3c>)
 8000db6:	1898      	adds	r0, r3, r2
 8000db8:	4770      	bx	lr
 8000dba:	2080      	movs	r0, #128	; 0x80
 8000dbc:	0400      	lsls	r0, r0, #16
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	2a95      	cmp	r2, #149	; 0x95
 8000dc2:	dc07      	bgt.n	8000dd4 <__aeabi_f2iz+0x34>
 8000dc4:	2096      	movs	r0, #150	; 0x96
 8000dc6:	1a82      	subs	r2, r0, r2
 8000dc8:	40d1      	lsrs	r1, r2
 8000dca:	4248      	negs	r0, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f3      	bne.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	e7f1      	b.n	8000db8 <__aeabi_f2iz+0x18>
 8000dd4:	3a96      	subs	r2, #150	; 0x96
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	e7f7      	b.n	8000dca <__aeabi_f2iz+0x2a>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	7fffffff 	.word	0x7fffffff

08000de0 <__aeabi_i2f>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d013      	beq.n	8000e0e <__aeabi_i2f+0x2e>
 8000de6:	17c3      	asrs	r3, r0, #31
 8000de8:	18c6      	adds	r6, r0, r3
 8000dea:	405e      	eors	r6, r3
 8000dec:	0fc4      	lsrs	r4, r0, #31
 8000dee:	0030      	movs	r0, r6
 8000df0:	f001 feee 	bl	8002bd0 <__clzsi2>
 8000df4:	239e      	movs	r3, #158	; 0x9e
 8000df6:	0005      	movs	r5, r0
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	2b96      	cmp	r3, #150	; 0x96
 8000dfc:	dc0f      	bgt.n	8000e1e <__aeabi_i2f+0x3e>
 8000dfe:	2808      	cmp	r0, #8
 8000e00:	dd01      	ble.n	8000e06 <__aeabi_i2f+0x26>
 8000e02:	3d08      	subs	r5, #8
 8000e04:	40ae      	lsls	r6, r5
 8000e06:	0276      	lsls	r6, r6, #9
 8000e08:	0a76      	lsrs	r6, r6, #9
 8000e0a:	b2d8      	uxtb	r0, r3
 8000e0c:	e002      	b.n	8000e14 <__aeabi_i2f+0x34>
 8000e0e:	2400      	movs	r4, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	2600      	movs	r6, #0
 8000e14:	05c0      	lsls	r0, r0, #23
 8000e16:	4330      	orrs	r0, r6
 8000e18:	07e4      	lsls	r4, r4, #31
 8000e1a:	4320      	orrs	r0, r4
 8000e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1e:	2b99      	cmp	r3, #153	; 0x99
 8000e20:	dd0c      	ble.n	8000e3c <__aeabi_i2f+0x5c>
 8000e22:	2205      	movs	r2, #5
 8000e24:	0031      	movs	r1, r6
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	40d1      	lsrs	r1, r2
 8000e2a:	000a      	movs	r2, r1
 8000e2c:	0001      	movs	r1, r0
 8000e2e:	0030      	movs	r0, r6
 8000e30:	311b      	adds	r1, #27
 8000e32:	4088      	lsls	r0, r1
 8000e34:	1e41      	subs	r1, r0, #1
 8000e36:	4188      	sbcs	r0, r1
 8000e38:	4302      	orrs	r2, r0
 8000e3a:	0016      	movs	r6, r2
 8000e3c:	2d05      	cmp	r5, #5
 8000e3e:	dc12      	bgt.n	8000e66 <__aeabi_i2f+0x86>
 8000e40:	0031      	movs	r1, r6
 8000e42:	4f0d      	ldr	r7, [pc, #52]	; (8000e78 <__aeabi_i2f+0x98>)
 8000e44:	4039      	ands	r1, r7
 8000e46:	0772      	lsls	r2, r6, #29
 8000e48:	d009      	beq.n	8000e5e <__aeabi_i2f+0x7e>
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	4030      	ands	r0, r6
 8000e4e:	2804      	cmp	r0, #4
 8000e50:	d005      	beq.n	8000e5e <__aeabi_i2f+0x7e>
 8000e52:	3104      	adds	r1, #4
 8000e54:	014a      	lsls	r2, r1, #5
 8000e56:	d502      	bpl.n	8000e5e <__aeabi_i2f+0x7e>
 8000e58:	239f      	movs	r3, #159	; 0x9f
 8000e5a:	4039      	ands	r1, r7
 8000e5c:	1b5b      	subs	r3, r3, r5
 8000e5e:	0189      	lsls	r1, r1, #6
 8000e60:	0a4e      	lsrs	r6, r1, #9
 8000e62:	b2d8      	uxtb	r0, r3
 8000e64:	e7d6      	b.n	8000e14 <__aeabi_i2f+0x34>
 8000e66:	1f6a      	subs	r2, r5, #5
 8000e68:	4096      	lsls	r6, r2
 8000e6a:	0031      	movs	r1, r6
 8000e6c:	4f02      	ldr	r7, [pc, #8]	; (8000e78 <__aeabi_i2f+0x98>)
 8000e6e:	4039      	ands	r1, r7
 8000e70:	0772      	lsls	r2, r6, #29
 8000e72:	d0f4      	beq.n	8000e5e <__aeabi_i2f+0x7e>
 8000e74:	e7e9      	b.n	8000e4a <__aeabi_i2f+0x6a>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	fbffffff 	.word	0xfbffffff

08000e7c <__aeabi_ui2f>:
 8000e7c:	b570      	push	{r4, r5, r6, lr}
 8000e7e:	1e05      	subs	r5, r0, #0
 8000e80:	d00e      	beq.n	8000ea0 <__aeabi_ui2f+0x24>
 8000e82:	f001 fea5 	bl	8002bd0 <__clzsi2>
 8000e86:	239e      	movs	r3, #158	; 0x9e
 8000e88:	0004      	movs	r4, r0
 8000e8a:	1a1b      	subs	r3, r3, r0
 8000e8c:	2b96      	cmp	r3, #150	; 0x96
 8000e8e:	dc0c      	bgt.n	8000eaa <__aeabi_ui2f+0x2e>
 8000e90:	2808      	cmp	r0, #8
 8000e92:	dd01      	ble.n	8000e98 <__aeabi_ui2f+0x1c>
 8000e94:	3c08      	subs	r4, #8
 8000e96:	40a5      	lsls	r5, r4
 8000e98:	026d      	lsls	r5, r5, #9
 8000e9a:	0a6d      	lsrs	r5, r5, #9
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	e001      	b.n	8000ea4 <__aeabi_ui2f+0x28>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	05c0      	lsls	r0, r0, #23
 8000ea6:	4328      	orrs	r0, r5
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
 8000eaa:	2b99      	cmp	r3, #153	; 0x99
 8000eac:	dd09      	ble.n	8000ec2 <__aeabi_ui2f+0x46>
 8000eae:	0002      	movs	r2, r0
 8000eb0:	0029      	movs	r1, r5
 8000eb2:	321b      	adds	r2, #27
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	1e4a      	subs	r2, r1, #1
 8000eb8:	4191      	sbcs	r1, r2
 8000eba:	2205      	movs	r2, #5
 8000ebc:	1a12      	subs	r2, r2, r0
 8000ebe:	40d5      	lsrs	r5, r2
 8000ec0:	430d      	orrs	r5, r1
 8000ec2:	2c05      	cmp	r4, #5
 8000ec4:	dc12      	bgt.n	8000eec <__aeabi_ui2f+0x70>
 8000ec6:	0029      	movs	r1, r5
 8000ec8:	4e0c      	ldr	r6, [pc, #48]	; (8000efc <__aeabi_ui2f+0x80>)
 8000eca:	4031      	ands	r1, r6
 8000ecc:	076a      	lsls	r2, r5, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x68>
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	4028      	ands	r0, r5
 8000ed4:	2804      	cmp	r0, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x68>
 8000ed8:	3104      	adds	r1, #4
 8000eda:	014a      	lsls	r2, r1, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x68>
 8000ede:	239f      	movs	r3, #159	; 0x9f
 8000ee0:	4031      	ands	r1, r6
 8000ee2:	1b1b      	subs	r3, r3, r4
 8000ee4:	0189      	lsls	r1, r1, #6
 8000ee6:	0a4d      	lsrs	r5, r1, #9
 8000ee8:	b2d8      	uxtb	r0, r3
 8000eea:	e7db      	b.n	8000ea4 <__aeabi_ui2f+0x28>
 8000eec:	1f62      	subs	r2, r4, #5
 8000eee:	4095      	lsls	r5, r2
 8000ef0:	0029      	movs	r1, r5
 8000ef2:	4e02      	ldr	r6, [pc, #8]	; (8000efc <__aeabi_ui2f+0x80>)
 8000ef4:	4031      	ands	r1, r6
 8000ef6:	076a      	lsls	r2, r5, #29
 8000ef8:	d0f4      	beq.n	8000ee4 <__aeabi_ui2f+0x68>
 8000efa:	e7e9      	b.n	8000ed0 <__aeabi_ui2f+0x54>
 8000efc:	fbffffff 	.word	0xfbffffff

08000f00 <__aeabi_dadd>:
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	464f      	mov	r7, r9
 8000f04:	4646      	mov	r6, r8
 8000f06:	46d6      	mov	lr, sl
 8000f08:	000d      	movs	r5, r1
 8000f0a:	0004      	movs	r4, r0
 8000f0c:	b5c0      	push	{r6, r7, lr}
 8000f0e:	001f      	movs	r7, r3
 8000f10:	0011      	movs	r1, r2
 8000f12:	0328      	lsls	r0, r5, #12
 8000f14:	0f62      	lsrs	r2, r4, #29
 8000f16:	0a40      	lsrs	r0, r0, #9
 8000f18:	4310      	orrs	r0, r2
 8000f1a:	007a      	lsls	r2, r7, #1
 8000f1c:	0d52      	lsrs	r2, r2, #21
 8000f1e:	00e3      	lsls	r3, r4, #3
 8000f20:	033c      	lsls	r4, r7, #12
 8000f22:	4691      	mov	r9, r2
 8000f24:	0a64      	lsrs	r4, r4, #9
 8000f26:	0ffa      	lsrs	r2, r7, #31
 8000f28:	0f4f      	lsrs	r7, r1, #29
 8000f2a:	006e      	lsls	r6, r5, #1
 8000f2c:	4327      	orrs	r7, r4
 8000f2e:	4692      	mov	sl, r2
 8000f30:	46b8      	mov	r8, r7
 8000f32:	0d76      	lsrs	r6, r6, #21
 8000f34:	0fed      	lsrs	r5, r5, #31
 8000f36:	00c9      	lsls	r1, r1, #3
 8000f38:	4295      	cmp	r5, r2
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_dadd+0x3e>
 8000f3c:	e099      	b.n	8001072 <__aeabi_dadd+0x172>
 8000f3e:	464c      	mov	r4, r9
 8000f40:	1b34      	subs	r4, r6, r4
 8000f42:	46a4      	mov	ip, r4
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_dadd+0x4a>
 8000f48:	e07c      	b.n	8001044 <__aeabi_dadd+0x144>
 8000f4a:	464a      	mov	r2, r9
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_dadd+0x52>
 8000f50:	e0b8      	b.n	80010c4 <__aeabi_dadd+0x1c4>
 8000f52:	4ac5      	ldr	r2, [pc, #788]	; (8001268 <__aeabi_dadd+0x368>)
 8000f54:	4296      	cmp	r6, r2
 8000f56:	d100      	bne.n	8000f5a <__aeabi_dadd+0x5a>
 8000f58:	e11c      	b.n	8001194 <__aeabi_dadd+0x294>
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	003c      	movs	r4, r7
 8000f5e:	0412      	lsls	r2, r2, #16
 8000f60:	4314      	orrs	r4, r2
 8000f62:	46a0      	mov	r8, r4
 8000f64:	4662      	mov	r2, ip
 8000f66:	2a38      	cmp	r2, #56	; 0x38
 8000f68:	dd00      	ble.n	8000f6c <__aeabi_dadd+0x6c>
 8000f6a:	e161      	b.n	8001230 <__aeabi_dadd+0x330>
 8000f6c:	2a1f      	cmp	r2, #31
 8000f6e:	dd00      	ble.n	8000f72 <__aeabi_dadd+0x72>
 8000f70:	e1cc      	b.n	800130c <__aeabi_dadd+0x40c>
 8000f72:	4664      	mov	r4, ip
 8000f74:	2220      	movs	r2, #32
 8000f76:	1b12      	subs	r2, r2, r4
 8000f78:	4644      	mov	r4, r8
 8000f7a:	4094      	lsls	r4, r2
 8000f7c:	000f      	movs	r7, r1
 8000f7e:	46a1      	mov	r9, r4
 8000f80:	4664      	mov	r4, ip
 8000f82:	4091      	lsls	r1, r2
 8000f84:	40e7      	lsrs	r7, r4
 8000f86:	464c      	mov	r4, r9
 8000f88:	1e4a      	subs	r2, r1, #1
 8000f8a:	4191      	sbcs	r1, r2
 8000f8c:	433c      	orrs	r4, r7
 8000f8e:	4642      	mov	r2, r8
 8000f90:	4321      	orrs	r1, r4
 8000f92:	4664      	mov	r4, ip
 8000f94:	40e2      	lsrs	r2, r4
 8000f96:	1a80      	subs	r0, r0, r2
 8000f98:	1a5c      	subs	r4, r3, r1
 8000f9a:	42a3      	cmp	r3, r4
 8000f9c:	419b      	sbcs	r3, r3
 8000f9e:	425f      	negs	r7, r3
 8000fa0:	1bc7      	subs	r7, r0, r7
 8000fa2:	023b      	lsls	r3, r7, #8
 8000fa4:	d400      	bmi.n	8000fa8 <__aeabi_dadd+0xa8>
 8000fa6:	e0d0      	b.n	800114a <__aeabi_dadd+0x24a>
 8000fa8:	027f      	lsls	r7, r7, #9
 8000faa:	0a7f      	lsrs	r7, r7, #9
 8000fac:	2f00      	cmp	r7, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dadd+0xb2>
 8000fb0:	e0ff      	b.n	80011b2 <__aeabi_dadd+0x2b2>
 8000fb2:	0038      	movs	r0, r7
 8000fb4:	f001 fe0c 	bl	8002bd0 <__clzsi2>
 8000fb8:	0001      	movs	r1, r0
 8000fba:	3908      	subs	r1, #8
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	0022      	movs	r2, r4
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	408f      	lsls	r7, r1
 8000fc4:	40da      	lsrs	r2, r3
 8000fc6:	408c      	lsls	r4, r1
 8000fc8:	4317      	orrs	r7, r2
 8000fca:	42b1      	cmp	r1, r6
 8000fcc:	da00      	bge.n	8000fd0 <__aeabi_dadd+0xd0>
 8000fce:	e0ff      	b.n	80011d0 <__aeabi_dadd+0x2d0>
 8000fd0:	1b89      	subs	r1, r1, r6
 8000fd2:	1c4b      	adds	r3, r1, #1
 8000fd4:	2b1f      	cmp	r3, #31
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_dadd+0xda>
 8000fd8:	e0a8      	b.n	800112c <__aeabi_dadd+0x22c>
 8000fda:	2220      	movs	r2, #32
 8000fdc:	0039      	movs	r1, r7
 8000fde:	1ad2      	subs	r2, r2, r3
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	4094      	lsls	r4, r2
 8000fe4:	4091      	lsls	r1, r2
 8000fe6:	40d8      	lsrs	r0, r3
 8000fe8:	1e62      	subs	r2, r4, #1
 8000fea:	4194      	sbcs	r4, r2
 8000fec:	40df      	lsrs	r7, r3
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4301      	orrs	r1, r0
 8000ff2:	430c      	orrs	r4, r1
 8000ff4:	0763      	lsls	r3, r4, #29
 8000ff6:	d009      	beq.n	800100c <__aeabi_dadd+0x10c>
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	4023      	ands	r3, r4
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d005      	beq.n	800100c <__aeabi_dadd+0x10c>
 8001000:	1d23      	adds	r3, r4, #4
 8001002:	42a3      	cmp	r3, r4
 8001004:	41a4      	sbcs	r4, r4
 8001006:	4264      	negs	r4, r4
 8001008:	193f      	adds	r7, r7, r4
 800100a:	001c      	movs	r4, r3
 800100c:	023b      	lsls	r3, r7, #8
 800100e:	d400      	bmi.n	8001012 <__aeabi_dadd+0x112>
 8001010:	e09e      	b.n	8001150 <__aeabi_dadd+0x250>
 8001012:	4b95      	ldr	r3, [pc, #596]	; (8001268 <__aeabi_dadd+0x368>)
 8001014:	3601      	adds	r6, #1
 8001016:	429e      	cmp	r6, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x11c>
 800101a:	e0b7      	b.n	800118c <__aeabi_dadd+0x28c>
 800101c:	4a93      	ldr	r2, [pc, #588]	; (800126c <__aeabi_dadd+0x36c>)
 800101e:	08e4      	lsrs	r4, r4, #3
 8001020:	4017      	ands	r7, r2
 8001022:	077b      	lsls	r3, r7, #29
 8001024:	0571      	lsls	r1, r6, #21
 8001026:	027f      	lsls	r7, r7, #9
 8001028:	4323      	orrs	r3, r4
 800102a:	0b3f      	lsrs	r7, r7, #12
 800102c:	0d4a      	lsrs	r2, r1, #21
 800102e:	0512      	lsls	r2, r2, #20
 8001030:	433a      	orrs	r2, r7
 8001032:	07ed      	lsls	r5, r5, #31
 8001034:	432a      	orrs	r2, r5
 8001036:	0018      	movs	r0, r3
 8001038:	0011      	movs	r1, r2
 800103a:	bce0      	pop	{r5, r6, r7}
 800103c:	46ba      	mov	sl, r7
 800103e:	46b1      	mov	r9, r6
 8001040:	46a8      	mov	r8, r5
 8001042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001044:	2c00      	cmp	r4, #0
 8001046:	d04b      	beq.n	80010e0 <__aeabi_dadd+0x1e0>
 8001048:	464c      	mov	r4, r9
 800104a:	1ba4      	subs	r4, r4, r6
 800104c:	46a4      	mov	ip, r4
 800104e:	2e00      	cmp	r6, #0
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x154>
 8001052:	e123      	b.n	800129c <__aeabi_dadd+0x39c>
 8001054:	0004      	movs	r4, r0
 8001056:	431c      	orrs	r4, r3
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x15c>
 800105a:	e1af      	b.n	80013bc <__aeabi_dadd+0x4bc>
 800105c:	4662      	mov	r2, ip
 800105e:	1e54      	subs	r4, r2, #1
 8001060:	2a01      	cmp	r2, #1
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x166>
 8001064:	e215      	b.n	8001492 <__aeabi_dadd+0x592>
 8001066:	4d80      	ldr	r5, [pc, #512]	; (8001268 <__aeabi_dadd+0x368>)
 8001068:	45ac      	cmp	ip, r5
 800106a:	d100      	bne.n	800106e <__aeabi_dadd+0x16e>
 800106c:	e1c8      	b.n	8001400 <__aeabi_dadd+0x500>
 800106e:	46a4      	mov	ip, r4
 8001070:	e11b      	b.n	80012aa <__aeabi_dadd+0x3aa>
 8001072:	464a      	mov	r2, r9
 8001074:	1ab2      	subs	r2, r6, r2
 8001076:	4694      	mov	ip, r2
 8001078:	2a00      	cmp	r2, #0
 800107a:	dc00      	bgt.n	800107e <__aeabi_dadd+0x17e>
 800107c:	e0ac      	b.n	80011d8 <__aeabi_dadd+0x2d8>
 800107e:	464a      	mov	r2, r9
 8001080:	2a00      	cmp	r2, #0
 8001082:	d043      	beq.n	800110c <__aeabi_dadd+0x20c>
 8001084:	4a78      	ldr	r2, [pc, #480]	; (8001268 <__aeabi_dadd+0x368>)
 8001086:	4296      	cmp	r6, r2
 8001088:	d100      	bne.n	800108c <__aeabi_dadd+0x18c>
 800108a:	e1af      	b.n	80013ec <__aeabi_dadd+0x4ec>
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	003c      	movs	r4, r7
 8001090:	0412      	lsls	r2, r2, #16
 8001092:	4314      	orrs	r4, r2
 8001094:	46a0      	mov	r8, r4
 8001096:	4662      	mov	r2, ip
 8001098:	2a38      	cmp	r2, #56	; 0x38
 800109a:	dc67      	bgt.n	800116c <__aeabi_dadd+0x26c>
 800109c:	2a1f      	cmp	r2, #31
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_dadd+0x1a2>
 80010a0:	e15f      	b.n	8001362 <__aeabi_dadd+0x462>
 80010a2:	4647      	mov	r7, r8
 80010a4:	3a20      	subs	r2, #32
 80010a6:	40d7      	lsrs	r7, r2
 80010a8:	4662      	mov	r2, ip
 80010aa:	2a20      	cmp	r2, #32
 80010ac:	d005      	beq.n	80010ba <__aeabi_dadd+0x1ba>
 80010ae:	4664      	mov	r4, ip
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	1b12      	subs	r2, r2, r4
 80010b4:	4644      	mov	r4, r8
 80010b6:	4094      	lsls	r4, r2
 80010b8:	4321      	orrs	r1, r4
 80010ba:	1e4a      	subs	r2, r1, #1
 80010bc:	4191      	sbcs	r1, r2
 80010be:	000c      	movs	r4, r1
 80010c0:	433c      	orrs	r4, r7
 80010c2:	e057      	b.n	8001174 <__aeabi_dadd+0x274>
 80010c4:	003a      	movs	r2, r7
 80010c6:	430a      	orrs	r2, r1
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x1cc>
 80010ca:	e105      	b.n	80012d8 <__aeabi_dadd+0x3d8>
 80010cc:	0022      	movs	r2, r4
 80010ce:	3a01      	subs	r2, #1
 80010d0:	2c01      	cmp	r4, #1
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x1d6>
 80010d4:	e182      	b.n	80013dc <__aeabi_dadd+0x4dc>
 80010d6:	4c64      	ldr	r4, [pc, #400]	; (8001268 <__aeabi_dadd+0x368>)
 80010d8:	45a4      	cmp	ip, r4
 80010da:	d05b      	beq.n	8001194 <__aeabi_dadd+0x294>
 80010dc:	4694      	mov	ip, r2
 80010de:	e741      	b.n	8000f64 <__aeabi_dadd+0x64>
 80010e0:	4c63      	ldr	r4, [pc, #396]	; (8001270 <__aeabi_dadd+0x370>)
 80010e2:	1c77      	adds	r7, r6, #1
 80010e4:	4227      	tst	r7, r4
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x1ea>
 80010e8:	e0c4      	b.n	8001274 <__aeabi_dadd+0x374>
 80010ea:	0004      	movs	r4, r0
 80010ec:	431c      	orrs	r4, r3
 80010ee:	2e00      	cmp	r6, #0
 80010f0:	d000      	beq.n	80010f4 <__aeabi_dadd+0x1f4>
 80010f2:	e169      	b.n	80013c8 <__aeabi_dadd+0x4c8>
 80010f4:	2c00      	cmp	r4, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_dadd+0x1fa>
 80010f8:	e1bf      	b.n	800147a <__aeabi_dadd+0x57a>
 80010fa:	4644      	mov	r4, r8
 80010fc:	430c      	orrs	r4, r1
 80010fe:	d000      	beq.n	8001102 <__aeabi_dadd+0x202>
 8001100:	e1d0      	b.n	80014a4 <__aeabi_dadd+0x5a4>
 8001102:	0742      	lsls	r2, r0, #29
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	4313      	orrs	r3, r2
 8001108:	08c0      	lsrs	r0, r0, #3
 800110a:	e029      	b.n	8001160 <__aeabi_dadd+0x260>
 800110c:	003a      	movs	r2, r7
 800110e:	430a      	orrs	r2, r1
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x214>
 8001112:	e170      	b.n	80013f6 <__aeabi_dadd+0x4f6>
 8001114:	4662      	mov	r2, ip
 8001116:	4664      	mov	r4, ip
 8001118:	3a01      	subs	r2, #1
 800111a:	2c01      	cmp	r4, #1
 800111c:	d100      	bne.n	8001120 <__aeabi_dadd+0x220>
 800111e:	e0e0      	b.n	80012e2 <__aeabi_dadd+0x3e2>
 8001120:	4c51      	ldr	r4, [pc, #324]	; (8001268 <__aeabi_dadd+0x368>)
 8001122:	45a4      	cmp	ip, r4
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0x228>
 8001126:	e161      	b.n	80013ec <__aeabi_dadd+0x4ec>
 8001128:	4694      	mov	ip, r2
 800112a:	e7b4      	b.n	8001096 <__aeabi_dadd+0x196>
 800112c:	003a      	movs	r2, r7
 800112e:	391f      	subs	r1, #31
 8001130:	40ca      	lsrs	r2, r1
 8001132:	0011      	movs	r1, r2
 8001134:	2b20      	cmp	r3, #32
 8001136:	d003      	beq.n	8001140 <__aeabi_dadd+0x240>
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	409f      	lsls	r7, r3
 800113e:	433c      	orrs	r4, r7
 8001140:	1e63      	subs	r3, r4, #1
 8001142:	419c      	sbcs	r4, r3
 8001144:	2700      	movs	r7, #0
 8001146:	2600      	movs	r6, #0
 8001148:	430c      	orrs	r4, r1
 800114a:	0763      	lsls	r3, r4, #29
 800114c:	d000      	beq.n	8001150 <__aeabi_dadd+0x250>
 800114e:	e753      	b.n	8000ff8 <__aeabi_dadd+0xf8>
 8001150:	46b4      	mov	ip, r6
 8001152:	08e4      	lsrs	r4, r4, #3
 8001154:	077b      	lsls	r3, r7, #29
 8001156:	4323      	orrs	r3, r4
 8001158:	08f8      	lsrs	r0, r7, #3
 800115a:	4a43      	ldr	r2, [pc, #268]	; (8001268 <__aeabi_dadd+0x368>)
 800115c:	4594      	cmp	ip, r2
 800115e:	d01d      	beq.n	800119c <__aeabi_dadd+0x29c>
 8001160:	4662      	mov	r2, ip
 8001162:	0307      	lsls	r7, r0, #12
 8001164:	0552      	lsls	r2, r2, #21
 8001166:	0b3f      	lsrs	r7, r7, #12
 8001168:	0d52      	lsrs	r2, r2, #21
 800116a:	e760      	b.n	800102e <__aeabi_dadd+0x12e>
 800116c:	4644      	mov	r4, r8
 800116e:	430c      	orrs	r4, r1
 8001170:	1e62      	subs	r2, r4, #1
 8001172:	4194      	sbcs	r4, r2
 8001174:	18e4      	adds	r4, r4, r3
 8001176:	429c      	cmp	r4, r3
 8001178:	419b      	sbcs	r3, r3
 800117a:	425f      	negs	r7, r3
 800117c:	183f      	adds	r7, r7, r0
 800117e:	023b      	lsls	r3, r7, #8
 8001180:	d5e3      	bpl.n	800114a <__aeabi_dadd+0x24a>
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <__aeabi_dadd+0x368>)
 8001184:	3601      	adds	r6, #1
 8001186:	429e      	cmp	r6, r3
 8001188:	d000      	beq.n	800118c <__aeabi_dadd+0x28c>
 800118a:	e0b5      	b.n	80012f8 <__aeabi_dadd+0x3f8>
 800118c:	0032      	movs	r2, r6
 800118e:	2700      	movs	r7, #0
 8001190:	2300      	movs	r3, #0
 8001192:	e74c      	b.n	800102e <__aeabi_dadd+0x12e>
 8001194:	0742      	lsls	r2, r0, #29
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	4313      	orrs	r3, r2
 800119a:	08c0      	lsrs	r0, r0, #3
 800119c:	001a      	movs	r2, r3
 800119e:	4302      	orrs	r2, r0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x2a4>
 80011a2:	e1e1      	b.n	8001568 <__aeabi_dadd+0x668>
 80011a4:	2780      	movs	r7, #128	; 0x80
 80011a6:	033f      	lsls	r7, r7, #12
 80011a8:	4307      	orrs	r7, r0
 80011aa:	033f      	lsls	r7, r7, #12
 80011ac:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <__aeabi_dadd+0x368>)
 80011ae:	0b3f      	lsrs	r7, r7, #12
 80011b0:	e73d      	b.n	800102e <__aeabi_dadd+0x12e>
 80011b2:	0020      	movs	r0, r4
 80011b4:	f001 fd0c 	bl	8002bd0 <__clzsi2>
 80011b8:	0001      	movs	r1, r0
 80011ba:	3118      	adds	r1, #24
 80011bc:	291f      	cmp	r1, #31
 80011be:	dc00      	bgt.n	80011c2 <__aeabi_dadd+0x2c2>
 80011c0:	e6fc      	b.n	8000fbc <__aeabi_dadd+0xbc>
 80011c2:	3808      	subs	r0, #8
 80011c4:	4084      	lsls	r4, r0
 80011c6:	0027      	movs	r7, r4
 80011c8:	2400      	movs	r4, #0
 80011ca:	42b1      	cmp	r1, r6
 80011cc:	db00      	blt.n	80011d0 <__aeabi_dadd+0x2d0>
 80011ce:	e6ff      	b.n	8000fd0 <__aeabi_dadd+0xd0>
 80011d0:	4a26      	ldr	r2, [pc, #152]	; (800126c <__aeabi_dadd+0x36c>)
 80011d2:	1a76      	subs	r6, r6, r1
 80011d4:	4017      	ands	r7, r2
 80011d6:	e70d      	b.n	8000ff4 <__aeabi_dadd+0xf4>
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d02f      	beq.n	800123c <__aeabi_dadd+0x33c>
 80011dc:	464a      	mov	r2, r9
 80011de:	1b92      	subs	r2, r2, r6
 80011e0:	4694      	mov	ip, r2
 80011e2:	2e00      	cmp	r6, #0
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dadd+0x2e8>
 80011e6:	e0ad      	b.n	8001344 <__aeabi_dadd+0x444>
 80011e8:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <__aeabi_dadd+0x368>)
 80011ea:	4591      	cmp	r9, r2
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x2f0>
 80011ee:	e10f      	b.n	8001410 <__aeabi_dadd+0x510>
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0412      	lsls	r2, r2, #16
 80011f4:	4310      	orrs	r0, r2
 80011f6:	4662      	mov	r2, ip
 80011f8:	2a38      	cmp	r2, #56	; 0x38
 80011fa:	dd00      	ble.n	80011fe <__aeabi_dadd+0x2fe>
 80011fc:	e10f      	b.n	800141e <__aeabi_dadd+0x51e>
 80011fe:	2a1f      	cmp	r2, #31
 8001200:	dd00      	ble.n	8001204 <__aeabi_dadd+0x304>
 8001202:	e180      	b.n	8001506 <__aeabi_dadd+0x606>
 8001204:	4664      	mov	r4, ip
 8001206:	2220      	movs	r2, #32
 8001208:	001e      	movs	r6, r3
 800120a:	1b12      	subs	r2, r2, r4
 800120c:	4667      	mov	r7, ip
 800120e:	0004      	movs	r4, r0
 8001210:	4093      	lsls	r3, r2
 8001212:	4094      	lsls	r4, r2
 8001214:	40fe      	lsrs	r6, r7
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	4193      	sbcs	r3, r2
 800121a:	40f8      	lsrs	r0, r7
 800121c:	4334      	orrs	r4, r6
 800121e:	431c      	orrs	r4, r3
 8001220:	4480      	add	r8, r0
 8001222:	1864      	adds	r4, r4, r1
 8001224:	428c      	cmp	r4, r1
 8001226:	41bf      	sbcs	r7, r7
 8001228:	427f      	negs	r7, r7
 800122a:	464e      	mov	r6, r9
 800122c:	4447      	add	r7, r8
 800122e:	e7a6      	b.n	800117e <__aeabi_dadd+0x27e>
 8001230:	4642      	mov	r2, r8
 8001232:	430a      	orrs	r2, r1
 8001234:	0011      	movs	r1, r2
 8001236:	1e4a      	subs	r2, r1, #1
 8001238:	4191      	sbcs	r1, r2
 800123a:	e6ad      	b.n	8000f98 <__aeabi_dadd+0x98>
 800123c:	4c0c      	ldr	r4, [pc, #48]	; (8001270 <__aeabi_dadd+0x370>)
 800123e:	1c72      	adds	r2, r6, #1
 8001240:	4222      	tst	r2, r4
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x346>
 8001244:	e0a1      	b.n	800138a <__aeabi_dadd+0x48a>
 8001246:	0002      	movs	r2, r0
 8001248:	431a      	orrs	r2, r3
 800124a:	2e00      	cmp	r6, #0
 800124c:	d000      	beq.n	8001250 <__aeabi_dadd+0x350>
 800124e:	e0fa      	b.n	8001446 <__aeabi_dadd+0x546>
 8001250:	2a00      	cmp	r2, #0
 8001252:	d100      	bne.n	8001256 <__aeabi_dadd+0x356>
 8001254:	e145      	b.n	80014e2 <__aeabi_dadd+0x5e2>
 8001256:	003a      	movs	r2, r7
 8001258:	430a      	orrs	r2, r1
 800125a:	d000      	beq.n	800125e <__aeabi_dadd+0x35e>
 800125c:	e146      	b.n	80014ec <__aeabi_dadd+0x5ec>
 800125e:	0742      	lsls	r2, r0, #29
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	4313      	orrs	r3, r2
 8001264:	08c0      	lsrs	r0, r0, #3
 8001266:	e77b      	b.n	8001160 <__aeabi_dadd+0x260>
 8001268:	000007ff 	.word	0x000007ff
 800126c:	ff7fffff 	.word	0xff7fffff
 8001270:	000007fe 	.word	0x000007fe
 8001274:	4647      	mov	r7, r8
 8001276:	1a5c      	subs	r4, r3, r1
 8001278:	1bc2      	subs	r2, r0, r7
 800127a:	42a3      	cmp	r3, r4
 800127c:	41bf      	sbcs	r7, r7
 800127e:	427f      	negs	r7, r7
 8001280:	46b9      	mov	r9, r7
 8001282:	0017      	movs	r7, r2
 8001284:	464a      	mov	r2, r9
 8001286:	1abf      	subs	r7, r7, r2
 8001288:	023a      	lsls	r2, r7, #8
 800128a:	d500      	bpl.n	800128e <__aeabi_dadd+0x38e>
 800128c:	e08d      	b.n	80013aa <__aeabi_dadd+0x4aa>
 800128e:	0023      	movs	r3, r4
 8001290:	433b      	orrs	r3, r7
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x396>
 8001294:	e68a      	b.n	8000fac <__aeabi_dadd+0xac>
 8001296:	2000      	movs	r0, #0
 8001298:	2500      	movs	r5, #0
 800129a:	e761      	b.n	8001160 <__aeabi_dadd+0x260>
 800129c:	4cb4      	ldr	r4, [pc, #720]	; (8001570 <__aeabi_dadd+0x670>)
 800129e:	45a1      	cmp	r9, r4
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dadd+0x3a4>
 80012a2:	e0ad      	b.n	8001400 <__aeabi_dadd+0x500>
 80012a4:	2480      	movs	r4, #128	; 0x80
 80012a6:	0424      	lsls	r4, r4, #16
 80012a8:	4320      	orrs	r0, r4
 80012aa:	4664      	mov	r4, ip
 80012ac:	2c38      	cmp	r4, #56	; 0x38
 80012ae:	dc3d      	bgt.n	800132c <__aeabi_dadd+0x42c>
 80012b0:	4662      	mov	r2, ip
 80012b2:	2c1f      	cmp	r4, #31
 80012b4:	dd00      	ble.n	80012b8 <__aeabi_dadd+0x3b8>
 80012b6:	e0b7      	b.n	8001428 <__aeabi_dadd+0x528>
 80012b8:	2520      	movs	r5, #32
 80012ba:	001e      	movs	r6, r3
 80012bc:	1b2d      	subs	r5, r5, r4
 80012be:	0004      	movs	r4, r0
 80012c0:	40ab      	lsls	r3, r5
 80012c2:	40ac      	lsls	r4, r5
 80012c4:	40d6      	lsrs	r6, r2
 80012c6:	40d0      	lsrs	r0, r2
 80012c8:	4642      	mov	r2, r8
 80012ca:	1e5d      	subs	r5, r3, #1
 80012cc:	41ab      	sbcs	r3, r5
 80012ce:	4334      	orrs	r4, r6
 80012d0:	1a12      	subs	r2, r2, r0
 80012d2:	4690      	mov	r8, r2
 80012d4:	4323      	orrs	r3, r4
 80012d6:	e02c      	b.n	8001332 <__aeabi_dadd+0x432>
 80012d8:	0742      	lsls	r2, r0, #29
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	4313      	orrs	r3, r2
 80012de:	08c0      	lsrs	r0, r0, #3
 80012e0:	e73b      	b.n	800115a <__aeabi_dadd+0x25a>
 80012e2:	185c      	adds	r4, r3, r1
 80012e4:	429c      	cmp	r4, r3
 80012e6:	419b      	sbcs	r3, r3
 80012e8:	4440      	add	r0, r8
 80012ea:	425b      	negs	r3, r3
 80012ec:	18c7      	adds	r7, r0, r3
 80012ee:	2601      	movs	r6, #1
 80012f0:	023b      	lsls	r3, r7, #8
 80012f2:	d400      	bmi.n	80012f6 <__aeabi_dadd+0x3f6>
 80012f4:	e729      	b.n	800114a <__aeabi_dadd+0x24a>
 80012f6:	2602      	movs	r6, #2
 80012f8:	4a9e      	ldr	r2, [pc, #632]	; (8001574 <__aeabi_dadd+0x674>)
 80012fa:	0863      	lsrs	r3, r4, #1
 80012fc:	4017      	ands	r7, r2
 80012fe:	2201      	movs	r2, #1
 8001300:	4014      	ands	r4, r2
 8001302:	431c      	orrs	r4, r3
 8001304:	07fb      	lsls	r3, r7, #31
 8001306:	431c      	orrs	r4, r3
 8001308:	087f      	lsrs	r7, r7, #1
 800130a:	e673      	b.n	8000ff4 <__aeabi_dadd+0xf4>
 800130c:	4644      	mov	r4, r8
 800130e:	3a20      	subs	r2, #32
 8001310:	40d4      	lsrs	r4, r2
 8001312:	4662      	mov	r2, ip
 8001314:	2a20      	cmp	r2, #32
 8001316:	d005      	beq.n	8001324 <__aeabi_dadd+0x424>
 8001318:	4667      	mov	r7, ip
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	1bd2      	subs	r2, r2, r7
 800131e:	4647      	mov	r7, r8
 8001320:	4097      	lsls	r7, r2
 8001322:	4339      	orrs	r1, r7
 8001324:	1e4a      	subs	r2, r1, #1
 8001326:	4191      	sbcs	r1, r2
 8001328:	4321      	orrs	r1, r4
 800132a:	e635      	b.n	8000f98 <__aeabi_dadd+0x98>
 800132c:	4303      	orrs	r3, r0
 800132e:	1e58      	subs	r0, r3, #1
 8001330:	4183      	sbcs	r3, r0
 8001332:	1acc      	subs	r4, r1, r3
 8001334:	42a1      	cmp	r1, r4
 8001336:	41bf      	sbcs	r7, r7
 8001338:	4643      	mov	r3, r8
 800133a:	427f      	negs	r7, r7
 800133c:	4655      	mov	r5, sl
 800133e:	464e      	mov	r6, r9
 8001340:	1bdf      	subs	r7, r3, r7
 8001342:	e62e      	b.n	8000fa2 <__aeabi_dadd+0xa2>
 8001344:	0002      	movs	r2, r0
 8001346:	431a      	orrs	r2, r3
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x44c>
 800134a:	e0bd      	b.n	80014c8 <__aeabi_dadd+0x5c8>
 800134c:	4662      	mov	r2, ip
 800134e:	4664      	mov	r4, ip
 8001350:	3a01      	subs	r2, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x458>
 8001356:	e0e5      	b.n	8001524 <__aeabi_dadd+0x624>
 8001358:	4c85      	ldr	r4, [pc, #532]	; (8001570 <__aeabi_dadd+0x670>)
 800135a:	45a4      	cmp	ip, r4
 800135c:	d058      	beq.n	8001410 <__aeabi_dadd+0x510>
 800135e:	4694      	mov	ip, r2
 8001360:	e749      	b.n	80011f6 <__aeabi_dadd+0x2f6>
 8001362:	4664      	mov	r4, ip
 8001364:	2220      	movs	r2, #32
 8001366:	1b12      	subs	r2, r2, r4
 8001368:	4644      	mov	r4, r8
 800136a:	4094      	lsls	r4, r2
 800136c:	000f      	movs	r7, r1
 800136e:	46a1      	mov	r9, r4
 8001370:	4664      	mov	r4, ip
 8001372:	4091      	lsls	r1, r2
 8001374:	40e7      	lsrs	r7, r4
 8001376:	464c      	mov	r4, r9
 8001378:	1e4a      	subs	r2, r1, #1
 800137a:	4191      	sbcs	r1, r2
 800137c:	433c      	orrs	r4, r7
 800137e:	4642      	mov	r2, r8
 8001380:	430c      	orrs	r4, r1
 8001382:	4661      	mov	r1, ip
 8001384:	40ca      	lsrs	r2, r1
 8001386:	1880      	adds	r0, r0, r2
 8001388:	e6f4      	b.n	8001174 <__aeabi_dadd+0x274>
 800138a:	4c79      	ldr	r4, [pc, #484]	; (8001570 <__aeabi_dadd+0x670>)
 800138c:	42a2      	cmp	r2, r4
 800138e:	d100      	bne.n	8001392 <__aeabi_dadd+0x492>
 8001390:	e6fd      	b.n	800118e <__aeabi_dadd+0x28e>
 8001392:	1859      	adds	r1, r3, r1
 8001394:	4299      	cmp	r1, r3
 8001396:	419b      	sbcs	r3, r3
 8001398:	4440      	add	r0, r8
 800139a:	425f      	negs	r7, r3
 800139c:	19c7      	adds	r7, r0, r7
 800139e:	07fc      	lsls	r4, r7, #31
 80013a0:	0849      	lsrs	r1, r1, #1
 80013a2:	0016      	movs	r6, r2
 80013a4:	430c      	orrs	r4, r1
 80013a6:	087f      	lsrs	r7, r7, #1
 80013a8:	e6cf      	b.n	800114a <__aeabi_dadd+0x24a>
 80013aa:	1acc      	subs	r4, r1, r3
 80013ac:	42a1      	cmp	r1, r4
 80013ae:	41bf      	sbcs	r7, r7
 80013b0:	4643      	mov	r3, r8
 80013b2:	427f      	negs	r7, r7
 80013b4:	1a18      	subs	r0, r3, r0
 80013b6:	4655      	mov	r5, sl
 80013b8:	1bc7      	subs	r7, r0, r7
 80013ba:	e5f7      	b.n	8000fac <__aeabi_dadd+0xac>
 80013bc:	08c9      	lsrs	r1, r1, #3
 80013be:	077b      	lsls	r3, r7, #29
 80013c0:	4655      	mov	r5, sl
 80013c2:	430b      	orrs	r3, r1
 80013c4:	08f8      	lsrs	r0, r7, #3
 80013c6:	e6c8      	b.n	800115a <__aeabi_dadd+0x25a>
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d000      	beq.n	80013ce <__aeabi_dadd+0x4ce>
 80013cc:	e081      	b.n	80014d2 <__aeabi_dadd+0x5d2>
 80013ce:	4643      	mov	r3, r8
 80013d0:	430b      	orrs	r3, r1
 80013d2:	d115      	bne.n	8001400 <__aeabi_dadd+0x500>
 80013d4:	2080      	movs	r0, #128	; 0x80
 80013d6:	2500      	movs	r5, #0
 80013d8:	0300      	lsls	r0, r0, #12
 80013da:	e6e3      	b.n	80011a4 <__aeabi_dadd+0x2a4>
 80013dc:	1a5c      	subs	r4, r3, r1
 80013de:	42a3      	cmp	r3, r4
 80013e0:	419b      	sbcs	r3, r3
 80013e2:	1bc7      	subs	r7, r0, r7
 80013e4:	425b      	negs	r3, r3
 80013e6:	2601      	movs	r6, #1
 80013e8:	1aff      	subs	r7, r7, r3
 80013ea:	e5da      	b.n	8000fa2 <__aeabi_dadd+0xa2>
 80013ec:	0742      	lsls	r2, r0, #29
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	08c0      	lsrs	r0, r0, #3
 80013f4:	e6d2      	b.n	800119c <__aeabi_dadd+0x29c>
 80013f6:	0742      	lsls	r2, r0, #29
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	08c0      	lsrs	r0, r0, #3
 80013fe:	e6ac      	b.n	800115a <__aeabi_dadd+0x25a>
 8001400:	4643      	mov	r3, r8
 8001402:	4642      	mov	r2, r8
 8001404:	08c9      	lsrs	r1, r1, #3
 8001406:	075b      	lsls	r3, r3, #29
 8001408:	4655      	mov	r5, sl
 800140a:	430b      	orrs	r3, r1
 800140c:	08d0      	lsrs	r0, r2, #3
 800140e:	e6c5      	b.n	800119c <__aeabi_dadd+0x29c>
 8001410:	4643      	mov	r3, r8
 8001412:	4642      	mov	r2, r8
 8001414:	075b      	lsls	r3, r3, #29
 8001416:	08c9      	lsrs	r1, r1, #3
 8001418:	430b      	orrs	r3, r1
 800141a:	08d0      	lsrs	r0, r2, #3
 800141c:	e6be      	b.n	800119c <__aeabi_dadd+0x29c>
 800141e:	4303      	orrs	r3, r0
 8001420:	001c      	movs	r4, r3
 8001422:	1e63      	subs	r3, r4, #1
 8001424:	419c      	sbcs	r4, r3
 8001426:	e6fc      	b.n	8001222 <__aeabi_dadd+0x322>
 8001428:	0002      	movs	r2, r0
 800142a:	3c20      	subs	r4, #32
 800142c:	40e2      	lsrs	r2, r4
 800142e:	0014      	movs	r4, r2
 8001430:	4662      	mov	r2, ip
 8001432:	2a20      	cmp	r2, #32
 8001434:	d003      	beq.n	800143e <__aeabi_dadd+0x53e>
 8001436:	2540      	movs	r5, #64	; 0x40
 8001438:	1aad      	subs	r5, r5, r2
 800143a:	40a8      	lsls	r0, r5
 800143c:	4303      	orrs	r3, r0
 800143e:	1e58      	subs	r0, r3, #1
 8001440:	4183      	sbcs	r3, r0
 8001442:	4323      	orrs	r3, r4
 8001444:	e775      	b.n	8001332 <__aeabi_dadd+0x432>
 8001446:	2a00      	cmp	r2, #0
 8001448:	d0e2      	beq.n	8001410 <__aeabi_dadd+0x510>
 800144a:	003a      	movs	r2, r7
 800144c:	430a      	orrs	r2, r1
 800144e:	d0cd      	beq.n	80013ec <__aeabi_dadd+0x4ec>
 8001450:	0742      	lsls	r2, r0, #29
 8001452:	08db      	lsrs	r3, r3, #3
 8001454:	4313      	orrs	r3, r2
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	08c0      	lsrs	r0, r0, #3
 800145a:	0312      	lsls	r2, r2, #12
 800145c:	4210      	tst	r0, r2
 800145e:	d006      	beq.n	800146e <__aeabi_dadd+0x56e>
 8001460:	08fc      	lsrs	r4, r7, #3
 8001462:	4214      	tst	r4, r2
 8001464:	d103      	bne.n	800146e <__aeabi_dadd+0x56e>
 8001466:	0020      	movs	r0, r4
 8001468:	08cb      	lsrs	r3, r1, #3
 800146a:	077a      	lsls	r2, r7, #29
 800146c:	4313      	orrs	r3, r2
 800146e:	0f5a      	lsrs	r2, r3, #29
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	0752      	lsls	r2, r2, #29
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	4313      	orrs	r3, r2
 8001478:	e690      	b.n	800119c <__aeabi_dadd+0x29c>
 800147a:	4643      	mov	r3, r8
 800147c:	430b      	orrs	r3, r1
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x582>
 8001480:	e709      	b.n	8001296 <__aeabi_dadd+0x396>
 8001482:	4643      	mov	r3, r8
 8001484:	4642      	mov	r2, r8
 8001486:	08c9      	lsrs	r1, r1, #3
 8001488:	075b      	lsls	r3, r3, #29
 800148a:	4655      	mov	r5, sl
 800148c:	430b      	orrs	r3, r1
 800148e:	08d0      	lsrs	r0, r2, #3
 8001490:	e666      	b.n	8001160 <__aeabi_dadd+0x260>
 8001492:	1acc      	subs	r4, r1, r3
 8001494:	42a1      	cmp	r1, r4
 8001496:	4189      	sbcs	r1, r1
 8001498:	1a3f      	subs	r7, r7, r0
 800149a:	4249      	negs	r1, r1
 800149c:	4655      	mov	r5, sl
 800149e:	2601      	movs	r6, #1
 80014a0:	1a7f      	subs	r7, r7, r1
 80014a2:	e57e      	b.n	8000fa2 <__aeabi_dadd+0xa2>
 80014a4:	4642      	mov	r2, r8
 80014a6:	1a5c      	subs	r4, r3, r1
 80014a8:	1a87      	subs	r7, r0, r2
 80014aa:	42a3      	cmp	r3, r4
 80014ac:	4192      	sbcs	r2, r2
 80014ae:	4252      	negs	r2, r2
 80014b0:	1abf      	subs	r7, r7, r2
 80014b2:	023a      	lsls	r2, r7, #8
 80014b4:	d53d      	bpl.n	8001532 <__aeabi_dadd+0x632>
 80014b6:	1acc      	subs	r4, r1, r3
 80014b8:	42a1      	cmp	r1, r4
 80014ba:	4189      	sbcs	r1, r1
 80014bc:	4643      	mov	r3, r8
 80014be:	4249      	negs	r1, r1
 80014c0:	1a1f      	subs	r7, r3, r0
 80014c2:	4655      	mov	r5, sl
 80014c4:	1a7f      	subs	r7, r7, r1
 80014c6:	e595      	b.n	8000ff4 <__aeabi_dadd+0xf4>
 80014c8:	077b      	lsls	r3, r7, #29
 80014ca:	08c9      	lsrs	r1, r1, #3
 80014cc:	430b      	orrs	r3, r1
 80014ce:	08f8      	lsrs	r0, r7, #3
 80014d0:	e643      	b.n	800115a <__aeabi_dadd+0x25a>
 80014d2:	4644      	mov	r4, r8
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	430c      	orrs	r4, r1
 80014d8:	d130      	bne.n	800153c <__aeabi_dadd+0x63c>
 80014da:	0742      	lsls	r2, r0, #29
 80014dc:	4313      	orrs	r3, r2
 80014de:	08c0      	lsrs	r0, r0, #3
 80014e0:	e65c      	b.n	800119c <__aeabi_dadd+0x29c>
 80014e2:	077b      	lsls	r3, r7, #29
 80014e4:	08c9      	lsrs	r1, r1, #3
 80014e6:	430b      	orrs	r3, r1
 80014e8:	08f8      	lsrs	r0, r7, #3
 80014ea:	e639      	b.n	8001160 <__aeabi_dadd+0x260>
 80014ec:	185c      	adds	r4, r3, r1
 80014ee:	429c      	cmp	r4, r3
 80014f0:	419b      	sbcs	r3, r3
 80014f2:	4440      	add	r0, r8
 80014f4:	425b      	negs	r3, r3
 80014f6:	18c7      	adds	r7, r0, r3
 80014f8:	023b      	lsls	r3, r7, #8
 80014fa:	d400      	bmi.n	80014fe <__aeabi_dadd+0x5fe>
 80014fc:	e625      	b.n	800114a <__aeabi_dadd+0x24a>
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <__aeabi_dadd+0x674>)
 8001500:	2601      	movs	r6, #1
 8001502:	401f      	ands	r7, r3
 8001504:	e621      	b.n	800114a <__aeabi_dadd+0x24a>
 8001506:	0004      	movs	r4, r0
 8001508:	3a20      	subs	r2, #32
 800150a:	40d4      	lsrs	r4, r2
 800150c:	4662      	mov	r2, ip
 800150e:	2a20      	cmp	r2, #32
 8001510:	d004      	beq.n	800151c <__aeabi_dadd+0x61c>
 8001512:	2240      	movs	r2, #64	; 0x40
 8001514:	4666      	mov	r6, ip
 8001516:	1b92      	subs	r2, r2, r6
 8001518:	4090      	lsls	r0, r2
 800151a:	4303      	orrs	r3, r0
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	4193      	sbcs	r3, r2
 8001520:	431c      	orrs	r4, r3
 8001522:	e67e      	b.n	8001222 <__aeabi_dadd+0x322>
 8001524:	185c      	adds	r4, r3, r1
 8001526:	428c      	cmp	r4, r1
 8001528:	4189      	sbcs	r1, r1
 800152a:	4440      	add	r0, r8
 800152c:	4249      	negs	r1, r1
 800152e:	1847      	adds	r7, r0, r1
 8001530:	e6dd      	b.n	80012ee <__aeabi_dadd+0x3ee>
 8001532:	0023      	movs	r3, r4
 8001534:	433b      	orrs	r3, r7
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x63a>
 8001538:	e6ad      	b.n	8001296 <__aeabi_dadd+0x396>
 800153a:	e606      	b.n	800114a <__aeabi_dadd+0x24a>
 800153c:	0744      	lsls	r4, r0, #29
 800153e:	4323      	orrs	r3, r4
 8001540:	2480      	movs	r4, #128	; 0x80
 8001542:	08c0      	lsrs	r0, r0, #3
 8001544:	0324      	lsls	r4, r4, #12
 8001546:	4220      	tst	r0, r4
 8001548:	d008      	beq.n	800155c <__aeabi_dadd+0x65c>
 800154a:	4642      	mov	r2, r8
 800154c:	08d6      	lsrs	r6, r2, #3
 800154e:	4226      	tst	r6, r4
 8001550:	d104      	bne.n	800155c <__aeabi_dadd+0x65c>
 8001552:	4655      	mov	r5, sl
 8001554:	0030      	movs	r0, r6
 8001556:	08cb      	lsrs	r3, r1, #3
 8001558:	0751      	lsls	r1, r2, #29
 800155a:	430b      	orrs	r3, r1
 800155c:	0f5a      	lsrs	r2, r3, #29
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	0752      	lsls	r2, r2, #29
 8001564:	4313      	orrs	r3, r2
 8001566:	e619      	b.n	800119c <__aeabi_dadd+0x29c>
 8001568:	2300      	movs	r3, #0
 800156a:	4a01      	ldr	r2, [pc, #4]	; (8001570 <__aeabi_dadd+0x670>)
 800156c:	001f      	movs	r7, r3
 800156e:	e55e      	b.n	800102e <__aeabi_dadd+0x12e>
 8001570:	000007ff 	.word	0x000007ff
 8001574:	ff7fffff 	.word	0xff7fffff

08001578 <__aeabi_ddiv>:
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	4657      	mov	r7, sl
 800157c:	464e      	mov	r6, r9
 800157e:	4645      	mov	r5, r8
 8001580:	46de      	mov	lr, fp
 8001582:	b5e0      	push	{r5, r6, r7, lr}
 8001584:	4681      	mov	r9, r0
 8001586:	0005      	movs	r5, r0
 8001588:	030c      	lsls	r4, r1, #12
 800158a:	0048      	lsls	r0, r1, #1
 800158c:	4692      	mov	sl, r2
 800158e:	001f      	movs	r7, r3
 8001590:	b085      	sub	sp, #20
 8001592:	0b24      	lsrs	r4, r4, #12
 8001594:	0d40      	lsrs	r0, r0, #21
 8001596:	0fce      	lsrs	r6, r1, #31
 8001598:	2800      	cmp	r0, #0
 800159a:	d100      	bne.n	800159e <__aeabi_ddiv+0x26>
 800159c:	e156      	b.n	800184c <__aeabi_ddiv+0x2d4>
 800159e:	4bd4      	ldr	r3, [pc, #848]	; (80018f0 <__aeabi_ddiv+0x378>)
 80015a0:	4298      	cmp	r0, r3
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x2e>
 80015a4:	e172      	b.n	800188c <__aeabi_ddiv+0x314>
 80015a6:	0f6b      	lsrs	r3, r5, #29
 80015a8:	00e4      	lsls	r4, r4, #3
 80015aa:	431c      	orrs	r4, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	041b      	lsls	r3, r3, #16
 80015b0:	4323      	orrs	r3, r4
 80015b2:	4698      	mov	r8, r3
 80015b4:	4bcf      	ldr	r3, [pc, #828]	; (80018f4 <__aeabi_ddiv+0x37c>)
 80015b6:	00ed      	lsls	r5, r5, #3
 80015b8:	469b      	mov	fp, r3
 80015ba:	2300      	movs	r3, #0
 80015bc:	4699      	mov	r9, r3
 80015be:	4483      	add	fp, r0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	033c      	lsls	r4, r7, #12
 80015c4:	007b      	lsls	r3, r7, #1
 80015c6:	4650      	mov	r0, sl
 80015c8:	0b24      	lsrs	r4, r4, #12
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fff      	lsrs	r7, r7, #31
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_ddiv+0x5c>
 80015d2:	e11f      	b.n	8001814 <__aeabi_ddiv+0x29c>
 80015d4:	4ac6      	ldr	r2, [pc, #792]	; (80018f0 <__aeabi_ddiv+0x378>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d100      	bne.n	80015dc <__aeabi_ddiv+0x64>
 80015da:	e162      	b.n	80018a2 <__aeabi_ddiv+0x32a>
 80015dc:	49c5      	ldr	r1, [pc, #788]	; (80018f4 <__aeabi_ddiv+0x37c>)
 80015de:	0f42      	lsrs	r2, r0, #29
 80015e0:	468c      	mov	ip, r1
 80015e2:	00e4      	lsls	r4, r4, #3
 80015e4:	4659      	mov	r1, fp
 80015e6:	4314      	orrs	r4, r2
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	4463      	add	r3, ip
 80015ec:	0412      	lsls	r2, r2, #16
 80015ee:	1acb      	subs	r3, r1, r3
 80015f0:	4314      	orrs	r4, r2
 80015f2:	469b      	mov	fp, r3
 80015f4:	00c2      	lsls	r2, r0, #3
 80015f6:	2000      	movs	r0, #0
 80015f8:	0033      	movs	r3, r6
 80015fa:	407b      	eors	r3, r7
 80015fc:	469a      	mov	sl, r3
 80015fe:	464b      	mov	r3, r9
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d827      	bhi.n	8001654 <__aeabi_ddiv+0xdc>
 8001604:	49bc      	ldr	r1, [pc, #752]	; (80018f8 <__aeabi_ddiv+0x380>)
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	58cb      	ldr	r3, [r1, r3]
 800160a:	469f      	mov	pc, r3
 800160c:	46b2      	mov	sl, r6
 800160e:	9b00      	ldr	r3, [sp, #0]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d016      	beq.n	8001642 <__aeabi_ddiv+0xca>
 8001614:	2b03      	cmp	r3, #3
 8001616:	d100      	bne.n	800161a <__aeabi_ddiv+0xa2>
 8001618:	e28e      	b.n	8001b38 <__aeabi_ddiv+0x5c0>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d000      	beq.n	8001620 <__aeabi_ddiv+0xa8>
 800161e:	e0d9      	b.n	80017d4 <__aeabi_ddiv+0x25c>
 8001620:	2300      	movs	r3, #0
 8001622:	2400      	movs	r4, #0
 8001624:	2500      	movs	r5, #0
 8001626:	4652      	mov	r2, sl
 8001628:	051b      	lsls	r3, r3, #20
 800162a:	4323      	orrs	r3, r4
 800162c:	07d2      	lsls	r2, r2, #31
 800162e:	4313      	orrs	r3, r2
 8001630:	0028      	movs	r0, r5
 8001632:	0019      	movs	r1, r3
 8001634:	b005      	add	sp, #20
 8001636:	bcf0      	pop	{r4, r5, r6, r7}
 8001638:	46bb      	mov	fp, r7
 800163a:	46b2      	mov	sl, r6
 800163c:	46a9      	mov	r9, r5
 800163e:	46a0      	mov	r8, r4
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001642:	2400      	movs	r4, #0
 8001644:	2500      	movs	r5, #0
 8001646:	4baa      	ldr	r3, [pc, #680]	; (80018f0 <__aeabi_ddiv+0x378>)
 8001648:	e7ed      	b.n	8001626 <__aeabi_ddiv+0xae>
 800164a:	46ba      	mov	sl, r7
 800164c:	46a0      	mov	r8, r4
 800164e:	0015      	movs	r5, r2
 8001650:	9000      	str	r0, [sp, #0]
 8001652:	e7dc      	b.n	800160e <__aeabi_ddiv+0x96>
 8001654:	4544      	cmp	r4, r8
 8001656:	d200      	bcs.n	800165a <__aeabi_ddiv+0xe2>
 8001658:	e1c7      	b.n	80019ea <__aeabi_ddiv+0x472>
 800165a:	d100      	bne.n	800165e <__aeabi_ddiv+0xe6>
 800165c:	e1c2      	b.n	80019e4 <__aeabi_ddiv+0x46c>
 800165e:	2301      	movs	r3, #1
 8001660:	425b      	negs	r3, r3
 8001662:	469c      	mov	ip, r3
 8001664:	002e      	movs	r6, r5
 8001666:	4640      	mov	r0, r8
 8001668:	2500      	movs	r5, #0
 800166a:	44e3      	add	fp, ip
 800166c:	0223      	lsls	r3, r4, #8
 800166e:	0e14      	lsrs	r4, r2, #24
 8001670:	431c      	orrs	r4, r3
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	4699      	mov	r9, r3
 8001676:	0423      	lsls	r3, r4, #16
 8001678:	0c1f      	lsrs	r7, r3, #16
 800167a:	0212      	lsls	r2, r2, #8
 800167c:	4649      	mov	r1, r9
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	9701      	str	r7, [sp, #4]
 8001682:	f7fe fde3 	bl	800024c <__aeabi_uidivmod>
 8001686:	0002      	movs	r2, r0
 8001688:	437a      	muls	r2, r7
 800168a:	040b      	lsls	r3, r1, #16
 800168c:	0c31      	lsrs	r1, r6, #16
 800168e:	4680      	mov	r8, r0
 8001690:	4319      	orrs	r1, r3
 8001692:	428a      	cmp	r2, r1
 8001694:	d907      	bls.n	80016a6 <__aeabi_ddiv+0x12e>
 8001696:	2301      	movs	r3, #1
 8001698:	425b      	negs	r3, r3
 800169a:	469c      	mov	ip, r3
 800169c:	1909      	adds	r1, r1, r4
 800169e:	44e0      	add	r8, ip
 80016a0:	428c      	cmp	r4, r1
 80016a2:	d800      	bhi.n	80016a6 <__aeabi_ddiv+0x12e>
 80016a4:	e207      	b.n	8001ab6 <__aeabi_ddiv+0x53e>
 80016a6:	1a88      	subs	r0, r1, r2
 80016a8:	4649      	mov	r1, r9
 80016aa:	f7fe fdcf 	bl	800024c <__aeabi_uidivmod>
 80016ae:	0409      	lsls	r1, r1, #16
 80016b0:	468c      	mov	ip, r1
 80016b2:	0431      	lsls	r1, r6, #16
 80016b4:	4666      	mov	r6, ip
 80016b6:	9a01      	ldr	r2, [sp, #4]
 80016b8:	0c09      	lsrs	r1, r1, #16
 80016ba:	4342      	muls	r2, r0
 80016bc:	0003      	movs	r3, r0
 80016be:	4331      	orrs	r1, r6
 80016c0:	428a      	cmp	r2, r1
 80016c2:	d904      	bls.n	80016ce <__aeabi_ddiv+0x156>
 80016c4:	1909      	adds	r1, r1, r4
 80016c6:	3b01      	subs	r3, #1
 80016c8:	428c      	cmp	r4, r1
 80016ca:	d800      	bhi.n	80016ce <__aeabi_ddiv+0x156>
 80016cc:	e1ed      	b.n	8001aaa <__aeabi_ddiv+0x532>
 80016ce:	1a88      	subs	r0, r1, r2
 80016d0:	4642      	mov	r2, r8
 80016d2:	0412      	lsls	r2, r2, #16
 80016d4:	431a      	orrs	r2, r3
 80016d6:	4690      	mov	r8, r2
 80016d8:	4641      	mov	r1, r8
 80016da:	9b00      	ldr	r3, [sp, #0]
 80016dc:	040e      	lsls	r6, r1, #16
 80016de:	0c1b      	lsrs	r3, r3, #16
 80016e0:	001f      	movs	r7, r3
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	9b00      	ldr	r3, [sp, #0]
 80016e6:	0c36      	lsrs	r6, r6, #16
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	0c19      	lsrs	r1, r3, #16
 80016ec:	000b      	movs	r3, r1
 80016ee:	4373      	muls	r3, r6
 80016f0:	0c12      	lsrs	r2, r2, #16
 80016f2:	437e      	muls	r6, r7
 80016f4:	9103      	str	r1, [sp, #12]
 80016f6:	4351      	muls	r1, r2
 80016f8:	437a      	muls	r2, r7
 80016fa:	0c1f      	lsrs	r7, r3, #16
 80016fc:	46bc      	mov	ip, r7
 80016fe:	1876      	adds	r6, r6, r1
 8001700:	4466      	add	r6, ip
 8001702:	42b1      	cmp	r1, r6
 8001704:	d903      	bls.n	800170e <__aeabi_ddiv+0x196>
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0249      	lsls	r1, r1, #9
 800170a:	468c      	mov	ip, r1
 800170c:	4462      	add	r2, ip
 800170e:	0c31      	lsrs	r1, r6, #16
 8001710:	188a      	adds	r2, r1, r2
 8001712:	0431      	lsls	r1, r6, #16
 8001714:	041e      	lsls	r6, r3, #16
 8001716:	0c36      	lsrs	r6, r6, #16
 8001718:	198e      	adds	r6, r1, r6
 800171a:	4290      	cmp	r0, r2
 800171c:	d302      	bcc.n	8001724 <__aeabi_ddiv+0x1ac>
 800171e:	d112      	bne.n	8001746 <__aeabi_ddiv+0x1ce>
 8001720:	42b5      	cmp	r5, r6
 8001722:	d210      	bcs.n	8001746 <__aeabi_ddiv+0x1ce>
 8001724:	4643      	mov	r3, r8
 8001726:	1e59      	subs	r1, r3, #1
 8001728:	9b00      	ldr	r3, [sp, #0]
 800172a:	469c      	mov	ip, r3
 800172c:	4465      	add	r5, ip
 800172e:	001f      	movs	r7, r3
 8001730:	429d      	cmp	r5, r3
 8001732:	419b      	sbcs	r3, r3
 8001734:	425b      	negs	r3, r3
 8001736:	191b      	adds	r3, r3, r4
 8001738:	18c0      	adds	r0, r0, r3
 800173a:	4284      	cmp	r4, r0
 800173c:	d200      	bcs.n	8001740 <__aeabi_ddiv+0x1c8>
 800173e:	e1a0      	b.n	8001a82 <__aeabi_ddiv+0x50a>
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x1cc>
 8001742:	e19b      	b.n	8001a7c <__aeabi_ddiv+0x504>
 8001744:	4688      	mov	r8, r1
 8001746:	1bae      	subs	r6, r5, r6
 8001748:	42b5      	cmp	r5, r6
 800174a:	41ad      	sbcs	r5, r5
 800174c:	1a80      	subs	r0, r0, r2
 800174e:	426d      	negs	r5, r5
 8001750:	1b40      	subs	r0, r0, r5
 8001752:	4284      	cmp	r4, r0
 8001754:	d100      	bne.n	8001758 <__aeabi_ddiv+0x1e0>
 8001756:	e1d5      	b.n	8001b04 <__aeabi_ddiv+0x58c>
 8001758:	4649      	mov	r1, r9
 800175a:	f7fe fd77 	bl	800024c <__aeabi_uidivmod>
 800175e:	9a01      	ldr	r2, [sp, #4]
 8001760:	040b      	lsls	r3, r1, #16
 8001762:	4342      	muls	r2, r0
 8001764:	0c31      	lsrs	r1, r6, #16
 8001766:	0005      	movs	r5, r0
 8001768:	4319      	orrs	r1, r3
 800176a:	428a      	cmp	r2, r1
 800176c:	d900      	bls.n	8001770 <__aeabi_ddiv+0x1f8>
 800176e:	e16c      	b.n	8001a4a <__aeabi_ddiv+0x4d2>
 8001770:	1a88      	subs	r0, r1, r2
 8001772:	4649      	mov	r1, r9
 8001774:	f7fe fd6a 	bl	800024c <__aeabi_uidivmod>
 8001778:	9a01      	ldr	r2, [sp, #4]
 800177a:	0436      	lsls	r6, r6, #16
 800177c:	4342      	muls	r2, r0
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c36      	lsrs	r6, r6, #16
 8001782:	0003      	movs	r3, r0
 8001784:	430e      	orrs	r6, r1
 8001786:	42b2      	cmp	r2, r6
 8001788:	d900      	bls.n	800178c <__aeabi_ddiv+0x214>
 800178a:	e153      	b.n	8001a34 <__aeabi_ddiv+0x4bc>
 800178c:	9803      	ldr	r0, [sp, #12]
 800178e:	1ab6      	subs	r6, r6, r2
 8001790:	0002      	movs	r2, r0
 8001792:	042d      	lsls	r5, r5, #16
 8001794:	431d      	orrs	r5, r3
 8001796:	9f02      	ldr	r7, [sp, #8]
 8001798:	042b      	lsls	r3, r5, #16
 800179a:	0c1b      	lsrs	r3, r3, #16
 800179c:	435a      	muls	r2, r3
 800179e:	437b      	muls	r3, r7
 80017a0:	469c      	mov	ip, r3
 80017a2:	0c29      	lsrs	r1, r5, #16
 80017a4:	4348      	muls	r0, r1
 80017a6:	0c13      	lsrs	r3, r2, #16
 80017a8:	4484      	add	ip, r0
 80017aa:	4463      	add	r3, ip
 80017ac:	4379      	muls	r1, r7
 80017ae:	4298      	cmp	r0, r3
 80017b0:	d903      	bls.n	80017ba <__aeabi_ddiv+0x242>
 80017b2:	2080      	movs	r0, #128	; 0x80
 80017b4:	0240      	lsls	r0, r0, #9
 80017b6:	4684      	mov	ip, r0
 80017b8:	4461      	add	r1, ip
 80017ba:	0c18      	lsrs	r0, r3, #16
 80017bc:	0412      	lsls	r2, r2, #16
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	0c12      	lsrs	r2, r2, #16
 80017c2:	1841      	adds	r1, r0, r1
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	428e      	cmp	r6, r1
 80017c8:	d200      	bcs.n	80017cc <__aeabi_ddiv+0x254>
 80017ca:	e0ff      	b.n	80019cc <__aeabi_ddiv+0x454>
 80017cc:	d100      	bne.n	80017d0 <__aeabi_ddiv+0x258>
 80017ce:	e0fa      	b.n	80019c6 <__aeabi_ddiv+0x44e>
 80017d0:	2301      	movs	r3, #1
 80017d2:	431d      	orrs	r5, r3
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <__aeabi_ddiv+0x384>)
 80017d6:	445a      	add	r2, fp
 80017d8:	2a00      	cmp	r2, #0
 80017da:	dc00      	bgt.n	80017de <__aeabi_ddiv+0x266>
 80017dc:	e0aa      	b.n	8001934 <__aeabi_ddiv+0x3bc>
 80017de:	076b      	lsls	r3, r5, #29
 80017e0:	d000      	beq.n	80017e4 <__aeabi_ddiv+0x26c>
 80017e2:	e13d      	b.n	8001a60 <__aeabi_ddiv+0x4e8>
 80017e4:	08ed      	lsrs	r5, r5, #3
 80017e6:	4643      	mov	r3, r8
 80017e8:	01db      	lsls	r3, r3, #7
 80017ea:	d506      	bpl.n	80017fa <__aeabi_ddiv+0x282>
 80017ec:	4642      	mov	r2, r8
 80017ee:	4b44      	ldr	r3, [pc, #272]	; (8001900 <__aeabi_ddiv+0x388>)
 80017f0:	401a      	ands	r2, r3
 80017f2:	4690      	mov	r8, r2
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	00d2      	lsls	r2, r2, #3
 80017f8:	445a      	add	r2, fp
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <__aeabi_ddiv+0x38c>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dd00      	ble.n	8001802 <__aeabi_ddiv+0x28a>
 8001800:	e71f      	b.n	8001642 <__aeabi_ddiv+0xca>
 8001802:	4643      	mov	r3, r8
 8001804:	075b      	lsls	r3, r3, #29
 8001806:	431d      	orrs	r5, r3
 8001808:	4643      	mov	r3, r8
 800180a:	0552      	lsls	r2, r2, #21
 800180c:	025c      	lsls	r4, r3, #9
 800180e:	0b24      	lsrs	r4, r4, #12
 8001810:	0d53      	lsrs	r3, r2, #21
 8001812:	e708      	b.n	8001626 <__aeabi_ddiv+0xae>
 8001814:	4652      	mov	r2, sl
 8001816:	4322      	orrs	r2, r4
 8001818:	d100      	bne.n	800181c <__aeabi_ddiv+0x2a4>
 800181a:	e07b      	b.n	8001914 <__aeabi_ddiv+0x39c>
 800181c:	2c00      	cmp	r4, #0
 800181e:	d100      	bne.n	8001822 <__aeabi_ddiv+0x2aa>
 8001820:	e0fa      	b.n	8001a18 <__aeabi_ddiv+0x4a0>
 8001822:	0020      	movs	r0, r4
 8001824:	f001 f9d4 	bl	8002bd0 <__clzsi2>
 8001828:	0002      	movs	r2, r0
 800182a:	3a0b      	subs	r2, #11
 800182c:	231d      	movs	r3, #29
 800182e:	0001      	movs	r1, r0
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	4652      	mov	r2, sl
 8001834:	3908      	subs	r1, #8
 8001836:	40da      	lsrs	r2, r3
 8001838:	408c      	lsls	r4, r1
 800183a:	4314      	orrs	r4, r2
 800183c:	4652      	mov	r2, sl
 800183e:	408a      	lsls	r2, r1
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <__aeabi_ddiv+0x390>)
 8001842:	4458      	add	r0, fp
 8001844:	469b      	mov	fp, r3
 8001846:	4483      	add	fp, r0
 8001848:	2000      	movs	r0, #0
 800184a:	e6d5      	b.n	80015f8 <__aeabi_ddiv+0x80>
 800184c:	464b      	mov	r3, r9
 800184e:	4323      	orrs	r3, r4
 8001850:	4698      	mov	r8, r3
 8001852:	d044      	beq.n	80018de <__aeabi_ddiv+0x366>
 8001854:	2c00      	cmp	r4, #0
 8001856:	d100      	bne.n	800185a <__aeabi_ddiv+0x2e2>
 8001858:	e0ce      	b.n	80019f8 <__aeabi_ddiv+0x480>
 800185a:	0020      	movs	r0, r4
 800185c:	f001 f9b8 	bl	8002bd0 <__clzsi2>
 8001860:	0001      	movs	r1, r0
 8001862:	0002      	movs	r2, r0
 8001864:	390b      	subs	r1, #11
 8001866:	231d      	movs	r3, #29
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	4649      	mov	r1, r9
 800186c:	0010      	movs	r0, r2
 800186e:	40d9      	lsrs	r1, r3
 8001870:	3808      	subs	r0, #8
 8001872:	4084      	lsls	r4, r0
 8001874:	000b      	movs	r3, r1
 8001876:	464d      	mov	r5, r9
 8001878:	4323      	orrs	r3, r4
 800187a:	4698      	mov	r8, r3
 800187c:	4085      	lsls	r5, r0
 800187e:	4823      	ldr	r0, [pc, #140]	; (800190c <__aeabi_ddiv+0x394>)
 8001880:	1a83      	subs	r3, r0, r2
 8001882:	469b      	mov	fp, r3
 8001884:	2300      	movs	r3, #0
 8001886:	4699      	mov	r9, r3
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	e69a      	b.n	80015c2 <__aeabi_ddiv+0x4a>
 800188c:	464b      	mov	r3, r9
 800188e:	4323      	orrs	r3, r4
 8001890:	4698      	mov	r8, r3
 8001892:	d11d      	bne.n	80018d0 <__aeabi_ddiv+0x358>
 8001894:	2308      	movs	r3, #8
 8001896:	4699      	mov	r9, r3
 8001898:	3b06      	subs	r3, #6
 800189a:	2500      	movs	r5, #0
 800189c:	4683      	mov	fp, r0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	e68f      	b.n	80015c2 <__aeabi_ddiv+0x4a>
 80018a2:	4652      	mov	r2, sl
 80018a4:	4322      	orrs	r2, r4
 80018a6:	d109      	bne.n	80018bc <__aeabi_ddiv+0x344>
 80018a8:	2302      	movs	r3, #2
 80018aa:	4649      	mov	r1, r9
 80018ac:	4319      	orrs	r1, r3
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <__aeabi_ddiv+0x398>)
 80018b0:	4689      	mov	r9, r1
 80018b2:	469c      	mov	ip, r3
 80018b4:	2400      	movs	r4, #0
 80018b6:	2002      	movs	r0, #2
 80018b8:	44e3      	add	fp, ip
 80018ba:	e69d      	b.n	80015f8 <__aeabi_ddiv+0x80>
 80018bc:	2303      	movs	r3, #3
 80018be:	464a      	mov	r2, r9
 80018c0:	431a      	orrs	r2, r3
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <__aeabi_ddiv+0x398>)
 80018c4:	4691      	mov	r9, r2
 80018c6:	469c      	mov	ip, r3
 80018c8:	4652      	mov	r2, sl
 80018ca:	2003      	movs	r0, #3
 80018cc:	44e3      	add	fp, ip
 80018ce:	e693      	b.n	80015f8 <__aeabi_ddiv+0x80>
 80018d0:	230c      	movs	r3, #12
 80018d2:	4699      	mov	r9, r3
 80018d4:	3b09      	subs	r3, #9
 80018d6:	46a0      	mov	r8, r4
 80018d8:	4683      	mov	fp, r0
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	e671      	b.n	80015c2 <__aeabi_ddiv+0x4a>
 80018de:	2304      	movs	r3, #4
 80018e0:	4699      	mov	r9, r3
 80018e2:	2300      	movs	r3, #0
 80018e4:	469b      	mov	fp, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	2500      	movs	r5, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	e669      	b.n	80015c2 <__aeabi_ddiv+0x4a>
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	000007ff 	.word	0x000007ff
 80018f4:	fffffc01 	.word	0xfffffc01
 80018f8:	0800a4cc 	.word	0x0800a4cc
 80018fc:	000003ff 	.word	0x000003ff
 8001900:	feffffff 	.word	0xfeffffff
 8001904:	000007fe 	.word	0x000007fe
 8001908:	000003f3 	.word	0x000003f3
 800190c:	fffffc0d 	.word	0xfffffc0d
 8001910:	fffff801 	.word	0xfffff801
 8001914:	4649      	mov	r1, r9
 8001916:	2301      	movs	r3, #1
 8001918:	4319      	orrs	r1, r3
 800191a:	4689      	mov	r9, r1
 800191c:	2400      	movs	r4, #0
 800191e:	2001      	movs	r0, #1
 8001920:	e66a      	b.n	80015f8 <__aeabi_ddiv+0x80>
 8001922:	2300      	movs	r3, #0
 8001924:	2480      	movs	r4, #128	; 0x80
 8001926:	469a      	mov	sl, r3
 8001928:	2500      	movs	r5, #0
 800192a:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <__aeabi_ddiv+0x5dc>)
 800192c:	0324      	lsls	r4, r4, #12
 800192e:	e67a      	b.n	8001626 <__aeabi_ddiv+0xae>
 8001930:	2501      	movs	r5, #1
 8001932:	426d      	negs	r5, r5
 8001934:	2301      	movs	r3, #1
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	2b38      	cmp	r3, #56	; 0x38
 800193a:	dd00      	ble.n	800193e <__aeabi_ddiv+0x3c6>
 800193c:	e670      	b.n	8001620 <__aeabi_ddiv+0xa8>
 800193e:	2b1f      	cmp	r3, #31
 8001940:	dc00      	bgt.n	8001944 <__aeabi_ddiv+0x3cc>
 8001942:	e0bf      	b.n	8001ac4 <__aeabi_ddiv+0x54c>
 8001944:	211f      	movs	r1, #31
 8001946:	4249      	negs	r1, r1
 8001948:	1a8a      	subs	r2, r1, r2
 800194a:	4641      	mov	r1, r8
 800194c:	40d1      	lsrs	r1, r2
 800194e:	000a      	movs	r2, r1
 8001950:	2b20      	cmp	r3, #32
 8001952:	d004      	beq.n	800195e <__aeabi_ddiv+0x3e6>
 8001954:	4641      	mov	r1, r8
 8001956:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <__aeabi_ddiv+0x5e0>)
 8001958:	445b      	add	r3, fp
 800195a:	4099      	lsls	r1, r3
 800195c:	430d      	orrs	r5, r1
 800195e:	1e6b      	subs	r3, r5, #1
 8001960:	419d      	sbcs	r5, r3
 8001962:	2307      	movs	r3, #7
 8001964:	432a      	orrs	r2, r5
 8001966:	001d      	movs	r5, r3
 8001968:	2400      	movs	r4, #0
 800196a:	4015      	ands	r5, r2
 800196c:	4213      	tst	r3, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0x3fa>
 8001970:	e0d4      	b.n	8001b1c <__aeabi_ddiv+0x5a4>
 8001972:	210f      	movs	r1, #15
 8001974:	2300      	movs	r3, #0
 8001976:	4011      	ands	r1, r2
 8001978:	2904      	cmp	r1, #4
 800197a:	d100      	bne.n	800197e <__aeabi_ddiv+0x406>
 800197c:	e0cb      	b.n	8001b16 <__aeabi_ddiv+0x59e>
 800197e:	1d11      	adds	r1, r2, #4
 8001980:	4291      	cmp	r1, r2
 8001982:	4192      	sbcs	r2, r2
 8001984:	4252      	negs	r2, r2
 8001986:	189b      	adds	r3, r3, r2
 8001988:	000a      	movs	r2, r1
 800198a:	0219      	lsls	r1, r3, #8
 800198c:	d400      	bmi.n	8001990 <__aeabi_ddiv+0x418>
 800198e:	e0c2      	b.n	8001b16 <__aeabi_ddiv+0x59e>
 8001990:	2301      	movs	r3, #1
 8001992:	2400      	movs	r4, #0
 8001994:	2500      	movs	r5, #0
 8001996:	e646      	b.n	8001626 <__aeabi_ddiv+0xae>
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	4641      	mov	r1, r8
 800199c:	031b      	lsls	r3, r3, #12
 800199e:	4219      	tst	r1, r3
 80019a0:	d008      	beq.n	80019b4 <__aeabi_ddiv+0x43c>
 80019a2:	421c      	tst	r4, r3
 80019a4:	d106      	bne.n	80019b4 <__aeabi_ddiv+0x43c>
 80019a6:	431c      	orrs	r4, r3
 80019a8:	0324      	lsls	r4, r4, #12
 80019aa:	46ba      	mov	sl, r7
 80019ac:	0015      	movs	r5, r2
 80019ae:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <__aeabi_ddiv+0x5dc>)
 80019b0:	0b24      	lsrs	r4, r4, #12
 80019b2:	e638      	b.n	8001626 <__aeabi_ddiv+0xae>
 80019b4:	2480      	movs	r4, #128	; 0x80
 80019b6:	4643      	mov	r3, r8
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	431c      	orrs	r4, r3
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	46b2      	mov	sl, r6
 80019c0:	4b64      	ldr	r3, [pc, #400]	; (8001b54 <__aeabi_ddiv+0x5dc>)
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	e62f      	b.n	8001626 <__aeabi_ddiv+0xae>
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_ddiv+0x454>
 80019ca:	e703      	b.n	80017d4 <__aeabi_ddiv+0x25c>
 80019cc:	19a6      	adds	r6, r4, r6
 80019ce:	1e68      	subs	r0, r5, #1
 80019d0:	42a6      	cmp	r6, r4
 80019d2:	d200      	bcs.n	80019d6 <__aeabi_ddiv+0x45e>
 80019d4:	e08d      	b.n	8001af2 <__aeabi_ddiv+0x57a>
 80019d6:	428e      	cmp	r6, r1
 80019d8:	d200      	bcs.n	80019dc <__aeabi_ddiv+0x464>
 80019da:	e0a3      	b.n	8001b24 <__aeabi_ddiv+0x5ac>
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x468>
 80019de:	e0b3      	b.n	8001b48 <__aeabi_ddiv+0x5d0>
 80019e0:	0005      	movs	r5, r0
 80019e2:	e6f5      	b.n	80017d0 <__aeabi_ddiv+0x258>
 80019e4:	42aa      	cmp	r2, r5
 80019e6:	d900      	bls.n	80019ea <__aeabi_ddiv+0x472>
 80019e8:	e639      	b.n	800165e <__aeabi_ddiv+0xe6>
 80019ea:	4643      	mov	r3, r8
 80019ec:	07de      	lsls	r6, r3, #31
 80019ee:	0858      	lsrs	r0, r3, #1
 80019f0:	086b      	lsrs	r3, r5, #1
 80019f2:	431e      	orrs	r6, r3
 80019f4:	07ed      	lsls	r5, r5, #31
 80019f6:	e639      	b.n	800166c <__aeabi_ddiv+0xf4>
 80019f8:	4648      	mov	r0, r9
 80019fa:	f001 f8e9 	bl	8002bd0 <__clzsi2>
 80019fe:	0001      	movs	r1, r0
 8001a00:	0002      	movs	r2, r0
 8001a02:	3115      	adds	r1, #21
 8001a04:	3220      	adds	r2, #32
 8001a06:	291c      	cmp	r1, #28
 8001a08:	dc00      	bgt.n	8001a0c <__aeabi_ddiv+0x494>
 8001a0a:	e72c      	b.n	8001866 <__aeabi_ddiv+0x2ee>
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	3808      	subs	r0, #8
 8001a10:	4083      	lsls	r3, r0
 8001a12:	2500      	movs	r5, #0
 8001a14:	4698      	mov	r8, r3
 8001a16:	e732      	b.n	800187e <__aeabi_ddiv+0x306>
 8001a18:	f001 f8da 	bl	8002bd0 <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	001a      	movs	r2, r3
 8001a20:	3215      	adds	r2, #21
 8001a22:	3020      	adds	r0, #32
 8001a24:	2a1c      	cmp	r2, #28
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_ddiv+0x4b2>
 8001a28:	e700      	b.n	800182c <__aeabi_ddiv+0x2b4>
 8001a2a:	4654      	mov	r4, sl
 8001a2c:	3b08      	subs	r3, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	409c      	lsls	r4, r3
 8001a32:	e705      	b.n	8001840 <__aeabi_ddiv+0x2c8>
 8001a34:	1936      	adds	r6, r6, r4
 8001a36:	3b01      	subs	r3, #1
 8001a38:	42b4      	cmp	r4, r6
 8001a3a:	d900      	bls.n	8001a3e <__aeabi_ddiv+0x4c6>
 8001a3c:	e6a6      	b.n	800178c <__aeabi_ddiv+0x214>
 8001a3e:	42b2      	cmp	r2, r6
 8001a40:	d800      	bhi.n	8001a44 <__aeabi_ddiv+0x4cc>
 8001a42:	e6a3      	b.n	800178c <__aeabi_ddiv+0x214>
 8001a44:	1e83      	subs	r3, r0, #2
 8001a46:	1936      	adds	r6, r6, r4
 8001a48:	e6a0      	b.n	800178c <__aeabi_ddiv+0x214>
 8001a4a:	1909      	adds	r1, r1, r4
 8001a4c:	3d01      	subs	r5, #1
 8001a4e:	428c      	cmp	r4, r1
 8001a50:	d900      	bls.n	8001a54 <__aeabi_ddiv+0x4dc>
 8001a52:	e68d      	b.n	8001770 <__aeabi_ddiv+0x1f8>
 8001a54:	428a      	cmp	r2, r1
 8001a56:	d800      	bhi.n	8001a5a <__aeabi_ddiv+0x4e2>
 8001a58:	e68a      	b.n	8001770 <__aeabi_ddiv+0x1f8>
 8001a5a:	1e85      	subs	r5, r0, #2
 8001a5c:	1909      	adds	r1, r1, r4
 8001a5e:	e687      	b.n	8001770 <__aeabi_ddiv+0x1f8>
 8001a60:	230f      	movs	r3, #15
 8001a62:	402b      	ands	r3, r5
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d100      	bne.n	8001a6a <__aeabi_ddiv+0x4f2>
 8001a68:	e6bc      	b.n	80017e4 <__aeabi_ddiv+0x26c>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	42ab      	cmp	r3, r5
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	3504      	adds	r5, #4
 8001a74:	425b      	negs	r3, r3
 8001a76:	08ed      	lsrs	r5, r5, #3
 8001a78:	4498      	add	r8, r3
 8001a7a:	e6b4      	b.n	80017e6 <__aeabi_ddiv+0x26e>
 8001a7c:	42af      	cmp	r7, r5
 8001a7e:	d900      	bls.n	8001a82 <__aeabi_ddiv+0x50a>
 8001a80:	e660      	b.n	8001744 <__aeabi_ddiv+0x1cc>
 8001a82:	4282      	cmp	r2, r0
 8001a84:	d804      	bhi.n	8001a90 <__aeabi_ddiv+0x518>
 8001a86:	d000      	beq.n	8001a8a <__aeabi_ddiv+0x512>
 8001a88:	e65c      	b.n	8001744 <__aeabi_ddiv+0x1cc>
 8001a8a:	42ae      	cmp	r6, r5
 8001a8c:	d800      	bhi.n	8001a90 <__aeabi_ddiv+0x518>
 8001a8e:	e659      	b.n	8001744 <__aeabi_ddiv+0x1cc>
 8001a90:	2302      	movs	r3, #2
 8001a92:	425b      	negs	r3, r3
 8001a94:	469c      	mov	ip, r3
 8001a96:	9b00      	ldr	r3, [sp, #0]
 8001a98:	44e0      	add	r8, ip
 8001a9a:	469c      	mov	ip, r3
 8001a9c:	4465      	add	r5, ip
 8001a9e:	429d      	cmp	r5, r3
 8001aa0:	419b      	sbcs	r3, r3
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	191b      	adds	r3, r3, r4
 8001aa6:	18c0      	adds	r0, r0, r3
 8001aa8:	e64d      	b.n	8001746 <__aeabi_ddiv+0x1ce>
 8001aaa:	428a      	cmp	r2, r1
 8001aac:	d800      	bhi.n	8001ab0 <__aeabi_ddiv+0x538>
 8001aae:	e60e      	b.n	80016ce <__aeabi_ddiv+0x156>
 8001ab0:	1e83      	subs	r3, r0, #2
 8001ab2:	1909      	adds	r1, r1, r4
 8001ab4:	e60b      	b.n	80016ce <__aeabi_ddiv+0x156>
 8001ab6:	428a      	cmp	r2, r1
 8001ab8:	d800      	bhi.n	8001abc <__aeabi_ddiv+0x544>
 8001aba:	e5f4      	b.n	80016a6 <__aeabi_ddiv+0x12e>
 8001abc:	1e83      	subs	r3, r0, #2
 8001abe:	4698      	mov	r8, r3
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	e5f0      	b.n	80016a6 <__aeabi_ddiv+0x12e>
 8001ac4:	4925      	ldr	r1, [pc, #148]	; (8001b5c <__aeabi_ddiv+0x5e4>)
 8001ac6:	0028      	movs	r0, r5
 8001ac8:	4459      	add	r1, fp
 8001aca:	408d      	lsls	r5, r1
 8001acc:	4642      	mov	r2, r8
 8001ace:	408a      	lsls	r2, r1
 8001ad0:	1e69      	subs	r1, r5, #1
 8001ad2:	418d      	sbcs	r5, r1
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	40d8      	lsrs	r0, r3
 8001ad8:	40d9      	lsrs	r1, r3
 8001ada:	4302      	orrs	r2, r0
 8001adc:	432a      	orrs	r2, r5
 8001ade:	000b      	movs	r3, r1
 8001ae0:	0751      	lsls	r1, r2, #29
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_ddiv+0x56e>
 8001ae4:	e751      	b.n	800198a <__aeabi_ddiv+0x412>
 8001ae6:	210f      	movs	r1, #15
 8001ae8:	4011      	ands	r1, r2
 8001aea:	2904      	cmp	r1, #4
 8001aec:	d000      	beq.n	8001af0 <__aeabi_ddiv+0x578>
 8001aee:	e746      	b.n	800197e <__aeabi_ddiv+0x406>
 8001af0:	e74b      	b.n	800198a <__aeabi_ddiv+0x412>
 8001af2:	0005      	movs	r5, r0
 8001af4:	428e      	cmp	r6, r1
 8001af6:	d000      	beq.n	8001afa <__aeabi_ddiv+0x582>
 8001af8:	e66a      	b.n	80017d0 <__aeabi_ddiv+0x258>
 8001afa:	9a00      	ldr	r2, [sp, #0]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d000      	beq.n	8001b02 <__aeabi_ddiv+0x58a>
 8001b00:	e666      	b.n	80017d0 <__aeabi_ddiv+0x258>
 8001b02:	e667      	b.n	80017d4 <__aeabi_ddiv+0x25c>
 8001b04:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <__aeabi_ddiv+0x5e8>)
 8001b06:	445a      	add	r2, fp
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	dc00      	bgt.n	8001b0e <__aeabi_ddiv+0x596>
 8001b0c:	e710      	b.n	8001930 <__aeabi_ddiv+0x3b8>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2500      	movs	r5, #0
 8001b12:	4498      	add	r8, r3
 8001b14:	e667      	b.n	80017e6 <__aeabi_ddiv+0x26e>
 8001b16:	075d      	lsls	r5, r3, #29
 8001b18:	025b      	lsls	r3, r3, #9
 8001b1a:	0b1c      	lsrs	r4, r3, #12
 8001b1c:	08d2      	lsrs	r2, r2, #3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4315      	orrs	r5, r2
 8001b22:	e580      	b.n	8001626 <__aeabi_ddiv+0xae>
 8001b24:	9800      	ldr	r0, [sp, #0]
 8001b26:	3d02      	subs	r5, #2
 8001b28:	0042      	lsls	r2, r0, #1
 8001b2a:	4282      	cmp	r2, r0
 8001b2c:	41bf      	sbcs	r7, r7
 8001b2e:	427f      	negs	r7, r7
 8001b30:	193c      	adds	r4, r7, r4
 8001b32:	1936      	adds	r6, r6, r4
 8001b34:	9200      	str	r2, [sp, #0]
 8001b36:	e7dd      	b.n	8001af4 <__aeabi_ddiv+0x57c>
 8001b38:	2480      	movs	r4, #128	; 0x80
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0324      	lsls	r4, r4, #12
 8001b3e:	431c      	orrs	r4, r3
 8001b40:	0324      	lsls	r4, r4, #12
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__aeabi_ddiv+0x5dc>)
 8001b44:	0b24      	lsrs	r4, r4, #12
 8001b46:	e56e      	b.n	8001626 <__aeabi_ddiv+0xae>
 8001b48:	9a00      	ldr	r2, [sp, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d3ea      	bcc.n	8001b24 <__aeabi_ddiv+0x5ac>
 8001b4e:	0005      	movs	r5, r0
 8001b50:	e7d3      	b.n	8001afa <__aeabi_ddiv+0x582>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	0000043e 	.word	0x0000043e
 8001b5c:	0000041e 	.word	0x0000041e
 8001b60:	000003ff 	.word	0x000003ff

08001b64 <__eqdf2>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	464e      	mov	r6, r9
 8001b68:	4645      	mov	r5, r8
 8001b6a:	46de      	mov	lr, fp
 8001b6c:	4657      	mov	r7, sl
 8001b6e:	4690      	mov	r8, r2
 8001b70:	b5e0      	push	{r5, r6, r7, lr}
 8001b72:	0017      	movs	r7, r2
 8001b74:	031a      	lsls	r2, r3, #12
 8001b76:	0b12      	lsrs	r2, r2, #12
 8001b78:	0005      	movs	r5, r0
 8001b7a:	4684      	mov	ip, r0
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <__eqdf2+0x80>)
 8001b7e:	030e      	lsls	r6, r1, #12
 8001b80:	004c      	lsls	r4, r1, #1
 8001b82:	4691      	mov	r9, r2
 8001b84:	005a      	lsls	r2, r3, #1
 8001b86:	0fdb      	lsrs	r3, r3, #31
 8001b88:	469b      	mov	fp, r3
 8001b8a:	0b36      	lsrs	r6, r6, #12
 8001b8c:	0d64      	lsrs	r4, r4, #21
 8001b8e:	0fc9      	lsrs	r1, r1, #31
 8001b90:	0d52      	lsrs	r2, r2, #21
 8001b92:	4284      	cmp	r4, r0
 8001b94:	d019      	beq.n	8001bca <__eqdf2+0x66>
 8001b96:	4282      	cmp	r2, r0
 8001b98:	d010      	beq.n	8001bbc <__eqdf2+0x58>
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	4294      	cmp	r4, r2
 8001b9e:	d10e      	bne.n	8001bbe <__eqdf2+0x5a>
 8001ba0:	454e      	cmp	r6, r9
 8001ba2:	d10c      	bne.n	8001bbe <__eqdf2+0x5a>
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	45c4      	cmp	ip, r8
 8001ba8:	d109      	bne.n	8001bbe <__eqdf2+0x5a>
 8001baa:	4559      	cmp	r1, fp
 8001bac:	d017      	beq.n	8001bde <__eqdf2+0x7a>
 8001bae:	2c00      	cmp	r4, #0
 8001bb0:	d105      	bne.n	8001bbe <__eqdf2+0x5a>
 8001bb2:	0030      	movs	r0, r6
 8001bb4:	4328      	orrs	r0, r5
 8001bb6:	1e43      	subs	r3, r0, #1
 8001bb8:	4198      	sbcs	r0, r3
 8001bba:	e000      	b.n	8001bbe <__eqdf2+0x5a>
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	bcf0      	pop	{r4, r5, r6, r7}
 8001bc0:	46bb      	mov	fp, r7
 8001bc2:	46b2      	mov	sl, r6
 8001bc4:	46a9      	mov	r9, r5
 8001bc6:	46a0      	mov	r8, r4
 8001bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bca:	0033      	movs	r3, r6
 8001bcc:	2001      	movs	r0, #1
 8001bce:	432b      	orrs	r3, r5
 8001bd0:	d1f5      	bne.n	8001bbe <__eqdf2+0x5a>
 8001bd2:	42a2      	cmp	r2, r4
 8001bd4:	d1f3      	bne.n	8001bbe <__eqdf2+0x5a>
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	433b      	orrs	r3, r7
 8001bda:	d1f0      	bne.n	8001bbe <__eqdf2+0x5a>
 8001bdc:	e7e2      	b.n	8001ba4 <__eqdf2+0x40>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7ed      	b.n	8001bbe <__eqdf2+0x5a>
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	000007ff 	.word	0x000007ff

08001be8 <__gedf2>:
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bea:	4647      	mov	r7, r8
 8001bec:	46ce      	mov	lr, r9
 8001bee:	0004      	movs	r4, r0
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	0016      	movs	r6, r2
 8001bf4:	031b      	lsls	r3, r3, #12
 8001bf6:	0b1b      	lsrs	r3, r3, #12
 8001bf8:	4d2d      	ldr	r5, [pc, #180]	; (8001cb0 <__gedf2+0xc8>)
 8001bfa:	004a      	lsls	r2, r1, #1
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	0043      	lsls	r3, r0, #1
 8001c02:	030f      	lsls	r7, r1, #12
 8001c04:	46a4      	mov	ip, r4
 8001c06:	46b0      	mov	r8, r6
 8001c08:	0b3f      	lsrs	r7, r7, #12
 8001c0a:	0d52      	lsrs	r2, r2, #21
 8001c0c:	0fc9      	lsrs	r1, r1, #31
 8001c0e:	0d5b      	lsrs	r3, r3, #21
 8001c10:	0fc0      	lsrs	r0, r0, #31
 8001c12:	42aa      	cmp	r2, r5
 8001c14:	d021      	beq.n	8001c5a <__gedf2+0x72>
 8001c16:	42ab      	cmp	r3, r5
 8001c18:	d013      	beq.n	8001c42 <__gedf2+0x5a>
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d122      	bne.n	8001c64 <__gedf2+0x7c>
 8001c1e:	433c      	orrs	r4, r7
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <__gedf2+0x42>
 8001c24:	464d      	mov	r5, r9
 8001c26:	432e      	orrs	r6, r5
 8001c28:	d022      	beq.n	8001c70 <__gedf2+0x88>
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d010      	beq.n	8001c50 <__gedf2+0x68>
 8001c2e:	4281      	cmp	r1, r0
 8001c30:	d022      	beq.n	8001c78 <__gedf2+0x90>
 8001c32:	2002      	movs	r0, #2
 8001c34:	3901      	subs	r1, #1
 8001c36:	4008      	ands	r0, r1
 8001c38:	3801      	subs	r0, #1
 8001c3a:	bcc0      	pop	{r6, r7}
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	46b0      	mov	r8, r6
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	464d      	mov	r5, r9
 8001c44:	432e      	orrs	r6, r5
 8001c46:	d129      	bne.n	8001c9c <__gedf2+0xb4>
 8001c48:	2a00      	cmp	r2, #0
 8001c4a:	d1f0      	bne.n	8001c2e <__gedf2+0x46>
 8001c4c:	433c      	orrs	r4, r7
 8001c4e:	d1ee      	bne.n	8001c2e <__gedf2+0x46>
 8001c50:	2800      	cmp	r0, #0
 8001c52:	d1f2      	bne.n	8001c3a <__gedf2+0x52>
 8001c54:	2001      	movs	r0, #1
 8001c56:	4240      	negs	r0, r0
 8001c58:	e7ef      	b.n	8001c3a <__gedf2+0x52>
 8001c5a:	003d      	movs	r5, r7
 8001c5c:	4325      	orrs	r5, r4
 8001c5e:	d11d      	bne.n	8001c9c <__gedf2+0xb4>
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d0ee      	beq.n	8001c42 <__gedf2+0x5a>
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e2      	bne.n	8001c2e <__gedf2+0x46>
 8001c68:	464c      	mov	r4, r9
 8001c6a:	4326      	orrs	r6, r4
 8001c6c:	d1df      	bne.n	8001c2e <__gedf2+0x46>
 8001c6e:	e7e0      	b.n	8001c32 <__gedf2+0x4a>
 8001c70:	2000      	movs	r0, #0
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d0e1      	beq.n	8001c3a <__gedf2+0x52>
 8001c76:	e7dc      	b.n	8001c32 <__gedf2+0x4a>
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dc0a      	bgt.n	8001c92 <__gedf2+0xaa>
 8001c7c:	dbe8      	blt.n	8001c50 <__gedf2+0x68>
 8001c7e:	454f      	cmp	r7, r9
 8001c80:	d8d7      	bhi.n	8001c32 <__gedf2+0x4a>
 8001c82:	d00e      	beq.n	8001ca2 <__gedf2+0xba>
 8001c84:	2000      	movs	r0, #0
 8001c86:	454f      	cmp	r7, r9
 8001c88:	d2d7      	bcs.n	8001c3a <__gedf2+0x52>
 8001c8a:	2900      	cmp	r1, #0
 8001c8c:	d0e2      	beq.n	8001c54 <__gedf2+0x6c>
 8001c8e:	0008      	movs	r0, r1
 8001c90:	e7d3      	b.n	8001c3a <__gedf2+0x52>
 8001c92:	4243      	negs	r3, r0
 8001c94:	4158      	adcs	r0, r3
 8001c96:	0040      	lsls	r0, r0, #1
 8001c98:	3801      	subs	r0, #1
 8001c9a:	e7ce      	b.n	8001c3a <__gedf2+0x52>
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	4240      	negs	r0, r0
 8001ca0:	e7cb      	b.n	8001c3a <__gedf2+0x52>
 8001ca2:	45c4      	cmp	ip, r8
 8001ca4:	d8c5      	bhi.n	8001c32 <__gedf2+0x4a>
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	45c4      	cmp	ip, r8
 8001caa:	d2c6      	bcs.n	8001c3a <__gedf2+0x52>
 8001cac:	e7ed      	b.n	8001c8a <__gedf2+0xa2>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	000007ff 	.word	0x000007ff

08001cb4 <__ledf2>:
 8001cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb6:	4647      	mov	r7, r8
 8001cb8:	46ce      	mov	lr, r9
 8001cba:	0004      	movs	r4, r0
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	0016      	movs	r6, r2
 8001cc0:	031b      	lsls	r3, r3, #12
 8001cc2:	0b1b      	lsrs	r3, r3, #12
 8001cc4:	4d2c      	ldr	r5, [pc, #176]	; (8001d78 <__ledf2+0xc4>)
 8001cc6:	004a      	lsls	r2, r1, #1
 8001cc8:	4699      	mov	r9, r3
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	0043      	lsls	r3, r0, #1
 8001cce:	030f      	lsls	r7, r1, #12
 8001cd0:	46a4      	mov	ip, r4
 8001cd2:	46b0      	mov	r8, r6
 8001cd4:	0b3f      	lsrs	r7, r7, #12
 8001cd6:	0d52      	lsrs	r2, r2, #21
 8001cd8:	0fc9      	lsrs	r1, r1, #31
 8001cda:	0d5b      	lsrs	r3, r3, #21
 8001cdc:	0fc0      	lsrs	r0, r0, #31
 8001cde:	42aa      	cmp	r2, r5
 8001ce0:	d00d      	beq.n	8001cfe <__ledf2+0x4a>
 8001ce2:	42ab      	cmp	r3, r5
 8001ce4:	d010      	beq.n	8001d08 <__ledf2+0x54>
 8001ce6:	2a00      	cmp	r2, #0
 8001ce8:	d127      	bne.n	8001d3a <__ledf2+0x86>
 8001cea:	433c      	orrs	r4, r7
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <__ledf2+0x60>
 8001cf0:	464d      	mov	r5, r9
 8001cf2:	432e      	orrs	r6, r5
 8001cf4:	d10e      	bne.n	8001d14 <__ledf2+0x60>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	2c00      	cmp	r4, #0
 8001cfa:	d015      	beq.n	8001d28 <__ledf2+0x74>
 8001cfc:	e00e      	b.n	8001d1c <__ledf2+0x68>
 8001cfe:	003d      	movs	r5, r7
 8001d00:	4325      	orrs	r5, r4
 8001d02:	d110      	bne.n	8001d26 <__ledf2+0x72>
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d118      	bne.n	8001d3a <__ledf2+0x86>
 8001d08:	464d      	mov	r5, r9
 8001d0a:	432e      	orrs	r6, r5
 8001d0c:	d10b      	bne.n	8001d26 <__ledf2+0x72>
 8001d0e:	2a00      	cmp	r2, #0
 8001d10:	d102      	bne.n	8001d18 <__ledf2+0x64>
 8001d12:	433c      	orrs	r4, r7
 8001d14:	2c00      	cmp	r4, #0
 8001d16:	d00b      	beq.n	8001d30 <__ledf2+0x7c>
 8001d18:	4281      	cmp	r1, r0
 8001d1a:	d014      	beq.n	8001d46 <__ledf2+0x92>
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	3901      	subs	r1, #1
 8001d20:	4008      	ands	r0, r1
 8001d22:	3801      	subs	r0, #1
 8001d24:	e000      	b.n	8001d28 <__ledf2+0x74>
 8001d26:	2002      	movs	r0, #2
 8001d28:	bcc0      	pop	{r6, r7}
 8001d2a:	46b9      	mov	r9, r7
 8001d2c:	46b0      	mov	r8, r6
 8001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d1f9      	bne.n	8001d28 <__ledf2+0x74>
 8001d34:	2001      	movs	r0, #1
 8001d36:	4240      	negs	r0, r0
 8001d38:	e7f6      	b.n	8001d28 <__ledf2+0x74>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ec      	bne.n	8001d18 <__ledf2+0x64>
 8001d3e:	464c      	mov	r4, r9
 8001d40:	4326      	orrs	r6, r4
 8001d42:	d1e9      	bne.n	8001d18 <__ledf2+0x64>
 8001d44:	e7ea      	b.n	8001d1c <__ledf2+0x68>
 8001d46:	429a      	cmp	r2, r3
 8001d48:	dd04      	ble.n	8001d54 <__ledf2+0xa0>
 8001d4a:	4243      	negs	r3, r0
 8001d4c:	4158      	adcs	r0, r3
 8001d4e:	0040      	lsls	r0, r0, #1
 8001d50:	3801      	subs	r0, #1
 8001d52:	e7e9      	b.n	8001d28 <__ledf2+0x74>
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbeb      	blt.n	8001d30 <__ledf2+0x7c>
 8001d58:	454f      	cmp	r7, r9
 8001d5a:	d8df      	bhi.n	8001d1c <__ledf2+0x68>
 8001d5c:	d006      	beq.n	8001d6c <__ledf2+0xb8>
 8001d5e:	2000      	movs	r0, #0
 8001d60:	454f      	cmp	r7, r9
 8001d62:	d2e1      	bcs.n	8001d28 <__ledf2+0x74>
 8001d64:	2900      	cmp	r1, #0
 8001d66:	d0e5      	beq.n	8001d34 <__ledf2+0x80>
 8001d68:	0008      	movs	r0, r1
 8001d6a:	e7dd      	b.n	8001d28 <__ledf2+0x74>
 8001d6c:	45c4      	cmp	ip, r8
 8001d6e:	d8d5      	bhi.n	8001d1c <__ledf2+0x68>
 8001d70:	2000      	movs	r0, #0
 8001d72:	45c4      	cmp	ip, r8
 8001d74:	d2d8      	bcs.n	8001d28 <__ledf2+0x74>
 8001d76:	e7f5      	b.n	8001d64 <__ledf2+0xb0>
 8001d78:	000007ff 	.word	0x000007ff

08001d7c <__aeabi_dmul>:
 8001d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7e:	4657      	mov	r7, sl
 8001d80:	464e      	mov	r6, r9
 8001d82:	4645      	mov	r5, r8
 8001d84:	46de      	mov	lr, fp
 8001d86:	b5e0      	push	{r5, r6, r7, lr}
 8001d88:	4698      	mov	r8, r3
 8001d8a:	030c      	lsls	r4, r1, #12
 8001d8c:	004b      	lsls	r3, r1, #1
 8001d8e:	0006      	movs	r6, r0
 8001d90:	4692      	mov	sl, r2
 8001d92:	b087      	sub	sp, #28
 8001d94:	0b24      	lsrs	r4, r4, #12
 8001d96:	0d5b      	lsrs	r3, r3, #21
 8001d98:	0fcf      	lsrs	r7, r1, #31
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dmul+0x24>
 8001d9e:	e15c      	b.n	800205a <__aeabi_dmul+0x2de>
 8001da0:	4ad9      	ldr	r2, [pc, #868]	; (8002108 <__aeabi_dmul+0x38c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dmul+0x2c>
 8001da6:	e175      	b.n	8002094 <__aeabi_dmul+0x318>
 8001da8:	0f42      	lsrs	r2, r0, #29
 8001daa:	00e4      	lsls	r4, r4, #3
 8001dac:	4314      	orrs	r4, r2
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	0412      	lsls	r2, r2, #16
 8001db2:	4314      	orrs	r4, r2
 8001db4:	4ad5      	ldr	r2, [pc, #852]	; (800210c <__aeabi_dmul+0x390>)
 8001db6:	00c5      	lsls	r5, r0, #3
 8001db8:	4694      	mov	ip, r2
 8001dba:	4463      	add	r3, ip
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	4642      	mov	r2, r8
 8001dc8:	031e      	lsls	r6, r3, #12
 8001dca:	0fd2      	lsrs	r2, r2, #31
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4650      	mov	r0, sl
 8001dd0:	4690      	mov	r8, r2
 8001dd2:	0b36      	lsrs	r6, r6, #12
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dmul+0x5e>
 8001dd8:	e120      	b.n	800201c <__aeabi_dmul+0x2a0>
 8001dda:	4acb      	ldr	r2, [pc, #812]	; (8002108 <__aeabi_dmul+0x38c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dmul+0x66>
 8001de0:	e162      	b.n	80020a8 <__aeabi_dmul+0x32c>
 8001de2:	49ca      	ldr	r1, [pc, #808]	; (800210c <__aeabi_dmul+0x390>)
 8001de4:	0f42      	lsrs	r2, r0, #29
 8001de6:	468c      	mov	ip, r1
 8001de8:	9900      	ldr	r1, [sp, #0]
 8001dea:	4463      	add	r3, ip
 8001dec:	00f6      	lsls	r6, r6, #3
 8001dee:	468c      	mov	ip, r1
 8001df0:	4316      	orrs	r6, r2
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	449c      	add	ip, r3
 8001df6:	0412      	lsls	r2, r2, #16
 8001df8:	4663      	mov	r3, ip
 8001dfa:	4316      	orrs	r6, r2
 8001dfc:	00c2      	lsls	r2, r0, #3
 8001dfe:	2000      	movs	r0, #0
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	9900      	ldr	r1, [sp, #0]
 8001e04:	4643      	mov	r3, r8
 8001e06:	3101      	adds	r1, #1
 8001e08:	468c      	mov	ip, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	407b      	eors	r3, r7
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	290f      	cmp	r1, #15
 8001e12:	d826      	bhi.n	8001e62 <__aeabi_dmul+0xe6>
 8001e14:	4bbe      	ldr	r3, [pc, #760]	; (8002110 <__aeabi_dmul+0x394>)
 8001e16:	0089      	lsls	r1, r1, #2
 8001e18:	5859      	ldr	r1, [r3, r1]
 8001e1a:	468f      	mov	pc, r1
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	0034      	movs	r4, r6
 8001e22:	0015      	movs	r5, r2
 8001e24:	4683      	mov	fp, r0
 8001e26:	465b      	mov	r3, fp
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d016      	beq.n	8001e5a <__aeabi_dmul+0xde>
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dmul+0xb6>
 8001e30:	e203      	b.n	800223a <__aeabi_dmul+0x4be>
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d000      	beq.n	8001e38 <__aeabi_dmul+0xbc>
 8001e36:	e0cd      	b.n	8001fd4 <__aeabi_dmul+0x258>
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2400      	movs	r4, #0
 8001e3c:	2500      	movs	r5, #0
 8001e3e:	9b01      	ldr	r3, [sp, #4]
 8001e40:	0512      	lsls	r2, r2, #20
 8001e42:	4322      	orrs	r2, r4
 8001e44:	07db      	lsls	r3, r3, #31
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0028      	movs	r0, r5
 8001e4a:	0011      	movs	r1, r2
 8001e4c:	b007      	add	sp, #28
 8001e4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e50:	46bb      	mov	fp, r7
 8001e52:	46b2      	mov	sl, r6
 8001e54:	46a9      	mov	r9, r5
 8001e56:	46a0      	mov	r8, r4
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	4aaa      	ldr	r2, [pc, #680]	; (8002108 <__aeabi_dmul+0x38c>)
 8001e60:	e7ed      	b.n	8001e3e <__aeabi_dmul+0xc2>
 8001e62:	0c28      	lsrs	r0, r5, #16
 8001e64:	042d      	lsls	r5, r5, #16
 8001e66:	0c2d      	lsrs	r5, r5, #16
 8001e68:	002b      	movs	r3, r5
 8001e6a:	0c11      	lsrs	r1, r2, #16
 8001e6c:	0412      	lsls	r2, r2, #16
 8001e6e:	0c12      	lsrs	r2, r2, #16
 8001e70:	4353      	muls	r3, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	002f      	movs	r7, r5
 8001e78:	4343      	muls	r3, r0
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	434f      	muls	r7, r1
 8001e7e:	444f      	add	r7, r9
 8001e80:	46bb      	mov	fp, r7
 8001e82:	4647      	mov	r7, r8
 8001e84:	000b      	movs	r3, r1
 8001e86:	0c3f      	lsrs	r7, r7, #16
 8001e88:	46ba      	mov	sl, r7
 8001e8a:	4343      	muls	r3, r0
 8001e8c:	44da      	add	sl, fp
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	45d1      	cmp	r9, sl
 8001e92:	d904      	bls.n	8001e9e <__aeabi_dmul+0x122>
 8001e94:	2780      	movs	r7, #128	; 0x80
 8001e96:	027f      	lsls	r7, r7, #9
 8001e98:	46b9      	mov	r9, r7
 8001e9a:	444b      	add	r3, r9
 8001e9c:	9302      	str	r3, [sp, #8]
 8001e9e:	4653      	mov	r3, sl
 8001ea0:	0c1b      	lsrs	r3, r3, #16
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	4653      	mov	r3, sl
 8001ea6:	041f      	lsls	r7, r3, #16
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	041b      	lsls	r3, r3, #16
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	4698      	mov	r8, r3
 8001eb0:	003b      	movs	r3, r7
 8001eb2:	4443      	add	r3, r8
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	0c33      	lsrs	r3, r6, #16
 8001eb8:	0436      	lsls	r6, r6, #16
 8001eba:	0c36      	lsrs	r6, r6, #16
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	0033      	movs	r3, r6
 8001ec0:	4343      	muls	r3, r0
 8001ec2:	4699      	mov	r9, r3
 8001ec4:	4643      	mov	r3, r8
 8001ec6:	4343      	muls	r3, r0
 8001ec8:	002f      	movs	r7, r5
 8001eca:	469a      	mov	sl, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	4377      	muls	r7, r6
 8001ed0:	435d      	muls	r5, r3
 8001ed2:	0c38      	lsrs	r0, r7, #16
 8001ed4:	444d      	add	r5, r9
 8001ed6:	1945      	adds	r5, r0, r5
 8001ed8:	45a9      	cmp	r9, r5
 8001eda:	d903      	bls.n	8001ee4 <__aeabi_dmul+0x168>
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4699      	mov	r9, r3
 8001ee2:	44ca      	add	sl, r9
 8001ee4:	043f      	lsls	r7, r7, #16
 8001ee6:	0c28      	lsrs	r0, r5, #16
 8001ee8:	0c3f      	lsrs	r7, r7, #16
 8001eea:	042d      	lsls	r5, r5, #16
 8001eec:	19ed      	adds	r5, r5, r7
 8001eee:	0c27      	lsrs	r7, r4, #16
 8001ef0:	0424      	lsls	r4, r4, #16
 8001ef2:	0c24      	lsrs	r4, r4, #16
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	0020      	movs	r0, r4
 8001ef8:	4350      	muls	r0, r2
 8001efa:	437a      	muls	r2, r7
 8001efc:	4691      	mov	r9, r2
 8001efe:	003a      	movs	r2, r7
 8001f00:	4453      	add	r3, sl
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	0c03      	lsrs	r3, r0, #16
 8001f06:	469a      	mov	sl, r3
 8001f08:	434a      	muls	r2, r1
 8001f0a:	4361      	muls	r1, r4
 8001f0c:	4449      	add	r1, r9
 8001f0e:	4451      	add	r1, sl
 8001f10:	44ab      	add	fp, r5
 8001f12:	4589      	cmp	r9, r1
 8001f14:	d903      	bls.n	8001f1e <__aeabi_dmul+0x1a2>
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	4699      	mov	r9, r3
 8001f1c:	444a      	add	r2, r9
 8001f1e:	0400      	lsls	r0, r0, #16
 8001f20:	0c0b      	lsrs	r3, r1, #16
 8001f22:	0c00      	lsrs	r0, r0, #16
 8001f24:	0409      	lsls	r1, r1, #16
 8001f26:	1809      	adds	r1, r1, r0
 8001f28:	0020      	movs	r0, r4
 8001f2a:	4699      	mov	r9, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	4370      	muls	r0, r6
 8001f30:	435c      	muls	r4, r3
 8001f32:	437e      	muls	r6, r7
 8001f34:	435f      	muls	r7, r3
 8001f36:	0c03      	lsrs	r3, r0, #16
 8001f38:	4698      	mov	r8, r3
 8001f3a:	19a4      	adds	r4, r4, r6
 8001f3c:	4444      	add	r4, r8
 8001f3e:	444a      	add	r2, r9
 8001f40:	9703      	str	r7, [sp, #12]
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d904      	bls.n	8001f50 <__aeabi_dmul+0x1d4>
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	025b      	lsls	r3, r3, #9
 8001f4a:	4698      	mov	r8, r3
 8001f4c:	4447      	add	r7, r8
 8001f4e:	9703      	str	r7, [sp, #12]
 8001f50:	0423      	lsls	r3, r4, #16
 8001f52:	9e02      	ldr	r6, [sp, #8]
 8001f54:	469a      	mov	sl, r3
 8001f56:	9b05      	ldr	r3, [sp, #20]
 8001f58:	445e      	add	r6, fp
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	42ae      	cmp	r6, r5
 8001f5e:	41ad      	sbcs	r5, r5
 8001f60:	1876      	adds	r6, r6, r1
 8001f62:	428e      	cmp	r6, r1
 8001f64:	4189      	sbcs	r1, r1
 8001f66:	0400      	lsls	r0, r0, #16
 8001f68:	0c00      	lsrs	r0, r0, #16
 8001f6a:	4450      	add	r0, sl
 8001f6c:	4440      	add	r0, r8
 8001f6e:	426d      	negs	r5, r5
 8001f70:	1947      	adds	r7, r0, r5
 8001f72:	46b8      	mov	r8, r7
 8001f74:	4693      	mov	fp, r2
 8001f76:	4249      	negs	r1, r1
 8001f78:	4689      	mov	r9, r1
 8001f7a:	44c3      	add	fp, r8
 8001f7c:	44d9      	add	r9, fp
 8001f7e:	4298      	cmp	r0, r3
 8001f80:	4180      	sbcs	r0, r0
 8001f82:	45a8      	cmp	r8, r5
 8001f84:	41ad      	sbcs	r5, r5
 8001f86:	4593      	cmp	fp, r2
 8001f88:	4192      	sbcs	r2, r2
 8001f8a:	4589      	cmp	r9, r1
 8001f8c:	4189      	sbcs	r1, r1
 8001f8e:	426d      	negs	r5, r5
 8001f90:	4240      	negs	r0, r0
 8001f92:	4328      	orrs	r0, r5
 8001f94:	0c24      	lsrs	r4, r4, #16
 8001f96:	4252      	negs	r2, r2
 8001f98:	4249      	negs	r1, r1
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	9b03      	ldr	r3, [sp, #12]
 8001f9e:	1900      	adds	r0, r0, r4
 8001fa0:	1880      	adds	r0, r0, r2
 8001fa2:	18c7      	adds	r7, r0, r3
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	0ddc      	lsrs	r4, r3, #23
 8001fa8:	9b04      	ldr	r3, [sp, #16]
 8001faa:	0275      	lsls	r5, r6, #9
 8001fac:	431d      	orrs	r5, r3
 8001fae:	1e6a      	subs	r2, r5, #1
 8001fb0:	4195      	sbcs	r5, r2
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	0df6      	lsrs	r6, r6, #23
 8001fb6:	027f      	lsls	r7, r7, #9
 8001fb8:	4335      	orrs	r5, r6
 8001fba:	025a      	lsls	r2, r3, #9
 8001fbc:	433c      	orrs	r4, r7
 8001fbe:	4315      	orrs	r5, r2
 8001fc0:	01fb      	lsls	r3, r7, #7
 8001fc2:	d400      	bmi.n	8001fc6 <__aeabi_dmul+0x24a>
 8001fc4:	e11c      	b.n	8002200 <__aeabi_dmul+0x484>
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	086a      	lsrs	r2, r5, #1
 8001fca:	400d      	ands	r5, r1
 8001fcc:	4315      	orrs	r5, r2
 8001fce:	07e2      	lsls	r2, r4, #31
 8001fd0:	4315      	orrs	r5, r2
 8001fd2:	0864      	lsrs	r4, r4, #1
 8001fd4:	494f      	ldr	r1, [pc, #316]	; (8002114 <__aeabi_dmul+0x398>)
 8001fd6:	4461      	add	r1, ip
 8001fd8:	2900      	cmp	r1, #0
 8001fda:	dc00      	bgt.n	8001fde <__aeabi_dmul+0x262>
 8001fdc:	e0b0      	b.n	8002140 <__aeabi_dmul+0x3c4>
 8001fde:	076b      	lsls	r3, r5, #29
 8001fe0:	d009      	beq.n	8001ff6 <__aeabi_dmul+0x27a>
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	402a      	ands	r2, r5
 8001fe6:	2a04      	cmp	r2, #4
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dmul+0x27a>
 8001fea:	1d2a      	adds	r2, r5, #4
 8001fec:	42aa      	cmp	r2, r5
 8001fee:	41ad      	sbcs	r5, r5
 8001ff0:	426d      	negs	r5, r5
 8001ff2:	1964      	adds	r4, r4, r5
 8001ff4:	0015      	movs	r5, r2
 8001ff6:	01e3      	lsls	r3, r4, #7
 8001ff8:	d504      	bpl.n	8002004 <__aeabi_dmul+0x288>
 8001ffa:	2180      	movs	r1, #128	; 0x80
 8001ffc:	4a46      	ldr	r2, [pc, #280]	; (8002118 <__aeabi_dmul+0x39c>)
 8001ffe:	00c9      	lsls	r1, r1, #3
 8002000:	4014      	ands	r4, r2
 8002002:	4461      	add	r1, ip
 8002004:	4a45      	ldr	r2, [pc, #276]	; (800211c <__aeabi_dmul+0x3a0>)
 8002006:	4291      	cmp	r1, r2
 8002008:	dd00      	ble.n	800200c <__aeabi_dmul+0x290>
 800200a:	e726      	b.n	8001e5a <__aeabi_dmul+0xde>
 800200c:	0762      	lsls	r2, r4, #29
 800200e:	08ed      	lsrs	r5, r5, #3
 8002010:	0264      	lsls	r4, r4, #9
 8002012:	0549      	lsls	r1, r1, #21
 8002014:	4315      	orrs	r5, r2
 8002016:	0b24      	lsrs	r4, r4, #12
 8002018:	0d4a      	lsrs	r2, r1, #21
 800201a:	e710      	b.n	8001e3e <__aeabi_dmul+0xc2>
 800201c:	4652      	mov	r2, sl
 800201e:	4332      	orrs	r2, r6
 8002020:	d100      	bne.n	8002024 <__aeabi_dmul+0x2a8>
 8002022:	e07f      	b.n	8002124 <__aeabi_dmul+0x3a8>
 8002024:	2e00      	cmp	r6, #0
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0x2ae>
 8002028:	e0dc      	b.n	80021e4 <__aeabi_dmul+0x468>
 800202a:	0030      	movs	r0, r6
 800202c:	f000 fdd0 	bl	8002bd0 <__clzsi2>
 8002030:	0002      	movs	r2, r0
 8002032:	3a0b      	subs	r2, #11
 8002034:	231d      	movs	r3, #29
 8002036:	0001      	movs	r1, r0
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	4652      	mov	r2, sl
 800203c:	3908      	subs	r1, #8
 800203e:	40da      	lsrs	r2, r3
 8002040:	408e      	lsls	r6, r1
 8002042:	4316      	orrs	r6, r2
 8002044:	4652      	mov	r2, sl
 8002046:	408a      	lsls	r2, r1
 8002048:	9b00      	ldr	r3, [sp, #0]
 800204a:	4935      	ldr	r1, [pc, #212]	; (8002120 <__aeabi_dmul+0x3a4>)
 800204c:	1a18      	subs	r0, r3, r0
 800204e:	0003      	movs	r3, r0
 8002050:	468c      	mov	ip, r1
 8002052:	4463      	add	r3, ip
 8002054:	2000      	movs	r0, #0
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	e6d3      	b.n	8001e02 <__aeabi_dmul+0x86>
 800205a:	0025      	movs	r5, r4
 800205c:	4305      	orrs	r5, r0
 800205e:	d04a      	beq.n	80020f6 <__aeabi_dmul+0x37a>
 8002060:	2c00      	cmp	r4, #0
 8002062:	d100      	bne.n	8002066 <__aeabi_dmul+0x2ea>
 8002064:	e0b0      	b.n	80021c8 <__aeabi_dmul+0x44c>
 8002066:	0020      	movs	r0, r4
 8002068:	f000 fdb2 	bl	8002bd0 <__clzsi2>
 800206c:	0001      	movs	r1, r0
 800206e:	0002      	movs	r2, r0
 8002070:	390b      	subs	r1, #11
 8002072:	231d      	movs	r3, #29
 8002074:	0010      	movs	r0, r2
 8002076:	1a5b      	subs	r3, r3, r1
 8002078:	0031      	movs	r1, r6
 800207a:	0035      	movs	r5, r6
 800207c:	3808      	subs	r0, #8
 800207e:	4084      	lsls	r4, r0
 8002080:	40d9      	lsrs	r1, r3
 8002082:	4085      	lsls	r5, r0
 8002084:	430c      	orrs	r4, r1
 8002086:	4826      	ldr	r0, [pc, #152]	; (8002120 <__aeabi_dmul+0x3a4>)
 8002088:	1a83      	subs	r3, r0, r2
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2300      	movs	r3, #0
 800208e:	4699      	mov	r9, r3
 8002090:	469b      	mov	fp, r3
 8002092:	e697      	b.n	8001dc4 <__aeabi_dmul+0x48>
 8002094:	0005      	movs	r5, r0
 8002096:	4325      	orrs	r5, r4
 8002098:	d126      	bne.n	80020e8 <__aeabi_dmul+0x36c>
 800209a:	2208      	movs	r2, #8
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	2400      	movs	r4, #0
 80020a2:	4691      	mov	r9, r2
 80020a4:	469b      	mov	fp, r3
 80020a6:	e68d      	b.n	8001dc4 <__aeabi_dmul+0x48>
 80020a8:	4652      	mov	r2, sl
 80020aa:	9b00      	ldr	r3, [sp, #0]
 80020ac:	4332      	orrs	r2, r6
 80020ae:	d110      	bne.n	80020d2 <__aeabi_dmul+0x356>
 80020b0:	4915      	ldr	r1, [pc, #84]	; (8002108 <__aeabi_dmul+0x38c>)
 80020b2:	2600      	movs	r6, #0
 80020b4:	468c      	mov	ip, r1
 80020b6:	4463      	add	r3, ip
 80020b8:	4649      	mov	r1, r9
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2302      	movs	r3, #2
 80020be:	4319      	orrs	r1, r3
 80020c0:	4689      	mov	r9, r1
 80020c2:	2002      	movs	r0, #2
 80020c4:	e69d      	b.n	8001e02 <__aeabi_dmul+0x86>
 80020c6:	465b      	mov	r3, fp
 80020c8:	9701      	str	r7, [sp, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d000      	beq.n	80020d0 <__aeabi_dmul+0x354>
 80020ce:	e6ad      	b.n	8001e2c <__aeabi_dmul+0xb0>
 80020d0:	e6c3      	b.n	8001e5a <__aeabi_dmul+0xde>
 80020d2:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <__aeabi_dmul+0x38c>)
 80020d4:	2003      	movs	r0, #3
 80020d6:	4694      	mov	ip, r2
 80020d8:	4463      	add	r3, ip
 80020da:	464a      	mov	r2, r9
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2303      	movs	r3, #3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	4691      	mov	r9, r2
 80020e4:	4652      	mov	r2, sl
 80020e6:	e68c      	b.n	8001e02 <__aeabi_dmul+0x86>
 80020e8:	220c      	movs	r2, #12
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2303      	movs	r3, #3
 80020ee:	0005      	movs	r5, r0
 80020f0:	4691      	mov	r9, r2
 80020f2:	469b      	mov	fp, r3
 80020f4:	e666      	b.n	8001dc4 <__aeabi_dmul+0x48>
 80020f6:	2304      	movs	r3, #4
 80020f8:	4699      	mov	r9, r3
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	2400      	movs	r4, #0
 8002102:	469b      	mov	fp, r3
 8002104:	e65e      	b.n	8001dc4 <__aeabi_dmul+0x48>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	000007ff 	.word	0x000007ff
 800210c:	fffffc01 	.word	0xfffffc01
 8002110:	0800a50c 	.word	0x0800a50c
 8002114:	000003ff 	.word	0x000003ff
 8002118:	feffffff 	.word	0xfeffffff
 800211c:	000007fe 	.word	0x000007fe
 8002120:	fffffc0d 	.word	0xfffffc0d
 8002124:	4649      	mov	r1, r9
 8002126:	2301      	movs	r3, #1
 8002128:	4319      	orrs	r1, r3
 800212a:	4689      	mov	r9, r1
 800212c:	2600      	movs	r6, #0
 800212e:	2001      	movs	r0, #1
 8002130:	e667      	b.n	8001e02 <__aeabi_dmul+0x86>
 8002132:	2300      	movs	r3, #0
 8002134:	2480      	movs	r4, #128	; 0x80
 8002136:	2500      	movs	r5, #0
 8002138:	4a43      	ldr	r2, [pc, #268]	; (8002248 <__aeabi_dmul+0x4cc>)
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	0324      	lsls	r4, r4, #12
 800213e:	e67e      	b.n	8001e3e <__aeabi_dmul+0xc2>
 8002140:	2001      	movs	r0, #1
 8002142:	1a40      	subs	r0, r0, r1
 8002144:	2838      	cmp	r0, #56	; 0x38
 8002146:	dd00      	ble.n	800214a <__aeabi_dmul+0x3ce>
 8002148:	e676      	b.n	8001e38 <__aeabi_dmul+0xbc>
 800214a:	281f      	cmp	r0, #31
 800214c:	dd5b      	ble.n	8002206 <__aeabi_dmul+0x48a>
 800214e:	221f      	movs	r2, #31
 8002150:	0023      	movs	r3, r4
 8002152:	4252      	negs	r2, r2
 8002154:	1a51      	subs	r1, r2, r1
 8002156:	40cb      	lsrs	r3, r1
 8002158:	0019      	movs	r1, r3
 800215a:	2820      	cmp	r0, #32
 800215c:	d003      	beq.n	8002166 <__aeabi_dmul+0x3ea>
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <__aeabi_dmul+0x4d0>)
 8002160:	4462      	add	r2, ip
 8002162:	4094      	lsls	r4, r2
 8002164:	4325      	orrs	r5, r4
 8002166:	1e6a      	subs	r2, r5, #1
 8002168:	4195      	sbcs	r5, r2
 800216a:	002a      	movs	r2, r5
 800216c:	430a      	orrs	r2, r1
 800216e:	2107      	movs	r1, #7
 8002170:	000d      	movs	r5, r1
 8002172:	2400      	movs	r4, #0
 8002174:	4015      	ands	r5, r2
 8002176:	4211      	tst	r1, r2
 8002178:	d05b      	beq.n	8002232 <__aeabi_dmul+0x4b6>
 800217a:	210f      	movs	r1, #15
 800217c:	2400      	movs	r4, #0
 800217e:	4011      	ands	r1, r2
 8002180:	2904      	cmp	r1, #4
 8002182:	d053      	beq.n	800222c <__aeabi_dmul+0x4b0>
 8002184:	1d11      	adds	r1, r2, #4
 8002186:	4291      	cmp	r1, r2
 8002188:	4192      	sbcs	r2, r2
 800218a:	4252      	negs	r2, r2
 800218c:	18a4      	adds	r4, r4, r2
 800218e:	000a      	movs	r2, r1
 8002190:	0223      	lsls	r3, r4, #8
 8002192:	d54b      	bpl.n	800222c <__aeabi_dmul+0x4b0>
 8002194:	2201      	movs	r2, #1
 8002196:	2400      	movs	r4, #0
 8002198:	2500      	movs	r5, #0
 800219a:	e650      	b.n	8001e3e <__aeabi_dmul+0xc2>
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	031b      	lsls	r3, r3, #12
 80021a0:	421c      	tst	r4, r3
 80021a2:	d009      	beq.n	80021b8 <__aeabi_dmul+0x43c>
 80021a4:	421e      	tst	r6, r3
 80021a6:	d107      	bne.n	80021b8 <__aeabi_dmul+0x43c>
 80021a8:	4333      	orrs	r3, r6
 80021aa:	031c      	lsls	r4, r3, #12
 80021ac:	4643      	mov	r3, r8
 80021ae:	0015      	movs	r5, r2
 80021b0:	0b24      	lsrs	r4, r4, #12
 80021b2:	4a25      	ldr	r2, [pc, #148]	; (8002248 <__aeabi_dmul+0x4cc>)
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	e642      	b.n	8001e3e <__aeabi_dmul+0xc2>
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	0312      	lsls	r2, r2, #12
 80021bc:	4314      	orrs	r4, r2
 80021be:	0324      	lsls	r4, r4, #12
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <__aeabi_dmul+0x4cc>)
 80021c2:	0b24      	lsrs	r4, r4, #12
 80021c4:	9701      	str	r7, [sp, #4]
 80021c6:	e63a      	b.n	8001e3e <__aeabi_dmul+0xc2>
 80021c8:	f000 fd02 	bl	8002bd0 <__clzsi2>
 80021cc:	0001      	movs	r1, r0
 80021ce:	0002      	movs	r2, r0
 80021d0:	3115      	adds	r1, #21
 80021d2:	3220      	adds	r2, #32
 80021d4:	291c      	cmp	r1, #28
 80021d6:	dc00      	bgt.n	80021da <__aeabi_dmul+0x45e>
 80021d8:	e74b      	b.n	8002072 <__aeabi_dmul+0x2f6>
 80021da:	0034      	movs	r4, r6
 80021dc:	3808      	subs	r0, #8
 80021de:	2500      	movs	r5, #0
 80021e0:	4084      	lsls	r4, r0
 80021e2:	e750      	b.n	8002086 <__aeabi_dmul+0x30a>
 80021e4:	f000 fcf4 	bl	8002bd0 <__clzsi2>
 80021e8:	0003      	movs	r3, r0
 80021ea:	001a      	movs	r2, r3
 80021ec:	3215      	adds	r2, #21
 80021ee:	3020      	adds	r0, #32
 80021f0:	2a1c      	cmp	r2, #28
 80021f2:	dc00      	bgt.n	80021f6 <__aeabi_dmul+0x47a>
 80021f4:	e71e      	b.n	8002034 <__aeabi_dmul+0x2b8>
 80021f6:	4656      	mov	r6, sl
 80021f8:	3b08      	subs	r3, #8
 80021fa:	2200      	movs	r2, #0
 80021fc:	409e      	lsls	r6, r3
 80021fe:	e723      	b.n	8002048 <__aeabi_dmul+0x2cc>
 8002200:	9b00      	ldr	r3, [sp, #0]
 8002202:	469c      	mov	ip, r3
 8002204:	e6e6      	b.n	8001fd4 <__aeabi_dmul+0x258>
 8002206:	4912      	ldr	r1, [pc, #72]	; (8002250 <__aeabi_dmul+0x4d4>)
 8002208:	0022      	movs	r2, r4
 800220a:	4461      	add	r1, ip
 800220c:	002e      	movs	r6, r5
 800220e:	408d      	lsls	r5, r1
 8002210:	408a      	lsls	r2, r1
 8002212:	40c6      	lsrs	r6, r0
 8002214:	1e69      	subs	r1, r5, #1
 8002216:	418d      	sbcs	r5, r1
 8002218:	4332      	orrs	r2, r6
 800221a:	432a      	orrs	r2, r5
 800221c:	40c4      	lsrs	r4, r0
 800221e:	0753      	lsls	r3, r2, #29
 8002220:	d0b6      	beq.n	8002190 <__aeabi_dmul+0x414>
 8002222:	210f      	movs	r1, #15
 8002224:	4011      	ands	r1, r2
 8002226:	2904      	cmp	r1, #4
 8002228:	d1ac      	bne.n	8002184 <__aeabi_dmul+0x408>
 800222a:	e7b1      	b.n	8002190 <__aeabi_dmul+0x414>
 800222c:	0765      	lsls	r5, r4, #29
 800222e:	0264      	lsls	r4, r4, #9
 8002230:	0b24      	lsrs	r4, r4, #12
 8002232:	08d2      	lsrs	r2, r2, #3
 8002234:	4315      	orrs	r5, r2
 8002236:	2200      	movs	r2, #0
 8002238:	e601      	b.n	8001e3e <__aeabi_dmul+0xc2>
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	0312      	lsls	r2, r2, #12
 800223e:	4314      	orrs	r4, r2
 8002240:	0324      	lsls	r4, r4, #12
 8002242:	4a01      	ldr	r2, [pc, #4]	; (8002248 <__aeabi_dmul+0x4cc>)
 8002244:	0b24      	lsrs	r4, r4, #12
 8002246:	e5fa      	b.n	8001e3e <__aeabi_dmul+0xc2>
 8002248:	000007ff 	.word	0x000007ff
 800224c:	0000043e 	.word	0x0000043e
 8002250:	0000041e 	.word	0x0000041e

08002254 <__aeabi_dsub>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	4657      	mov	r7, sl
 8002258:	464e      	mov	r6, r9
 800225a:	4645      	mov	r5, r8
 800225c:	46de      	mov	lr, fp
 800225e:	b5e0      	push	{r5, r6, r7, lr}
 8002260:	001e      	movs	r6, r3
 8002262:	0017      	movs	r7, r2
 8002264:	004a      	lsls	r2, r1, #1
 8002266:	030b      	lsls	r3, r1, #12
 8002268:	0d52      	lsrs	r2, r2, #21
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	4690      	mov	r8, r2
 800226e:	0f42      	lsrs	r2, r0, #29
 8002270:	431a      	orrs	r2, r3
 8002272:	0fcd      	lsrs	r5, r1, #31
 8002274:	4ccd      	ldr	r4, [pc, #820]	; (80025ac <__aeabi_dsub+0x358>)
 8002276:	0331      	lsls	r1, r6, #12
 8002278:	00c3      	lsls	r3, r0, #3
 800227a:	4694      	mov	ip, r2
 800227c:	0070      	lsls	r0, r6, #1
 800227e:	0f7a      	lsrs	r2, r7, #29
 8002280:	0a49      	lsrs	r1, r1, #9
 8002282:	00ff      	lsls	r7, r7, #3
 8002284:	469a      	mov	sl, r3
 8002286:	46b9      	mov	r9, r7
 8002288:	0d40      	lsrs	r0, r0, #21
 800228a:	0ff6      	lsrs	r6, r6, #31
 800228c:	4311      	orrs	r1, r2
 800228e:	42a0      	cmp	r0, r4
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x40>
 8002292:	e0b1      	b.n	80023f8 <__aeabi_dsub+0x1a4>
 8002294:	2201      	movs	r2, #1
 8002296:	4056      	eors	r6, r2
 8002298:	46b3      	mov	fp, r6
 800229a:	42b5      	cmp	r5, r6
 800229c:	d100      	bne.n	80022a0 <__aeabi_dsub+0x4c>
 800229e:	e088      	b.n	80023b2 <__aeabi_dsub+0x15e>
 80022a0:	4642      	mov	r2, r8
 80022a2:	1a12      	subs	r2, r2, r0
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	dc00      	bgt.n	80022aa <__aeabi_dsub+0x56>
 80022a8:	e0ae      	b.n	8002408 <__aeabi_dsub+0x1b4>
 80022aa:	2800      	cmp	r0, #0
 80022ac:	d100      	bne.n	80022b0 <__aeabi_dsub+0x5c>
 80022ae:	e0c1      	b.n	8002434 <__aeabi_dsub+0x1e0>
 80022b0:	48be      	ldr	r0, [pc, #760]	; (80025ac <__aeabi_dsub+0x358>)
 80022b2:	4580      	cmp	r8, r0
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x64>
 80022b6:	e151      	b.n	800255c <__aeabi_dsub+0x308>
 80022b8:	2080      	movs	r0, #128	; 0x80
 80022ba:	0400      	lsls	r0, r0, #16
 80022bc:	4301      	orrs	r1, r0
 80022be:	2a38      	cmp	r2, #56	; 0x38
 80022c0:	dd00      	ble.n	80022c4 <__aeabi_dsub+0x70>
 80022c2:	e17b      	b.n	80025bc <__aeabi_dsub+0x368>
 80022c4:	2a1f      	cmp	r2, #31
 80022c6:	dd00      	ble.n	80022ca <__aeabi_dsub+0x76>
 80022c8:	e1ee      	b.n	80026a8 <__aeabi_dsub+0x454>
 80022ca:	2020      	movs	r0, #32
 80022cc:	003e      	movs	r6, r7
 80022ce:	1a80      	subs	r0, r0, r2
 80022d0:	000c      	movs	r4, r1
 80022d2:	40d6      	lsrs	r6, r2
 80022d4:	40d1      	lsrs	r1, r2
 80022d6:	4087      	lsls	r7, r0
 80022d8:	4662      	mov	r2, ip
 80022da:	4084      	lsls	r4, r0
 80022dc:	1a52      	subs	r2, r2, r1
 80022de:	1e78      	subs	r0, r7, #1
 80022e0:	4187      	sbcs	r7, r0
 80022e2:	4694      	mov	ip, r2
 80022e4:	4334      	orrs	r4, r6
 80022e6:	4327      	orrs	r7, r4
 80022e8:	1bdc      	subs	r4, r3, r7
 80022ea:	42a3      	cmp	r3, r4
 80022ec:	419b      	sbcs	r3, r3
 80022ee:	4662      	mov	r2, ip
 80022f0:	425b      	negs	r3, r3
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	4699      	mov	r9, r3
 80022f6:	464b      	mov	r3, r9
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	d400      	bmi.n	80022fe <__aeabi_dsub+0xaa>
 80022fc:	e118      	b.n	8002530 <__aeabi_dsub+0x2dc>
 80022fe:	464b      	mov	r3, r9
 8002300:	0258      	lsls	r0, r3, #9
 8002302:	0a43      	lsrs	r3, r0, #9
 8002304:	4699      	mov	r9, r3
 8002306:	464b      	mov	r3, r9
 8002308:	2b00      	cmp	r3, #0
 800230a:	d100      	bne.n	800230e <__aeabi_dsub+0xba>
 800230c:	e137      	b.n	800257e <__aeabi_dsub+0x32a>
 800230e:	4648      	mov	r0, r9
 8002310:	f000 fc5e 	bl	8002bd0 <__clzsi2>
 8002314:	0001      	movs	r1, r0
 8002316:	3908      	subs	r1, #8
 8002318:	2320      	movs	r3, #32
 800231a:	0022      	movs	r2, r4
 800231c:	4648      	mov	r0, r9
 800231e:	1a5b      	subs	r3, r3, r1
 8002320:	40da      	lsrs	r2, r3
 8002322:	4088      	lsls	r0, r1
 8002324:	408c      	lsls	r4, r1
 8002326:	4643      	mov	r3, r8
 8002328:	4310      	orrs	r0, r2
 800232a:	4588      	cmp	r8, r1
 800232c:	dd00      	ble.n	8002330 <__aeabi_dsub+0xdc>
 800232e:	e136      	b.n	800259e <__aeabi_dsub+0x34a>
 8002330:	1ac9      	subs	r1, r1, r3
 8002332:	1c4b      	adds	r3, r1, #1
 8002334:	2b1f      	cmp	r3, #31
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0xe6>
 8002338:	e0ea      	b.n	8002510 <__aeabi_dsub+0x2bc>
 800233a:	2220      	movs	r2, #32
 800233c:	0026      	movs	r6, r4
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	0001      	movs	r1, r0
 8002342:	4094      	lsls	r4, r2
 8002344:	40de      	lsrs	r6, r3
 8002346:	40d8      	lsrs	r0, r3
 8002348:	2300      	movs	r3, #0
 800234a:	4091      	lsls	r1, r2
 800234c:	1e62      	subs	r2, r4, #1
 800234e:	4194      	sbcs	r4, r2
 8002350:	4681      	mov	r9, r0
 8002352:	4698      	mov	r8, r3
 8002354:	4331      	orrs	r1, r6
 8002356:	430c      	orrs	r4, r1
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	d009      	beq.n	8002370 <__aeabi_dsub+0x11c>
 800235c:	230f      	movs	r3, #15
 800235e:	4023      	ands	r3, r4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d005      	beq.n	8002370 <__aeabi_dsub+0x11c>
 8002364:	1d23      	adds	r3, r4, #4
 8002366:	42a3      	cmp	r3, r4
 8002368:	41a4      	sbcs	r4, r4
 800236a:	4264      	negs	r4, r4
 800236c:	44a1      	add	r9, r4
 800236e:	001c      	movs	r4, r3
 8002370:	464b      	mov	r3, r9
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	d400      	bmi.n	8002378 <__aeabi_dsub+0x124>
 8002376:	e0de      	b.n	8002536 <__aeabi_dsub+0x2e2>
 8002378:	4641      	mov	r1, r8
 800237a:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <__aeabi_dsub+0x358>)
 800237c:	3101      	adds	r1, #1
 800237e:	4299      	cmp	r1, r3
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x130>
 8002382:	e0e7      	b.n	8002554 <__aeabi_dsub+0x300>
 8002384:	464b      	mov	r3, r9
 8002386:	488a      	ldr	r0, [pc, #552]	; (80025b0 <__aeabi_dsub+0x35c>)
 8002388:	08e4      	lsrs	r4, r4, #3
 800238a:	4003      	ands	r3, r0
 800238c:	0018      	movs	r0, r3
 800238e:	0549      	lsls	r1, r1, #21
 8002390:	075b      	lsls	r3, r3, #29
 8002392:	0240      	lsls	r0, r0, #9
 8002394:	4323      	orrs	r3, r4
 8002396:	0d4a      	lsrs	r2, r1, #21
 8002398:	0b04      	lsrs	r4, r0, #12
 800239a:	0512      	lsls	r2, r2, #20
 800239c:	07ed      	lsls	r5, r5, #31
 800239e:	4322      	orrs	r2, r4
 80023a0:	432a      	orrs	r2, r5
 80023a2:	0018      	movs	r0, r3
 80023a4:	0011      	movs	r1, r2
 80023a6:	bcf0      	pop	{r4, r5, r6, r7}
 80023a8:	46bb      	mov	fp, r7
 80023aa:	46b2      	mov	sl, r6
 80023ac:	46a9      	mov	r9, r5
 80023ae:	46a0      	mov	r8, r4
 80023b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b2:	4642      	mov	r2, r8
 80023b4:	1a12      	subs	r2, r2, r0
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	dd52      	ble.n	8002460 <__aeabi_dsub+0x20c>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d100      	bne.n	80023c0 <__aeabi_dsub+0x16c>
 80023be:	e09c      	b.n	80024fa <__aeabi_dsub+0x2a6>
 80023c0:	45a0      	cmp	r8, r4
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x172>
 80023c4:	e0ca      	b.n	800255c <__aeabi_dsub+0x308>
 80023c6:	2080      	movs	r0, #128	; 0x80
 80023c8:	0400      	lsls	r0, r0, #16
 80023ca:	4301      	orrs	r1, r0
 80023cc:	2a38      	cmp	r2, #56	; 0x38
 80023ce:	dd00      	ble.n	80023d2 <__aeabi_dsub+0x17e>
 80023d0:	e149      	b.n	8002666 <__aeabi_dsub+0x412>
 80023d2:	2a1f      	cmp	r2, #31
 80023d4:	dc00      	bgt.n	80023d8 <__aeabi_dsub+0x184>
 80023d6:	e197      	b.n	8002708 <__aeabi_dsub+0x4b4>
 80023d8:	0010      	movs	r0, r2
 80023da:	000e      	movs	r6, r1
 80023dc:	3820      	subs	r0, #32
 80023de:	40c6      	lsrs	r6, r0
 80023e0:	2a20      	cmp	r2, #32
 80023e2:	d004      	beq.n	80023ee <__aeabi_dsub+0x19a>
 80023e4:	2040      	movs	r0, #64	; 0x40
 80023e6:	1a82      	subs	r2, r0, r2
 80023e8:	4091      	lsls	r1, r2
 80023ea:	430f      	orrs	r7, r1
 80023ec:	46b9      	mov	r9, r7
 80023ee:	464c      	mov	r4, r9
 80023f0:	1e62      	subs	r2, r4, #1
 80023f2:	4194      	sbcs	r4, r2
 80023f4:	4334      	orrs	r4, r6
 80023f6:	e13a      	b.n	800266e <__aeabi_dsub+0x41a>
 80023f8:	000a      	movs	r2, r1
 80023fa:	433a      	orrs	r2, r7
 80023fc:	d028      	beq.n	8002450 <__aeabi_dsub+0x1fc>
 80023fe:	46b3      	mov	fp, r6
 8002400:	42b5      	cmp	r5, r6
 8002402:	d02b      	beq.n	800245c <__aeabi_dsub+0x208>
 8002404:	4a6b      	ldr	r2, [pc, #428]	; (80025b4 <__aeabi_dsub+0x360>)
 8002406:	4442      	add	r2, r8
 8002408:	2a00      	cmp	r2, #0
 800240a:	d05d      	beq.n	80024c8 <__aeabi_dsub+0x274>
 800240c:	4642      	mov	r2, r8
 800240e:	4644      	mov	r4, r8
 8002410:	1a82      	subs	r2, r0, r2
 8002412:	2c00      	cmp	r4, #0
 8002414:	d000      	beq.n	8002418 <__aeabi_dsub+0x1c4>
 8002416:	e0f5      	b.n	8002604 <__aeabi_dsub+0x3b0>
 8002418:	4665      	mov	r5, ip
 800241a:	431d      	orrs	r5, r3
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x1cc>
 800241e:	e19c      	b.n	800275a <__aeabi_dsub+0x506>
 8002420:	1e55      	subs	r5, r2, #1
 8002422:	2a01      	cmp	r2, #1
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x1d4>
 8002426:	e1fb      	b.n	8002820 <__aeabi_dsub+0x5cc>
 8002428:	4c60      	ldr	r4, [pc, #384]	; (80025ac <__aeabi_dsub+0x358>)
 800242a:	42a2      	cmp	r2, r4
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x1dc>
 800242e:	e1bd      	b.n	80027ac <__aeabi_dsub+0x558>
 8002430:	002a      	movs	r2, r5
 8002432:	e0f0      	b.n	8002616 <__aeabi_dsub+0x3c2>
 8002434:	0008      	movs	r0, r1
 8002436:	4338      	orrs	r0, r7
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x1e8>
 800243a:	e0c3      	b.n	80025c4 <__aeabi_dsub+0x370>
 800243c:	1e50      	subs	r0, r2, #1
 800243e:	2a01      	cmp	r2, #1
 8002440:	d100      	bne.n	8002444 <__aeabi_dsub+0x1f0>
 8002442:	e1a8      	b.n	8002796 <__aeabi_dsub+0x542>
 8002444:	4c59      	ldr	r4, [pc, #356]	; (80025ac <__aeabi_dsub+0x358>)
 8002446:	42a2      	cmp	r2, r4
 8002448:	d100      	bne.n	800244c <__aeabi_dsub+0x1f8>
 800244a:	e087      	b.n	800255c <__aeabi_dsub+0x308>
 800244c:	0002      	movs	r2, r0
 800244e:	e736      	b.n	80022be <__aeabi_dsub+0x6a>
 8002450:	2201      	movs	r2, #1
 8002452:	4056      	eors	r6, r2
 8002454:	46b3      	mov	fp, r6
 8002456:	42b5      	cmp	r5, r6
 8002458:	d000      	beq.n	800245c <__aeabi_dsub+0x208>
 800245a:	e721      	b.n	80022a0 <__aeabi_dsub+0x4c>
 800245c:	4a55      	ldr	r2, [pc, #340]	; (80025b4 <__aeabi_dsub+0x360>)
 800245e:	4442      	add	r2, r8
 8002460:	2a00      	cmp	r2, #0
 8002462:	d100      	bne.n	8002466 <__aeabi_dsub+0x212>
 8002464:	e0b5      	b.n	80025d2 <__aeabi_dsub+0x37e>
 8002466:	4642      	mov	r2, r8
 8002468:	4644      	mov	r4, r8
 800246a:	1a82      	subs	r2, r0, r2
 800246c:	2c00      	cmp	r4, #0
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x21e>
 8002470:	e138      	b.n	80026e4 <__aeabi_dsub+0x490>
 8002472:	4e4e      	ldr	r6, [pc, #312]	; (80025ac <__aeabi_dsub+0x358>)
 8002474:	42b0      	cmp	r0, r6
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x226>
 8002478:	e1de      	b.n	8002838 <__aeabi_dsub+0x5e4>
 800247a:	2680      	movs	r6, #128	; 0x80
 800247c:	4664      	mov	r4, ip
 800247e:	0436      	lsls	r6, r6, #16
 8002480:	4334      	orrs	r4, r6
 8002482:	46a4      	mov	ip, r4
 8002484:	2a38      	cmp	r2, #56	; 0x38
 8002486:	dd00      	ble.n	800248a <__aeabi_dsub+0x236>
 8002488:	e196      	b.n	80027b8 <__aeabi_dsub+0x564>
 800248a:	2a1f      	cmp	r2, #31
 800248c:	dd00      	ble.n	8002490 <__aeabi_dsub+0x23c>
 800248e:	e224      	b.n	80028da <__aeabi_dsub+0x686>
 8002490:	2620      	movs	r6, #32
 8002492:	1ab4      	subs	r4, r6, r2
 8002494:	46a2      	mov	sl, r4
 8002496:	4664      	mov	r4, ip
 8002498:	4656      	mov	r6, sl
 800249a:	40b4      	lsls	r4, r6
 800249c:	46a1      	mov	r9, r4
 800249e:	001c      	movs	r4, r3
 80024a0:	464e      	mov	r6, r9
 80024a2:	40d4      	lsrs	r4, r2
 80024a4:	4326      	orrs	r6, r4
 80024a6:	0034      	movs	r4, r6
 80024a8:	4656      	mov	r6, sl
 80024aa:	40b3      	lsls	r3, r6
 80024ac:	1e5e      	subs	r6, r3, #1
 80024ae:	41b3      	sbcs	r3, r6
 80024b0:	431c      	orrs	r4, r3
 80024b2:	4663      	mov	r3, ip
 80024b4:	40d3      	lsrs	r3, r2
 80024b6:	18c9      	adds	r1, r1, r3
 80024b8:	19e4      	adds	r4, r4, r7
 80024ba:	42bc      	cmp	r4, r7
 80024bc:	41bf      	sbcs	r7, r7
 80024be:	427f      	negs	r7, r7
 80024c0:	46b9      	mov	r9, r7
 80024c2:	4680      	mov	r8, r0
 80024c4:	4489      	add	r9, r1
 80024c6:	e0d8      	b.n	800267a <__aeabi_dsub+0x426>
 80024c8:	4640      	mov	r0, r8
 80024ca:	4c3b      	ldr	r4, [pc, #236]	; (80025b8 <__aeabi_dsub+0x364>)
 80024cc:	3001      	adds	r0, #1
 80024ce:	4220      	tst	r0, r4
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x280>
 80024d2:	e0b4      	b.n	800263e <__aeabi_dsub+0x3ea>
 80024d4:	4640      	mov	r0, r8
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d000      	beq.n	80024dc <__aeabi_dsub+0x288>
 80024da:	e144      	b.n	8002766 <__aeabi_dsub+0x512>
 80024dc:	4660      	mov	r0, ip
 80024de:	4318      	orrs	r0, r3
 80024e0:	d100      	bne.n	80024e4 <__aeabi_dsub+0x290>
 80024e2:	e190      	b.n	8002806 <__aeabi_dsub+0x5b2>
 80024e4:	0008      	movs	r0, r1
 80024e6:	4338      	orrs	r0, r7
 80024e8:	d000      	beq.n	80024ec <__aeabi_dsub+0x298>
 80024ea:	e1aa      	b.n	8002842 <__aeabi_dsub+0x5ee>
 80024ec:	4661      	mov	r1, ip
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	0749      	lsls	r1, r1, #29
 80024f2:	430b      	orrs	r3, r1
 80024f4:	4661      	mov	r1, ip
 80024f6:	08cc      	lsrs	r4, r1, #3
 80024f8:	e027      	b.n	800254a <__aeabi_dsub+0x2f6>
 80024fa:	0008      	movs	r0, r1
 80024fc:	4338      	orrs	r0, r7
 80024fe:	d061      	beq.n	80025c4 <__aeabi_dsub+0x370>
 8002500:	1e50      	subs	r0, r2, #1
 8002502:	2a01      	cmp	r2, #1
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x2b4>
 8002506:	e139      	b.n	800277c <__aeabi_dsub+0x528>
 8002508:	42a2      	cmp	r2, r4
 800250a:	d027      	beq.n	800255c <__aeabi_dsub+0x308>
 800250c:	0002      	movs	r2, r0
 800250e:	e75d      	b.n	80023cc <__aeabi_dsub+0x178>
 8002510:	0002      	movs	r2, r0
 8002512:	391f      	subs	r1, #31
 8002514:	40ca      	lsrs	r2, r1
 8002516:	0011      	movs	r1, r2
 8002518:	2b20      	cmp	r3, #32
 800251a:	d003      	beq.n	8002524 <__aeabi_dsub+0x2d0>
 800251c:	2240      	movs	r2, #64	; 0x40
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	4098      	lsls	r0, r3
 8002522:	4304      	orrs	r4, r0
 8002524:	1e63      	subs	r3, r4, #1
 8002526:	419c      	sbcs	r4, r3
 8002528:	2300      	movs	r3, #0
 800252a:	4699      	mov	r9, r3
 800252c:	4698      	mov	r8, r3
 800252e:	430c      	orrs	r4, r1
 8002530:	0763      	lsls	r3, r4, #29
 8002532:	d000      	beq.n	8002536 <__aeabi_dsub+0x2e2>
 8002534:	e712      	b.n	800235c <__aeabi_dsub+0x108>
 8002536:	464b      	mov	r3, r9
 8002538:	464a      	mov	r2, r9
 800253a:	08e4      	lsrs	r4, r4, #3
 800253c:	075b      	lsls	r3, r3, #29
 800253e:	4323      	orrs	r3, r4
 8002540:	08d4      	lsrs	r4, r2, #3
 8002542:	4642      	mov	r2, r8
 8002544:	4919      	ldr	r1, [pc, #100]	; (80025ac <__aeabi_dsub+0x358>)
 8002546:	428a      	cmp	r2, r1
 8002548:	d00e      	beq.n	8002568 <__aeabi_dsub+0x314>
 800254a:	0324      	lsls	r4, r4, #12
 800254c:	0552      	lsls	r2, r2, #21
 800254e:	0b24      	lsrs	r4, r4, #12
 8002550:	0d52      	lsrs	r2, r2, #21
 8002552:	e722      	b.n	800239a <__aeabi_dsub+0x146>
 8002554:	000a      	movs	r2, r1
 8002556:	2400      	movs	r4, #0
 8002558:	2300      	movs	r3, #0
 800255a:	e71e      	b.n	800239a <__aeabi_dsub+0x146>
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	4662      	mov	r2, ip
 8002560:	0752      	lsls	r2, r2, #29
 8002562:	4313      	orrs	r3, r2
 8002564:	4662      	mov	r2, ip
 8002566:	08d4      	lsrs	r4, r2, #3
 8002568:	001a      	movs	r2, r3
 800256a:	4322      	orrs	r2, r4
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x31c>
 800256e:	e1fc      	b.n	800296a <__aeabi_dsub+0x716>
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	0312      	lsls	r2, r2, #12
 8002574:	4314      	orrs	r4, r2
 8002576:	0324      	lsls	r4, r4, #12
 8002578:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <__aeabi_dsub+0x358>)
 800257a:	0b24      	lsrs	r4, r4, #12
 800257c:	e70d      	b.n	800239a <__aeabi_dsub+0x146>
 800257e:	0020      	movs	r0, r4
 8002580:	f000 fb26 	bl	8002bd0 <__clzsi2>
 8002584:	0001      	movs	r1, r0
 8002586:	3118      	adds	r1, #24
 8002588:	291f      	cmp	r1, #31
 800258a:	dc00      	bgt.n	800258e <__aeabi_dsub+0x33a>
 800258c:	e6c4      	b.n	8002318 <__aeabi_dsub+0xc4>
 800258e:	3808      	subs	r0, #8
 8002590:	4084      	lsls	r4, r0
 8002592:	4643      	mov	r3, r8
 8002594:	0020      	movs	r0, r4
 8002596:	2400      	movs	r4, #0
 8002598:	4588      	cmp	r8, r1
 800259a:	dc00      	bgt.n	800259e <__aeabi_dsub+0x34a>
 800259c:	e6c8      	b.n	8002330 <__aeabi_dsub+0xdc>
 800259e:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <__aeabi_dsub+0x35c>)
 80025a0:	1a5b      	subs	r3, r3, r1
 80025a2:	4010      	ands	r0, r2
 80025a4:	4698      	mov	r8, r3
 80025a6:	4681      	mov	r9, r0
 80025a8:	e6d6      	b.n	8002358 <__aeabi_dsub+0x104>
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	000007ff 	.word	0x000007ff
 80025b0:	ff7fffff 	.word	0xff7fffff
 80025b4:	fffff801 	.word	0xfffff801
 80025b8:	000007fe 	.word	0x000007fe
 80025bc:	430f      	orrs	r7, r1
 80025be:	1e7a      	subs	r2, r7, #1
 80025c0:	4197      	sbcs	r7, r2
 80025c2:	e691      	b.n	80022e8 <__aeabi_dsub+0x94>
 80025c4:	4661      	mov	r1, ip
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0749      	lsls	r1, r1, #29
 80025ca:	430b      	orrs	r3, r1
 80025cc:	4661      	mov	r1, ip
 80025ce:	08cc      	lsrs	r4, r1, #3
 80025d0:	e7b8      	b.n	8002544 <__aeabi_dsub+0x2f0>
 80025d2:	4640      	mov	r0, r8
 80025d4:	4cd3      	ldr	r4, [pc, #844]	; (8002924 <__aeabi_dsub+0x6d0>)
 80025d6:	3001      	adds	r0, #1
 80025d8:	4220      	tst	r0, r4
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x38a>
 80025dc:	e0a2      	b.n	8002724 <__aeabi_dsub+0x4d0>
 80025de:	4640      	mov	r0, r8
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x392>
 80025e4:	e101      	b.n	80027ea <__aeabi_dsub+0x596>
 80025e6:	4660      	mov	r0, ip
 80025e8:	4318      	orrs	r0, r3
 80025ea:	d100      	bne.n	80025ee <__aeabi_dsub+0x39a>
 80025ec:	e15e      	b.n	80028ac <__aeabi_dsub+0x658>
 80025ee:	0008      	movs	r0, r1
 80025f0:	4338      	orrs	r0, r7
 80025f2:	d000      	beq.n	80025f6 <__aeabi_dsub+0x3a2>
 80025f4:	e15f      	b.n	80028b6 <__aeabi_dsub+0x662>
 80025f6:	4661      	mov	r1, ip
 80025f8:	08db      	lsrs	r3, r3, #3
 80025fa:	0749      	lsls	r1, r1, #29
 80025fc:	430b      	orrs	r3, r1
 80025fe:	4661      	mov	r1, ip
 8002600:	08cc      	lsrs	r4, r1, #3
 8002602:	e7a2      	b.n	800254a <__aeabi_dsub+0x2f6>
 8002604:	4dc8      	ldr	r5, [pc, #800]	; (8002928 <__aeabi_dsub+0x6d4>)
 8002606:	42a8      	cmp	r0, r5
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x3b8>
 800260a:	e0cf      	b.n	80027ac <__aeabi_dsub+0x558>
 800260c:	2580      	movs	r5, #128	; 0x80
 800260e:	4664      	mov	r4, ip
 8002610:	042d      	lsls	r5, r5, #16
 8002612:	432c      	orrs	r4, r5
 8002614:	46a4      	mov	ip, r4
 8002616:	2a38      	cmp	r2, #56	; 0x38
 8002618:	dc56      	bgt.n	80026c8 <__aeabi_dsub+0x474>
 800261a:	2a1f      	cmp	r2, #31
 800261c:	dd00      	ble.n	8002620 <__aeabi_dsub+0x3cc>
 800261e:	e0d1      	b.n	80027c4 <__aeabi_dsub+0x570>
 8002620:	2520      	movs	r5, #32
 8002622:	001e      	movs	r6, r3
 8002624:	1aad      	subs	r5, r5, r2
 8002626:	4664      	mov	r4, ip
 8002628:	40ab      	lsls	r3, r5
 800262a:	40ac      	lsls	r4, r5
 800262c:	40d6      	lsrs	r6, r2
 800262e:	1e5d      	subs	r5, r3, #1
 8002630:	41ab      	sbcs	r3, r5
 8002632:	4334      	orrs	r4, r6
 8002634:	4323      	orrs	r3, r4
 8002636:	4664      	mov	r4, ip
 8002638:	40d4      	lsrs	r4, r2
 800263a:	1b09      	subs	r1, r1, r4
 800263c:	e049      	b.n	80026d2 <__aeabi_dsub+0x47e>
 800263e:	4660      	mov	r0, ip
 8002640:	1bdc      	subs	r4, r3, r7
 8002642:	1a46      	subs	r6, r0, r1
 8002644:	42a3      	cmp	r3, r4
 8002646:	4180      	sbcs	r0, r0
 8002648:	4240      	negs	r0, r0
 800264a:	4681      	mov	r9, r0
 800264c:	0030      	movs	r0, r6
 800264e:	464e      	mov	r6, r9
 8002650:	1b80      	subs	r0, r0, r6
 8002652:	4681      	mov	r9, r0
 8002654:	0200      	lsls	r0, r0, #8
 8002656:	d476      	bmi.n	8002746 <__aeabi_dsub+0x4f2>
 8002658:	464b      	mov	r3, r9
 800265a:	4323      	orrs	r3, r4
 800265c:	d000      	beq.n	8002660 <__aeabi_dsub+0x40c>
 800265e:	e652      	b.n	8002306 <__aeabi_dsub+0xb2>
 8002660:	2400      	movs	r4, #0
 8002662:	2500      	movs	r5, #0
 8002664:	e771      	b.n	800254a <__aeabi_dsub+0x2f6>
 8002666:	4339      	orrs	r1, r7
 8002668:	000c      	movs	r4, r1
 800266a:	1e62      	subs	r2, r4, #1
 800266c:	4194      	sbcs	r4, r2
 800266e:	18e4      	adds	r4, r4, r3
 8002670:	429c      	cmp	r4, r3
 8002672:	419b      	sbcs	r3, r3
 8002674:	425b      	negs	r3, r3
 8002676:	4463      	add	r3, ip
 8002678:	4699      	mov	r9, r3
 800267a:	464b      	mov	r3, r9
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	d400      	bmi.n	8002682 <__aeabi_dsub+0x42e>
 8002680:	e756      	b.n	8002530 <__aeabi_dsub+0x2dc>
 8002682:	2301      	movs	r3, #1
 8002684:	469c      	mov	ip, r3
 8002686:	4ba8      	ldr	r3, [pc, #672]	; (8002928 <__aeabi_dsub+0x6d4>)
 8002688:	44e0      	add	r8, ip
 800268a:	4598      	cmp	r8, r3
 800268c:	d038      	beq.n	8002700 <__aeabi_dsub+0x4ac>
 800268e:	464b      	mov	r3, r9
 8002690:	48a6      	ldr	r0, [pc, #664]	; (800292c <__aeabi_dsub+0x6d8>)
 8002692:	2201      	movs	r2, #1
 8002694:	4003      	ands	r3, r0
 8002696:	0018      	movs	r0, r3
 8002698:	0863      	lsrs	r3, r4, #1
 800269a:	4014      	ands	r4, r2
 800269c:	431c      	orrs	r4, r3
 800269e:	07c3      	lsls	r3, r0, #31
 80026a0:	431c      	orrs	r4, r3
 80026a2:	0843      	lsrs	r3, r0, #1
 80026a4:	4699      	mov	r9, r3
 80026a6:	e657      	b.n	8002358 <__aeabi_dsub+0x104>
 80026a8:	0010      	movs	r0, r2
 80026aa:	000e      	movs	r6, r1
 80026ac:	3820      	subs	r0, #32
 80026ae:	40c6      	lsrs	r6, r0
 80026b0:	2a20      	cmp	r2, #32
 80026b2:	d004      	beq.n	80026be <__aeabi_dsub+0x46a>
 80026b4:	2040      	movs	r0, #64	; 0x40
 80026b6:	1a82      	subs	r2, r0, r2
 80026b8:	4091      	lsls	r1, r2
 80026ba:	430f      	orrs	r7, r1
 80026bc:	46b9      	mov	r9, r7
 80026be:	464f      	mov	r7, r9
 80026c0:	1e7a      	subs	r2, r7, #1
 80026c2:	4197      	sbcs	r7, r2
 80026c4:	4337      	orrs	r7, r6
 80026c6:	e60f      	b.n	80022e8 <__aeabi_dsub+0x94>
 80026c8:	4662      	mov	r2, ip
 80026ca:	431a      	orrs	r2, r3
 80026cc:	0013      	movs	r3, r2
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	4193      	sbcs	r3, r2
 80026d2:	1afc      	subs	r4, r7, r3
 80026d4:	42a7      	cmp	r7, r4
 80026d6:	41bf      	sbcs	r7, r7
 80026d8:	427f      	negs	r7, r7
 80026da:	1bcb      	subs	r3, r1, r7
 80026dc:	4699      	mov	r9, r3
 80026de:	465d      	mov	r5, fp
 80026e0:	4680      	mov	r8, r0
 80026e2:	e608      	b.n	80022f6 <__aeabi_dsub+0xa2>
 80026e4:	4666      	mov	r6, ip
 80026e6:	431e      	orrs	r6, r3
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x498>
 80026ea:	e0be      	b.n	800286a <__aeabi_dsub+0x616>
 80026ec:	1e56      	subs	r6, r2, #1
 80026ee:	2a01      	cmp	r2, #1
 80026f0:	d100      	bne.n	80026f4 <__aeabi_dsub+0x4a0>
 80026f2:	e109      	b.n	8002908 <__aeabi_dsub+0x6b4>
 80026f4:	4c8c      	ldr	r4, [pc, #560]	; (8002928 <__aeabi_dsub+0x6d4>)
 80026f6:	42a2      	cmp	r2, r4
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x4a8>
 80026fa:	e119      	b.n	8002930 <__aeabi_dsub+0x6dc>
 80026fc:	0032      	movs	r2, r6
 80026fe:	e6c1      	b.n	8002484 <__aeabi_dsub+0x230>
 8002700:	4642      	mov	r2, r8
 8002702:	2400      	movs	r4, #0
 8002704:	2300      	movs	r3, #0
 8002706:	e648      	b.n	800239a <__aeabi_dsub+0x146>
 8002708:	2020      	movs	r0, #32
 800270a:	000c      	movs	r4, r1
 800270c:	1a80      	subs	r0, r0, r2
 800270e:	003e      	movs	r6, r7
 8002710:	4087      	lsls	r7, r0
 8002712:	4084      	lsls	r4, r0
 8002714:	40d6      	lsrs	r6, r2
 8002716:	1e78      	subs	r0, r7, #1
 8002718:	4187      	sbcs	r7, r0
 800271a:	40d1      	lsrs	r1, r2
 800271c:	4334      	orrs	r4, r6
 800271e:	433c      	orrs	r4, r7
 8002720:	448c      	add	ip, r1
 8002722:	e7a4      	b.n	800266e <__aeabi_dsub+0x41a>
 8002724:	4a80      	ldr	r2, [pc, #512]	; (8002928 <__aeabi_dsub+0x6d4>)
 8002726:	4290      	cmp	r0, r2
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x4d8>
 800272a:	e0e9      	b.n	8002900 <__aeabi_dsub+0x6ac>
 800272c:	19df      	adds	r7, r3, r7
 800272e:	429f      	cmp	r7, r3
 8002730:	419b      	sbcs	r3, r3
 8002732:	4461      	add	r1, ip
 8002734:	425b      	negs	r3, r3
 8002736:	18c9      	adds	r1, r1, r3
 8002738:	07cc      	lsls	r4, r1, #31
 800273a:	087f      	lsrs	r7, r7, #1
 800273c:	084b      	lsrs	r3, r1, #1
 800273e:	4699      	mov	r9, r3
 8002740:	4680      	mov	r8, r0
 8002742:	433c      	orrs	r4, r7
 8002744:	e6f4      	b.n	8002530 <__aeabi_dsub+0x2dc>
 8002746:	1afc      	subs	r4, r7, r3
 8002748:	42a7      	cmp	r7, r4
 800274a:	41bf      	sbcs	r7, r7
 800274c:	4663      	mov	r3, ip
 800274e:	427f      	negs	r7, r7
 8002750:	1ac9      	subs	r1, r1, r3
 8002752:	1bcb      	subs	r3, r1, r7
 8002754:	4699      	mov	r9, r3
 8002756:	465d      	mov	r5, fp
 8002758:	e5d5      	b.n	8002306 <__aeabi_dsub+0xb2>
 800275a:	08ff      	lsrs	r7, r7, #3
 800275c:	074b      	lsls	r3, r1, #29
 800275e:	465d      	mov	r5, fp
 8002760:	433b      	orrs	r3, r7
 8002762:	08cc      	lsrs	r4, r1, #3
 8002764:	e6ee      	b.n	8002544 <__aeabi_dsub+0x2f0>
 8002766:	4662      	mov	r2, ip
 8002768:	431a      	orrs	r2, r3
 800276a:	d000      	beq.n	800276e <__aeabi_dsub+0x51a>
 800276c:	e082      	b.n	8002874 <__aeabi_dsub+0x620>
 800276e:	000b      	movs	r3, r1
 8002770:	433b      	orrs	r3, r7
 8002772:	d11b      	bne.n	80027ac <__aeabi_dsub+0x558>
 8002774:	2480      	movs	r4, #128	; 0x80
 8002776:	2500      	movs	r5, #0
 8002778:	0324      	lsls	r4, r4, #12
 800277a:	e6f9      	b.n	8002570 <__aeabi_dsub+0x31c>
 800277c:	19dc      	adds	r4, r3, r7
 800277e:	429c      	cmp	r4, r3
 8002780:	419b      	sbcs	r3, r3
 8002782:	4461      	add	r1, ip
 8002784:	4689      	mov	r9, r1
 8002786:	425b      	negs	r3, r3
 8002788:	4499      	add	r9, r3
 800278a:	464b      	mov	r3, r9
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	d444      	bmi.n	800281a <__aeabi_dsub+0x5c6>
 8002790:	2301      	movs	r3, #1
 8002792:	4698      	mov	r8, r3
 8002794:	e6cc      	b.n	8002530 <__aeabi_dsub+0x2dc>
 8002796:	1bdc      	subs	r4, r3, r7
 8002798:	4662      	mov	r2, ip
 800279a:	42a3      	cmp	r3, r4
 800279c:	419b      	sbcs	r3, r3
 800279e:	1a51      	subs	r1, r2, r1
 80027a0:	425b      	negs	r3, r3
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	4699      	mov	r9, r3
 80027a6:	2301      	movs	r3, #1
 80027a8:	4698      	mov	r8, r3
 80027aa:	e5a4      	b.n	80022f6 <__aeabi_dsub+0xa2>
 80027ac:	08ff      	lsrs	r7, r7, #3
 80027ae:	074b      	lsls	r3, r1, #29
 80027b0:	465d      	mov	r5, fp
 80027b2:	433b      	orrs	r3, r7
 80027b4:	08cc      	lsrs	r4, r1, #3
 80027b6:	e6d7      	b.n	8002568 <__aeabi_dsub+0x314>
 80027b8:	4662      	mov	r2, ip
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0014      	movs	r4, r2
 80027be:	1e63      	subs	r3, r4, #1
 80027c0:	419c      	sbcs	r4, r3
 80027c2:	e679      	b.n	80024b8 <__aeabi_dsub+0x264>
 80027c4:	0015      	movs	r5, r2
 80027c6:	4664      	mov	r4, ip
 80027c8:	3d20      	subs	r5, #32
 80027ca:	40ec      	lsrs	r4, r5
 80027cc:	46a0      	mov	r8, r4
 80027ce:	2a20      	cmp	r2, #32
 80027d0:	d005      	beq.n	80027de <__aeabi_dsub+0x58a>
 80027d2:	2540      	movs	r5, #64	; 0x40
 80027d4:	4664      	mov	r4, ip
 80027d6:	1aaa      	subs	r2, r5, r2
 80027d8:	4094      	lsls	r4, r2
 80027da:	4323      	orrs	r3, r4
 80027dc:	469a      	mov	sl, r3
 80027de:	4654      	mov	r4, sl
 80027e0:	1e63      	subs	r3, r4, #1
 80027e2:	419c      	sbcs	r4, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	4323      	orrs	r3, r4
 80027e8:	e773      	b.n	80026d2 <__aeabi_dsub+0x47e>
 80027ea:	4662      	mov	r2, ip
 80027ec:	431a      	orrs	r2, r3
 80027ee:	d023      	beq.n	8002838 <__aeabi_dsub+0x5e4>
 80027f0:	000a      	movs	r2, r1
 80027f2:	433a      	orrs	r2, r7
 80027f4:	d000      	beq.n	80027f8 <__aeabi_dsub+0x5a4>
 80027f6:	e0a0      	b.n	800293a <__aeabi_dsub+0x6e6>
 80027f8:	4662      	mov	r2, ip
 80027fa:	08db      	lsrs	r3, r3, #3
 80027fc:	0752      	lsls	r2, r2, #29
 80027fe:	4313      	orrs	r3, r2
 8002800:	4662      	mov	r2, ip
 8002802:	08d4      	lsrs	r4, r2, #3
 8002804:	e6b0      	b.n	8002568 <__aeabi_dsub+0x314>
 8002806:	000b      	movs	r3, r1
 8002808:	433b      	orrs	r3, r7
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x5ba>
 800280c:	e728      	b.n	8002660 <__aeabi_dsub+0x40c>
 800280e:	08ff      	lsrs	r7, r7, #3
 8002810:	074b      	lsls	r3, r1, #29
 8002812:	465d      	mov	r5, fp
 8002814:	433b      	orrs	r3, r7
 8002816:	08cc      	lsrs	r4, r1, #3
 8002818:	e697      	b.n	800254a <__aeabi_dsub+0x2f6>
 800281a:	2302      	movs	r3, #2
 800281c:	4698      	mov	r8, r3
 800281e:	e736      	b.n	800268e <__aeabi_dsub+0x43a>
 8002820:	1afc      	subs	r4, r7, r3
 8002822:	42a7      	cmp	r7, r4
 8002824:	41bf      	sbcs	r7, r7
 8002826:	4663      	mov	r3, ip
 8002828:	427f      	negs	r7, r7
 800282a:	1ac9      	subs	r1, r1, r3
 800282c:	1bcb      	subs	r3, r1, r7
 800282e:	4699      	mov	r9, r3
 8002830:	2301      	movs	r3, #1
 8002832:	465d      	mov	r5, fp
 8002834:	4698      	mov	r8, r3
 8002836:	e55e      	b.n	80022f6 <__aeabi_dsub+0xa2>
 8002838:	074b      	lsls	r3, r1, #29
 800283a:	08ff      	lsrs	r7, r7, #3
 800283c:	433b      	orrs	r3, r7
 800283e:	08cc      	lsrs	r4, r1, #3
 8002840:	e692      	b.n	8002568 <__aeabi_dsub+0x314>
 8002842:	1bdc      	subs	r4, r3, r7
 8002844:	4660      	mov	r0, ip
 8002846:	42a3      	cmp	r3, r4
 8002848:	41b6      	sbcs	r6, r6
 800284a:	1a40      	subs	r0, r0, r1
 800284c:	4276      	negs	r6, r6
 800284e:	1b80      	subs	r0, r0, r6
 8002850:	4681      	mov	r9, r0
 8002852:	0200      	lsls	r0, r0, #8
 8002854:	d560      	bpl.n	8002918 <__aeabi_dsub+0x6c4>
 8002856:	1afc      	subs	r4, r7, r3
 8002858:	42a7      	cmp	r7, r4
 800285a:	41bf      	sbcs	r7, r7
 800285c:	4663      	mov	r3, ip
 800285e:	427f      	negs	r7, r7
 8002860:	1ac9      	subs	r1, r1, r3
 8002862:	1bcb      	subs	r3, r1, r7
 8002864:	4699      	mov	r9, r3
 8002866:	465d      	mov	r5, fp
 8002868:	e576      	b.n	8002358 <__aeabi_dsub+0x104>
 800286a:	08ff      	lsrs	r7, r7, #3
 800286c:	074b      	lsls	r3, r1, #29
 800286e:	433b      	orrs	r3, r7
 8002870:	08cc      	lsrs	r4, r1, #3
 8002872:	e667      	b.n	8002544 <__aeabi_dsub+0x2f0>
 8002874:	000a      	movs	r2, r1
 8002876:	08db      	lsrs	r3, r3, #3
 8002878:	433a      	orrs	r2, r7
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x62a>
 800287c:	e66f      	b.n	800255e <__aeabi_dsub+0x30a>
 800287e:	4662      	mov	r2, ip
 8002880:	0752      	lsls	r2, r2, #29
 8002882:	4313      	orrs	r3, r2
 8002884:	4662      	mov	r2, ip
 8002886:	08d4      	lsrs	r4, r2, #3
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	0312      	lsls	r2, r2, #12
 800288c:	4214      	tst	r4, r2
 800288e:	d007      	beq.n	80028a0 <__aeabi_dsub+0x64c>
 8002890:	08c8      	lsrs	r0, r1, #3
 8002892:	4210      	tst	r0, r2
 8002894:	d104      	bne.n	80028a0 <__aeabi_dsub+0x64c>
 8002896:	465d      	mov	r5, fp
 8002898:	0004      	movs	r4, r0
 800289a:	08fb      	lsrs	r3, r7, #3
 800289c:	0749      	lsls	r1, r1, #29
 800289e:	430b      	orrs	r3, r1
 80028a0:	0f5a      	lsrs	r2, r3, #29
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	0752      	lsls	r2, r2, #29
 80028a8:	4313      	orrs	r3, r2
 80028aa:	e65d      	b.n	8002568 <__aeabi_dsub+0x314>
 80028ac:	074b      	lsls	r3, r1, #29
 80028ae:	08ff      	lsrs	r7, r7, #3
 80028b0:	433b      	orrs	r3, r7
 80028b2:	08cc      	lsrs	r4, r1, #3
 80028b4:	e649      	b.n	800254a <__aeabi_dsub+0x2f6>
 80028b6:	19dc      	adds	r4, r3, r7
 80028b8:	429c      	cmp	r4, r3
 80028ba:	419b      	sbcs	r3, r3
 80028bc:	4461      	add	r1, ip
 80028be:	4689      	mov	r9, r1
 80028c0:	425b      	negs	r3, r3
 80028c2:	4499      	add	r9, r3
 80028c4:	464b      	mov	r3, r9
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	d400      	bmi.n	80028cc <__aeabi_dsub+0x678>
 80028ca:	e631      	b.n	8002530 <__aeabi_dsub+0x2dc>
 80028cc:	464a      	mov	r2, r9
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <__aeabi_dsub+0x6d8>)
 80028d0:	401a      	ands	r2, r3
 80028d2:	2301      	movs	r3, #1
 80028d4:	4691      	mov	r9, r2
 80028d6:	4698      	mov	r8, r3
 80028d8:	e62a      	b.n	8002530 <__aeabi_dsub+0x2dc>
 80028da:	0016      	movs	r6, r2
 80028dc:	4664      	mov	r4, ip
 80028de:	3e20      	subs	r6, #32
 80028e0:	40f4      	lsrs	r4, r6
 80028e2:	46a0      	mov	r8, r4
 80028e4:	2a20      	cmp	r2, #32
 80028e6:	d005      	beq.n	80028f4 <__aeabi_dsub+0x6a0>
 80028e8:	2640      	movs	r6, #64	; 0x40
 80028ea:	4664      	mov	r4, ip
 80028ec:	1ab2      	subs	r2, r6, r2
 80028ee:	4094      	lsls	r4, r2
 80028f0:	4323      	orrs	r3, r4
 80028f2:	469a      	mov	sl, r3
 80028f4:	4654      	mov	r4, sl
 80028f6:	1e63      	subs	r3, r4, #1
 80028f8:	419c      	sbcs	r4, r3
 80028fa:	4643      	mov	r3, r8
 80028fc:	431c      	orrs	r4, r3
 80028fe:	e5db      	b.n	80024b8 <__aeabi_dsub+0x264>
 8002900:	0002      	movs	r2, r0
 8002902:	2400      	movs	r4, #0
 8002904:	2300      	movs	r3, #0
 8002906:	e548      	b.n	800239a <__aeabi_dsub+0x146>
 8002908:	19dc      	adds	r4, r3, r7
 800290a:	42bc      	cmp	r4, r7
 800290c:	41bf      	sbcs	r7, r7
 800290e:	4461      	add	r1, ip
 8002910:	4689      	mov	r9, r1
 8002912:	427f      	negs	r7, r7
 8002914:	44b9      	add	r9, r7
 8002916:	e738      	b.n	800278a <__aeabi_dsub+0x536>
 8002918:	464b      	mov	r3, r9
 800291a:	4323      	orrs	r3, r4
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x6cc>
 800291e:	e69f      	b.n	8002660 <__aeabi_dsub+0x40c>
 8002920:	e606      	b.n	8002530 <__aeabi_dsub+0x2dc>
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	000007fe 	.word	0x000007fe
 8002928:	000007ff 	.word	0x000007ff
 800292c:	ff7fffff 	.word	0xff7fffff
 8002930:	08ff      	lsrs	r7, r7, #3
 8002932:	074b      	lsls	r3, r1, #29
 8002934:	433b      	orrs	r3, r7
 8002936:	08cc      	lsrs	r4, r1, #3
 8002938:	e616      	b.n	8002568 <__aeabi_dsub+0x314>
 800293a:	4662      	mov	r2, ip
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	0752      	lsls	r2, r2, #29
 8002940:	4313      	orrs	r3, r2
 8002942:	4662      	mov	r2, ip
 8002944:	08d4      	lsrs	r4, r2, #3
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	0312      	lsls	r2, r2, #12
 800294a:	4214      	tst	r4, r2
 800294c:	d007      	beq.n	800295e <__aeabi_dsub+0x70a>
 800294e:	08c8      	lsrs	r0, r1, #3
 8002950:	4210      	tst	r0, r2
 8002952:	d104      	bne.n	800295e <__aeabi_dsub+0x70a>
 8002954:	465d      	mov	r5, fp
 8002956:	0004      	movs	r4, r0
 8002958:	08fb      	lsrs	r3, r7, #3
 800295a:	0749      	lsls	r1, r1, #29
 800295c:	430b      	orrs	r3, r1
 800295e:	0f5a      	lsrs	r2, r3, #29
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	0752      	lsls	r2, r2, #29
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	4313      	orrs	r3, r2
 8002968:	e5fe      	b.n	8002568 <__aeabi_dsub+0x314>
 800296a:	2300      	movs	r3, #0
 800296c:	4a01      	ldr	r2, [pc, #4]	; (8002974 <__aeabi_dsub+0x720>)
 800296e:	001c      	movs	r4, r3
 8002970:	e513      	b.n	800239a <__aeabi_dsub+0x146>
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	000007ff 	.word	0x000007ff

08002978 <__aeabi_dcmpun>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	0005      	movs	r5, r0
 800297c:	480c      	ldr	r0, [pc, #48]	; (80029b0 <__aeabi_dcmpun+0x38>)
 800297e:	031c      	lsls	r4, r3, #12
 8002980:	0016      	movs	r6, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	030a      	lsls	r2, r1, #12
 8002986:	0049      	lsls	r1, r1, #1
 8002988:	0b12      	lsrs	r2, r2, #12
 800298a:	0d49      	lsrs	r1, r1, #21
 800298c:	0b24      	lsrs	r4, r4, #12
 800298e:	0d5b      	lsrs	r3, r3, #21
 8002990:	4281      	cmp	r1, r0
 8002992:	d008      	beq.n	80029a6 <__aeabi_dcmpun+0x2e>
 8002994:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <__aeabi_dcmpun+0x38>)
 8002996:	2000      	movs	r0, #0
 8002998:	4293      	cmp	r3, r2
 800299a:	d103      	bne.n	80029a4 <__aeabi_dcmpun+0x2c>
 800299c:	0020      	movs	r0, r4
 800299e:	4330      	orrs	r0, r6
 80029a0:	1e43      	subs	r3, r0, #1
 80029a2:	4198      	sbcs	r0, r3
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	2001      	movs	r0, #1
 80029a8:	432a      	orrs	r2, r5
 80029aa:	d1fb      	bne.n	80029a4 <__aeabi_dcmpun+0x2c>
 80029ac:	e7f2      	b.n	8002994 <__aeabi_dcmpun+0x1c>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	000007ff 	.word	0x000007ff

080029b4 <__aeabi_d2iz>:
 80029b4:	000a      	movs	r2, r1
 80029b6:	b530      	push	{r4, r5, lr}
 80029b8:	4c13      	ldr	r4, [pc, #76]	; (8002a08 <__aeabi_d2iz+0x54>)
 80029ba:	0053      	lsls	r3, r2, #1
 80029bc:	0309      	lsls	r1, r1, #12
 80029be:	0005      	movs	r5, r0
 80029c0:	0b09      	lsrs	r1, r1, #12
 80029c2:	2000      	movs	r0, #0
 80029c4:	0d5b      	lsrs	r3, r3, #21
 80029c6:	0fd2      	lsrs	r2, r2, #31
 80029c8:	42a3      	cmp	r3, r4
 80029ca:	dd04      	ble.n	80029d6 <__aeabi_d2iz+0x22>
 80029cc:	480f      	ldr	r0, [pc, #60]	; (8002a0c <__aeabi_d2iz+0x58>)
 80029ce:	4283      	cmp	r3, r0
 80029d0:	dd02      	ble.n	80029d8 <__aeabi_d2iz+0x24>
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <__aeabi_d2iz+0x5c>)
 80029d4:	18d0      	adds	r0, r2, r3
 80029d6:	bd30      	pop	{r4, r5, pc}
 80029d8:	2080      	movs	r0, #128	; 0x80
 80029da:	0340      	lsls	r0, r0, #13
 80029dc:	4301      	orrs	r1, r0
 80029de:	480d      	ldr	r0, [pc, #52]	; (8002a14 <__aeabi_d2iz+0x60>)
 80029e0:	1ac0      	subs	r0, r0, r3
 80029e2:	281f      	cmp	r0, #31
 80029e4:	dd08      	ble.n	80029f8 <__aeabi_d2iz+0x44>
 80029e6:	480c      	ldr	r0, [pc, #48]	; (8002a18 <__aeabi_d2iz+0x64>)
 80029e8:	1ac3      	subs	r3, r0, r3
 80029ea:	40d9      	lsrs	r1, r3
 80029ec:	000b      	movs	r3, r1
 80029ee:	4258      	negs	r0, r3
 80029f0:	2a00      	cmp	r2, #0
 80029f2:	d1f0      	bne.n	80029d6 <__aeabi_d2iz+0x22>
 80029f4:	0018      	movs	r0, r3
 80029f6:	e7ee      	b.n	80029d6 <__aeabi_d2iz+0x22>
 80029f8:	4c08      	ldr	r4, [pc, #32]	; (8002a1c <__aeabi_d2iz+0x68>)
 80029fa:	40c5      	lsrs	r5, r0
 80029fc:	46a4      	mov	ip, r4
 80029fe:	4463      	add	r3, ip
 8002a00:	4099      	lsls	r1, r3
 8002a02:	000b      	movs	r3, r1
 8002a04:	432b      	orrs	r3, r5
 8002a06:	e7f2      	b.n	80029ee <__aeabi_d2iz+0x3a>
 8002a08:	000003fe 	.word	0x000003fe
 8002a0c:	0000041d 	.word	0x0000041d
 8002a10:	7fffffff 	.word	0x7fffffff
 8002a14:	00000433 	.word	0x00000433
 8002a18:	00000413 	.word	0x00000413
 8002a1c:	fffffbed 	.word	0xfffffbed

08002a20 <__aeabi_i2d>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d016      	beq.n	8002a54 <__aeabi_i2d+0x34>
 8002a26:	17c3      	asrs	r3, r0, #31
 8002a28:	18c5      	adds	r5, r0, r3
 8002a2a:	405d      	eors	r5, r3
 8002a2c:	0fc4      	lsrs	r4, r0, #31
 8002a2e:	0028      	movs	r0, r5
 8002a30:	f000 f8ce 	bl	8002bd0 <__clzsi2>
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <__aeabi_i2d+0x5c>)
 8002a36:	1a12      	subs	r2, r2, r0
 8002a38:	280a      	cmp	r0, #10
 8002a3a:	dc16      	bgt.n	8002a6a <__aeabi_i2d+0x4a>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	002e      	movs	r6, r5
 8002a40:	3315      	adds	r3, #21
 8002a42:	409e      	lsls	r6, r3
 8002a44:	230b      	movs	r3, #11
 8002a46:	1a18      	subs	r0, r3, r0
 8002a48:	40c5      	lsrs	r5, r0
 8002a4a:	0552      	lsls	r2, r2, #21
 8002a4c:	032d      	lsls	r5, r5, #12
 8002a4e:	0b2d      	lsrs	r5, r5, #12
 8002a50:	0d53      	lsrs	r3, r2, #21
 8002a52:	e003      	b.n	8002a5c <__aeabi_i2d+0x3c>
 8002a54:	2400      	movs	r4, #0
 8002a56:	2300      	movs	r3, #0
 8002a58:	2500      	movs	r5, #0
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	051b      	lsls	r3, r3, #20
 8002a5e:	432b      	orrs	r3, r5
 8002a60:	07e4      	lsls	r4, r4, #31
 8002a62:	4323      	orrs	r3, r4
 8002a64:	0030      	movs	r0, r6
 8002a66:	0019      	movs	r1, r3
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
 8002a6a:	380b      	subs	r0, #11
 8002a6c:	4085      	lsls	r5, r0
 8002a6e:	0552      	lsls	r2, r2, #21
 8002a70:	032d      	lsls	r5, r5, #12
 8002a72:	2600      	movs	r6, #0
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	0d53      	lsrs	r3, r2, #21
 8002a78:	e7f0      	b.n	8002a5c <__aeabi_i2d+0x3c>
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	0000041e 	.word	0x0000041e

08002a80 <__aeabi_ui2d>:
 8002a80:	b510      	push	{r4, lr}
 8002a82:	1e04      	subs	r4, r0, #0
 8002a84:	d010      	beq.n	8002aa8 <__aeabi_ui2d+0x28>
 8002a86:	f000 f8a3 	bl	8002bd0 <__clzsi2>
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <__aeabi_ui2d+0x48>)
 8002a8c:	1a1b      	subs	r3, r3, r0
 8002a8e:	280a      	cmp	r0, #10
 8002a90:	dc11      	bgt.n	8002ab6 <__aeabi_ui2d+0x36>
 8002a92:	220b      	movs	r2, #11
 8002a94:	0021      	movs	r1, r4
 8002a96:	1a12      	subs	r2, r2, r0
 8002a98:	40d1      	lsrs	r1, r2
 8002a9a:	3015      	adds	r0, #21
 8002a9c:	030a      	lsls	r2, r1, #12
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	4084      	lsls	r4, r0
 8002aa2:	0b12      	lsrs	r2, r2, #12
 8002aa4:	0d5b      	lsrs	r3, r3, #21
 8002aa6:	e001      	b.n	8002aac <__aeabi_ui2d+0x2c>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	0020      	movs	r0, r4
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	bd10      	pop	{r4, pc}
 8002ab6:	0022      	movs	r2, r4
 8002ab8:	380b      	subs	r0, #11
 8002aba:	4082      	lsls	r2, r0
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	0312      	lsls	r2, r2, #12
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	0b12      	lsrs	r2, r2, #12
 8002ac4:	0d5b      	lsrs	r3, r3, #21
 8002ac6:	e7f1      	b.n	8002aac <__aeabi_ui2d+0x2c>
 8002ac8:	0000041e 	.word	0x0000041e

08002acc <__aeabi_f2d>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	0043      	lsls	r3, r0, #1
 8002ad0:	0246      	lsls	r6, r0, #9
 8002ad2:	0fc4      	lsrs	r4, r0, #31
 8002ad4:	20fe      	movs	r0, #254	; 0xfe
 8002ad6:	0e1b      	lsrs	r3, r3, #24
 8002ad8:	1c59      	adds	r1, r3, #1
 8002ada:	0a75      	lsrs	r5, r6, #9
 8002adc:	4208      	tst	r0, r1
 8002ade:	d00c      	beq.n	8002afa <__aeabi_f2d+0x2e>
 8002ae0:	22e0      	movs	r2, #224	; 0xe0
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	4694      	mov	ip, r2
 8002ae6:	076d      	lsls	r5, r5, #29
 8002ae8:	0b36      	lsrs	r6, r6, #12
 8002aea:	4463      	add	r3, ip
 8002aec:	051b      	lsls	r3, r3, #20
 8002aee:	4333      	orrs	r3, r6
 8002af0:	07e4      	lsls	r4, r4, #31
 8002af2:	4323      	orrs	r3, r4
 8002af4:	0028      	movs	r0, r5
 8002af6:	0019      	movs	r1, r3
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d114      	bne.n	8002b28 <__aeabi_f2d+0x5c>
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	d01b      	beq.n	8002b3a <__aeabi_f2d+0x6e>
 8002b02:	0028      	movs	r0, r5
 8002b04:	f000 f864 	bl	8002bd0 <__clzsi2>
 8002b08:	280a      	cmp	r0, #10
 8002b0a:	dc1c      	bgt.n	8002b46 <__aeabi_f2d+0x7a>
 8002b0c:	230b      	movs	r3, #11
 8002b0e:	002e      	movs	r6, r5
 8002b10:	1a1b      	subs	r3, r3, r0
 8002b12:	40de      	lsrs	r6, r3
 8002b14:	0003      	movs	r3, r0
 8002b16:	3315      	adds	r3, #21
 8002b18:	409d      	lsls	r5, r3
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <__aeabi_f2d+0x88>)
 8002b1c:	0336      	lsls	r6, r6, #12
 8002b1e:	1a12      	subs	r2, r2, r0
 8002b20:	0552      	lsls	r2, r2, #21
 8002b22:	0b36      	lsrs	r6, r6, #12
 8002b24:	0d53      	lsrs	r3, r2, #21
 8002b26:	e7e1      	b.n	8002aec <__aeabi_f2d+0x20>
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	d009      	beq.n	8002b40 <__aeabi_f2d+0x74>
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	0b36      	lsrs	r6, r6, #12
 8002b30:	0312      	lsls	r2, r2, #12
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <__aeabi_f2d+0x8c>)
 8002b34:	076d      	lsls	r5, r5, #29
 8002b36:	4316      	orrs	r6, r2
 8002b38:	e7d8      	b.n	8002aec <__aeabi_f2d+0x20>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	e7d5      	b.n	8002aec <__aeabi_f2d+0x20>
 8002b40:	2600      	movs	r6, #0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <__aeabi_f2d+0x8c>)
 8002b44:	e7d2      	b.n	8002aec <__aeabi_f2d+0x20>
 8002b46:	0003      	movs	r3, r0
 8002b48:	3b0b      	subs	r3, #11
 8002b4a:	409d      	lsls	r5, r3
 8002b4c:	002e      	movs	r6, r5
 8002b4e:	2500      	movs	r5, #0
 8002b50:	e7e3      	b.n	8002b1a <__aeabi_f2d+0x4e>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	00000389 	.word	0x00000389
 8002b58:	000007ff 	.word	0x000007ff

08002b5c <__aeabi_cfrcmple>:
 8002b5c:	4684      	mov	ip, r0
 8002b5e:	0008      	movs	r0, r1
 8002b60:	4661      	mov	r1, ip
 8002b62:	e7ff      	b.n	8002b64 <__aeabi_cfcmpeq>

08002b64 <__aeabi_cfcmpeq>:
 8002b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b66:	f000 f8bd 	bl	8002ce4 <__lesf2>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d401      	bmi.n	8002b72 <__aeabi_cfcmpeq+0xe>
 8002b6e:	2100      	movs	r1, #0
 8002b70:	42c8      	cmn	r0, r1
 8002b72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002b74 <__aeabi_fcmpeq>:
 8002b74:	b510      	push	{r4, lr}
 8002b76:	f000 f849 	bl	8002c0c <__eqsf2>
 8002b7a:	4240      	negs	r0, r0
 8002b7c:	3001      	adds	r0, #1
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <__aeabi_fcmplt>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	f000 f8af 	bl	8002ce4 <__lesf2>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	db01      	blt.n	8002b8e <__aeabi_fcmplt+0xe>
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	2001      	movs	r0, #1
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)

08002b94 <__aeabi_fcmple>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	f000 f8a5 	bl	8002ce4 <__lesf2>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	dd01      	ble.n	8002ba2 <__aeabi_fcmple+0xe>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)

08002ba8 <__aeabi_fcmpgt>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	f000 f855 	bl	8002c58 <__gesf2>
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	dc01      	bgt.n	8002bb6 <__aeabi_fcmpgt+0xe>
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	bd10      	pop	{r4, pc}
 8002bba:	46c0      	nop			; (mov r8, r8)

08002bbc <__aeabi_fcmpge>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	f000 f84b 	bl	8002c58 <__gesf2>
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	da01      	bge.n	8002bca <__aeabi_fcmpge+0xe>
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	2001      	movs	r0, #1
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)

08002bd0 <__clzsi2>:
 8002bd0:	211c      	movs	r1, #28
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	4298      	cmp	r0, r3
 8002bd8:	d301      	bcc.n	8002bde <__clzsi2+0xe>
 8002bda:	0c00      	lsrs	r0, r0, #16
 8002bdc:	3910      	subs	r1, #16
 8002bde:	0a1b      	lsrs	r3, r3, #8
 8002be0:	4298      	cmp	r0, r3
 8002be2:	d301      	bcc.n	8002be8 <__clzsi2+0x18>
 8002be4:	0a00      	lsrs	r0, r0, #8
 8002be6:	3908      	subs	r1, #8
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	4298      	cmp	r0, r3
 8002bec:	d301      	bcc.n	8002bf2 <__clzsi2+0x22>
 8002bee:	0900      	lsrs	r0, r0, #4
 8002bf0:	3904      	subs	r1, #4
 8002bf2:	a202      	add	r2, pc, #8	; (adr r2, 8002bfc <__clzsi2+0x2c>)
 8002bf4:	5c10      	ldrb	r0, [r2, r0]
 8002bf6:	1840      	adds	r0, r0, r1
 8002bf8:	4770      	bx	lr
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	02020304 	.word	0x02020304
 8002c00:	01010101 	.word	0x01010101
	...

08002c0c <__eqsf2>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	0042      	lsls	r2, r0, #1
 8002c10:	0245      	lsls	r5, r0, #9
 8002c12:	024e      	lsls	r6, r1, #9
 8002c14:	004c      	lsls	r4, r1, #1
 8002c16:	0fc3      	lsrs	r3, r0, #31
 8002c18:	0a6d      	lsrs	r5, r5, #9
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	0e12      	lsrs	r2, r2, #24
 8002c1e:	0a76      	lsrs	r6, r6, #9
 8002c20:	0e24      	lsrs	r4, r4, #24
 8002c22:	0fc9      	lsrs	r1, r1, #31
 8002c24:	2aff      	cmp	r2, #255	; 0xff
 8002c26:	d006      	beq.n	8002c36 <__eqsf2+0x2a>
 8002c28:	2cff      	cmp	r4, #255	; 0xff
 8002c2a:	d003      	beq.n	8002c34 <__eqsf2+0x28>
 8002c2c:	42a2      	cmp	r2, r4
 8002c2e:	d101      	bne.n	8002c34 <__eqsf2+0x28>
 8002c30:	42b5      	cmp	r5, r6
 8002c32:	d006      	beq.n	8002c42 <__eqsf2+0x36>
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	d1fc      	bne.n	8002c34 <__eqsf2+0x28>
 8002c3a:	2cff      	cmp	r4, #255	; 0xff
 8002c3c:	d1fa      	bne.n	8002c34 <__eqsf2+0x28>
 8002c3e:	2e00      	cmp	r6, #0
 8002c40:	d1f8      	bne.n	8002c34 <__eqsf2+0x28>
 8002c42:	428b      	cmp	r3, r1
 8002c44:	d006      	beq.n	8002c54 <__eqsf2+0x48>
 8002c46:	2001      	movs	r0, #1
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d1f3      	bne.n	8002c34 <__eqsf2+0x28>
 8002c4c:	0028      	movs	r0, r5
 8002c4e:	1e43      	subs	r3, r0, #1
 8002c50:	4198      	sbcs	r0, r3
 8002c52:	e7ef      	b.n	8002c34 <__eqsf2+0x28>
 8002c54:	2000      	movs	r0, #0
 8002c56:	e7ed      	b.n	8002c34 <__eqsf2+0x28>

08002c58 <__gesf2>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	0042      	lsls	r2, r0, #1
 8002c5c:	0245      	lsls	r5, r0, #9
 8002c5e:	024e      	lsls	r6, r1, #9
 8002c60:	004c      	lsls	r4, r1, #1
 8002c62:	0fc3      	lsrs	r3, r0, #31
 8002c64:	0a6d      	lsrs	r5, r5, #9
 8002c66:	0e12      	lsrs	r2, r2, #24
 8002c68:	0a76      	lsrs	r6, r6, #9
 8002c6a:	0e24      	lsrs	r4, r4, #24
 8002c6c:	0fc8      	lsrs	r0, r1, #31
 8002c6e:	2aff      	cmp	r2, #255	; 0xff
 8002c70:	d01b      	beq.n	8002caa <__gesf2+0x52>
 8002c72:	2cff      	cmp	r4, #255	; 0xff
 8002c74:	d00e      	beq.n	8002c94 <__gesf2+0x3c>
 8002c76:	2a00      	cmp	r2, #0
 8002c78:	d11b      	bne.n	8002cb2 <__gesf2+0x5a>
 8002c7a:	2c00      	cmp	r4, #0
 8002c7c:	d101      	bne.n	8002c82 <__gesf2+0x2a>
 8002c7e:	2e00      	cmp	r6, #0
 8002c80:	d01c      	beq.n	8002cbc <__gesf2+0x64>
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	d00c      	beq.n	8002ca0 <__gesf2+0x48>
 8002c86:	4283      	cmp	r3, r0
 8002c88:	d01c      	beq.n	8002cc4 <__gesf2+0x6c>
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	1e58      	subs	r0, r3, #1
 8002c8e:	4008      	ands	r0, r1
 8002c90:	3801      	subs	r0, #1
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	2e00      	cmp	r6, #0
 8002c96:	d122      	bne.n	8002cde <__gesf2+0x86>
 8002c98:	2a00      	cmp	r2, #0
 8002c9a:	d1f4      	bne.n	8002c86 <__gesf2+0x2e>
 8002c9c:	2d00      	cmp	r5, #0
 8002c9e:	d1f2      	bne.n	8002c86 <__gesf2+0x2e>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d1f6      	bne.n	8002c92 <__gesf2+0x3a>
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	4240      	negs	r0, r0
 8002ca8:	e7f3      	b.n	8002c92 <__gesf2+0x3a>
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	d117      	bne.n	8002cde <__gesf2+0x86>
 8002cae:	2cff      	cmp	r4, #255	; 0xff
 8002cb0:	d0f0      	beq.n	8002c94 <__gesf2+0x3c>
 8002cb2:	2c00      	cmp	r4, #0
 8002cb4:	d1e7      	bne.n	8002c86 <__gesf2+0x2e>
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	d1e5      	bne.n	8002c86 <__gesf2+0x2e>
 8002cba:	e7e6      	b.n	8002c8a <__gesf2+0x32>
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	2d00      	cmp	r5, #0
 8002cc0:	d0e7      	beq.n	8002c92 <__gesf2+0x3a>
 8002cc2:	e7e2      	b.n	8002c8a <__gesf2+0x32>
 8002cc4:	42a2      	cmp	r2, r4
 8002cc6:	dc05      	bgt.n	8002cd4 <__gesf2+0x7c>
 8002cc8:	dbea      	blt.n	8002ca0 <__gesf2+0x48>
 8002cca:	42b5      	cmp	r5, r6
 8002ccc:	d802      	bhi.n	8002cd4 <__gesf2+0x7c>
 8002cce:	d3e7      	bcc.n	8002ca0 <__gesf2+0x48>
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	e7de      	b.n	8002c92 <__gesf2+0x3a>
 8002cd4:	4243      	negs	r3, r0
 8002cd6:	4158      	adcs	r0, r3
 8002cd8:	0040      	lsls	r0, r0, #1
 8002cda:	3801      	subs	r0, #1
 8002cdc:	e7d9      	b.n	8002c92 <__gesf2+0x3a>
 8002cde:	2002      	movs	r0, #2
 8002ce0:	4240      	negs	r0, r0
 8002ce2:	e7d6      	b.n	8002c92 <__gesf2+0x3a>

08002ce4 <__lesf2>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	0042      	lsls	r2, r0, #1
 8002ce8:	0245      	lsls	r5, r0, #9
 8002cea:	024e      	lsls	r6, r1, #9
 8002cec:	004c      	lsls	r4, r1, #1
 8002cee:	0fc3      	lsrs	r3, r0, #31
 8002cf0:	0a6d      	lsrs	r5, r5, #9
 8002cf2:	0e12      	lsrs	r2, r2, #24
 8002cf4:	0a76      	lsrs	r6, r6, #9
 8002cf6:	0e24      	lsrs	r4, r4, #24
 8002cf8:	0fc8      	lsrs	r0, r1, #31
 8002cfa:	2aff      	cmp	r2, #255	; 0xff
 8002cfc:	d00b      	beq.n	8002d16 <__lesf2+0x32>
 8002cfe:	2cff      	cmp	r4, #255	; 0xff
 8002d00:	d00d      	beq.n	8002d1e <__lesf2+0x3a>
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	d11f      	bne.n	8002d46 <__lesf2+0x62>
 8002d06:	2c00      	cmp	r4, #0
 8002d08:	d116      	bne.n	8002d38 <__lesf2+0x54>
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d114      	bne.n	8002d38 <__lesf2+0x54>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	2d00      	cmp	r5, #0
 8002d12:	d010      	beq.n	8002d36 <__lesf2+0x52>
 8002d14:	e009      	b.n	8002d2a <__lesf2+0x46>
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	d10c      	bne.n	8002d34 <__lesf2+0x50>
 8002d1a:	2cff      	cmp	r4, #255	; 0xff
 8002d1c:	d113      	bne.n	8002d46 <__lesf2+0x62>
 8002d1e:	2e00      	cmp	r6, #0
 8002d20:	d108      	bne.n	8002d34 <__lesf2+0x50>
 8002d22:	2a00      	cmp	r2, #0
 8002d24:	d008      	beq.n	8002d38 <__lesf2+0x54>
 8002d26:	4283      	cmp	r3, r0
 8002d28:	d012      	beq.n	8002d50 <__lesf2+0x6c>
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	4008      	ands	r0, r1
 8002d30:	3801      	subs	r0, #1
 8002d32:	e000      	b.n	8002d36 <__lesf2+0x52>
 8002d34:	2002      	movs	r0, #2
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	d1f4      	bne.n	8002d26 <__lesf2+0x42>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d1fa      	bne.n	8002d36 <__lesf2+0x52>
 8002d40:	2001      	movs	r0, #1
 8002d42:	4240      	negs	r0, r0
 8002d44:	e7f7      	b.n	8002d36 <__lesf2+0x52>
 8002d46:	2c00      	cmp	r4, #0
 8002d48:	d1ed      	bne.n	8002d26 <__lesf2+0x42>
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	d1eb      	bne.n	8002d26 <__lesf2+0x42>
 8002d4e:	e7ec      	b.n	8002d2a <__lesf2+0x46>
 8002d50:	42a2      	cmp	r2, r4
 8002d52:	dc05      	bgt.n	8002d60 <__lesf2+0x7c>
 8002d54:	dbf2      	blt.n	8002d3c <__lesf2+0x58>
 8002d56:	42b5      	cmp	r5, r6
 8002d58:	d802      	bhi.n	8002d60 <__lesf2+0x7c>
 8002d5a:	d3ef      	bcc.n	8002d3c <__lesf2+0x58>
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	e7ea      	b.n	8002d36 <__lesf2+0x52>
 8002d60:	4243      	negs	r3, r0
 8002d62:	4158      	adcs	r0, r3
 8002d64:	0040      	lsls	r0, r0, #1
 8002d66:	3801      	subs	r0, #1
 8002d68:	e7e5      	b.n	8002d36 <__lesf2+0x52>
 8002d6a:	46c0      	nop			; (mov r8, r8)

08002d6c <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	f000 f999 	bl	80030a8 <icm20948_who_am_i>
 8002d76:	0003      	movs	r3, r0
 8002d78:	001a      	movs	r2, r3
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4053      	eors	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f6      	bne.n	8002d72 <icm20948_init+0x6>

	icm20948_device_reset();
 8002d84:	f000 f9b9 	bl	80030fa <icm20948_device_reset>
	icm20948_wakeup();
 8002d88:	f000 f9d0 	bl	800312c <icm20948_wakeup>

	icm20948_clock_source(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f000 fa60 	bl	8003252 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002d92:	f000 fa7f 	bl	8003294 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8002d96:	f000 f9e7 	bl	8003168 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f000 fa84 	bl	80032a8 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 faa5 	bl	80032f0 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f000 fac6 	bl	8003338 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 fad4 	bl	800335a <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002db2:	f000 fb0c 	bl	80033ce <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002db6:	f000 fbcf 	bl	8003558 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002dba:	2003      	movs	r0, #3
 8002dbc:	f000 fd20 	bl	8003800 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 fd79 	bl	80038b8 <icm20948_accel_full_scale_select>
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ak09916_init>:

void ak09916_init()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8002dd0:	f000 f9e5 	bl	800319e <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8002dd4:	f000 f9fe 	bl	80031d4 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8002dd8:	2007      	movs	r0, #7
 8002dda:	f000 fa19 	bl	8003210 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	f000 f977 	bl	80030d2 <ak09916_who_am_i>
 8002de4:	0003      	movs	r3, r0
 8002de6:	001a      	movs	r2, r3
 8002de8:	2301      	movs	r3, #1
 8002dea:	4053      	eors	r3, r2
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f6      	bne.n	8002de0 <ak09916_init+0x14>

	ak09916_soft_reset();
 8002df2:	f000 f98f 	bl	8003114 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8002df6:	2008      	movs	r0, #8
 8002df8:	f000 fad6 	bl	80033a8 <ak09916_operation_mode_setting>
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8002e0a:	2206      	movs	r2, #6
 8002e0c:	2133      	movs	r1, #51	; 0x33
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 fe40 	bl	8003a94 <read_multiple_icm20948_reg>
 8002e14:	0003      	movs	r3, r0
 8002e16:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3301      	adds	r3, #1
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7fd ffd7 	bl	8000de0 <__aeabi_i2f>
 8002e32:	1c02      	adds	r2, r0, #0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	021b      	lsls	r3, r3, #8
 8002e40:	b21a      	sxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3303      	adds	r3, #3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd ffc6 	bl	8000de0 <__aeabi_i2f>
 8002e54:	1c02      	adds	r2, r0, #0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3305      	adds	r3, #5
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21b      	sxth	r3, r3
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7fd ffb5 	bl	8000de0 <__aeabi_i2f>
 8002e76:	1c02      	adds	r2, r0, #0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	212d      	movs	r1, #45	; 0x2d
 8002e90:	2000      	movs	r0, #0
 8002e92:	f000 fdff 	bl	8003a94 <read_multiple_icm20948_reg>
 8002e96:	0003      	movs	r3, r0
 8002e98:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	b21a      	sxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7fd ff96 	bl	8000de0 <__aeabi_i2f>
 8002eb4:	1c02      	adds	r2, r0, #0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	b21a      	sxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3303      	adds	r3, #3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd ff85 	bl	8000de0 <__aeabi_i2f>
 8002ed6:	1c02      	adds	r2, r0, #0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3305      	adds	r3, #5
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fd ff74 	bl	8000de0 <__aeabi_i2f>
 8002ef8:	1c02      	adds	r2, r0, #0
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <icm20948_accel_read+0x94>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	1c19      	adds	r1, r3, #0
 8002f00:	1c10      	adds	r0, r2, #0
 8002f02:	f7fd fae9 	bl	80004d8 <__aeabi_fadd>
 8002f06:	1c03      	adds	r3, r0, #0
 8002f08:	1c1a      	adds	r2, r3, #0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	200001fc 	.word	0x200001fc

08002f1c <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8002f24:	2010      	movs	r0, #16
 8002f26:	f000 fe23 	bl	8003b70 <read_single_ak09916_reg>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	2017      	movs	r0, #23
 8002f30:	183b      	adds	r3, r7, r0
 8002f32:	2201      	movs	r2, #1
 8002f34:	400a      	ands	r2, r1
 8002f36:	701a      	strb	r2, [r3, #0]
	if(!drdy)	return false;
 8002f38:	183b      	adds	r3, r7, r0
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <ak09916_mag_read+0x28>
 8002f40:	2300      	movs	r3, #0
 8002f42:	e048      	b.n	8002fd6 <ak09916_mag_read+0xba>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8002f44:	2106      	movs	r1, #6
 8002f46:	2011      	movs	r0, #17
 8002f48:	f000 fe5a 	bl	8003c00 <read_multiple_ak09916_reg>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	613b      	str	r3, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8002f50:	2018      	movs	r0, #24
 8002f52:	f000 fe0d 	bl	8003b70 <read_single_ak09916_reg>
 8002f56:	0003      	movs	r3, r0
 8002f58:	0019      	movs	r1, r3
 8002f5a:	200f      	movs	r0, #15
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	2208      	movs	r2, #8
 8002f60:	400a      	ands	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
	if(hofl)	return false;
 8002f64:	183b      	adds	r3, r7, r0
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <ak09916_mag_read+0x54>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	e032      	b.n	8002fd6 <ak09916_mag_read+0xba>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	3301      	adds	r3, #1
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b21a      	sxth	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b21b      	sxth	r3, r3
 8002f80:	4313      	orrs	r3, r2
 8002f82:	b21b      	sxth	r3, r3
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd ff2b 	bl	8000de0 <__aeabi_i2f>
 8002f8a:	1c02      	adds	r2, r0, #0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	3303      	adds	r3, #3
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7fd ff1a 	bl	8000de0 <__aeabi_i2f>
 8002fac:	1c02      	adds	r2, r0, #0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	b21a      	sxth	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7fd ff09 	bl	8000de0 <__aeabi_i2f>
 8002fce:	1c02      	adds	r2, r0, #0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]

	return true;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff ff09 	bl	8002e02 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <icm20948_gyro_read_dps+0x60>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1c19      	adds	r1, r3, #0
 8002ffa:	1c10      	adds	r0, r2, #0
 8002ffc:	f7fd fc0a 	bl	8000814 <__aeabi_fdiv>
 8003000:	1c03      	adds	r3, r0, #0
 8003002:	1c1a      	adds	r2, r3, #0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	601a      	str	r2, [r3, #0]
	data->y /= gyro_scale_factor;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <icm20948_gyro_read_dps+0x60>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1c19      	adds	r1, r3, #0
 8003012:	1c10      	adds	r0, r2, #0
 8003014:	f7fd fbfe 	bl	8000814 <__aeabi_fdiv>
 8003018:	1c03      	adds	r3, r0, #0
 800301a:	1c1a      	adds	r2, r3, #0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	605a      	str	r2, [r3, #4]
	data->z /= gyro_scale_factor;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <icm20948_gyro_read_dps+0x60>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	1c19      	adds	r1, r3, #0
 800302a:	1c10      	adds	r0, r2, #0
 800302c:	f7fd fbf2 	bl	8000814 <__aeabi_fdiv>
 8003030:	1c03      	adds	r3, r0, #0
 8003032:	1c1a      	adds	r2, r3, #0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	609a      	str	r2, [r3, #8]
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b002      	add	sp, #8
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200001f8 	.word	0x200001f8

08003044 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff ff18 	bl	8002e84 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <icm20948_accel_read_g+0x60>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	1c19      	adds	r1, r3, #0
 800305e:	1c10      	adds	r0, r2, #0
 8003060:	f7fd fbd8 	bl	8000814 <__aeabi_fdiv>
 8003064:	1c03      	adds	r3, r0, #0
 8003066:	1c1a      	adds	r2, r3, #0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
	data->y /= accel_scale_factor;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <icm20948_accel_read_g+0x60>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1c19      	adds	r1, r3, #0
 8003076:	1c10      	adds	r0, r2, #0
 8003078:	f7fd fbcc 	bl	8000814 <__aeabi_fdiv>
 800307c:	1c03      	adds	r3, r0, #0
 800307e:	1c1a      	adds	r2, r3, #0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	605a      	str	r2, [r3, #4]
	data->z /= accel_scale_factor;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <icm20948_accel_read_g+0x60>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c19      	adds	r1, r3, #0
 800308e:	1c10      	adds	r0, r2, #0
 8003090:	f7fd fbc0 	bl	8000814 <__aeabi_fdiv>
 8003094:	1c03      	adds	r3, r0, #0
 8003096:	1c1a      	adds	r2, r3, #0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	200001fc 	.word	0x200001fc

080030a8 <icm20948_who_am_i>:



/* Sub Functions */
bool icm20948_who_am_i()
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80030ae:	1dfc      	adds	r4, r7, #7
 80030b0:	2100      	movs	r1, #0
 80030b2:	2000      	movs	r0, #0
 80030b4:	f000 fc8e 	bl	80039d4 <read_single_icm20948_reg>
 80030b8:	0003      	movs	r3, r0
 80030ba:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2bea      	cmp	r3, #234	; 0xea
 80030c2:	d101      	bne.n	80030c8 <icm20948_who_am_i+0x20>
		return true;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <icm20948_who_am_i+0x22>
	else
		return false;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b003      	add	sp, #12
 80030d0:	bd90      	pop	{r4, r7, pc}

080030d2 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 80030d2:	b590      	push	{r4, r7, lr}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 80030d8:	1dfc      	adds	r4, r7, #7
 80030da:	2001      	movs	r0, #1
 80030dc:	f000 fd48 	bl	8003b70 <read_single_ak09916_reg>
 80030e0:	0003      	movs	r3, r0
 80030e2:	7023      	strb	r3, [r4, #0]

	if(ak09916_id == AK09916_ID)
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d101      	bne.n	80030f0 <ak09916_who_am_i+0x1e>
		return true;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <ak09916_who_am_i+0x20>
	else
		return false;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b003      	add	sp, #12
 80030f8:	bd90      	pop	{r4, r7, pc}

080030fa <icm20948_device_reset>:

void icm20948_device_reset()
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 80030fe:	22c1      	movs	r2, #193	; 0xc1
 8003100:	2106      	movs	r1, #6
 8003102:	2000      	movs	r0, #0
 8003104:	f000 fc98 	bl	8003a38 <write_single_icm20948_reg>
	HAL_Delay(100);
 8003108:	2064      	movs	r0, #100	; 0x64
 800310a:	f001 fa45 	bl	8004598 <HAL_Delay>
}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8003118:	2101      	movs	r1, #1
 800311a:	2032      	movs	r0, #50	; 0x32
 800311c:	f000 fd4b 	bl	8003bb6 <write_single_ak09916_reg>
	HAL_Delay(100);
 8003120:	2064      	movs	r0, #100	; 0x64
 8003122:	f001 fa39 	bl	8004598 <HAL_Delay>
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <icm20948_wakeup>:

void icm20948_wakeup()
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8003132:	1dfc      	adds	r4, r7, #7
 8003134:	2106      	movs	r1, #6
 8003136:	2000      	movs	r0, #0
 8003138:	f000 fc4c 	bl	80039d4 <read_single_icm20948_reg>
 800313c:	0003      	movs	r3, r0
 800313e:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	1dfa      	adds	r2, r7, #7
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	438a      	bics	r2, r1
 800314a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	001a      	movs	r2, r3
 8003152:	2106      	movs	r1, #6
 8003154:	2000      	movs	r0, #0
 8003156:	f000 fc6f 	bl	8003a38 <write_single_icm20948_reg>
	HAL_Delay(100);
 800315a:	2064      	movs	r0, #100	; 0x64
 800315c:	f001 fa1c 	bl	8004598 <HAL_Delay>
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b003      	add	sp, #12
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800316e:	1dfc      	adds	r4, r7, #7
 8003170:	2103      	movs	r1, #3
 8003172:	2000      	movs	r0, #0
 8003174:	f000 fc2e 	bl	80039d4 <read_single_icm20948_reg>
 8003178:	0003      	movs	r3, r0
 800317a:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	1dfa      	adds	r2, r7, #7
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	2110      	movs	r1, #16
 8003184:	430a      	orrs	r2, r1
 8003186:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8003188:	1dfb      	adds	r3, r7, #7
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	001a      	movs	r2, r3
 800318e:	2103      	movs	r1, #3
 8003190:	2000      	movs	r0, #0
 8003192:	f000 fc51 	bl	8003a38 <write_single_icm20948_reg>
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b003      	add	sp, #12
 800319c:	bd90      	pop	{r4, r7, pc}

0800319e <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 800319e:	b590      	push	{r4, r7, lr}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80031a4:	1dfc      	adds	r4, r7, #7
 80031a6:	2103      	movs	r1, #3
 80031a8:	2000      	movs	r0, #0
 80031aa:	f000 fc13 	bl	80039d4 <read_single_icm20948_reg>
 80031ae:	0003      	movs	r3, r0
 80031b0:	7023      	strb	r3, [r4, #0]
	new_val |= 0x02;
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	1dfa      	adds	r2, r7, #7
 80031b6:	7812      	ldrb	r2, [r2, #0]
 80031b8:	2102      	movs	r1, #2
 80031ba:	430a      	orrs	r2, r1
 80031bc:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80031be:	1dfb      	adds	r3, r7, #7
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	001a      	movs	r2, r3
 80031c4:	2103      	movs	r1, #3
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 fc36 	bl	8003a38 <write_single_icm20948_reg>
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b003      	add	sp, #12
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80031da:	1dfc      	adds	r4, r7, #7
 80031dc:	2103      	movs	r1, #3
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 fbf8 	bl	80039d4 <read_single_icm20948_reg>
 80031e4:	0003      	movs	r3, r0
 80031e6:	7023      	strb	r3, [r4, #0]
	new_val |= 0x20;
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	1dfa      	adds	r2, r7, #7
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	2120      	movs	r1, #32
 80031f0:	430a      	orrs	r2, r1
 80031f2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	001a      	movs	r2, r3
 80031fa:	2103      	movs	r1, #3
 80031fc:	2000      	movs	r0, #0
 80031fe:	f000 fc1b 	bl	8003a38 <write_single_icm20948_reg>
	HAL_Delay(100);
 8003202:	2064      	movs	r0, #100	; 0x64
 8003204:	f001 f9c8 	bl	8004598 <HAL_Delay>
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b003      	add	sp, #12
 800320e:	bd90      	pop	{r4, r7, pc}

08003210 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	0002      	movs	r2, r0
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 800321c:	250f      	movs	r5, #15
 800321e:	197c      	adds	r4, r7, r5
 8003220:	2101      	movs	r1, #1
 8003222:	2030      	movs	r0, #48	; 0x30
 8003224:	f000 fbd6 	bl	80039d4 <read_single_icm20948_reg>
 8003228:	0003      	movs	r3, r0
 800322a:	7023      	strb	r3, [r4, #0]
	new_val |= config;
 800322c:	0028      	movs	r0, r5
 800322e:	183b      	adds	r3, r7, r0
 8003230:	1839      	adds	r1, r7, r0
 8003232:	1dfa      	adds	r2, r7, #7
 8003234:	7809      	ldrb	r1, [r1, #0]
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 800323c:	183b      	adds	r3, r7, r0
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	001a      	movs	r2, r3
 8003242:	2101      	movs	r1, #1
 8003244:	2030      	movs	r0, #48	; 0x30
 8003246:	f000 fbf7 	bl	8003a38 <write_single_icm20948_reg>
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b004      	add	sp, #16
 8003250:	bdb0      	pop	{r4, r5, r7, pc}

08003252 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8003252:	b5b0      	push	{r4, r5, r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	0002      	movs	r2, r0
 800325a:	1dfb      	adds	r3, r7, #7
 800325c:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800325e:	250f      	movs	r5, #15
 8003260:	197c      	adds	r4, r7, r5
 8003262:	2106      	movs	r1, #6
 8003264:	2000      	movs	r0, #0
 8003266:	f000 fbb5 	bl	80039d4 <read_single_icm20948_reg>
 800326a:	0003      	movs	r3, r0
 800326c:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 800326e:	0028      	movs	r0, r5
 8003270:	183b      	adds	r3, r7, r0
 8003272:	1839      	adds	r1, r7, r0
 8003274:	1dfa      	adds	r2, r7, #7
 8003276:	7809      	ldrb	r1, [r1, #0]
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800327e:	183b      	adds	r3, r7, r0
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	001a      	movs	r2, r3
 8003284:	2106      	movs	r1, #6
 8003286:	2000      	movs	r0, #0
 8003288:	f000 fbd6 	bl	8003a38 <write_single_icm20948_reg>
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bdb0      	pop	{r4, r5, r7, pc}

08003294 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8003298:	2201      	movs	r2, #1
 800329a:	2109      	movs	r1, #9
 800329c:	2020      	movs	r0, #32
 800329e:	f000 fbcb 	bl	8003a38 <write_single_icm20948_reg>
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	0002      	movs	r2, r0
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80032b4:	250f      	movs	r5, #15
 80032b6:	197c      	adds	r4, r7, r5
 80032b8:	2101      	movs	r1, #1
 80032ba:	2020      	movs	r0, #32
 80032bc:	f000 fb8a 	bl	80039d4 <read_single_icm20948_reg>
 80032c0:	0003      	movs	r3, r0
 80032c2:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	b25a      	sxtb	r2, r3
 80032cc:	197b      	adds	r3, r7, r5
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	4313      	orrs	r3, r2
 80032d4:	b25a      	sxtb	r2, r3
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80032da:	197b      	adds	r3, r7, r5
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	001a      	movs	r2, r3
 80032e0:	2101      	movs	r1, #1
 80032e2:	2020      	movs	r0, #32
 80032e4:	f000 fba8 	bl	8003a38 <write_single_icm20948_reg>
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}

080032f0 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	0002      	movs	r2, r0
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80032fc:	250f      	movs	r5, #15
 80032fe:	197c      	adds	r4, r7, r5
 8003300:	2114      	movs	r1, #20
 8003302:	2020      	movs	r0, #32
 8003304:	f000 fb66 	bl	80039d4 <read_single_icm20948_reg>
 8003308:	0003      	movs	r3, r0
 800330a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	b25a      	sxtb	r2, r3
 8003314:	197b      	adds	r3, r7, r5
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b25b      	sxtb	r3, r3
 800331a:	4313      	orrs	r3, r2
 800331c:	b25a      	sxtb	r2, r3
 800331e:	197b      	adds	r3, r7, r5
 8003320:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003322:	197b      	adds	r3, r7, r5
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	001a      	movs	r2, r3
 8003328:	2101      	movs	r1, #1
 800332a:	2020      	movs	r0, #32
 800332c:	f000 fb84 	bl	8003a38 <write_single_icm20948_reg>
}
 8003330:	46c0      	nop			; (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b004      	add	sp, #16
 8003336:	bdb0      	pop	{r4, r5, r7, pc}

08003338 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	0002      	movs	r2, r0
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8003344:	1dfb      	adds	r3, r7, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	2020      	movs	r0, #32
 800334e:	f000 fb73 	bl	8003a38 <write_single_icm20948_reg>
}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	b002      	add	sp, #8
 8003358:	bd80      	pop	{r7, pc}

0800335a <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 800335a:	b590      	push	{r4, r7, lr}
 800335c:	b085      	sub	sp, #20
 800335e:	af00      	add	r7, sp, #0
 8003360:	0002      	movs	r2, r0
 8003362:	1dbb      	adds	r3, r7, #6
 8003364:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8003366:	1dbb      	adds	r3, r7, #6
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29a      	uxth	r2, r3
 800336e:	200f      	movs	r0, #15
 8003370:	183b      	adds	r3, r7, r0
 8003372:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8003374:	1dbb      	adds	r3, r7, #6
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	240e      	movs	r4, #14
 800337c:	193b      	adds	r3, r7, r4
 800337e:	210f      	movs	r1, #15
 8003380:	400a      	ands	r2, r1
 8003382:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8003384:	183b      	adds	r3, r7, r0
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	001a      	movs	r2, r3
 800338a:	2110      	movs	r1, #16
 800338c:	2020      	movs	r0, #32
 800338e:	f000 fb53 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8003392:	193b      	adds	r3, r7, r4
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	001a      	movs	r2, r3
 8003398:	2111      	movs	r1, #17
 800339a:	2020      	movs	r0, #32
 800339c:	f000 fb4c 	bl	8003a38 <write_single_icm20948_reg>
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b005      	add	sp, #20
 80033a6:	bd90      	pop	{r4, r7, pc}

080033a8 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	0002      	movs	r2, r0
 80033b0:	1dfb      	adds	r3, r7, #7
 80033b2:	701a      	strb	r2, [r3, #0]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	0019      	movs	r1, r3
 80033ba:	2031      	movs	r0, #49	; 0x31
 80033bc:	f000 fbfb 	bl	8003bb6 <write_single_ak09916_reg>
	HAL_Delay(100);
 80033c0:	2064      	movs	r0, #100	; 0x64
 80033c2:	f001 f8e9 	bl	8004598 <HAL_Delay>
}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b002      	add	sp, #8
 80033cc:	bd80      	pop	{r7, pc}

080033ce <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80033ce:	b5b0      	push	{r4, r5, r7, lr}
 80033d0:	b08a      	sub	sp, #40	; 0x28
 80033d2:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80033d4:	230c      	movs	r3, #12
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	0018      	movs	r0, r3
 80033da:	230c      	movs	r3, #12
 80033dc:	001a      	movs	r2, r3
 80033de:	2100      	movs	r1, #0
 80033e0:	f004 f888 	bl	80074f4 <memset>
	uint8_t gyro_offset[6] = {0};
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e041      	b.n	8003478 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 80033f4:	2518      	movs	r5, #24
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fd02 	bl	8002e02 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80033fe:	240c      	movs	r4, #12
 8003400:	193b      	adds	r3, r7, r4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0018      	movs	r0, r3
 8003406:	f7fd fceb 	bl	8000de0 <__aeabi_i2f>
 800340a:	1c02      	adds	r2, r0, #0
 800340c:	197b      	adds	r3, r7, r5
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	1c19      	adds	r1, r3, #0
 8003412:	1c10      	adds	r0, r2, #0
 8003414:	f7fd f860 	bl	80004d8 <__aeabi_fadd>
 8003418:	1c03      	adds	r3, r0, #0
 800341a:	1c18      	adds	r0, r3, #0
 800341c:	f7fd fcc0 	bl	8000da0 <__aeabi_f2iz>
 8003420:	0002      	movs	r2, r0
 8003422:	193b      	adds	r3, r7, r4
 8003424:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8003426:	193b      	adds	r3, r7, r4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	0018      	movs	r0, r3
 800342c:	f7fd fcd8 	bl	8000de0 <__aeabi_i2f>
 8003430:	1c02      	adds	r2, r0, #0
 8003432:	197b      	adds	r3, r7, r5
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	1c19      	adds	r1, r3, #0
 8003438:	1c10      	adds	r0, r2, #0
 800343a:	f7fd f84d 	bl	80004d8 <__aeabi_fadd>
 800343e:	1c03      	adds	r3, r0, #0
 8003440:	1c18      	adds	r0, r3, #0
 8003442:	f7fd fcad 	bl	8000da0 <__aeabi_f2iz>
 8003446:	0002      	movs	r2, r0
 8003448:	193b      	adds	r3, r7, r4
 800344a:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 800344c:	193b      	adds	r3, r7, r4
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fcc5 	bl	8000de0 <__aeabi_i2f>
 8003456:	1c02      	adds	r2, r0, #0
 8003458:	197b      	adds	r3, r7, r5
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	1c19      	adds	r1, r3, #0
 800345e:	1c10      	adds	r0, r2, #0
 8003460:	f7fd f83a 	bl	80004d8 <__aeabi_fadd>
 8003464:	1c03      	adds	r3, r0, #0
 8003466:	1c18      	adds	r0, r3, #0
 8003468:	f7fd fc9a 	bl	8000da0 <__aeabi_f2iz>
 800346c:	0002      	movs	r2, r0
 800346e:	193b      	adds	r3, r7, r4
 8003470:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	3301      	adds	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	2b63      	cmp	r3, #99	; 0x63
 800347c:	ddba      	ble.n	80033f4 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 800347e:	240c      	movs	r4, #12
 8003480:	193b      	adds	r3, r7, r4
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2164      	movs	r1, #100	; 0x64
 8003486:	0018      	movs	r0, r3
 8003488:	f7fc fee4 	bl	8000254 <__divsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	001a      	movs	r2, r3
 8003490:	193b      	adds	r3, r7, r4
 8003492:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 8003494:	193b      	adds	r3, r7, r4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2164      	movs	r1, #100	; 0x64
 800349a:	0018      	movs	r0, r3
 800349c:	f7fc feda 	bl	8000254 <__divsi3>
 80034a0:	0003      	movs	r3, r0
 80034a2:	001a      	movs	r2, r3
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	0018      	movs	r0, r3
 80034b0:	f7fc fed0 	bl	8000254 <__divsi3>
 80034b4:	0003      	movs	r3, r0
 80034b6:	001a      	movs	r2, r3
 80034b8:	193b      	adds	r3, r7, r4
 80034ba:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	425b      	negs	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da00      	bge.n	80034c8 <icm20948_gyro_calibration+0xfa>
 80034c6:	3303      	adds	r3, #3
 80034c8:	109b      	asrs	r3, r3, #2
 80034ca:	121b      	asrs	r3, r3, #8
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 80034d2:	230c      	movs	r3, #12
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	425b      	negs	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da00      	bge.n	80034e0 <icm20948_gyro_calibration+0x112>
 80034de:	3303      	adds	r3, #3
 80034e0:	109b      	asrs	r3, r3, #2
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 80034e8:	230c      	movs	r3, #12
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	425b      	negs	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da00      	bge.n	80034f6 <icm20948_gyro_calibration+0x128>
 80034f4:	3303      	adds	r3, #3
 80034f6:	109b      	asrs	r3, r3, #2
 80034f8:	121b      	asrs	r3, r3, #8
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8003500:	230c      	movs	r3, #12
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	425b      	negs	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	da00      	bge.n	800350e <icm20948_gyro_calibration+0x140>
 800350c:	3303      	adds	r3, #3
 800350e:	109b      	asrs	r3, r3, #2
 8003510:	b2da      	uxtb	r2, r3
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8003516:	230c      	movs	r3, #12
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	425b      	negs	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	da00      	bge.n	8003524 <icm20948_gyro_calibration+0x156>
 8003522:	3303      	adds	r3, #3
 8003524:	109b      	asrs	r3, r3, #2
 8003526:	121b      	asrs	r3, r3, #8
 8003528:	b2da      	uxtb	r2, r3
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800352e:	230c      	movs	r3, #12
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	425b      	negs	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	da00      	bge.n	800353c <icm20948_gyro_calibration+0x16e>
 800353a:	3303      	adds	r3, #3
 800353c:	109b      	asrs	r3, r3, #2
 800353e:	b2da      	uxtb	r2, r3
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	715a      	strb	r2, [r3, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8003544:	1d3a      	adds	r2, r7, #4
 8003546:	2306      	movs	r3, #6
 8003548:	2103      	movs	r1, #3
 800354a:	2020      	movs	r0, #32
 800354c:	f000 fadc 	bl	8003b08 <write_multiple_icm20948_reg>
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b00a      	add	sp, #40	; 0x28
 8003556:	bdb0      	pop	{r4, r5, r7, pc}

08003558 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b090      	sub	sp, #64	; 0x40
 800355c:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 800355e:	2318      	movs	r3, #24
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	0018      	movs	r0, r3
 8003564:	230c      	movs	r3, #12
 8003566:	001a      	movs	r2, r3
 8003568:	2100      	movs	r1, #0
 800356a:	f003 ffc3 	bl	80074f4 <memset>
	int32_t accel_bias_reg[3] = {0};
 800356e:	230c      	movs	r3, #12
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	0018      	movs	r0, r3
 8003574:	230c      	movs	r3, #12
 8003576:	001a      	movs	r2, r3
 8003578:	2100      	movs	r1, #0
 800357a:	f003 ffbb 	bl	80074f4 <memset>
	uint8_t accel_offset[6] = {0};
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8003588:	2300      	movs	r3, #0
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	e041      	b.n	8003612 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 800358e:	2524      	movs	r5, #36	; 0x24
 8003590:	197b      	adds	r3, r7, r5
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff fc76 	bl	8002e84 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8003598:	2418      	movs	r4, #24
 800359a:	193b      	adds	r3, r7, r4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0018      	movs	r0, r3
 80035a0:	f7fd fc1e 	bl	8000de0 <__aeabi_i2f>
 80035a4:	1c02      	adds	r2, r0, #0
 80035a6:	197b      	adds	r3, r7, r5
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	1c19      	adds	r1, r3, #0
 80035ac:	1c10      	adds	r0, r2, #0
 80035ae:	f7fc ff93 	bl	80004d8 <__aeabi_fadd>
 80035b2:	1c03      	adds	r3, r0, #0
 80035b4:	1c18      	adds	r0, r3, #0
 80035b6:	f7fd fbf3 	bl	8000da0 <__aeabi_f2iz>
 80035ba:	0002      	movs	r2, r0
 80035bc:	193b      	adds	r3, r7, r4
 80035be:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 80035c0:	193b      	adds	r3, r7, r4
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fd fc0b 	bl	8000de0 <__aeabi_i2f>
 80035ca:	1c02      	adds	r2, r0, #0
 80035cc:	197b      	adds	r3, r7, r5
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	1c19      	adds	r1, r3, #0
 80035d2:	1c10      	adds	r0, r2, #0
 80035d4:	f7fc ff80 	bl	80004d8 <__aeabi_fadd>
 80035d8:	1c03      	adds	r3, r0, #0
 80035da:	1c18      	adds	r0, r3, #0
 80035dc:	f7fd fbe0 	bl	8000da0 <__aeabi_f2iz>
 80035e0:	0002      	movs	r2, r0
 80035e2:	193b      	adds	r3, r7, r4
 80035e4:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7fd fbf8 	bl	8000de0 <__aeabi_i2f>
 80035f0:	1c02      	adds	r2, r0, #0
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	1c19      	adds	r1, r3, #0
 80035f8:	1c10      	adds	r0, r2, #0
 80035fa:	f7fc ff6d 	bl	80004d8 <__aeabi_fadd>
 80035fe:	1c03      	adds	r3, r0, #0
 8003600:	1c18      	adds	r0, r3, #0
 8003602:	f7fd fbcd 	bl	8000da0 <__aeabi_f2iz>
 8003606:	0002      	movs	r2, r0
 8003608:	193b      	adds	r3, r7, r4
 800360a:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	3301      	adds	r3, #1
 8003610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003614:	2b63      	cmp	r3, #99	; 0x63
 8003616:	ddba      	ble.n	800358e <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8003618:	2418      	movs	r4, #24
 800361a:	193b      	adds	r3, r7, r4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	0018      	movs	r0, r3
 8003622:	f7fc fe17 	bl	8000254 <__divsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	001a      	movs	r2, r3
 800362a:	193b      	adds	r3, r7, r4
 800362c:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 800362e:	193b      	adds	r3, r7, r4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	0018      	movs	r0, r3
 8003636:	f7fc fe0d 	bl	8000254 <__divsi3>
 800363a:	0003      	movs	r3, r0
 800363c:	001a      	movs	r2, r3
 800363e:	193b      	adds	r3, r7, r4
 8003640:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 8003642:	193b      	adds	r3, r7, r4
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2164      	movs	r1, #100	; 0x64
 8003648:	0018      	movs	r0, r3
 800364a:	f7fc fe03 	bl	8000254 <__divsi3>
 800364e:	0003      	movs	r3, r0
 8003650:	001a      	movs	r2, r3
 8003652:	193b      	adds	r3, r7, r4
 8003654:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 8003656:	003b      	movs	r3, r7
 8003658:	4a68      	ldr	r2, [pc, #416]	; (80037fc <icm20948_accel_calibration+0x2a4>)
 800365a:	8811      	ldrh	r1, [r2, #0]
 800365c:	8019      	strh	r1, [r3, #0]
 800365e:	7892      	ldrb	r2, [r2, #2]
 8003660:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8003662:	2202      	movs	r2, #2
 8003664:	2114      	movs	r1, #20
 8003666:	2010      	movs	r0, #16
 8003668:	f000 fa14 	bl	8003a94 <read_multiple_icm20948_reg>
 800366c:	0003      	movs	r3, r0
 800366e:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003678:	3201      	adds	r2, #1
 800367a:	7812      	ldrb	r2, [r2, #0]
 800367c:	431a      	orrs	r2, r3
 800367e:	250c      	movs	r5, #12
 8003680:	197b      	adds	r3, r7, r5
 8003682:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 8003684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003686:	3301      	adds	r3, #1
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2201      	movs	r2, #1
 800368c:	4013      	ands	r3, r2
 800368e:	b2da      	uxtb	r2, r3
 8003690:	003b      	movs	r3, r7
 8003692:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8003694:	2202      	movs	r2, #2
 8003696:	2117      	movs	r1, #23
 8003698:	2010      	movs	r0, #16
 800369a:	f000 f9fb 	bl	8003a94 <read_multiple_icm20948_reg>
 800369e:	0003      	movs	r3, r0
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	3201      	adds	r2, #1
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	197b      	adds	r3, r7, r5
 80036b2:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	3301      	adds	r3, #1
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	4013      	ands	r3, r2
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	003b      	movs	r3, r7
 80036c2:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80036c4:	2202      	movs	r2, #2
 80036c6:	211a      	movs	r1, #26
 80036c8:	2010      	movs	r0, #16
 80036ca:	f000 f9e3 	bl	8003a94 <read_multiple_icm20948_reg>
 80036ce:	0003      	movs	r3, r0
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036da:	3201      	adds	r2, #1
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	431a      	orrs	r2, r3
 80036e0:	197b      	adds	r3, r7, r5
 80036e2:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	3301      	adds	r3, #1
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	003b      	movs	r3, r7
 80036f2:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80036f4:	197b      	adds	r3, r7, r5
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	da00      	bge.n	8003702 <icm20948_accel_calibration+0x1aa>
 8003700:	3307      	adds	r3, #7
 8003702:	10db      	asrs	r3, r3, #3
 8003704:	425b      	negs	r3, r3
 8003706:	18d2      	adds	r2, r2, r3
 8003708:	210c      	movs	r1, #12
 800370a:	187b      	adds	r3, r7, r1
 800370c:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800370e:	187b      	adds	r3, r7, r1
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	2318      	movs	r3, #24
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	da00      	bge.n	800371e <icm20948_accel_calibration+0x1c6>
 800371c:	3307      	adds	r3, #7
 800371e:	10db      	asrs	r3, r3, #3
 8003720:	425b      	negs	r3, r3
 8003722:	18d2      	adds	r2, r2, r3
 8003724:	210c      	movs	r1, #12
 8003726:	187b      	adds	r3, r7, r1
 8003728:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800372a:	187b      	adds	r3, r7, r1
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	2318      	movs	r3, #24
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da00      	bge.n	800373a <icm20948_accel_calibration+0x1e2>
 8003738:	3307      	adds	r3, #7
 800373a:	10db      	asrs	r3, r3, #3
 800373c:	425b      	negs	r3, r3
 800373e:	18d2      	adds	r2, r2, r3
 8003740:	210c      	movs	r1, #12
 8003742:	187b      	adds	r3, r7, r1
 8003744:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8003746:	187b      	adds	r3, r7, r1
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	121b      	asrs	r3, r3, #8
 800374c:	b2da      	uxtb	r2, r3
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2201      	movs	r2, #1
 800375a:	4393      	bics	r3, r2
 800375c:	b2da      	uxtb	r2, r3
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	785a      	ldrb	r2, [r3, #1]
 8003766:	003b      	movs	r3, r7
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	b2da      	uxtb	r2, r3
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	121b      	asrs	r3, r3, #8
 8003778:	b2da      	uxtb	r2, r3
 800377a:	1d3b      	adds	r3, r7, #4
 800377c:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800377e:	187b      	adds	r3, r7, r1
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2201      	movs	r2, #1
 8003786:	4393      	bics	r3, r2
 8003788:	b2da      	uxtb	r2, r3
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	78da      	ldrb	r2, [r3, #3]
 8003792:	003b      	movs	r3, r7
 8003794:	785b      	ldrb	r3, [r3, #1]
 8003796:	4313      	orrs	r3, r2
 8003798:	b2da      	uxtb	r2, r3
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	121b      	asrs	r3, r3, #8
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2201      	movs	r2, #1
 80037b2:	4393      	bics	r3, r2
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	795a      	ldrb	r2, [r3, #5]
 80037be:	003b      	movs	r3, r7
 80037c0:	789b      	ldrb	r3, [r3, #2]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	715a      	strb	r2, [r3, #5]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80037ca:	1d3a      	adds	r2, r7, #4
 80037cc:	2302      	movs	r3, #2
 80037ce:	2114      	movs	r1, #20
 80037d0:	2010      	movs	r0, #16
 80037d2:	f000 f999 	bl	8003b08 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	2302      	movs	r3, #2
 80037dc:	2117      	movs	r1, #23
 80037de:	2010      	movs	r0, #16
 80037e0:	f000 f992 	bl	8003b08 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	2302      	movs	r3, #2
 80037ea:	211a      	movs	r1, #26
 80037ec:	2010      	movs	r0, #16
 80037ee:	f000 f98b 	bl	8003b08 <write_multiple_icm20948_reg>
}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b010      	add	sp, #64	; 0x40
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	0800a418 	.word	0x0800a418

08003800 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	0002      	movs	r2, r0
 8003808:	1dfb      	adds	r3, r7, #7
 800380a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800380c:	230f      	movs	r3, #15
 800380e:	18fc      	adds	r4, r7, r3
 8003810:	2101      	movs	r1, #1
 8003812:	2020      	movs	r0, #32
 8003814:	f000 f8de 	bl	80039d4 <read_single_icm20948_reg>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
	
	switch(full_scale)
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d027      	beq.n	8003874 <icm20948_gyro_full_scale_select+0x74>
 8003824:	dc31      	bgt.n	800388a <icm20948_gyro_full_scale_select+0x8a>
 8003826:	2b02      	cmp	r3, #2
 8003828:	d019      	beq.n	800385e <icm20948_gyro_full_scale_select+0x5e>
 800382a:	dc2e      	bgt.n	800388a <icm20948_gyro_full_scale_select+0x8a>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <icm20948_gyro_full_scale_select+0x36>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d009      	beq.n	8003848 <icm20948_gyro_full_scale_select+0x48>
 8003834:	e029      	b.n	800388a <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8003836:	220f      	movs	r2, #15
 8003838:	18bb      	adds	r3, r7, r2
 800383a:	18ba      	adds	r2, r7, r2
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 8003840:	4b18      	ldr	r3, [pc, #96]	; (80038a4 <icm20948_gyro_full_scale_select+0xa4>)
 8003842:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <icm20948_gyro_full_scale_select+0xa8>)
 8003844:	601a      	str	r2, [r3, #0]
			break;
 8003846:	e020      	b.n	800388a <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 8003848:	220f      	movs	r2, #15
 800384a:	18bb      	adds	r3, r7, r2
 800384c:	18ba      	adds	r2, r7, r2
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	2102      	movs	r1, #2
 8003852:	430a      	orrs	r2, r1
 8003854:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <icm20948_gyro_full_scale_select+0xa4>)
 8003858:	4a14      	ldr	r2, [pc, #80]	; (80038ac <icm20948_gyro_full_scale_select+0xac>)
 800385a:	601a      	str	r2, [r3, #0]
			break;
 800385c:	e015      	b.n	800388a <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 800385e:	220f      	movs	r2, #15
 8003860:	18bb      	adds	r3, r7, r2
 8003862:	18ba      	adds	r2, r7, r2
 8003864:	7812      	ldrb	r2, [r2, #0]
 8003866:	2104      	movs	r1, #4
 8003868:	430a      	orrs	r2, r1
 800386a:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <icm20948_gyro_full_scale_select+0xa4>)
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <icm20948_gyro_full_scale_select+0xb0>)
 8003870:	601a      	str	r2, [r3, #0]
			break;
 8003872:	e00a      	b.n	800388a <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 8003874:	220f      	movs	r2, #15
 8003876:	18bb      	adds	r3, r7, r2
 8003878:	18ba      	adds	r2, r7, r2
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	2106      	movs	r1, #6
 800387e:	430a      	orrs	r2, r1
 8003880:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <icm20948_gyro_full_scale_select+0xa4>)
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <icm20948_gyro_full_scale_select+0xb4>)
 8003886:	601a      	str	r2, [r3, #0]
			break;
 8003888:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800388a:	230f      	movs	r3, #15
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	001a      	movs	r2, r3
 8003892:	2101      	movs	r1, #1
 8003894:	2020      	movs	r0, #32
 8003896:	f000 f8cf 	bl	8003a38 <write_single_icm20948_reg>
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b005      	add	sp, #20
 80038a0:	bd90      	pop	{r4, r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	200001f8 	.word	0x200001f8
 80038a8:	43030000 	.word	0x43030000
 80038ac:	42830000 	.word	0x42830000
 80038b0:	42033333 	.word	0x42033333
 80038b4:	41833333 	.word	0x41833333

080038b8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	0002      	movs	r2, r0
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fc      	adds	r4, r7, r3
 80038c8:	2114      	movs	r1, #20
 80038ca:	2020      	movs	r0, #32
 80038cc:	f000 f882 	bl	80039d4 <read_single_icm20948_reg>
 80038d0:	0003      	movs	r3, r0
 80038d2:	7023      	strb	r3, [r4, #0]
	
	switch(full_scale)
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d02a      	beq.n	8003932 <icm20948_accel_full_scale_select+0x7a>
 80038dc:	dc35      	bgt.n	800394a <icm20948_accel_full_scale_select+0x92>
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d01b      	beq.n	800391a <icm20948_accel_full_scale_select+0x62>
 80038e2:	dc32      	bgt.n	800394a <icm20948_accel_full_scale_select+0x92>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <icm20948_accel_full_scale_select+0x36>
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00a      	beq.n	8003902 <icm20948_accel_full_scale_select+0x4a>
 80038ec:	e02d      	b.n	800394a <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 80038ee:	220f      	movs	r2, #15
 80038f0:	18bb      	adds	r3, r7, r2
 80038f2:	18ba      	adds	r2, r7, r2
 80038f4:	7812      	ldrb	r2, [r2, #0]
 80038f6:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 80038f8:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <icm20948_accel_full_scale_select+0xac>)
 80038fa:	228d      	movs	r2, #141	; 0x8d
 80038fc:	05d2      	lsls	r2, r2, #23
 80038fe:	601a      	str	r2, [r3, #0]
			break;
 8003900:	e023      	b.n	800394a <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8003902:	220f      	movs	r2, #15
 8003904:	18bb      	adds	r3, r7, r2
 8003906:	18ba      	adds	r2, r7, r2
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	2102      	movs	r1, #2
 800390c:	430a      	orrs	r2, r1
 800390e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8003910:	4b14      	ldr	r3, [pc, #80]	; (8003964 <icm20948_accel_full_scale_select+0xac>)
 8003912:	228c      	movs	r2, #140	; 0x8c
 8003914:	05d2      	lsls	r2, r2, #23
 8003916:	601a      	str	r2, [r3, #0]
			break;
 8003918:	e017      	b.n	800394a <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 800391a:	220f      	movs	r2, #15
 800391c:	18bb      	adds	r3, r7, r2
 800391e:	18ba      	adds	r2, r7, r2
 8003920:	7812      	ldrb	r2, [r2, #0]
 8003922:	2104      	movs	r1, #4
 8003924:	430a      	orrs	r2, r1
 8003926:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <icm20948_accel_full_scale_select+0xac>)
 800392a:	228b      	movs	r2, #139	; 0x8b
 800392c:	05d2      	lsls	r2, r2, #23
 800392e:	601a      	str	r2, [r3, #0]
			break;
 8003930:	e00b      	b.n	800394a <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8003932:	220f      	movs	r2, #15
 8003934:	18bb      	adds	r3, r7, r2
 8003936:	18ba      	adds	r2, r7, r2
 8003938:	7812      	ldrb	r2, [r2, #0]
 800393a:	2106      	movs	r1, #6
 800393c:	430a      	orrs	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <icm20948_accel_full_scale_select+0xac>)
 8003942:	228a      	movs	r2, #138	; 0x8a
 8003944:	05d2      	lsls	r2, r2, #23
 8003946:	601a      	str	r2, [r3, #0]
			break;
 8003948:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800394a:	230f      	movs	r3, #15
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	001a      	movs	r2, r3
 8003952:	2114      	movs	r1, #20
 8003954:	2020      	movs	r0, #32
 8003956:	f000 f86f 	bl	8003a38 <write_single_icm20948_reg>
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b005      	add	sp, #20
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	200001fc 	.word	0x200001fc

08003968 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 800396c:	2390      	movs	r3, #144	; 0x90
 800396e:	05db      	lsls	r3, r3, #23
 8003970:	2201      	movs	r2, #1
 8003972:	2110      	movs	r1, #16
 8003974:	0018      	movs	r0, r3
 8003976:	f001 fa4d 	bl	8004e14 <HAL_GPIO_WritePin>
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <cs_low>:

static void cs_low()
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8003984:	2390      	movs	r3, #144	; 0x90
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	2200      	movs	r2, #0
 800398a:	2110      	movs	r1, #16
 800398c:	0018      	movs	r0, r3
 800398e:	f001 fa41 	bl	8004e14 <HAL_GPIO_WritePin>
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	0002      	movs	r2, r0
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80039a4:	240c      	movs	r4, #12
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	227f      	movs	r2, #127	; 0x7f
 80039aa:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 80039ac:	193b      	adds	r3, r7, r4
 80039ae:	1dfa      	adds	r2, r7, #7
 80039b0:	7812      	ldrb	r2, [r2, #0]
 80039b2:	705a      	strb	r2, [r3, #1]

	cs_low();
 80039b4:	f7ff ffe4 	bl	8003980 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80039b8:	1939      	adds	r1, r7, r4
 80039ba:	4805      	ldr	r0, [pc, #20]	; (80039d0 <select_user_bank+0x38>)
 80039bc:	230a      	movs	r3, #10
 80039be:	2202      	movs	r2, #2
 80039c0:	f001 ff6a 	bl	8005898 <HAL_SPI_Transmit>
	cs_high();
 80039c4:	f7ff ffd0 	bl	8003968 <cs_high>
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b005      	add	sp, #20
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	20000224 	.word	0x20000224

080039d4 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	0002      	movs	r2, r0
 80039dc:	1dfb      	adds	r3, r7, #7
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	1dbb      	adds	r3, r7, #6
 80039e2:	1c0a      	adds	r2, r1, #0
 80039e4:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4252      	negs	r2, r2
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	240f      	movs	r4, #15
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 80039f8:	1dfb      	adds	r3, r7, #7
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ffcb 	bl	8003998 <select_user_bank>

	cs_low();
 8003a02:	f7ff ffbd 	bl	8003980 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003a06:	23fa      	movs	r3, #250	; 0xfa
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	1939      	adds	r1, r7, r4
 8003a0c:	4809      	ldr	r0, [pc, #36]	; (8003a34 <read_single_icm20948_reg+0x60>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f001 ff42 	bl	8005898 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8003a14:	23fa      	movs	r3, #250	; 0xfa
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	240e      	movs	r4, #14
 8003a1a:	1939      	adds	r1, r7, r4
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <read_single_icm20948_reg+0x60>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f002 f892 	bl	8005b48 <HAL_SPI_Receive>
	cs_high();
 8003a24:	f7ff ffa0 	bl	8003968 <cs_high>

	return reg_val;
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	781b      	ldrb	r3, [r3, #0]
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b005      	add	sp, #20
 8003a32:	bd90      	pop	{r4, r7, pc}
 8003a34:	20000224 	.word	0x20000224

08003a38 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0004      	movs	r4, r0
 8003a40:	0008      	movs	r0, r1
 8003a42:	0011      	movs	r1, r2
 8003a44:	1dfb      	adds	r3, r7, #7
 8003a46:	1c22      	adds	r2, r4, #0
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	1dbb      	adds	r3, r7, #6
 8003a4c:	1c02      	adds	r2, r0, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	1d7b      	adds	r3, r7, #5
 8003a52:	1c0a      	adds	r2, r1, #0
 8003a54:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8003a56:	240c      	movs	r4, #12
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	1dba      	adds	r2, r7, #6
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8003a60:	193b      	adds	r3, r7, r4
 8003a62:	1d7a      	adds	r2, r7, #5
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 8003a68:	1dfb      	adds	r3, r7, #7
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ff93 	bl	8003998 <select_user_bank>

	cs_low();
 8003a72:	f7ff ff85 	bl	8003980 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8003a76:	23fa      	movs	r3, #250	; 0xfa
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	1939      	adds	r1, r7, r4
 8003a7c:	4804      	ldr	r0, [pc, #16]	; (8003a90 <write_single_icm20948_reg+0x58>)
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f001 ff0a 	bl	8005898 <HAL_SPI_Transmit>
	cs_high();
 8003a84:	f7ff ff70 	bl	8003968 <cs_high>
}
 8003a88:	46c0      	nop			; (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b005      	add	sp, #20
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	20000224 	.word	0x20000224

08003a94 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	0004      	movs	r4, r0
 8003a9c:	0008      	movs	r0, r1
 8003a9e:	0011      	movs	r1, r2
 8003aa0:	1dfb      	adds	r3, r7, #7
 8003aa2:	1c22      	adds	r2, r4, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	1dbb      	adds	r3, r7, #6
 8003aa8:	1c02      	adds	r2, r0, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	1d7b      	adds	r3, r7, #5
 8003aae:	1c0a      	adds	r2, r1, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8003ab2:	1dbb      	adds	r3, r7, #6
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2280      	movs	r2, #128	; 0x80
 8003ab8:	4252      	negs	r2, r2
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	240f      	movs	r4, #15
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8003ac4:	1dfb      	adds	r3, r7, #7
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff ff65 	bl	8003998 <select_user_bank>

	cs_low();
 8003ace:	f7ff ff57 	bl	8003980 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003ad2:	23fa      	movs	r3, #250	; 0xfa
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	1939      	adds	r1, r7, r4
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <read_multiple_icm20948_reg+0x6c>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	f001 fedc 	bl	8005898 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8003ae0:	1d7b      	adds	r3, r7, #5
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	23fa      	movs	r3, #250	; 0xfa
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4906      	ldr	r1, [pc, #24]	; (8003b04 <read_multiple_icm20948_reg+0x70>)
 8003aec:	4804      	ldr	r0, [pc, #16]	; (8003b00 <read_multiple_icm20948_reg+0x6c>)
 8003aee:	f002 f82b 	bl	8005b48 <HAL_SPI_Receive>
	cs_high();
 8003af2:	f7ff ff39 	bl	8003968 <cs_high>

	return reg_val;
 8003af6:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <read_multiple_icm20948_reg+0x70>)
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b005      	add	sp, #20
 8003afe:	bd90      	pop	{r4, r7, pc}
 8003b00:	20000224 	.word	0x20000224
 8003b04:	20000200 	.word	0x20000200

08003b08 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	0004      	movs	r4, r0
 8003b10:	0008      	movs	r0, r1
 8003b12:	603a      	str	r2, [r7, #0]
 8003b14:	0019      	movs	r1, r3
 8003b16:	1dfb      	adds	r3, r7, #7
 8003b18:	1c22      	adds	r2, r4, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	1c02      	adds	r2, r0, #0
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	1d7b      	adds	r3, r7, #5
 8003b24:	1c0a      	adds	r2, r1, #0
 8003b26:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003b28:	240f      	movs	r4, #15
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	1dba      	adds	r2, r7, #6
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7ff ff2e 	bl	8003998 <select_user_bank>

	cs_low();
 8003b3c:	f7ff ff20 	bl	8003980 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8003b40:	23fa      	movs	r3, #250	; 0xfa
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	1939      	adds	r1, r7, r4
 8003b46:	4809      	ldr	r0, [pc, #36]	; (8003b6c <write_multiple_icm20948_reg+0x64>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f001 fea5 	bl	8005898 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8003b4e:	1d7b      	adds	r3, r7, #5
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	23fa      	movs	r3, #250	; 0xfa
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	4804      	ldr	r0, [pc, #16]	; (8003b6c <write_multiple_icm20948_reg+0x64>)
 8003b5c:	f001 fe9c 	bl	8005898 <HAL_SPI_Transmit>
	cs_high();
 8003b60:	f7ff ff02 	bl	8003968 <cs_high>
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b005      	add	sp, #20
 8003b6a:	bd90      	pop	{r4, r7, pc}
 8003b6c:	20000224 	.word	0x20000224

08003b70 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	0002      	movs	r2, r0
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003b7c:	228c      	movs	r2, #140	; 0x8c
 8003b7e:	2103      	movs	r1, #3
 8003b80:	2030      	movs	r0, #48	; 0x30
 8003b82:	f7ff ff59 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003b86:	1dfb      	adds	r3, r7, #7
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	2030      	movs	r0, #48	; 0x30
 8003b90:	f7ff ff52 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003b94:	2281      	movs	r2, #129	; 0x81
 8003b96:	2105      	movs	r1, #5
 8003b98:	2030      	movs	r0, #48	; 0x30
 8003b9a:	f7ff ff4d 	bl	8003a38 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f000 fcfa 	bl	8004598 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8003ba4:	213b      	movs	r1, #59	; 0x3b
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	f7ff ff14 	bl	80039d4 <read_single_icm20948_reg>
 8003bac:	0003      	movs	r3, r0
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b002      	add	sp, #8
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	1dbb      	adds	r3, r7, #6
 8003bc4:	1c0a      	adds	r2, r1, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8003bc8:	220c      	movs	r2, #12
 8003bca:	2103      	movs	r1, #3
 8003bcc:	2030      	movs	r0, #48	; 0x30
 8003bce:	f7ff ff33 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003bd2:	1dfb      	adds	r3, r7, #7
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	2104      	movs	r1, #4
 8003bda:	2030      	movs	r0, #48	; 0x30
 8003bdc:	f7ff ff2c 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	001a      	movs	r2, r3
 8003be6:	2106      	movs	r1, #6
 8003be8:	2030      	movs	r0, #48	; 0x30
 8003bea:	f7ff ff25 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8003bee:	2281      	movs	r2, #129	; 0x81
 8003bf0:	2105      	movs	r1, #5
 8003bf2:	2030      	movs	r0, #48	; 0x30
 8003bf4:	f7ff ff20 	bl	8003a38 <write_single_icm20948_reg>
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	0002      	movs	r2, r0
 8003c08:	1dfb      	adds	r3, r7, #7
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	1dbb      	adds	r3, r7, #6
 8003c0e:	1c0a      	adds	r2, r1, #0
 8003c10:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8003c12:	228c      	movs	r2, #140	; 0x8c
 8003c14:	2103      	movs	r1, #3
 8003c16:	2030      	movs	r0, #48	; 0x30
 8003c18:	f7ff ff0e 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	001a      	movs	r2, r3
 8003c22:	2104      	movs	r1, #4
 8003c24:	2030      	movs	r0, #48	; 0x30
 8003c26:	f7ff ff07 	bl	8003a38 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8003c2a:	1dbb      	adds	r3, r7, #6
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2280      	movs	r2, #128	; 0x80
 8003c30:	4252      	negs	r2, r2
 8003c32:	4313      	orrs	r3, r2
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	001a      	movs	r2, r3
 8003c38:	2105      	movs	r1, #5
 8003c3a:	2030      	movs	r0, #48	; 0x30
 8003c3c:	f7ff fefc 	bl	8003a38 <write_single_icm20948_reg>

	HAL_Delay(1);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f000 fca9 	bl	8004598 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8003c46:	1dbb      	adds	r3, r7, #6
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	213b      	movs	r1, #59	; 0x3b
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7ff ff20 	bl	8003a94 <read_multiple_icm20948_reg>
 8003c54:	0003      	movs	r3, r0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c62:	b08b      	sub	sp, #44	; 0x2c
 8003c64:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c66:	f000 fc33 	bl	80044d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c6a:	f000 f863 	bl	8003d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c6e:	f000 f957 	bl	8003f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c72:	f000 f937 	bl	8003ee4 <MX_DMA_Init>
  MX_CRC_Init();
 8003c76:	f000 f8a7 	bl	8003dc8 <MX_CRC_Init>
  MX_USART2_UART_Init();
 8003c7a:	f000 f903 	bl	8003e84 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003c7e:	f000 f8c3 	bl	8003e08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, "Hello \n", 10, 1000);
  icm20948_init();
 8003c82:	f7ff f873 	bl	8002d6c <icm20948_init>
  ak09916_init();
 8003c86:	f7ff f8a1 	bl	8002dcc <ak09916_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	icm20948_gyro_read_dps(&my_gyro);
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <main+0xbc>)
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff f9a7 	bl	8002fe0 <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 8003c92:	4b23      	ldr	r3, [pc, #140]	; (8003d20 <main+0xc0>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff f9d5 	bl	8003044 <icm20948_accel_read_g>
	//icm20948_accel_read(&my_accel);
	ak09916_mag_read(&my_mag);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	; (8003d24 <main+0xc4>)
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff f93d 	bl	8002f1c <ak09916_mag_read>
	uint32_t timeNow = (float) HAL_GetTick();
 8003ca2:	f000 fc6f 	bl	8004584 <HAL_GetTick>
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fd f8e7 	bl	8000e7c <__aeabi_ui2f>
 8003cae:	1c03      	adds	r3, r0, #0
 8003cb0:	1c18      	adds	r0, r3, #0
 8003cb2:	f7fc fbf9 	bl	80004a8 <__aeabi_f2uiz>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	60fb      	str	r3, [r7, #12]
	//sprintf(buffer, "%f,%f,%f,%f \r\n",timeNow, my_gyro.x,my_gyro.y,my_gyro.z);
	//sprintf(buffer,"%f,%f,%f,%f \r\n",timeNow,my_accel.x,my_accel.y,my_accel.z);
	sprintf(buffer,"%f,%f,%f,%f \n",timeNow,my_gyro.x,my_gyro.y,my_gyro.z);
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <main+0xbc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c18      	adds	r0, r3, #0
 8003cc0:	f7fe ff04 	bl	8002acc <__aeabi_f2d>
 8003cc4:	0004      	movs	r4, r0
 8003cc6:	000d      	movs	r5, r1
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <main+0xbc>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	1c18      	adds	r0, r3, #0
 8003cce:	f7fe fefd 	bl	8002acc <__aeabi_f2d>
 8003cd2:	6038      	str	r0, [r7, #0]
 8003cd4:	6079      	str	r1, [r7, #4]
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <main+0xbc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	f7fe fef6 	bl	8002acc <__aeabi_f2d>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	000b      	movs	r3, r1
 8003ce4:	68fe      	ldr	r6, [r7, #12]
 8003ce6:	4910      	ldr	r1, [pc, #64]	; (8003d28 <main+0xc8>)
 8003ce8:	4810      	ldr	r0, [pc, #64]	; (8003d2c <main+0xcc>)
 8003cea:	9204      	str	r2, [sp, #16]
 8003cec:	9305      	str	r3, [sp, #20]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	9202      	str	r2, [sp, #8]
 8003cf4:	9303      	str	r3, [sp, #12]
 8003cf6:	9400      	str	r4, [sp, #0]
 8003cf8:	9501      	str	r5, [sp, #4]
 8003cfa:	0032      	movs	r2, r6
 8003cfc:	f004 f870 	bl	8007de0 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 8003d00:	23fa      	movs	r3, #250	; 0xfa
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4909      	ldr	r1, [pc, #36]	; (8003d2c <main+0xcc>)
 8003d06:	480a      	ldr	r0, [pc, #40]	; (8003d30 <main+0xd0>)
 8003d08:	2264      	movs	r2, #100	; 0x64
 8003d0a:	f002 fc63 	bl	80065d4 <HAL_UART_Transmit>
	HAL_Delay(500);
 8003d0e:	23fa      	movs	r3, #250	; 0xfa
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 fc40 	bl	8004598 <HAL_Delay>
  {
 8003d18:	e7b7      	b.n	8003c8a <main+0x2a>
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	20000394 	.word	0x20000394
 8003d20:	200003a0 	.word	0x200003a0
 8003d24:	200003ac 	.word	0x200003ac
 8003d28:	0800a41c 	.word	0x0800a41c
 8003d2c:	200003b8 	.word	0x200003b8
 8003d30:	20000288 	.word	0x20000288

08003d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b091      	sub	sp, #68	; 0x44
 8003d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d3a:	2410      	movs	r4, #16
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	0018      	movs	r0, r3
 8003d40:	2330      	movs	r3, #48	; 0x30
 8003d42:	001a      	movs	r2, r3
 8003d44:	2100      	movs	r1, #0
 8003d46:	f003 fbd5 	bl	80074f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d4a:	003b      	movs	r3, r7
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	2310      	movs	r3, #16
 8003d50:	001a      	movs	r2, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	f003 fbce 	bl	80074f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d58:	0021      	movs	r1, r4
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	2201      	movs	r2, #1
 8003d64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2210      	movs	r2, #16
 8003d6a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2202      	movs	r2, #2
 8003d70:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	22a0      	movs	r2, #160	; 0xa0
 8003d7c:	0392      	lsls	r2, r2, #14
 8003d7e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2200      	movs	r2, #0
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f001 f861 	bl	8004e50 <HAL_RCC_OscConfig>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d001      	beq.n	8003d96 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003d92:	f000 f93b 	bl	800400c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d96:	003b      	movs	r3, r7
 8003d98:	2207      	movs	r2, #7
 8003d9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d9c:	003b      	movs	r3, r7
 8003d9e:	2202      	movs	r2, #2
 8003da0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da2:	003b      	movs	r3, r7
 8003da4:	2200      	movs	r2, #0
 8003da6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003da8:	003b      	movs	r3, r7
 8003daa:	2200      	movs	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003dae:	003b      	movs	r3, r7
 8003db0:	2101      	movs	r1, #1
 8003db2:	0018      	movs	r0, r3
 8003db4:	f001 fb66 	bl	8005484 <HAL_RCC_ClockConfig>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d001      	beq.n	8003dc0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003dbc:	f000 f926 	bl	800400c <Error_Handler>
  }
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b011      	add	sp, #68	; 0x44
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_CRC_Init+0x38>)
 8003dce:	4a0d      	ldr	r2, [pc, #52]	; (8003e04 <MX_CRC_Init+0x3c>)
 8003dd0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <MX_CRC_Init+0x38>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <MX_CRC_Init+0x38>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <MX_CRC_Init+0x38>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <MX_CRC_Init+0x38>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	619a      	str	r2, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003dea:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <MX_CRC_Init+0x38>)
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fcd5 	bl	800479c <HAL_CRC_Init>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <MX_CRC_Init+0x32>
  {
    Error_Handler();
 8003df6:	f000 f909 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000208 	.word	0x20000208
 8003e04:	40023000 	.word	0x40023000

08003e08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e0e:	4a1c      	ldr	r2, [pc, #112]	; (8003e80 <MX_SPI1_Init+0x78>)
 8003e10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e14:	2282      	movs	r2, #130	; 0x82
 8003e16:	0052      	lsls	r2, r2, #1
 8003e18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e22:	22e0      	movs	r2, #224	; 0xe0
 8003e24:	00d2      	lsls	r2, r2, #3
 8003e26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e28:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e3e:	2218      	movs	r2, #24
 8003e40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e56:	2207      	movs	r2, #7
 8003e58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e5a:	4b08      	ldr	r3, [pc, #32]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <MX_SPI1_Init+0x74>)
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f001 fc5d 	bl	8005728 <HAL_SPI_Init>
 8003e6e:	1e03      	subs	r3, r0, #0
 8003e70:	d001      	beq.n	8003e76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003e72:	f000 f8cb 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000224 	.word	0x20000224
 8003e80:	40013000 	.word	0x40013000

08003e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e88:	4b14      	ldr	r3, [pc, #80]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003e8a:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <MX_USART2_UART_Init+0x5c>)
 8003e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003e90:	2296      	movs	r2, #150	; 0x96
 8003e92:	0192      	lsls	r2, r2, #6
 8003e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003eaa:	220c      	movs	r2, #12
 8003eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <MX_USART2_UART_Init+0x58>)
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f002 fb2f 	bl	800652c <HAL_UART_Init>
 8003ece:	1e03      	subs	r3, r0, #0
 8003ed0:	d001      	beq.n	8003ed6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003ed2:	f000 f89b 	bl	800400c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000288 	.word	0x20000288
 8003ee0:	40004400 	.word	0x40004400

08003ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <MX_DMA_Init+0x38>)
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <MX_DMA_Init+0x38>)
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	615a      	str	r2, [r3, #20]
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <MX_DMA_Init+0x38>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2201      	movs	r2, #1
 8003efc:	4013      	ands	r3, r2
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	200b      	movs	r0, #11
 8003f08:	f000 fc16 	bl	8004738 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003f0c:	200b      	movs	r0, #11
 8003f0e:	f000 fc28 	bl	8004762 <HAL_NVIC_EnableIRQ>

}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b002      	add	sp, #8
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	40021000 	.word	0x40021000

08003f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f26:	240c      	movs	r4, #12
 8003f28:	193b      	adds	r3, r7, r4
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	2314      	movs	r3, #20
 8003f2e:	001a      	movs	r2, r3
 8003f30:	2100      	movs	r1, #0
 8003f32:	f003 fadf 	bl	80074f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	4b32      	ldr	r3, [pc, #200]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	0289      	lsls	r1, r1, #10
 8003f40:	430a      	orrs	r2, r1
 8003f42:	615a      	str	r2, [r3, #20]
 8003f44:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f52:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	0309      	lsls	r1, r1, #12
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <MX_GPIO_Init+0xe4>)
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	031b      	lsls	r3, r3, #12
 8003f68:	4013      	ands	r3, r2
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003f6e:	2390      	movs	r3, #144	; 0x90
 8003f70:	05db      	lsls	r3, r3, #23
 8003f72:	2201      	movs	r2, #1
 8003f74:	2110      	movs	r1, #16
 8003f76:	0018      	movs	r0, r3
 8003f78:	f000 ff4c 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003f7c:	23c0      	movs	r3, #192	; 0xc0
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4821      	ldr	r0, [pc, #132]	; (8004008 <MX_GPIO_Init+0xe8>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	0019      	movs	r1, r3
 8003f86:	f000 ff45 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2290      	movs	r2, #144	; 0x90
 8003f94:	0352      	lsls	r2, r2, #13
 8003f96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	193b      	adds	r3, r7, r4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f9e:	193a      	adds	r2, r7, r4
 8003fa0:	2390      	movs	r3, #144	; 0x90
 8003fa2:	05db      	lsls	r3, r3, #23
 8003fa4:	0011      	movs	r1, r2
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f000 fdc4 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8003fac:	193b      	adds	r3, r7, r4
 8003fae:	2210      	movs	r2, #16
 8003fb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb2:	193b      	adds	r3, r7, r4
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	193a      	adds	r2, r7, r4
 8003fc6:	2390      	movs	r3, #144	; 0x90
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	0011      	movs	r1, r2
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f000 fdb1 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8003fd2:	0021      	movs	r1, r4
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	22c0      	movs	r2, #192	; 0xc0
 8003fd8:	0092      	lsls	r2, r2, #2
 8003fda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fdc:	187b      	adds	r3, r7, r1
 8003fde:	2201      	movs	r2, #1
 8003fe0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fee:	187b      	adds	r3, r7, r1
 8003ff0:	4a05      	ldr	r2, [pc, #20]	; (8004008 <MX_GPIO_Init+0xe8>)
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	0010      	movs	r0, r2
 8003ff6:	f000 fd9d 	bl	8004b34 <HAL_GPIO_Init>

}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b009      	add	sp, #36	; 0x24
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	40021000 	.word	0x40021000
 8004008:	48000800 	.word	0x48000800

0800400c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004010:	b672      	cpsid	i
}
 8004012:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004014:	e7fe      	b.n	8004014 <Error_Handler+0x8>
	...

08004018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_MspInit+0x44>)
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	4b0e      	ldr	r3, [pc, #56]	; (800405c <HAL_MspInit+0x44>)
 8004024:	2101      	movs	r1, #1
 8004026:	430a      	orrs	r2, r1
 8004028:	619a      	str	r2, [r3, #24]
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <HAL_MspInit+0x44>)
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2201      	movs	r2, #1
 8004030:	4013      	ands	r3, r2
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_MspInit+0x44>)
 8004038:	69da      	ldr	r2, [r3, #28]
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_MspInit+0x44>)
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0549      	lsls	r1, r1, #21
 8004040:	430a      	orrs	r2, r1
 8004042:	61da      	str	r2, [r3, #28]
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <HAL_MspInit+0x44>)
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	2380      	movs	r3, #128	; 0x80
 800404a:	055b      	lsls	r3, r3, #21
 800404c:	4013      	ands	r3, r2
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b002      	add	sp, #8
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_CRC_MspInit+0x34>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10b      	bne.n	800408a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_CRC_MspInit+0x38>)
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_CRC_MspInit+0x38>)
 8004078:	2140      	movs	r1, #64	; 0x40
 800407a:	430a      	orrs	r2, r1
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_CRC_MspInit+0x38>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b004      	add	sp, #16
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	40023000 	.word	0x40023000
 8004098:	40021000 	.word	0x40021000

0800409c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800409c:	b590      	push	{r4, r7, lr}
 800409e:	b08b      	sub	sp, #44	; 0x2c
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	2414      	movs	r4, #20
 80040a6:	193b      	adds	r3, r7, r4
 80040a8:	0018      	movs	r0, r3
 80040aa:	2314      	movs	r3, #20
 80040ac:	001a      	movs	r2, r3
 80040ae:	2100      	movs	r1, #0
 80040b0:	f003 fa20 	bl	80074f4 <memset>
  if(hspi->Instance==SPI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_SPI_MspInit+0x90>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d132      	bne.n	8004124 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	0149      	lsls	r1, r1, #5
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	015b      	lsls	r3, r3, #5
 80040d4:	4013      	ands	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	0289      	lsls	r1, r1, #10
 80040e4:	430a      	orrs	r2, r1
 80040e6:	615a      	str	r2, [r3, #20]
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_SPI_MspInit+0x94>)
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040f6:	0021      	movs	r1, r4
 80040f8:	187b      	adds	r3, r7, r1
 80040fa:	22e0      	movs	r2, #224	; 0xe0
 80040fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	2202      	movs	r2, #2
 8004102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2203      	movs	r2, #3
 800410e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	187a      	adds	r2, r7, r1
 8004118:	2390      	movs	r3, #144	; 0x90
 800411a:	05db      	lsls	r3, r3, #23
 800411c:	0011      	movs	r1, r2
 800411e:	0018      	movs	r0, r3
 8004120:	f000 fd08 	bl	8004b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b00b      	add	sp, #44	; 0x2c
 800412a:	bd90      	pop	{r4, r7, pc}
 800412c:	40013000 	.word	0x40013000
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b08b      	sub	sp, #44	; 0x2c
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	2414      	movs	r4, #20
 800413e:	193b      	adds	r3, r7, r4
 8004140:	0018      	movs	r0, r3
 8004142:	2314      	movs	r3, #20
 8004144:	001a      	movs	r2, r3
 8004146:	2100      	movs	r1, #0
 8004148:	f003 f9d4 	bl	80074f4 <memset>
  if(huart->Instance==USART2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a47      	ldr	r2, [pc, #284]	; (8004270 <HAL_UART_MspInit+0x13c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d000      	beq.n	8004158 <HAL_UART_MspInit+0x24>
 8004156:	e086      	b.n	8004266 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_UART_MspInit+0x140>)
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_UART_MspInit+0x140>)
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	0289      	lsls	r1, r1, #10
 8004162:	430a      	orrs	r2, r1
 8004164:	61da      	str	r2, [r3, #28]
 8004166:	4b43      	ldr	r3, [pc, #268]	; (8004274 <HAL_UART_MspInit+0x140>)
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	029b      	lsls	r3, r3, #10
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_UART_MspInit+0x140>)
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <HAL_UART_MspInit+0x140>)
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	0289      	lsls	r1, r1, #10
 800417e:	430a      	orrs	r2, r1
 8004180:	615a      	str	r2, [r3, #20]
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_UART_MspInit+0x140>)
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	4013      	ands	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004190:	0021      	movs	r1, r4
 8004192:	187b      	adds	r3, r7, r1
 8004194:	220c      	movs	r2, #12
 8004196:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2202      	movs	r2, #2
 800419c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	187b      	adds	r3, r7, r1
 80041a0:	2200      	movs	r2, #0
 80041a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041a4:	187b      	adds	r3, r7, r1
 80041a6:	2203      	movs	r2, #3
 80041a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2201      	movs	r2, #1
 80041ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	187a      	adds	r2, r7, r1
 80041b2:	2390      	movs	r3, #144	; 0x90
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	0011      	movs	r1, r2
 80041b8:	0018      	movs	r0, r3
 80041ba:	f000 fcbb 	bl	8004b34 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041c0:	4a2e      	ldr	r2, [pc, #184]	; (800427c <HAL_UART_MspInit+0x148>)
 80041c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ca:	4b2b      	ldr	r3, [pc, #172]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041d6:	4b28      	ldr	r3, [pc, #160]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041dc:	4b26      	ldr	r3, [pc, #152]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041de:	2200      	movs	r2, #0
 80041e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_UART_MspInit+0x144>)
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fb1b 	bl	800482c <HAL_DMA_Init>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80041fa:	f7ff ff07 	bl	800400c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_UART_MspInit+0x144>)
 8004202:	671a      	str	r2, [r3, #112]	; 0x70
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_UART_MspInit+0x144>)
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_UART_MspInit+0x14c>)
 800420c:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_UART_MspInit+0x150>)
 800420e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004212:	2210      	movs	r2, #16
 8004214:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <HAL_UART_MspInit+0x14c>)
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <HAL_UART_MspInit+0x14c>)
 800422a:	2200      	movs	r2, #0
 800422c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800422e:	4b14      	ldr	r3, [pc, #80]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004236:	2200      	movs	r2, #0
 8004238:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_UART_MspInit+0x14c>)
 800423c:	0018      	movs	r0, r3
 800423e:	f000 faf5 	bl	800482c <HAL_DMA_Init>
 8004242:	1e03      	subs	r3, r0, #0
 8004244:	d001      	beq.n	800424a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004246:	f7ff fee1 	bl	800400c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a0c      	ldr	r2, [pc, #48]	; (8004280 <HAL_UART_MspInit+0x14c>)
 800424e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_UART_MspInit+0x14c>)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	201c      	movs	r0, #28
 800425c:	f000 fa6c 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004260:	201c      	movs	r0, #28
 8004262:	f000 fa7e 	bl	8004762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b00b      	add	sp, #44	; 0x2c
 800426c:	bd90      	pop	{r4, r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40004400 	.word	0x40004400
 8004274:	40021000 	.word	0x40021000
 8004278:	2000030c 	.word	0x2000030c
 800427c:	40020058 	.word	0x40020058
 8004280:	20000350 	.word	0x20000350
 8004284:	40020044 	.word	0x40020044

08004288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800428c:	e7fe      	b.n	800428c <NMI_Handler+0x4>

0800428e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <HardFault_Handler+0x4>

08004294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042ac:	f000 f958 	bl	8004560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <DMA1_Channel4_5_IRQHandler+0x1c>)
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 fb79 	bl	80049b6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042c4:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <DMA1_Channel4_5_IRQHandler+0x20>)
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 fb75 	bl	80049b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	20000350 	.word	0x20000350
 80042d8:	2000030c 	.word	0x2000030c

080042dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <USART2_IRQHandler+0x14>)
 80042e2:	0018      	movs	r0, r3
 80042e4:	f002 fa20 	bl	8006728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	20000288 	.word	0x20000288

080042f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	return 1;
 80042f8:	2301      	movs	r3, #1
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <_kill>:

int _kill(int pid, int sig)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800430a:	f003 f8ad 	bl	8007468 <__errno>
 800430e:	0003      	movs	r3, r0
 8004310:	2216      	movs	r2, #22
 8004312:	601a      	str	r2, [r3, #0]
	return -1;
 8004314:	2301      	movs	r3, #1
 8004316:	425b      	negs	r3, r3
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <_exit>:

void _exit (int status)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004328:	2301      	movs	r3, #1
 800432a:	425a      	negs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0011      	movs	r1, r2
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff ffe5 	bl	8004300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004336:	e7fe      	b.n	8004336 <_exit+0x16>

08004338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e00a      	b.n	8004360 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800434a:	e000      	b.n	800434e <_read+0x16>
 800434c:	bf00      	nop
 800434e:	0001      	movs	r1, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	60ba      	str	r2, [r7, #8]
 8004356:	b2ca      	uxtb	r2, r1
 8004358:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	429a      	cmp	r2, r3
 8004366:	dbf0      	blt.n	800434a <_read+0x12>
	}

return len;
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b006      	add	sp, #24
 8004370:	bd80      	pop	{r7, pc}

08004372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e009      	b.n	8004398 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	60ba      	str	r2, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	e000      	b.n	8004392 <_write+0x20>
 8004390:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3301      	adds	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	dbf1      	blt.n	8004384 <_write+0x12>
	}
	return len;
 80043a0:	687b      	ldr	r3, [r7, #4]
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b006      	add	sp, #24
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_close>:

int _close(int file)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
	return -1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	425b      	negs	r3, r3
}
 80043b6:	0018      	movs	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b002      	add	sp, #8
 80043bc:	bd80      	pop	{r7, pc}

080043be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2280      	movs	r2, #128	; 0x80
 80043cc:	0192      	lsls	r2, r2, #6
 80043ce:	605a      	str	r2, [r3, #4]
	return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	0018      	movs	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	b002      	add	sp, #8
 80043d8:	bd80      	pop	{r7, pc}

080043da <_isatty>:

int _isatty(int file)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
	return 1;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}

080043ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	return 0;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b004      	add	sp, #16
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <_sbrk+0x5c>)
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <_sbrk+0x60>)
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004418:	4b13      	ldr	r3, [pc, #76]	; (8004468 <_sbrk+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <_sbrk+0x64>)
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <_sbrk+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d207      	bcs.n	8004444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004434:	f003 f818 	bl	8007468 <__errno>
 8004438:	0003      	movs	r3, r0
 800443a:	220c      	movs	r2, #12
 800443c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443e:	2301      	movs	r3, #1
 8004440:	425b      	negs	r3, r3
 8004442:	e009      	b.n	8004458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <_sbrk+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	18d2      	adds	r2, r2, r3
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <_sbrk+0x64>)
 8004454:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20002000 	.word	0x20002000
 8004464:	00000400 	.word	0x00000400
 8004468:	2000041c 	.word	0x2000041c
 800446c:	20000438 	.word	0x20000438

08004470 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800447c:	480d      	ldr	r0, [pc, #52]	; (80044b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800447e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004480:	480d      	ldr	r0, [pc, #52]	; (80044b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004482:	490e      	ldr	r1, [pc, #56]	; (80044bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004484:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <LoopForever+0xe>)
  movs r3, #0
 8004486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004488:	e002      	b.n	8004490 <LoopCopyDataInit>

0800448a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800448a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800448c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800448e:	3304      	adds	r3, #4

08004490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004494:	d3f9      	bcc.n	800448a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004496:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004498:	4c0b      	ldr	r4, [pc, #44]	; (80044c8 <LoopForever+0x16>)
  movs r3, #0
 800449a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800449c:	e001      	b.n	80044a2 <LoopFillZerobss>

0800449e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800449e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044a0:	3204      	adds	r2, #4

080044a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044a4:	d3fb      	bcc.n	800449e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044a6:	f7ff ffe3 	bl	8004470 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80044aa:	f002 ffe3 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044ae:	f7ff fbd7 	bl	8003c60 <main>

080044b2 <LoopForever>:

LoopForever:
    b LoopForever
 80044b2:	e7fe      	b.n	80044b2 <LoopForever>
  ldr   r0, =_estack
 80044b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80044b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80044c0:	0800a944 	.word	0x0800a944
  ldr r2, =_sbss
 80044c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80044c8:	20000434 	.word	0x20000434

080044cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044cc:	e7fe      	b.n	80044cc <ADC1_COMP_IRQHandler>
	...

080044d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <HAL_Init+0x24>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_Init+0x24>)
 80044da:	2110      	movs	r1, #16
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80044e0:	2000      	movs	r0, #0
 80044e2:	f000 f809 	bl	80044f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044e6:	f7ff fd97 	bl	8004018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40022000 	.word	0x40022000

080044f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_InitTick+0x5c>)
 8004502:	681c      	ldr	r4, [r3, #0]
 8004504:	4b14      	ldr	r3, [pc, #80]	; (8004558 <HAL_InitTick+0x60>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	0019      	movs	r1, r3
 800450a:	23fa      	movs	r3, #250	; 0xfa
 800450c:	0098      	lsls	r0, r3, #2
 800450e:	f7fb fe17 	bl	8000140 <__udivsi3>
 8004512:	0003      	movs	r3, r0
 8004514:	0019      	movs	r1, r3
 8004516:	0020      	movs	r0, r4
 8004518:	f7fb fe12 	bl	8000140 <__udivsi3>
 800451c:	0003      	movs	r3, r0
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f92f 	bl	8004782 <HAL_SYSTICK_Config>
 8004524:	1e03      	subs	r3, r0, #0
 8004526:	d001      	beq.n	800452c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e00f      	b.n	800454c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d80b      	bhi.n	800454a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	2301      	movs	r3, #1
 8004536:	425b      	negs	r3, r3
 8004538:	2200      	movs	r2, #0
 800453a:	0018      	movs	r0, r3
 800453c:	f000 f8fc 	bl	8004738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_InitTick+0x64>)
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
}
 800454c:	0018      	movs	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	b003      	add	sp, #12
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	20000000 	.word	0x20000000
 8004558:	20000008 	.word	0x20000008
 800455c:	20000004 	.word	0x20000004

08004560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_IncTick+0x1c>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	001a      	movs	r2, r3
 800456a:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_IncTick+0x20>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	18d2      	adds	r2, r2, r3
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_IncTick+0x20>)
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	20000008 	.word	0x20000008
 8004580:	20000420 	.word	0x20000420

08004584 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  return uwTick;
 8004588:	4b02      	ldr	r3, [pc, #8]	; (8004594 <HAL_GetTick+0x10>)
 800458a:	681b      	ldr	r3, [r3, #0]
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	20000420 	.word	0x20000420

08004598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff fff0 	bl	8004584 <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d005      	beq.n	80045be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045b2:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <HAL_Delay+0x44>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	001a      	movs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	f7ff ffe0 	bl	8004584 <HAL_GetTick>
 80045c4:	0002      	movs	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d8f7      	bhi.n	80045c0 <HAL_Delay+0x28>
  {
  }
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b004      	add	sp, #16
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	20000008 	.word	0x20000008

080045e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	0002      	movs	r2, r0
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b7f      	cmp	r3, #127	; 0x7f
 80045f2:	d809      	bhi.n	8004608 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f4:	1dfb      	adds	r3, r7, #7
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	001a      	movs	r2, r3
 80045fa:	231f      	movs	r3, #31
 80045fc:	401a      	ands	r2, r3
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__NVIC_EnableIRQ+0x30>)
 8004600:	2101      	movs	r1, #1
 8004602:	4091      	lsls	r1, r2
 8004604:	000a      	movs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
  }
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	1dfb      	adds	r3, r7, #7
 8004620:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004622:	1dfb      	adds	r3, r7, #7
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d828      	bhi.n	800467c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800462c:	1dfb      	adds	r3, r7, #7
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b25b      	sxtb	r3, r3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	33c0      	adds	r3, #192	; 0xc0
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	589b      	ldr	r3, [r3, r2]
 800463a:	1dfa      	adds	r2, r7, #7
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	0011      	movs	r1, r2
 8004640:	2203      	movs	r2, #3
 8004642:	400a      	ands	r2, r1
 8004644:	00d2      	lsls	r2, r2, #3
 8004646:	21ff      	movs	r1, #255	; 0xff
 8004648:	4091      	lsls	r1, r2
 800464a:	000a      	movs	r2, r1
 800464c:	43d2      	mvns	r2, r2
 800464e:	401a      	ands	r2, r3
 8004650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	22ff      	movs	r2, #255	; 0xff
 8004658:	401a      	ands	r2, r3
 800465a:	1dfb      	adds	r3, r7, #7
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	0018      	movs	r0, r3
 8004660:	2303      	movs	r3, #3
 8004662:	4003      	ands	r3, r0
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	481f      	ldr	r0, [pc, #124]	; (80046e8 <__NVIC_SetPriority+0xd4>)
 800466a:	1dfb      	adds	r3, r7, #7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b25b      	sxtb	r3, r3
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	430a      	orrs	r2, r1
 8004674:	33c0      	adds	r3, #192	; 0xc0
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800467a:	e031      	b.n	80046e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467c:	4a1b      	ldr	r2, [pc, #108]	; (80046ec <__NVIC_SetPriority+0xd8>)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	0019      	movs	r1, r3
 8004684:	230f      	movs	r3, #15
 8004686:	400b      	ands	r3, r1
 8004688:	3b08      	subs	r3, #8
 800468a:	089b      	lsrs	r3, r3, #2
 800468c:	3306      	adds	r3, #6
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	18d3      	adds	r3, r2, r3
 8004692:	3304      	adds	r3, #4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	1dfa      	adds	r2, r7, #7
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0011      	movs	r1, r2
 800469c:	2203      	movs	r2, #3
 800469e:	400a      	ands	r2, r1
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	21ff      	movs	r1, #255	; 0xff
 80046a4:	4091      	lsls	r1, r2
 80046a6:	000a      	movs	r2, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	401a      	ands	r2, r3
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	2303      	movs	r3, #3
 80046be:	4003      	ands	r3, r0
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	4809      	ldr	r0, [pc, #36]	; (80046ec <__NVIC_SetPriority+0xd8>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	001c      	movs	r4, r3
 80046cc:	230f      	movs	r3, #15
 80046ce:	4023      	ands	r3, r4
 80046d0:	3b08      	subs	r3, #8
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	430a      	orrs	r2, r1
 80046d6:	3306      	adds	r3, #6
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	18c3      	adds	r3, r0, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b003      	add	sp, #12
 80046e6:	bd90      	pop	{r4, r7, pc}
 80046e8:	e000e100 	.word	0xe000e100
 80046ec:	e000ed00 	.word	0xe000ed00

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	045b      	lsls	r3, r3, #17
 8004700:	429a      	cmp	r2, r3
 8004702:	d301      	bcc.n	8004708 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004704:	2301      	movs	r3, #1
 8004706:	e010      	b.n	800472a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <SysTick_Config+0x44>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	3a01      	subs	r2, #1
 800470e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004710:	2301      	movs	r3, #1
 8004712:	425b      	negs	r3, r3
 8004714:	2103      	movs	r1, #3
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff ff7c 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <SysTick_Config+0x44>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004722:	4b04      	ldr	r3, [pc, #16]	; (8004734 <SysTick_Config+0x44>)
 8004724:	2207      	movs	r2, #7
 8004726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004728:	2300      	movs	r3, #0
}
 800472a:	0018      	movs	r0, r3
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	e000e010 	.word	0xe000e010

08004738 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	210f      	movs	r1, #15
 8004744:	187b      	adds	r3, r7, r1
 8004746:	1c02      	adds	r2, r0, #0
 8004748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	187b      	adds	r3, r7, r1
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	b25b      	sxtb	r3, r3
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	0002      	movs	r2, r0
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800476e:	1dfb      	adds	r3, r7, #7
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	b25b      	sxtb	r3, r3
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff ff33 	bl	80045e0 <__NVIC_EnableIRQ>
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46bd      	mov	sp, r7
 800477e:	b002      	add	sp, #8
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f7ff ffaf 	bl	80046f0 <SysTick_Config>
 8004792:	0003      	movs	r3, r0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e039      	b.n	8004822 <HAL_CRC_Init+0x86>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	7d5b      	ldrb	r3, [r3, #21]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d106      	bne.n	80047c6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	751a      	strb	r2, [r3, #20]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff fc4d 	bl	8004060 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	755a      	strb	r2, [r3, #21]
#endif /* CRC_POL_POL */

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	791b      	ldrb	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_CRC_Init+0x44>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2201      	movs	r2, #1
 80047da:	4252      	negs	r2, r2
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	e004      	b.n	80047ea <HAL_CRC_Init+0x4e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2260      	movs	r2, #96	; 0x60
 80047f2:	4393      	bics	r3, r2
 80047f4:	0019      	movs	r1, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	4393      	bics	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	755a      	strb	r2, [r3, #21]

  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b002      	add	sp, #8
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e036      	b.n	80048b0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	2102      	movs	r1, #2
 8004848:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_DMA_Init+0x8c>)
 8004856:	4013      	ands	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f932 	bl	8004afc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}  
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b004      	add	sp, #16
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	ffffc00f 	.word	0xffffc00f

080048bc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2221      	movs	r2, #33	; 0x21
 80048c8:	5c9b      	ldrb	r3, [r3, r2]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d008      	beq.n	80048e2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e020      	b.n	8004924 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	210e      	movs	r1, #14
 80048ee:	438a      	bics	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2101      	movs	r1, #1
 80048fe:	438a      	bics	r2, r1
 8004900:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2101      	movs	r1, #1
 800490c:	4091      	lsls	r1, r2
 800490e:	000a      	movs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2221      	movs	r2, #33	; 0x21
 8004916:	2101      	movs	r1, #1
 8004918:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	2100      	movs	r1, #0
 8004920:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	0018      	movs	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	b002      	add	sp, #8
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	210f      	movs	r1, #15
 8004936:	187b      	adds	r3, r7, r1
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2221      	movs	r2, #33	; 0x21
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d006      	beq.n	8004956 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2204      	movs	r2, #4
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	e028      	b.n	80049a8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	210e      	movs	r1, #14
 8004962:	438a      	bics	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	438a      	bics	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	2101      	movs	r1, #1
 8004980:	4091      	lsls	r1, r2
 8004982:	000a      	movs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2221      	movs	r2, #33	; 0x21
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	0010      	movs	r0, r2
 80049a6:	4798      	blx	r3
    } 
  }
  return status;
 80049a8:	230f      	movs	r3, #15
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	781b      	ldrb	r3, [r3, #0]
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b004      	add	sp, #16
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2204      	movs	r2, #4
 80049d4:	409a      	lsls	r2, r3
 80049d6:	0013      	movs	r3, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4013      	ands	r3, r2
 80049dc:	d024      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x72>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d020      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2220      	movs	r2, #32
 80049ee:	4013      	ands	r3, r2
 80049f0:	d107      	bne.n	8004a02 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2104      	movs	r1, #4
 80049fe:	438a      	bics	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	4091      	lsls	r1, r2
 8004a0e:	000a      	movs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d100      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x66>
 8004a1a:	e06a      	b.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	0010      	movs	r0, r2
 8004a24:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004a26:	e064      	b.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	0013      	movs	r3, r2
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4013      	ands	r3, r2
 8004a36:	d02b      	beq.n	8004a90 <HAL_DMA_IRQHandler+0xda>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d027      	beq.n	8004a90 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2220      	movs	r2, #32
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d10b      	bne.n	8004a64 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	210a      	movs	r1, #10
 8004a58:	438a      	bics	r2, r1
 8004a5a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2221      	movs	r2, #33	; 0x21
 8004a60:	2101      	movs	r1, #1
 8004a62:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4091      	lsls	r1, r2
 8004a70:	000a      	movs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	2100      	movs	r1, #0
 8004a7a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d036      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004a8e:	e030      	b.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	2208      	movs	r2, #8
 8004a96:	409a      	lsls	r2, r3
 8004a98:	0013      	movs	r3, r2
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d028      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d024      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	210e      	movs	r1, #14
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4091      	lsls	r1, r2
 8004ac4:	000a      	movs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2221      	movs	r2, #33	; 0x21
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	2100      	movs	r1, #0
 8004adc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	0010      	movs	r0, r2
 8004aee:	4798      	blx	r3
    }
   }
}  
 8004af0:	e7ff      	b.n	8004af2 <HAL_DMA_IRQHandler+0x13c>
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b004      	add	sp, #16
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <DMA_CalcBaseAndBitshift+0x30>)
 8004b0a:	4694      	mov	ip, r2
 8004b0c:	4463      	add	r3, ip
 8004b0e:	2114      	movs	r1, #20
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fb fb15 	bl	8000140 <__udivsi3>
 8004b16:	0003      	movs	r3, r0
 8004b18:	009a      	lsls	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a03      	ldr	r2, [pc, #12]	; (8004b30 <DMA_CalcBaseAndBitshift+0x34>)
 8004b22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	bffdfff8 	.word	0xbffdfff8
 8004b30:	40020000 	.word	0x40020000

08004b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b42:	e14f      	b.n	8004de4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4091      	lsls	r1, r2
 8004b4e:	000a      	movs	r2, r1
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d100      	bne.n	8004b5c <HAL_GPIO_Init+0x28>
 8004b5a:	e140      	b.n	8004dde <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2203      	movs	r2, #3
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d005      	beq.n	8004b74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d130      	bne.n	8004bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	2203      	movs	r2, #3
 8004b80:	409a      	lsls	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	43da      	mvns	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	409a      	lsls	r2, r3
 8004b96:	0013      	movs	r3, r2
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004baa:	2201      	movs	r2, #1
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	0013      	movs	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d017      	beq.n	8004c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	0013      	movs	r3, r2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2203      	movs	r2, #3
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d123      	bne.n	8004c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	08da      	lsrs	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3208      	adds	r2, #8
 8004c26:	0092      	lsls	r2, r2, #2
 8004c28:	58d3      	ldr	r3, [r2, r3]
 8004c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2207      	movs	r2, #7
 8004c30:	4013      	ands	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	409a      	lsls	r2, r3
 8004c38:	0013      	movs	r3, r2
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2107      	movs	r1, #7
 8004c4a:	400b      	ands	r3, r1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	0013      	movs	r3, r2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	0092      	lsls	r2, r2, #2
 8004c62:	6939      	ldr	r1, [r7, #16]
 8004c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	409a      	lsls	r2, r3
 8004c74:	0013      	movs	r3, r2
 8004c76:	43da      	mvns	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2203      	movs	r2, #3
 8004c84:	401a      	ands	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	0013      	movs	r3, r2
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	23c0      	movs	r3, #192	; 0xc0
 8004ca0:	029b      	lsls	r3, r3, #10
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d100      	bne.n	8004ca8 <HAL_GPIO_Init+0x174>
 8004ca6:	e09a      	b.n	8004dde <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca8:	4b54      	ldr	r3, [pc, #336]	; (8004dfc <HAL_GPIO_Init+0x2c8>)
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	4b53      	ldr	r3, [pc, #332]	; (8004dfc <HAL_GPIO_Init+0x2c8>)
 8004cae:	2101      	movs	r1, #1
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	619a      	str	r2, [r3, #24]
 8004cb4:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_GPIO_Init+0x2c8>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cc0:	4a4f      	ldr	r2, [pc, #316]	; (8004e00 <HAL_GPIO_Init+0x2cc>)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	089b      	lsrs	r3, r3, #2
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	589b      	ldr	r3, [r3, r2]
 8004ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	220f      	movs	r2, #15
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	0013      	movs	r3, r2
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	2390      	movs	r3, #144	; 0x90
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d013      	beq.n	8004d16 <HAL_GPIO_Init+0x1e2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a44      	ldr	r2, [pc, #272]	; (8004e04 <HAL_GPIO_Init+0x2d0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00d      	beq.n	8004d12 <HAL_GPIO_Init+0x1de>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a43      	ldr	r2, [pc, #268]	; (8004e08 <HAL_GPIO_Init+0x2d4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <HAL_GPIO_Init+0x1da>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <HAL_GPIO_Init+0x2d8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_GPIO_Init+0x1d6>
 8004d06:	2303      	movs	r3, #3
 8004d08:	e006      	b.n	8004d18 <HAL_GPIO_Init+0x1e4>
 8004d0a:	2305      	movs	r3, #5
 8004d0c:	e004      	b.n	8004d18 <HAL_GPIO_Init+0x1e4>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e002      	b.n	8004d18 <HAL_GPIO_Init+0x1e4>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_GPIO_Init+0x1e4>
 8004d16:	2300      	movs	r3, #0
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	400a      	ands	r2, r1
 8004d1e:	0092      	lsls	r2, r2, #2
 8004d20:	4093      	lsls	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d28:	4935      	ldr	r1, [pc, #212]	; (8004e00 <HAL_GPIO_Init+0x2cc>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3302      	adds	r3, #2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d36:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	025b      	lsls	r3, r3, #9
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004d5a:	4b2d      	ldr	r3, [pc, #180]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004d60:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	029b      	lsls	r3, r3, #10
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d84:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d8a:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	43da      	mvns	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	035b      	lsls	r3, r3, #13
 8004da2:	4013      	ands	r3, r2
 8004da4:	d003      	beq.n	8004dae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004db4:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	43da      	mvns	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	039b      	lsls	r3, r3, #14
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004dd8:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <HAL_GPIO_Init+0x2dc>)
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	3301      	adds	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	40da      	lsrs	r2, r3
 8004dec:	1e13      	subs	r3, r2, #0
 8004dee:	d000      	beq.n	8004df2 <HAL_GPIO_Init+0x2be>
 8004df0:	e6a8      	b.n	8004b44 <HAL_GPIO_Init+0x10>
  } 
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b006      	add	sp, #24
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40010000 	.word	0x40010000
 8004e04:	48000400 	.word	0x48000400
 8004e08:	48000800 	.word	0x48000800
 8004e0c:	48000c00 	.word	0x48000c00
 8004e10:	40010400 	.word	0x40010400

08004e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	0008      	movs	r0, r1
 8004e1e:	0011      	movs	r1, r2
 8004e20:	1cbb      	adds	r3, r7, #2
 8004e22:	1c02      	adds	r2, r0, #0
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	1c7b      	adds	r3, r7, #1
 8004e28:	1c0a      	adds	r2, r1, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e2c:	1c7b      	adds	r3, r7, #1
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e34:	1cbb      	adds	r3, r7, #2
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e3c:	e003      	b.n	8004e46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e3e:	1cbb      	adds	r3, r7, #2
 8004e40:	881a      	ldrh	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e301      	b.n	8005466 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <HAL_RCC_OscConfig+0x1e>
 8004e6c:	e08d      	b.n	8004f8a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e6e:	4bc3      	ldr	r3, [pc, #780]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	220c      	movs	r2, #12
 8004e74:	4013      	ands	r3, r2
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d00e      	beq.n	8004e98 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e7a:	4bc0      	ldr	r3, [pc, #768]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	220c      	movs	r2, #12
 8004e80:	4013      	ands	r3, r2
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d116      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x64>
 8004e86:	4bbd      	ldr	r3, [pc, #756]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	025b      	lsls	r3, r3, #9
 8004e8e:	401a      	ands	r2, r3
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	025b      	lsls	r3, r3, #9
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d10d      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	4bb8      	ldr	r3, [pc, #736]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x56>
 8004ea4:	e070      	b.n	8004f88 <HAL_RCC_OscConfig+0x138>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d000      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x60>
 8004eae:	e06b      	b.n	8004f88 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e2d8      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_OscConfig+0x7c>
 8004ebc:	4baf      	ldr	r3, [pc, #700]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4bae      	ldr	r3, [pc, #696]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	0249      	lsls	r1, r1, #9
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e02f      	b.n	8004f2c <HAL_RCC_OscConfig+0xdc>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <HAL_RCC_OscConfig+0x9e>
 8004ed4:	4ba9      	ldr	r3, [pc, #676]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4ba8      	ldr	r3, [pc, #672]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004eda:	49a9      	ldr	r1, [pc, #676]	; (8005180 <HAL_RCC_OscConfig+0x330>)
 8004edc:	400a      	ands	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4ba6      	ldr	r3, [pc, #664]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4ba5      	ldr	r3, [pc, #660]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ee6:	49a7      	ldr	r1, [pc, #668]	; (8005184 <HAL_RCC_OscConfig+0x334>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e01e      	b.n	8004f2c <HAL_RCC_OscConfig+0xdc>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10e      	bne.n	8004f14 <HAL_RCC_OscConfig+0xc4>
 8004ef6:	4ba1      	ldr	r3, [pc, #644]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4ba0      	ldr	r3, [pc, #640]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004efc:	2180      	movs	r1, #128	; 0x80
 8004efe:	02c9      	lsls	r1, r1, #11
 8004f00:	430a      	orrs	r2, r1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	4b9d      	ldr	r3, [pc, #628]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b9c      	ldr	r3, [pc, #624]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f0a:	2180      	movs	r1, #128	; 0x80
 8004f0c:	0249      	lsls	r1, r1, #9
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0xdc>
 8004f14:	4b99      	ldr	r3, [pc, #612]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b98      	ldr	r3, [pc, #608]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f1a:	4999      	ldr	r1, [pc, #612]	; (8005180 <HAL_RCC_OscConfig+0x330>)
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	4b96      	ldr	r3, [pc, #600]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4b95      	ldr	r3, [pc, #596]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f26:	4997      	ldr	r1, [pc, #604]	; (8005184 <HAL_RCC_OscConfig+0x334>)
 8004f28:	400a      	ands	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7ff fb26 	bl	8004584 <HAL_GetTick>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3e:	f7ff fb21 	bl	8004584 <HAL_GetTick>
 8004f42:	0002      	movs	r2, r0
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b64      	cmp	r3, #100	; 0x64
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e28a      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f50:	4b8a      	ldr	r3, [pc, #552]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	029b      	lsls	r3, r3, #10
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0xee>
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7ff fb11 	bl	8004584 <HAL_GetTick>
 8004f62:	0003      	movs	r3, r0
 8004f64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7ff fb0c 	bl	8004584 <HAL_GetTick>
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e275      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b80      	ldr	r3, [pc, #512]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	029b      	lsls	r3, r3, #10
 8004f82:	4013      	ands	r3, r2
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x118>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	4013      	ands	r3, r2
 8004f92:	d100      	bne.n	8004f96 <HAL_RCC_OscConfig+0x146>
 8004f94:	e069      	b.n	800506a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f96:	4b79      	ldr	r3, [pc, #484]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	220c      	movs	r2, #12
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fa0:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	220c      	movs	r2, #12
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d11c      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x196>
 8004fac:	4b73      	ldr	r3, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	025b      	lsls	r3, r3, #9
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d116      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fb8:	4b70      	ldr	r3, [pc, #448]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d005      	beq.n	8004fce <HAL_RCC_OscConfig+0x17e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e24b      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fce:	4b6b      	ldr	r3, [pc, #428]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	22f8      	movs	r2, #248	; 0xf8
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	00da      	lsls	r2, r3, #3
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe4:	e041      	b.n	800506a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d024      	beq.n	8005038 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fee:	4b63      	ldr	r3, [pc, #396]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b62      	ldr	r3, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffa:	f7ff fac3 	bl	8004584 <HAL_GetTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005004:	f7ff fabe 	bl	8004584 <HAL_GetTick>
 8005008:	0002      	movs	r2, r0
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e227      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005016:	4b59      	ldr	r3, [pc, #356]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d0f1      	beq.n	8005004 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	22f8      	movs	r2, #248	; 0xf8
 8005026:	4393      	bics	r3, r2
 8005028:	0019      	movs	r1, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00da      	lsls	r2, r3, #3
 8005030:	4b52      	ldr	r3, [pc, #328]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e018      	b.n	800506a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b4f      	ldr	r3, [pc, #316]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 800503e:	2101      	movs	r1, #1
 8005040:	438a      	bics	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7ff fa9e 	bl	8004584 <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800504e:	f7ff fa99 	bl	8004584 <HAL_GetTick>
 8005052:	0002      	movs	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e202      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005060:	4b46      	ldr	r3, [pc, #280]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2202      	movs	r2, #2
 8005066:	4013      	ands	r3, r2
 8005068:	d1f1      	bne.n	800504e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2208      	movs	r2, #8
 8005070:	4013      	ands	r3, r2
 8005072:	d036      	beq.n	80050e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d019      	beq.n	80050b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507c:	4b3f      	ldr	r3, [pc, #252]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 800507e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005080:	4b3e      	ldr	r3, [pc, #248]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005082:	2101      	movs	r1, #1
 8005084:	430a      	orrs	r2, r1
 8005086:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005088:	f7ff fa7c 	bl	8004584 <HAL_GetTick>
 800508c:	0003      	movs	r3, r0
 800508e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7ff fa77 	bl	8004584 <HAL_GetTick>
 8005096:	0002      	movs	r2, r0
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e1e0      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a4:	4b35      	ldr	r3, [pc, #212]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2202      	movs	r2, #2
 80050aa:	4013      	ands	r3, r2
 80050ac:	d0f1      	beq.n	8005092 <HAL_RCC_OscConfig+0x242>
 80050ae:	e018      	b.n	80050e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 80050b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b4:	4b31      	ldr	r3, [pc, #196]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 80050b6:	2101      	movs	r1, #1
 80050b8:	438a      	bics	r2, r1
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050bc:	f7ff fa62 	bl	8004584 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c6:	f7ff fa5d 	bl	8004584 <HAL_GetTick>
 80050ca:	0002      	movs	r2, r0
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e1c6      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d8:	4b28      	ldr	r3, [pc, #160]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2202      	movs	r2, #2
 80050de:	4013      	ands	r3, r2
 80050e0:	d1f1      	bne.n	80050c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2204      	movs	r2, #4
 80050e8:	4013      	ands	r3, r2
 80050ea:	d100      	bne.n	80050ee <HAL_RCC_OscConfig+0x29e>
 80050ec:	e0b4      	b.n	8005258 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	201f      	movs	r0, #31
 80050f0:	183b      	adds	r3, r7, r0
 80050f2:	2200      	movs	r2, #0
 80050f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	055b      	lsls	r3, r3, #21
 80050fe:	4013      	ands	r3, r2
 8005100:	d110      	bne.n	8005124 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	4b1d      	ldr	r3, [pc, #116]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005108:	2180      	movs	r1, #128	; 0x80
 800510a:	0549      	lsls	r1, r1, #21
 800510c:	430a      	orrs	r2, r1
 800510e:	61da      	str	r2, [r3, #28]
 8005110:	4b1a      	ldr	r3, [pc, #104]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005112:	69da      	ldr	r2, [r3, #28]
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	055b      	lsls	r3, r3, #21
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800511e:	183b      	adds	r3, r7, r0
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b18      	ldr	r3, [pc, #96]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4013      	ands	r3, r2
 800512e:	d11a      	bne.n	8005166 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	0049      	lsls	r1, r1, #1
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7ff fa21 	bl	8004584 <HAL_GetTick>
 8005142:	0003      	movs	r3, r0
 8005144:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005148:	f7ff fa1c 	bl	8004584 <HAL_GetTick>
 800514c:	0002      	movs	r2, r0
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	; 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e185      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515a:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_OscConfig+0x338>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d10e      	bne.n	800518c <HAL_RCC_OscConfig+0x33c>
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	4b02      	ldr	r3, [pc, #8]	; (800517c <HAL_RCC_OscConfig+0x32c>)
 8005174:	2101      	movs	r1, #1
 8005176:	430a      	orrs	r2, r1
 8005178:	621a      	str	r2, [r3, #32]
 800517a:	e035      	b.n	80051e8 <HAL_RCC_OscConfig+0x398>
 800517c:	40021000 	.word	0x40021000
 8005180:	fffeffff 	.word	0xfffeffff
 8005184:	fffbffff 	.word	0xfffbffff
 8005188:	40007000 	.word	0x40007000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10c      	bne.n	80051ae <HAL_RCC_OscConfig+0x35e>
 8005194:	4bb6      	ldr	r3, [pc, #728]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	4bb5      	ldr	r3, [pc, #724]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800519a:	2101      	movs	r1, #1
 800519c:	438a      	bics	r2, r1
 800519e:	621a      	str	r2, [r3, #32]
 80051a0:	4bb3      	ldr	r3, [pc, #716]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	4bb2      	ldr	r3, [pc, #712]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051a6:	2104      	movs	r1, #4
 80051a8:	438a      	bics	r2, r1
 80051aa:	621a      	str	r2, [r3, #32]
 80051ac:	e01c      	b.n	80051e8 <HAL_RCC_OscConfig+0x398>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x380>
 80051b6:	4bae      	ldr	r3, [pc, #696]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	4bad      	ldr	r3, [pc, #692]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051bc:	2104      	movs	r1, #4
 80051be:	430a      	orrs	r2, r1
 80051c0:	621a      	str	r2, [r3, #32]
 80051c2:	4bab      	ldr	r3, [pc, #684]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	4baa      	ldr	r3, [pc, #680]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051c8:	2101      	movs	r1, #1
 80051ca:	430a      	orrs	r2, r1
 80051cc:	621a      	str	r2, [r3, #32]
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0x398>
 80051d0:	4ba7      	ldr	r3, [pc, #668]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	4ba6      	ldr	r3, [pc, #664]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051d6:	2101      	movs	r1, #1
 80051d8:	438a      	bics	r2, r1
 80051da:	621a      	str	r2, [r3, #32]
 80051dc:	4ba4      	ldr	r3, [pc, #656]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	4ba3      	ldr	r3, [pc, #652]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80051e2:	2104      	movs	r1, #4
 80051e4:	438a      	bics	r2, r1
 80051e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d014      	beq.n	800521a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f0:	f7ff f9c8 	bl	8004584 <HAL_GetTick>
 80051f4:	0003      	movs	r3, r0
 80051f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f8:	e009      	b.n	800520e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7ff f9c3 	bl	8004584 <HAL_GetTick>
 80051fe:	0002      	movs	r2, r0
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	4a9b      	ldr	r2, [pc, #620]	; (8005474 <HAL_RCC_OscConfig+0x624>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e12b      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	4b98      	ldr	r3, [pc, #608]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	2202      	movs	r2, #2
 8005214:	4013      	ands	r3, r2
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x3aa>
 8005218:	e013      	b.n	8005242 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521a:	f7ff f9b3 	bl	8004584 <HAL_GetTick>
 800521e:	0003      	movs	r3, r0
 8005220:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	e009      	b.n	8005238 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7ff f9ae 	bl	8004584 <HAL_GetTick>
 8005228:	0002      	movs	r2, r0
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	4a91      	ldr	r2, [pc, #580]	; (8005474 <HAL_RCC_OscConfig+0x624>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e116      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b8d      	ldr	r3, [pc, #564]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	2202      	movs	r2, #2
 800523e:	4013      	ands	r3, r2
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005242:	231f      	movs	r3, #31
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b88      	ldr	r3, [pc, #544]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	4b87      	ldr	r3, [pc, #540]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005252:	4989      	ldr	r1, [pc, #548]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005254:	400a      	ands	r2, r1
 8005256:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2210      	movs	r2, #16
 800525e:	4013      	ands	r3, r2
 8005260:	d063      	beq.n	800532a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d12a      	bne.n	80052c0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800526a:	4b81      	ldr	r3, [pc, #516]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800526c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800526e:	4b80      	ldr	r3, [pc, #512]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005270:	2104      	movs	r1, #4
 8005272:	430a      	orrs	r2, r1
 8005274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005276:	4b7e      	ldr	r3, [pc, #504]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527a:	4b7d      	ldr	r3, [pc, #500]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800527c:	2101      	movs	r1, #1
 800527e:	430a      	orrs	r2, r1
 8005280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005282:	f7ff f97f 	bl	8004584 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800528c:	f7ff f97a 	bl	8004584 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e0e3      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800529e:	4b74      	ldr	r3, [pc, #464]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	2202      	movs	r2, #2
 80052a4:	4013      	ands	r3, r2
 80052a6:	d0f1      	beq.n	800528c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052a8:	4b71      	ldr	r3, [pc, #452]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ac:	22f8      	movs	r2, #248	; 0xf8
 80052ae:	4393      	bics	r3, r2
 80052b0:	0019      	movs	r1, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	00da      	lsls	r2, r3, #3
 80052b8:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052ba:	430a      	orrs	r2, r1
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34
 80052be:	e034      	b.n	800532a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	3305      	adds	r3, #5
 80052c6:	d111      	bne.n	80052ec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80052c8:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052cc:	4b68      	ldr	r3, [pc, #416]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052ce:	2104      	movs	r1, #4
 80052d0:	438a      	bics	r2, r1
 80052d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052d4:	4b66      	ldr	r3, [pc, #408]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	22f8      	movs	r2, #248	; 0xf8
 80052da:	4393      	bics	r3, r2
 80052dc:	0019      	movs	r1, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	00da      	lsls	r2, r3, #3
 80052e4:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052e6:	430a      	orrs	r2, r1
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34
 80052ea:	e01e      	b.n	800532a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052ec:	4b60      	ldr	r3, [pc, #384]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052f2:	2104      	movs	r1, #4
 80052f4:	430a      	orrs	r2, r1
 80052f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80052f8:	4b5d      	ldr	r3, [pc, #372]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052fc:	4b5c      	ldr	r3, [pc, #368]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80052fe:	2101      	movs	r1, #1
 8005300:	438a      	bics	r2, r1
 8005302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7ff f93e 	bl	8004584 <HAL_GetTick>
 8005308:	0003      	movs	r3, r0
 800530a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800530e:	f7ff f939 	bl	8004584 <HAL_GetTick>
 8005312:	0002      	movs	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e0a2      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	2202      	movs	r2, #2
 8005326:	4013      	ands	r3, r2
 8005328:	d1f1      	bne.n	800530e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d100      	bne.n	8005334 <HAL_RCC_OscConfig+0x4e4>
 8005332:	e097      	b.n	8005464 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005334:	4b4e      	ldr	r3, [pc, #312]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	220c      	movs	r2, #12
 800533a:	4013      	ands	r3, r2
 800533c:	2b08      	cmp	r3, #8
 800533e:	d100      	bne.n	8005342 <HAL_RCC_OscConfig+0x4f2>
 8005340:	e06b      	b.n	800541a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d14c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800534a:	4b49      	ldr	r3, [pc, #292]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b48      	ldr	r3, [pc, #288]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005350:	494a      	ldr	r1, [pc, #296]	; (800547c <HAL_RCC_OscConfig+0x62c>)
 8005352:	400a      	ands	r2, r1
 8005354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005356:	f7ff f915 	bl	8004584 <HAL_GetTick>
 800535a:	0003      	movs	r3, r0
 800535c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005360:	f7ff f910 	bl	8004584 <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e079      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	049b      	lsls	r3, r3, #18
 800537a:	4013      	ands	r3, r2
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800537e:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	220f      	movs	r2, #15
 8005384:	4393      	bics	r3, r2
 8005386:	0019      	movs	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800538c:	4b38      	ldr	r3, [pc, #224]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800538e:	430a      	orrs	r2, r1
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c
 8005392:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4a3a      	ldr	r2, [pc, #232]	; (8005480 <HAL_RCC_OscConfig+0x630>)
 8005398:	4013      	ands	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	431a      	orrs	r2, r3
 80053a6:	4b32      	ldr	r3, [pc, #200]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ac:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	0449      	lsls	r1, r1, #17
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7ff f8e3 	bl	8004584 <HAL_GetTick>
 80053be:	0003      	movs	r3, r0
 80053c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7ff f8de 	bl	8004584 <HAL_GetTick>
 80053c8:	0002      	movs	r2, r0
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e047      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	2380      	movs	r3, #128	; 0x80
 80053dc:	049b      	lsls	r3, r3, #18
 80053de:	4013      	ands	r3, r2
 80053e0:	d0f0      	beq.n	80053c4 <HAL_RCC_OscConfig+0x574>
 80053e2:	e03f      	b.n	8005464 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e4:	4b22      	ldr	r3, [pc, #136]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b21      	ldr	r3, [pc, #132]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 80053ea:	4924      	ldr	r1, [pc, #144]	; (800547c <HAL_RCC_OscConfig+0x62c>)
 80053ec:	400a      	ands	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7ff f8c8 	bl	8004584 <HAL_GetTick>
 80053f4:	0003      	movs	r3, r0
 80053f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053fa:	f7ff f8c3 	bl	8004584 <HAL_GetTick>
 80053fe:	0002      	movs	r2, r0
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e02c      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800540c:	4b18      	ldr	r3, [pc, #96]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	2380      	movs	r3, #128	; 0x80
 8005412:	049b      	lsls	r3, r3, #18
 8005414:	4013      	ands	r3, r2
 8005416:	d1f0      	bne.n	80053fa <HAL_RCC_OscConfig+0x5aa>
 8005418:	e024      	b.n	8005464 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e01f      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_RCC_OscConfig+0x620>)
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	025b      	lsls	r3, r3, #9
 8005438:	401a      	ands	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	429a      	cmp	r2, r3
 8005440:	d10e      	bne.n	8005460 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	220f      	movs	r2, #15
 8005446:	401a      	ands	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	23f0      	movs	r3, #240	; 0xf0
 8005454:	039b      	lsls	r3, r3, #14
 8005456:	401a      	ands	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b008      	add	sp, #32
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	40021000 	.word	0x40021000
 8005474:	00001388 	.word	0x00001388
 8005478:	efffffff 	.word	0xefffffff
 800547c:	feffffff 	.word	0xfeffffff
 8005480:	ffc2ffff 	.word	0xffc2ffff

08005484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e0b3      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b5b      	ldr	r3, [pc, #364]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2201      	movs	r2, #1
 800549e:	4013      	ands	r3, r2
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d911      	bls.n	80054ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b58      	ldr	r3, [pc, #352]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2201      	movs	r2, #1
 80054ac:	4393      	bics	r3, r2
 80054ae:	0019      	movs	r1, r3
 80054b0:	4b55      	ldr	r3, [pc, #340]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b8:	4b53      	ldr	r3, [pc, #332]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d001      	beq.n	80054ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e09a      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2202      	movs	r2, #2
 80054d0:	4013      	ands	r3, r2
 80054d2:	d015      	beq.n	8005500 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2204      	movs	r2, #4
 80054da:	4013      	ands	r3, r2
 80054dc:	d006      	beq.n	80054ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054de:	4b4b      	ldr	r3, [pc, #300]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4b4a      	ldr	r3, [pc, #296]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80054e4:	21e0      	movs	r1, #224	; 0xe0
 80054e6:	00c9      	lsls	r1, r1, #3
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b47      	ldr	r3, [pc, #284]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	22f0      	movs	r2, #240	; 0xf0
 80054f2:	4393      	bics	r3, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	4013      	ands	r3, r2
 8005508:	d040      	beq.n	800558c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	4013      	ands	r3, r2
 800551c:	d114      	bne.n	8005548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06e      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	049b      	lsls	r3, r3, #18
 8005532:	4013      	ands	r3, r2
 8005534:	d108      	bne.n	8005548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e062      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e05b      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	4393      	bics	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7ff f812 	bl	8004584 <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005564:	e009      	b.n	800557a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005566:	f7ff f80d 	bl	8004584 <HAL_GetTick>
 800556a:	0002      	movs	r2, r0
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <HAL_RCC_ClockConfig+0x18c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e042      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	220c      	movs	r2, #12
 8005580:	401a      	ands	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d1ec      	bne.n	8005566 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d211      	bcs.n	80055be <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	4393      	bics	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	4b18      	ldr	r3, [pc, #96]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <HAL_RCC_ClockConfig+0x184>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2201      	movs	r2, #1
 80055b2:	4013      	ands	r3, r2
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d001      	beq.n	80055be <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e020      	b.n	8005600 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	d009      	beq.n	80055dc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a11      	ldr	r2, [pc, #68]	; (8005614 <HAL_RCC_ClockConfig+0x190>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	0019      	movs	r1, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055dc:	f000 f820 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 80055e0:	0001      	movs	r1, r0
 80055e2:	4b0a      	ldr	r3, [pc, #40]	; (800560c <HAL_RCC_ClockConfig+0x188>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	220f      	movs	r2, #15
 80055ea:	4013      	ands	r3, r2
 80055ec:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <HAL_RCC_ClockConfig+0x194>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	000a      	movs	r2, r1
 80055f2:	40da      	lsrs	r2, r3
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_ClockConfig+0x198>)
 80055f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80055f8:	2000      	movs	r0, #0
 80055fa:	f7fe ff7d 	bl	80044f8 <HAL_InitTick>
  
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b004      	add	sp, #16
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40022000 	.word	0x40022000
 800560c:	40021000 	.word	0x40021000
 8005610:	00001388 	.word	0x00001388
 8005614:	fffff8ff 	.word	0xfffff8ff
 8005618:	0800a54c 	.word	0x0800a54c
 800561c:	20000000 	.word	0x20000000

08005620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005620:	b590      	push	{r4, r7, lr}
 8005622:	b08f      	sub	sp, #60	; 0x3c
 8005624:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005626:	2314      	movs	r3, #20
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800562c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800562e:	c313      	stmia	r3!, {r0, r1, r4}
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	4a29      	ldr	r2, [pc, #164]	; (80056dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005638:	ca13      	ldmia	r2!, {r0, r1, r4}
 800563a:	c313      	stmia	r3!, {r0, r1, r4}
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005644:	2300      	movs	r3, #0
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
 8005648:	2300      	movs	r3, #0
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005654:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	220c      	movs	r2, #12
 800565e:	4013      	ands	r3, r2
 8005660:	2b04      	cmp	r3, #4
 8005662:	d002      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x4a>
 8005664:	2b08      	cmp	r3, #8
 8005666:	d003      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x50>
 8005668:	e02d      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800566a:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800566c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800566e:	e02d      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	0c9b      	lsrs	r3, r3, #18
 8005674:	220f      	movs	r2, #15
 8005676:	4013      	ands	r3, r2
 8005678:	2214      	movs	r2, #20
 800567a:	18ba      	adds	r2, r7, r2
 800567c:	5cd3      	ldrb	r3, [r2, r3]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	220f      	movs	r2, #15
 8005686:	4013      	ands	r3, r2
 8005688:	1d3a      	adds	r2, r7, #4
 800568a:	5cd3      	ldrb	r3, [r2, r3]
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800568e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	025b      	lsls	r3, r3, #9
 8005694:	4013      	ands	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800569a:	4812      	ldr	r0, [pc, #72]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800569c:	f7fa fd50 	bl	8000140 <__udivsi3>
 80056a0:	0003      	movs	r3, r0
 80056a2:	001a      	movs	r2, r3
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	4353      	muls	r3, r2
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	e009      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ae:	000a      	movs	r2, r1
 80056b0:	0152      	lsls	r2, r2, #5
 80056b2:	1a52      	subs	r2, r2, r1
 80056b4:	0193      	lsls	r3, r2, #6
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	185b      	adds	r3, r3, r1
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056c4:	e002      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056c6:	4b07      	ldr	r3, [pc, #28]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80056ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80056ce:	0018      	movs	r0, r3
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b00f      	add	sp, #60	; 0x3c
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	0800a42c 	.word	0x0800a42c
 80056dc:	0800a43c 	.word	0x0800a43c
 80056e0:	40021000 	.word	0x40021000
 80056e4:	007a1200 	.word	0x007a1200

080056e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	20000000 	.word	0x20000000

080056fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005700:	f7ff fff2 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005704:	0001      	movs	r1, r0
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	2207      	movs	r2, #7
 800570e:	4013      	ands	r3, r2
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005712:	5cd3      	ldrb	r3, [r2, r3]
 8005714:	40d9      	lsrs	r1, r3
 8005716:	000b      	movs	r3, r1
}    
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	40021000 	.word	0x40021000
 8005724:	0800a55c 	.word	0x0800a55c

08005728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0a8      	b.n	800588c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	2382      	movs	r3, #130	; 0x82
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	429a      	cmp	r2, r3
 800574c:	d009      	beq.n	8005762 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	61da      	str	r2, [r3, #28]
 8005754:	e005      	b.n	8005762 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	225d      	movs	r2, #93	; 0x5d
 800576c:	5c9b      	ldrb	r3, [r3, r2]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	225c      	movs	r2, #92	; 0x5c
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f7fe fc8c 	bl	800409c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	225d      	movs	r2, #93	; 0x5d
 8005788:	2102      	movs	r1, #2
 800578a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2140      	movs	r1, #64	; 0x40
 8005798:	438a      	bics	r2, r1
 800579a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	23e0      	movs	r3, #224	; 0xe0
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e002      	b.n	80057b4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	015b      	lsls	r3, r3, #5
 80057b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	23f0      	movs	r3, #240	; 0xf0
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	429a      	cmp	r2, r3
 80057be:	d008      	beq.n	80057d2 <HAL_SPI_Init+0xaa>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	23e0      	movs	r3, #224	; 0xe0
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	2382      	movs	r3, #130	; 0x82
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	401a      	ands	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6899      	ldr	r1, [r3, #8]
 80057e0:	2384      	movs	r3, #132	; 0x84
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	400b      	ands	r3, r1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2102      	movs	r1, #2
 80057ee:	400b      	ands	r3, r1
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2101      	movs	r1, #1
 80057f8:	400b      	ands	r3, r1
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6999      	ldr	r1, [r3, #24]
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	400b      	ands	r3, r1
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	2138      	movs	r1, #56	; 0x38
 800580e:	400b      	ands	r3, r1
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	400b      	ands	r3, r1
 800581a:	431a      	orrs	r2, r3
 800581c:	0011      	movs	r1, r2
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	019b      	lsls	r3, r3, #6
 8005826:	401a      	ands	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	2204      	movs	r2, #4
 8005838:	401a      	ands	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2110      	movs	r1, #16
 8005840:	400b      	ands	r3, r1
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	2108      	movs	r1, #8
 800584a:	400b      	ands	r3, r1
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68d9      	ldr	r1, [r3, #12]
 8005852:	23f0      	movs	r3, #240	; 0xf0
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	400b      	ands	r3, r1
 8005858:	431a      	orrs	r2, r3
 800585a:	0011      	movs	r1, r2
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	015b      	lsls	r3, r3, #5
 8005862:	401a      	ands	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69da      	ldr	r2, [r3, #28]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4907      	ldr	r1, [pc, #28]	; (8005894 <HAL_SPI_Init+0x16c>)
 8005878:	400a      	ands	r2, r1
 800587a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	225d      	movs	r2, #93	; 0x5d
 8005886:	2101      	movs	r1, #1
 8005888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b004      	add	sp, #16
 8005892:	bd80      	pop	{r7, pc}
 8005894:	fffff7ff 	.word	0xfffff7ff

08005898 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	1dbb      	adds	r3, r7, #6
 80058a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058a8:	231f      	movs	r3, #31
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	225c      	movs	r2, #92	; 0x5c
 80058b4:	5c9b      	ldrb	r3, [r3, r2]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_SPI_Transmit+0x26>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e140      	b.n	8005b40 <HAL_SPI_Transmit+0x2a8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	225c      	movs	r2, #92	; 0x5c
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c6:	f7fe fe5d 	bl	8004584 <HAL_GetTick>
 80058ca:	0003      	movs	r3, r0
 80058cc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80058ce:	2316      	movs	r3, #22
 80058d0:	18fb      	adds	r3, r7, r3
 80058d2:	1dba      	adds	r2, r7, #6
 80058d4:	8812      	ldrh	r2, [r2, #0]
 80058d6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	225d      	movs	r2, #93	; 0x5d
 80058dc:	5c9b      	ldrb	r3, [r3, r2]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d004      	beq.n	80058ee <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80058e4:	231f      	movs	r3, #31
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2202      	movs	r2, #2
 80058ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80058ec:	e11d      	b.n	8005b2a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_SPI_Transmit+0x64>
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d104      	bne.n	8005906 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80058fc:	231f      	movs	r3, #31
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	2201      	movs	r2, #1
 8005902:	701a      	strb	r2, [r3, #0]
    goto error;
 8005904:	e111      	b.n	8005b2a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	225d      	movs	r2, #93	; 0x5d
 800590a:	2103      	movs	r1, #3
 800590c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1dba      	adds	r2, r7, #6
 800591e:	8812      	ldrh	r2, [r2, #0]
 8005920:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1dba      	adds	r2, r7, #6
 8005926:	8812      	ldrh	r2, [r2, #0]
 8005928:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2244      	movs	r2, #68	; 0x44
 8005934:	2100      	movs	r1, #0
 8005936:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2246      	movs	r2, #70	; 0x46
 800593c:	2100      	movs	r1, #0
 800593e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	429a      	cmp	r2, r3
 8005956:	d110      	bne.n	800597a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2140      	movs	r1, #64	; 0x40
 8005964:	438a      	bics	r2, r1
 8005966:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	01c9      	lsls	r1, r1, #7
 8005976:	430a      	orrs	r2, r1
 8005978:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2240      	movs	r2, #64	; 0x40
 8005982:	4013      	ands	r3, r2
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d007      	beq.n	8005998 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2140      	movs	r1, #64	; 0x40
 8005994:	430a      	orrs	r2, r1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	23e0      	movs	r3, #224	; 0xe0
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d94e      	bls.n	8005a42 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_SPI_Transmit+0x11e>
 80059ac:	2316      	movs	r3, #22
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d13f      	bne.n	8005a36 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	881a      	ldrh	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059da:	e02c      	b.n	8005a36 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2202      	movs	r2, #2
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d112      	bne.n	8005a10 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	881a      	ldrh	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a0e:	e012      	b.n	8005a36 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a10:	f7fe fdb8 	bl	8004584 <HAL_GetTick>
 8005a14:	0002      	movs	r2, r0
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d802      	bhi.n	8005a26 <HAL_SPI_Transmit+0x18e>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x194>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005a2c:	231f      	movs	r3, #31
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	2203      	movs	r2, #3
 8005a32:	701a      	strb	r2, [r3, #0]
          goto error;
 8005a34:	e079      	b.n	8005b2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1cd      	bne.n	80059dc <HAL_SPI_Transmit+0x144>
 8005a40:	e04f      	b.n	8005ae2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <HAL_SPI_Transmit+0x1bc>
 8005a4a:	2316      	movs	r3, #22
 8005a4c:	18fb      	adds	r3, r7, r3
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d141      	bne.n	8005ad8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	7812      	ldrb	r2, [r2, #0]
 8005a60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005a7a:	e02d      	b.n	8005ad8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2202      	movs	r2, #2
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d113      	bne.n	8005ab2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab0:	e012      	b.n	8005ad8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab2:	f7fe fd67 	bl	8004584 <HAL_GetTick>
 8005ab6:	0002      	movs	r2, r0
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d802      	bhi.n	8005ac8 <HAL_SPI_Transmit+0x230>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d102      	bne.n	8005ace <HAL_SPI_Transmit+0x236>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005ace:	231f      	movs	r3, #31
 8005ad0:	18fb      	adds	r3, r7, r3
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	701a      	strb	r2, [r3, #0]
          goto error;
 8005ad6:	e028      	b.n	8005b2a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cc      	bne.n	8005a7c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 fcd9 	bl	80064a0 <SPI_EndRxTxTransaction>
 8005aee:	1e03      	subs	r3, r0, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	613b      	str	r3, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005b1e:	231f      	movs	r3, #31
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
 8005b26:	e000      	b.n	8005b2a <HAL_SPI_Transmit+0x292>
  }

error:
 8005b28:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	225d      	movs	r2, #93	; 0x5d
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	225c      	movs	r2, #92	; 0x5c
 8005b36:	2100      	movs	r1, #0
 8005b38:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005b3a:	231f      	movs	r3, #31
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	781b      	ldrb	r3, [r3, #0]
}
 8005b40:	0018      	movs	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b008      	add	sp, #32
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b089      	sub	sp, #36	; 0x24
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	1dbb      	adds	r3, r7, #6
 8005b56:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b58:	2317      	movs	r3, #23
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	2382      	movs	r3, #130	; 0x82
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d113      	bne.n	8005b94 <HAL_SPI_Receive+0x4c>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10f      	bne.n	8005b94 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	225d      	movs	r2, #93	; 0x5d
 8005b78:	2104      	movs	r1, #4
 8005b7a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b7c:	1dbb      	adds	r3, r7, #6
 8005b7e:	881c      	ldrh	r4, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	0023      	movs	r3, r4
 8005b8c:	f000 f928 	bl	8005de0 <HAL_SPI_TransmitReceive>
 8005b90:	0003      	movs	r3, r0
 8005b92:	e11c      	b.n	8005dce <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	225c      	movs	r2, #92	; 0x5c
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_SPI_Receive+0x5a>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e115      	b.n	8005dce <HAL_SPI_Receive+0x286>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	225c      	movs	r2, #92	; 0x5c
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005baa:	f7fe fceb 	bl	8004584 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	225d      	movs	r2, #93	; 0x5d
 8005bb6:	5c9b      	ldrb	r3, [r3, r2]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d004      	beq.n	8005bc8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005bbe:	2317      	movs	r3, #23
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bc6:	e0f7      	b.n	8005db8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_SPI_Receive+0x8e>
 8005bce:	1dbb      	adds	r3, r7, #6
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005bd6:	2317      	movs	r3, #23
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
    goto error;
 8005bde:	e0eb      	b.n	8005db8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	225d      	movs	r2, #93	; 0x5d
 8005be4:	2104      	movs	r1, #4
 8005be6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1dba      	adds	r2, r7, #6
 8005bf8:	2144      	movs	r1, #68	; 0x44
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1dba      	adds	r2, r7, #6
 8005c02:	2146      	movs	r1, #70	; 0x46
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	23e0      	movs	r3, #224	; 0xe0
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d908      	bls.n	8005c44 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4966      	ldr	r1, [pc, #408]	; (8005dd8 <HAL_SPI_Receive+0x290>)
 8005c3e:	400a      	ands	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
 8005c42:	e008      	b.n	8005c56 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	0149      	lsls	r1, r1, #5
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d10f      	bne.n	8005c82 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2140      	movs	r1, #64	; 0x40
 8005c6e:	438a      	bics	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4957      	ldr	r1, [pc, #348]	; (8005ddc <HAL_SPI_Receive+0x294>)
 8005c7e:	400a      	ands	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2240      	movs	r2, #64	; 0x40
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d007      	beq.n	8005ca0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2140      	movs	r1, #64	; 0x40
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	23e0      	movs	r3, #224	; 0xe0
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d900      	bls.n	8005cae <HAL_SPI_Receive+0x166>
 8005cac:	e069      	b.n	8005d82 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cae:	e031      	b.n	8005d14 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d117      	bne.n	8005cee <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2246      	movs	r2, #70	; 0x46
 8005cde:	5a9b      	ldrh	r3, [r3, r2]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b299      	uxth	r1, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2246      	movs	r2, #70	; 0x46
 8005cea:	5299      	strh	r1, [r3, r2]
 8005cec:	e012      	b.n	8005d14 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cee:	f7fe fc49 	bl	8004584 <HAL_GetTick>
 8005cf2:	0002      	movs	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d802      	bhi.n	8005d04 <HAL_SPI_Receive+0x1bc>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	3301      	adds	r3, #1
 8005d02:	d102      	bne.n	8005d0a <HAL_SPI_Receive+0x1c2>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005d0a:	2317      	movs	r3, #23
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	2203      	movs	r2, #3
 8005d10:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d12:	e051      	b.n	8005db8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2246      	movs	r2, #70	; 0x46
 8005d18:	5a9b      	ldrh	r3, [r3, r2]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1c7      	bne.n	8005cb0 <HAL_SPI_Receive+0x168>
 8005d20:	e035      	b.n	8005d8e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d115      	bne.n	8005d5c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2246      	movs	r2, #70	; 0x46
 8005d4c:	5a9b      	ldrh	r3, [r3, r2]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b299      	uxth	r1, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2246      	movs	r2, #70	; 0x46
 8005d58:	5299      	strh	r1, [r3, r2]
 8005d5a:	e012      	b.n	8005d82 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d5c:	f7fe fc12 	bl	8004584 <HAL_GetTick>
 8005d60:	0002      	movs	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d802      	bhi.n	8005d72 <HAL_SPI_Receive+0x22a>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_Receive+0x230>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005d78:	2317      	movs	r3, #23
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d80:	e01a      	b.n	8005db8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2246      	movs	r2, #70	; 0x46
 8005d86:	5a9b      	ldrh	r3, [r3, r2]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1c9      	bne.n	8005d22 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 fb25 	bl	80063e4 <SPI_EndRxTransaction>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005dac:	2317      	movs	r3, #23
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	2201      	movs	r2, #1
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <HAL_SPI_Receive+0x270>
  }

error :
 8005db6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	225d      	movs	r2, #93	; 0x5d
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	225c      	movs	r2, #92	; 0x5c
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005dc8:	2317      	movs	r3, #23
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b007      	add	sp, #28
 8005dd4:	bd90      	pop	{r4, r7, pc}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	ffffefff 	.word	0xffffefff
 8005ddc:	ffffbfff 	.word	0xffffbfff

08005de0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
 8005dec:	001a      	movs	r2, r3
 8005dee:	1cbb      	adds	r3, r7, #2
 8005df0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005df2:	2301      	movs	r3, #1
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005df6:	2323      	movs	r3, #35	; 0x23
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	225c      	movs	r2, #92	; 0x5c
 8005e02:	5c9b      	ldrb	r3, [r3, r2]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x2c>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e1b5      	b.n	8006178 <HAL_SPI_TransmitReceive+0x398>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	225c      	movs	r2, #92	; 0x5c
 8005e10:	2101      	movs	r1, #1
 8005e12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e14:	f7fe fbb6 	bl	8004584 <HAL_GetTick>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e1c:	201b      	movs	r0, #27
 8005e1e:	183b      	adds	r3, r7, r0
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	215d      	movs	r1, #93	; 0x5d
 8005e24:	5c52      	ldrb	r2, [r2, r1]
 8005e26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e2e:	2312      	movs	r3, #18
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	1cba      	adds	r2, r7, #2
 8005e34:	8812      	ldrh	r2, [r2, #0]
 8005e36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e38:	183b      	adds	r3, r7, r0
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d011      	beq.n	8005e64 <HAL_SPI_TransmitReceive+0x84>
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	2382      	movs	r3, #130	; 0x82
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d107      	bne.n	8005e5a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <HAL_SPI_TransmitReceive+0x7a>
 8005e52:	183b      	adds	r3, r7, r0
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d004      	beq.n	8005e64 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e5a:	2323      	movs	r3, #35	; 0x23
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	2202      	movs	r2, #2
 8005e60:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e62:	e17e      	b.n	8006162 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d006      	beq.n	8005e78 <HAL_SPI_TransmitReceive+0x98>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_SPI_TransmitReceive+0x98>
 8005e70:	1cbb      	adds	r3, r7, #2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005e78:	2323      	movs	r3, #35	; 0x23
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e80:	e16f      	b.n	8006162 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	225d      	movs	r2, #93	; 0x5d
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d003      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	225d      	movs	r2, #93	; 0x5d
 8005e92:	2105      	movs	r1, #5
 8005e94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1cba      	adds	r2, r7, #2
 8005ea6:	2146      	movs	r1, #70	; 0x46
 8005ea8:	8812      	ldrh	r2, [r2, #0]
 8005eaa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	1cba      	adds	r2, r7, #2
 8005eb0:	2144      	movs	r1, #68	; 0x44
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1cba      	adds	r2, r7, #2
 8005ec0:	8812      	ldrh	r2, [r2, #0]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1cba      	adds	r2, r7, #2
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	23e0      	movs	r3, #224	; 0xe0
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d908      	bls.n	8005ef6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	49a4      	ldr	r1, [pc, #656]	; (8006180 <HAL_SPI_TransmitReceive+0x3a0>)
 8005ef0:	400a      	ands	r2, r1
 8005ef2:	605a      	str	r2, [r3, #4]
 8005ef4:	e008      	b.n	8005f08 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2180      	movs	r1, #128	; 0x80
 8005f02:	0149      	lsls	r1, r1, #5
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2240      	movs	r2, #64	; 0x40
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b40      	cmp	r3, #64	; 0x40
 8005f14:	d007      	beq.n	8005f26 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2140      	movs	r1, #64	; 0x40
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	23e0      	movs	r3, #224	; 0xe0
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d800      	bhi.n	8005f34 <HAL_SPI_TransmitReceive+0x154>
 8005f32:	e07f      	b.n	8006034 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x168>
 8005f3c:	2312      	movs	r3, #18
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d000      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x168>
 8005f46:	e069      	b.n	800601c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6c:	e056      	b.n	800601c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2202      	movs	r2, #2
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d4>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d4>
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d113      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d11c      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x21c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2246      	movs	r2, #70	; 0x46
 8005fc6:	5a9b      	ldrh	r3, [r3, r2]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2246      	movs	r2, #70	; 0x46
 8005fea:	5a9b      	ldrh	r3, [r3, r2]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b299      	uxth	r1, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2246      	movs	r2, #70	; 0x46
 8005ff6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ffc:	f7fe fac2 	bl	8004584 <HAL_GetTick>
 8006000:	0002      	movs	r2, r0
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006008:	429a      	cmp	r2, r3
 800600a:	d807      	bhi.n	800601c <HAL_SPI_TransmitReceive+0x23c>
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	3301      	adds	r3, #1
 8006010:	d004      	beq.n	800601c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006012:	2323      	movs	r3, #35	; 0x23
 8006014:	18fb      	adds	r3, r7, r3
 8006016:	2203      	movs	r2, #3
 8006018:	701a      	strb	r2, [r3, #0]
        goto error;
 800601a:	e0a2      	b.n	8006162 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1a3      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x18e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2246      	movs	r2, #70	; 0x46
 800602a:	5a9b      	ldrh	r3, [r3, r2]
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d19d      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x18e>
 8006032:	e085      	b.n	8006140 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x268>
 800603c:	2312      	movs	r3, #18
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d000      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x268>
 8006046:	e070      	b.n	800612a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	330c      	adds	r3, #12
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b01      	subs	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800606e:	e05c      	b.n	800612a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2202      	movs	r2, #2
 8006078:	4013      	ands	r3, r2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d11c      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x2d8>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d017      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x2d8>
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2b01      	cmp	r3, #1
 800608c:	d114      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	7812      	ldrb	r2, [r2, #0]
 800609a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2201      	movs	r2, #1
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d11e      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x324>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2246      	movs	r2, #70	; 0x46
 80060ca:	5a9b      	ldrh	r3, [r3, r2]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	001a      	movs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2246      	movs	r2, #70	; 0x46
 80060f2:	5a9b      	ldrh	r3, [r3, r2]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b299      	uxth	r1, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2246      	movs	r2, #70	; 0x46
 80060fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006104:	f7fe fa3e 	bl	8004584 <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006110:	429a      	cmp	r2, r3
 8006112:	d802      	bhi.n	800611a <HAL_SPI_TransmitReceive+0x33a>
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	3301      	adds	r3, #1
 8006118:	d102      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x340>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006120:	2323      	movs	r3, #35	; 0x23
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2203      	movs	r2, #3
 8006126:	701a      	strb	r2, [r3, #0]
        goto error;
 8006128:	e01b      	b.n	8006162 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x290>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2246      	movs	r2, #70	; 0x46
 8006138:	5a9b      	ldrh	r3, [r3, r2]
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d197      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	0018      	movs	r0, r3
 8006148:	f000 f9aa 	bl	80064a0 <SPI_EndRxTxTransaction>
 800614c:	1e03      	subs	r3, r0, #0
 800614e:	d007      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006150:	2323      	movs	r3, #35	; 0x23
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2220      	movs	r2, #32
 800615c:	661a      	str	r2, [r3, #96]	; 0x60
 800615e:	e000      	b.n	8006162 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006160:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	225d      	movs	r2, #93	; 0x5d
 8006166:	2101      	movs	r1, #1
 8006168:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	225c      	movs	r2, #92	; 0x5c
 800616e:	2100      	movs	r1, #0
 8006170:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006172:	2323      	movs	r3, #35	; 0x23
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	781b      	ldrb	r3, [r3, #0]
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b00a      	add	sp, #40	; 0x28
 800617e:	bd80      	pop	{r7, pc}
 8006180:	ffffefff 	.word	0xffffefff

08006184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	1dfb      	adds	r3, r7, #7
 8006192:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006194:	f7fe f9f6 	bl	8004584 <HAL_GetTick>
 8006198:	0002      	movs	r2, r0
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	18d3      	adds	r3, r2, r3
 80061a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061a4:	f7fe f9ee 	bl	8004584 <HAL_GetTick>
 80061a8:	0003      	movs	r3, r0
 80061aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ac:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	015b      	lsls	r3, r3, #5
 80061b2:	0d1b      	lsrs	r3, r3, #20
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	4353      	muls	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ba:	e058      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	d055      	beq.n	800626e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c2:	f7fe f9df 	bl	8004584 <HAL_GetTick>
 80061c6:	0002      	movs	r2, r0
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d902      	bls.n	80061d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d142      	bne.n	800625e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	21e0      	movs	r1, #224	; 0xe0
 80061e4:	438a      	bics	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	2382      	movs	r3, #130	; 0x82
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d113      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x98>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d005      	beq.n	800620c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	429a      	cmp	r2, r3
 800620a:	d107      	bne.n	800621c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2140      	movs	r1, #64	; 0x40
 8006218:	438a      	bics	r2, r1
 800621a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	019b      	lsls	r3, r3, #6
 8006224:	429a      	cmp	r2, r3
 8006226:	d110      	bne.n	800624a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	491a      	ldr	r1, [pc, #104]	; (800629c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006234:	400a      	ands	r2, r1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	0189      	lsls	r1, r1, #6
 8006246:	430a      	orrs	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	225d      	movs	r2, #93	; 0x5d
 800624e:	2101      	movs	r1, #1
 8006250:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	225c      	movs	r2, #92	; 0x5c
 8006256:	2100      	movs	r1, #0
 8006258:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e017      	b.n	800628e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	3b01      	subs	r3, #1
 800626c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	425a      	negs	r2, r3
 800627e:	4153      	adcs	r3, r2
 8006280:	b2db      	uxtb	r3, r3
 8006282:	001a      	movs	r2, r3
 8006284:	1dfb      	adds	r3, r7, #7
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d197      	bne.n	80061bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b008      	add	sp, #32
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	20000000 	.word	0x20000000
 800629c:	ffffdfff 	.word	0xffffdfff

080062a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062ae:	2317      	movs	r3, #23
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062b6:	f7fe f965 	bl	8004584 <HAL_GetTick>
 80062ba:	0002      	movs	r2, r0
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	18d3      	adds	r3, r2, r3
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062c6:	f7fe f95d 	bl	8004584 <HAL_GetTick>
 80062ca:	0003      	movs	r3, r0
 80062cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062d6:	4b41      	ldr	r3, [pc, #260]	; (80063dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	0013      	movs	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	00da      	lsls	r2, r3, #3
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	0d1b      	lsrs	r3, r3, #20
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	4353      	muls	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062ec:	e068      	b.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	23c0      	movs	r3, #192	; 0xc0
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d10a      	bne.n	800630e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d107      	bne.n	800630e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b2da      	uxtb	r2, r3
 8006304:	2117      	movs	r1, #23
 8006306:	187b      	adds	r3, r7, r1
 8006308:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800630a:	187b      	adds	r3, r7, r1
 800630c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	d055      	beq.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006314:	f7fe f936 	bl	8004584 <HAL_GetTick>
 8006318:	0002      	movs	r2, r0
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006320:	429a      	cmp	r2, r3
 8006322:	d902      	bls.n	800632a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d142      	bne.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	21e0      	movs	r1, #224	; 0xe0
 8006336:	438a      	bics	r2, r1
 8006338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	2382      	movs	r3, #130	; 0x82
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	429a      	cmp	r2, r3
 8006344:	d113      	bne.n	800636e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	021b      	lsls	r3, r3, #8
 800634e:	429a      	cmp	r2, r3
 8006350:	d005      	beq.n	800635e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	429a      	cmp	r2, r3
 800635c:	d107      	bne.n	800636e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2140      	movs	r1, #64	; 0x40
 800636a:	438a      	bics	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	429a      	cmp	r2, r3
 8006378:	d110      	bne.n	800639c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4916      	ldr	r1, [pc, #88]	; (80063e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006386:	400a      	ands	r2, r1
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	0189      	lsls	r1, r1, #6
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	225d      	movs	r2, #93	; 0x5d
 80063a0:	2101      	movs	r1, #1
 80063a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	225c      	movs	r2, #92	; 0x5c
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e010      	b.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	3b01      	subs	r3, #1
 80063be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d18e      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b00a      	add	sp, #40	; 0x28
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	20000000 	.word	0x20000000
 80063e0:	ffffdfff 	.word	0xffffdfff

080063e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	2382      	movs	r3, #130	; 0x82
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d113      	bne.n	8006424 <SPI_EndRxTransaction+0x40>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	2380      	movs	r3, #128	; 0x80
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	429a      	cmp	r2, r3
 8006406:	d005      	beq.n	8006414 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	2380      	movs	r3, #128	; 0x80
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	429a      	cmp	r2, r3
 8006412:	d107      	bne.n	8006424 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2140      	movs	r1, #64	; 0x40
 8006420:	438a      	bics	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	0013      	movs	r3, r2
 800642e:	2200      	movs	r2, #0
 8006430:	2180      	movs	r1, #128	; 0x80
 8006432:	f7ff fea7 	bl	8006184 <SPI_WaitFlagStateUntilTimeout>
 8006436:	1e03      	subs	r3, r0, #0
 8006438:	d007      	beq.n	800644a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	2220      	movs	r2, #32
 8006440:	431a      	orrs	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e026      	b.n	8006498 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	2382      	movs	r3, #130	; 0x82
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	429a      	cmp	r2, r3
 8006454:	d11f      	bne.n	8006496 <SPI_EndRxTransaction+0xb2>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	429a      	cmp	r2, r3
 8006460:	d005      	beq.n	800646e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	429a      	cmp	r2, r3
 800646c:	d113      	bne.n	8006496 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	23c0      	movs	r3, #192	; 0xc0
 8006472:	00d9      	lsls	r1, r3, #3
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	0013      	movs	r3, r2
 800647c:	2200      	movs	r2, #0
 800647e:	f7ff ff0f 	bl	80062a0 <SPI_WaitFifoStateUntilTimeout>
 8006482:	1e03      	subs	r3, r0, #0
 8006484:	d007      	beq.n	8006496 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648a:	2220      	movs	r2, #32
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e000      	b.n	8006498 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	0018      	movs	r0, r3
 800649a:	46bd      	mov	sp, r7
 800649c:	b004      	add	sp, #16
 800649e:	bd80      	pop	{r7, pc}

080064a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	23c0      	movs	r3, #192	; 0xc0
 80064b0:	0159      	lsls	r1, r3, #5
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	0013      	movs	r3, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	f7ff fef0 	bl	80062a0 <SPI_WaitFifoStateUntilTimeout>
 80064c0:	1e03      	subs	r3, r0, #0
 80064c2:	d007      	beq.n	80064d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c8:	2220      	movs	r2, #32
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e027      	b.n	8006524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	0013      	movs	r3, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	2180      	movs	r1, #128	; 0x80
 80064e2:	f7ff fe4f 	bl	8006184 <SPI_WaitFlagStateUntilTimeout>
 80064e6:	1e03      	subs	r3, r0, #0
 80064e8:	d007      	beq.n	80064fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ee:	2220      	movs	r2, #32
 80064f0:	431a      	orrs	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e014      	b.n	8006524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	23c0      	movs	r3, #192	; 0xc0
 80064fe:	00d9      	lsls	r1, r3, #3
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	0013      	movs	r3, r2
 8006508:	2200      	movs	r2, #0
 800650a:	f7ff fec9 	bl	80062a0 <SPI_WaitFifoStateUntilTimeout>
 800650e:	1e03      	subs	r3, r0, #0
 8006510:	d007      	beq.n	8006522 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006516:	2220      	movs	r2, #32
 8006518:	431a      	orrs	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e000      	b.n	8006524 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	b004      	add	sp, #16
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e044      	b.n	80065c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2274      	movs	r2, #116	; 0x74
 800654a:	2100      	movs	r1, #0
 800654c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0018      	movs	r0, r3
 8006552:	f7fd fdef 	bl	8004134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2224      	movs	r2, #36	; 0x24
 800655a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2101      	movs	r1, #1
 8006568:	438a      	bics	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	0018      	movs	r0, r3
 8006570:	f000 fbce 	bl	8006d10 <UART_SetConfig>
 8006574:	0003      	movs	r3, r0
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e024      	b.n	80065c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	0018      	movs	r0, r3
 800658a:	f000 fd01 	bl	8006f90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	490d      	ldr	r1, [pc, #52]	; (80065d0 <HAL_UART_Init+0xa4>)
 800659a:	400a      	ands	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	212a      	movs	r1, #42	; 0x2a
 80065aa:	438a      	bics	r2, r1
 80065ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	430a      	orrs	r2, r1
 80065bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 fd99 	bl	80070f8 <UART_CheckIdleState>
 80065c6:	0003      	movs	r3, r0
}
 80065c8:	0018      	movs	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	b002      	add	sp, #8
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	ffffb7ff 	.word	0xffffb7ff

080065d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d000      	beq.n	80065ee <HAL_UART_Transmit+0x1a>
 80065ec:	e096      	b.n	800671c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_UART_Transmit+0x28>
 80065f4:	1dbb      	adds	r3, r7, #6
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e08e      	b.n	800671e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	015b      	lsls	r3, r3, #5
 8006608:	429a      	cmp	r2, r3
 800660a:	d109      	bne.n	8006620 <HAL_UART_Transmit+0x4c>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	4013      	ands	r3, r2
 800661a:	d001      	beq.n	8006620 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e07e      	b.n	800671e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2274      	movs	r2, #116	; 0x74
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_UART_Transmit+0x5a>
 800662a:	2302      	movs	r3, #2
 800662c:	e077      	b.n	800671e <HAL_UART_Transmit+0x14a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2274      	movs	r2, #116	; 0x74
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2280      	movs	r2, #128	; 0x80
 800663a:	2100      	movs	r1, #0
 800663c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2221      	movs	r2, #33	; 0x21
 8006642:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006644:	f7fd ff9e 	bl	8004584 <HAL_GetTick>
 8006648:	0003      	movs	r3, r0
 800664a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1dba      	adds	r2, r7, #6
 8006650:	2150      	movs	r1, #80	; 0x50
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1dba      	adds	r2, r7, #6
 800665a:	2152      	movs	r1, #82	; 0x52
 800665c:	8812      	ldrh	r2, [r2, #0]
 800665e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	015b      	lsls	r3, r3, #5
 8006668:	429a      	cmp	r2, r3
 800666a:	d108      	bne.n	800667e <HAL_UART_Transmit+0xaa>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e003      	b.n	8006686 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2274      	movs	r2, #116	; 0x74
 800668a:	2100      	movs	r1, #0
 800668c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800668e:	e02d      	b.n	80066ec <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	0013      	movs	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	f000 fd73 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 80066a2:	1e03      	subs	r3, r0, #0
 80066a4:	d001      	beq.n	80066aa <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e039      	b.n	800671e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	05d2      	lsls	r2, r2, #23
 80066ba:	0dd2      	lsrs	r2, r2, #23
 80066bc:	b292      	uxth	r2, r2
 80066be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	3302      	adds	r3, #2
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e008      	b.n	80066da <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	781a      	ldrb	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	b292      	uxth	r2, r2
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2252      	movs	r2, #82	; 0x52
 80066de:	5a9b      	ldrh	r3, [r3, r2]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	3b01      	subs	r3, #1
 80066e4:	b299      	uxth	r1, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2252      	movs	r2, #82	; 0x52
 80066ea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2252      	movs	r2, #82	; 0x52
 80066f0:	5a9b      	ldrh	r3, [r3, r2]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1cb      	bne.n	8006690 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	0013      	movs	r3, r2
 8006702:	2200      	movs	r2, #0
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	f000 fd3f 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 800670a:	1e03      	subs	r3, r0, #0
 800670c:	d001      	beq.n	8006712 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e005      	b.n	800671e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	e000      	b.n	800671e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800671c:	2302      	movs	r3, #2
  }
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b008      	add	sp, #32
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b0ab      	sub	sp, #172	; 0xac
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	22a4      	movs	r2, #164	; 0xa4
 8006738:	18b9      	adds	r1, r7, r2
 800673a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	20a0      	movs	r0, #160	; 0xa0
 8006744:	1839      	adds	r1, r7, r0
 8006746:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	219c      	movs	r1, #156	; 0x9c
 8006750:	1879      	adds	r1, r7, r1
 8006752:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006754:	0011      	movs	r1, r2
 8006756:	18bb      	adds	r3, r7, r2
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a99      	ldr	r2, [pc, #612]	; (80069c0 <HAL_UART_IRQHandler+0x298>)
 800675c:	4013      	ands	r3, r2
 800675e:	2298      	movs	r2, #152	; 0x98
 8006760:	18bc      	adds	r4, r7, r2
 8006762:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006764:	18bb      	adds	r3, r7, r2
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d114      	bne.n	8006796 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800676c:	187b      	adds	r3, r7, r1
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2220      	movs	r2, #32
 8006772:	4013      	ands	r3, r2
 8006774:	d00f      	beq.n	8006796 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006776:	183b      	adds	r3, r7, r0
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2220      	movs	r2, #32
 800677c:	4013      	ands	r3, r2
 800677e:	d00a      	beq.n	8006796 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006784:	2b00      	cmp	r3, #0
 8006786:	d100      	bne.n	800678a <HAL_UART_IRQHandler+0x62>
 8006788:	e296      	b.n	8006cb8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	0010      	movs	r0, r2
 8006792:	4798      	blx	r3
      }
      return;
 8006794:	e290      	b.n	8006cb8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006796:	2398      	movs	r3, #152	; 0x98
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d100      	bne.n	80067a2 <HAL_UART_IRQHandler+0x7a>
 80067a0:	e114      	b.n	80069cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067a2:	239c      	movs	r3, #156	; 0x9c
 80067a4:	18fb      	adds	r3, r7, r3
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	4013      	ands	r3, r2
 80067ac:	d106      	bne.n	80067bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067ae:	23a0      	movs	r3, #160	; 0xa0
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a83      	ldr	r2, [pc, #524]	; (80069c4 <HAL_UART_IRQHandler+0x29c>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	d100      	bne.n	80067bc <HAL_UART_IRQHandler+0x94>
 80067ba:	e107      	b.n	80069cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067bc:	23a4      	movs	r3, #164	; 0xa4
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2201      	movs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	d012      	beq.n	80067ee <HAL_UART_IRQHandler+0xc6>
 80067c8:	23a0      	movs	r3, #160	; 0xa0
 80067ca:	18fb      	adds	r3, r7, r3
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	2380      	movs	r3, #128	; 0x80
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	4013      	ands	r3, r2
 80067d4:	d00b      	beq.n	80067ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2280      	movs	r2, #128	; 0x80
 80067e2:	589b      	ldr	r3, [r3, r2]
 80067e4:	2201      	movs	r2, #1
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ee:	23a4      	movs	r3, #164	; 0xa4
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2202      	movs	r2, #2
 80067f6:	4013      	ands	r3, r2
 80067f8:	d011      	beq.n	800681e <HAL_UART_IRQHandler+0xf6>
 80067fa:	239c      	movs	r3, #156	; 0x9c
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2201      	movs	r2, #1
 8006802:	4013      	ands	r3, r2
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2202      	movs	r2, #2
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2280      	movs	r2, #128	; 0x80
 8006812:	589b      	ldr	r3, [r3, r2]
 8006814:	2204      	movs	r2, #4
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2180      	movs	r1, #128	; 0x80
 800681c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800681e:	23a4      	movs	r3, #164	; 0xa4
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2204      	movs	r2, #4
 8006826:	4013      	ands	r3, r2
 8006828:	d011      	beq.n	800684e <HAL_UART_IRQHandler+0x126>
 800682a:	239c      	movs	r3, #156	; 0x9c
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	4013      	ands	r3, r2
 8006834:	d00b      	beq.n	800684e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2204      	movs	r2, #4
 800683c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2280      	movs	r2, #128	; 0x80
 8006842:	589b      	ldr	r3, [r3, r2]
 8006844:	2202      	movs	r2, #2
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2180      	movs	r1, #128	; 0x80
 800684c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800684e:	23a4      	movs	r3, #164	; 0xa4
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2208      	movs	r2, #8
 8006856:	4013      	ands	r3, r2
 8006858:	d017      	beq.n	800688a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800685a:	23a0      	movs	r3, #160	; 0xa0
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2220      	movs	r2, #32
 8006862:	4013      	ands	r3, r2
 8006864:	d105      	bne.n	8006872 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006866:	239c      	movs	r3, #156	; 0x9c
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2201      	movs	r2, #1
 800686e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006870:	d00b      	beq.n	800688a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2208      	movs	r2, #8
 8006878:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2280      	movs	r2, #128	; 0x80
 800687e:	589b      	ldr	r3, [r3, r2]
 8006880:	2208      	movs	r2, #8
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2180      	movs	r1, #128	; 0x80
 8006888:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800688a:	23a4      	movs	r3, #164	; 0xa4
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	4013      	ands	r3, r2
 8006896:	d013      	beq.n	80068c0 <HAL_UART_IRQHandler+0x198>
 8006898:	23a0      	movs	r3, #160	; 0xa0
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	2380      	movs	r3, #128	; 0x80
 80068a0:	04db      	lsls	r3, r3, #19
 80068a2:	4013      	ands	r3, r2
 80068a4:	d00c      	beq.n	80068c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	0112      	lsls	r2, r2, #4
 80068ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	589b      	ldr	r3, [r3, r2]
 80068b6:	2220      	movs	r2, #32
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2180      	movs	r1, #128	; 0x80
 80068be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	589b      	ldr	r3, [r3, r2]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d100      	bne.n	80068cc <HAL_UART_IRQHandler+0x1a4>
 80068ca:	e1f7      	b.n	8006cbc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068cc:	23a4      	movs	r3, #164	; 0xa4
 80068ce:	18fb      	adds	r3, r7, r3
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2220      	movs	r2, #32
 80068d4:	4013      	ands	r3, r2
 80068d6:	d00e      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068d8:	23a0      	movs	r3, #160	; 0xa0
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2220      	movs	r2, #32
 80068e0:	4013      	ands	r3, r2
 80068e2:	d008      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d004      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	0010      	movs	r0, r2
 80068f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	589b      	ldr	r3, [r3, r2]
 80068fc:	2194      	movs	r1, #148	; 0x94
 80068fe:	187a      	adds	r2, r7, r1
 8006900:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2240      	movs	r2, #64	; 0x40
 800690a:	4013      	ands	r3, r2
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d004      	beq.n	800691a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006910:	187b      	adds	r3, r7, r1
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2228      	movs	r2, #40	; 0x28
 8006916:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006918:	d047      	beq.n	80069aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 fcf7 	bl	8007310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2240      	movs	r2, #64	; 0x40
 800692a:	4013      	ands	r3, r2
 800692c:	2b40      	cmp	r3, #64	; 0x40
 800692e:	d137      	bne.n	80069a0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006930:	f3ef 8310 	mrs	r3, PRIMASK
 8006934:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006938:	2090      	movs	r0, #144	; 0x90
 800693a:	183a      	adds	r2, r7, r0
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	2301      	movs	r3, #1
 8006940:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	438a      	bics	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	183b      	adds	r3, r7, r0
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006962:	f383 8810 	msr	PRIMASK, r3
}
 8006966:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	2b00      	cmp	r3, #0
 800696e:	d012      	beq.n	8006996 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <HAL_UART_IRQHandler+0x2a0>)
 8006976:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697c:	0018      	movs	r0, r3
 800697e:	f7fd ffd5 	bl	800492c <HAL_DMA_Abort_IT>
 8006982:	1e03      	subs	r3, r0, #0
 8006984:	d01a      	beq.n	80069bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	0018      	movs	r0, r3
 8006992:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e012      	b.n	80069bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	0018      	movs	r0, r3
 800699a:	f000 f9a5 	bl	8006ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699e:	e00d      	b.n	80069bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	0018      	movs	r0, r3
 80069a4:	f000 f9a0 	bl	8006ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	e008      	b.n	80069bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f000 f99b 	bl	8006ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2280      	movs	r2, #128	; 0x80
 80069b6:	2100      	movs	r1, #0
 80069b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80069ba:	e17f      	b.n	8006cbc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	46c0      	nop			; (mov r8, r8)
    return;
 80069be:	e17d      	b.n	8006cbc <HAL_UART_IRQHandler+0x594>
 80069c0:	0000080f 	.word	0x0000080f
 80069c4:	04000120 	.word	0x04000120
 80069c8:	080073d5 	.word	0x080073d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d000      	beq.n	80069d6 <HAL_UART_IRQHandler+0x2ae>
 80069d4:	e131      	b.n	8006c3a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069d6:	23a4      	movs	r3, #164	; 0xa4
 80069d8:	18fb      	adds	r3, r7, r3
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2210      	movs	r2, #16
 80069de:	4013      	ands	r3, r2
 80069e0:	d100      	bne.n	80069e4 <HAL_UART_IRQHandler+0x2bc>
 80069e2:	e12a      	b.n	8006c3a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069e4:	23a0      	movs	r3, #160	; 0xa0
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	4013      	ands	r3, r2
 80069ee:	d100      	bne.n	80069f2 <HAL_UART_IRQHandler+0x2ca>
 80069f0:	e123      	b.n	8006c3a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2210      	movs	r2, #16
 80069f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2240      	movs	r2, #64	; 0x40
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d000      	beq.n	8006a0a <HAL_UART_IRQHandler+0x2e2>
 8006a08:	e09b      	b.n	8006b42 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	217e      	movs	r1, #126	; 0x7e
 8006a14:	187b      	adds	r3, r7, r1
 8006a16:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d100      	bne.n	8006a22 <HAL_UART_IRQHandler+0x2fa>
 8006a20:	e14e      	b.n	8006cc0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2258      	movs	r2, #88	; 0x58
 8006a26:	5a9b      	ldrh	r3, [r3, r2]
 8006a28:	187a      	adds	r2, r7, r1
 8006a2a:	8812      	ldrh	r2, [r2, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d300      	bcc.n	8006a32 <HAL_UART_IRQHandler+0x30a>
 8006a30:	e146      	b.n	8006cc0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	187a      	adds	r2, r7, r1
 8006a36:	215a      	movs	r1, #90	; 0x5a
 8006a38:	8812      	ldrh	r2, [r2, #0]
 8006a3a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d06e      	beq.n	8006b24 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a46:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a50:	2301      	movs	r3, #1
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	499a      	ldr	r1, [pc, #616]	; (8006cd0 <HAL_UART_IRQHandler+0x5a8>)
 8006a68:	400a      	ands	r2, r1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a72:	f383 8810 	msr	PRIMASK, r3
}
 8006a76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a78:	f3ef 8310 	mrs	r3, PRIMASK
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a80:	677b      	str	r3, [r7, #116]	; 0x74
 8006a82:	2301      	movs	r3, #1
 8006a84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a88:	f383 8810 	msr	PRIMASK, r3
}
 8006a8c:	46c0      	nop			; (mov r8, r8)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	438a      	bics	r2, r1
 8006a9c:	609a      	str	r2, [r3, #8]
 8006a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa4:	f383 8810 	msr	PRIMASK, r3
}
 8006aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8006aae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	f383 8810 	msr	PRIMASK, r3
}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2140      	movs	r1, #64	; 0x40
 8006acc:	438a      	bics	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad6:	f383 8810 	msr	PRIMASK, r3
}
 8006ada:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8006aec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006af2:	2301      	movs	r3, #1
 8006af4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af8:	f383 8810 	msr	PRIMASK, r3
}
 8006afc:	46c0      	nop			; (mov r8, r8)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2110      	movs	r1, #16
 8006b0a:	438a      	bics	r2, r1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b14:	f383 8810 	msr	PRIMASK, r3
}
 8006b18:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fd fecc 	bl	80048bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2258      	movs	r2, #88	; 0x58
 8006b28:	5a9a      	ldrh	r2, [r3, r2]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	215a      	movs	r1, #90	; 0x5a
 8006b2e:	5a5b      	ldrh	r3, [r3, r1]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f000 f8dc 	bl	8006cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b40:	e0be      	b.n	8006cc0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2258      	movs	r2, #88	; 0x58
 8006b46:	5a99      	ldrh	r1, [r3, r2]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	225a      	movs	r2, #90	; 0x5a
 8006b4c:	5a9b      	ldrh	r3, [r3, r2]
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	208e      	movs	r0, #142	; 0x8e
 8006b52:	183b      	adds	r3, r7, r0
 8006b54:	1a8a      	subs	r2, r1, r2
 8006b56:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	225a      	movs	r2, #90	; 0x5a
 8006b5c:	5a9b      	ldrh	r3, [r3, r2]
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d100      	bne.n	8006b66 <HAL_UART_IRQHandler+0x43e>
 8006b64:	e0ae      	b.n	8006cc4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006b66:	183b      	adds	r3, r7, r0
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d100      	bne.n	8006b70 <HAL_UART_IRQHandler+0x448>
 8006b6e:	e0a9      	b.n	8006cc4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b70:	f3ef 8310 	mrs	r3, PRIMASK
 8006b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b76:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b78:	2488      	movs	r4, #136	; 0x88
 8006b7a:	193a      	adds	r2, r7, r4
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f383 8810 	msr	PRIMASK, r3
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	494f      	ldr	r1, [pc, #316]	; (8006cd4 <HAL_UART_IRQHandler+0x5ac>)
 8006b96:	400a      	ands	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	193b      	adds	r3, r7, r4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f383 8810 	msr	PRIMASK, r3
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	2484      	movs	r4, #132	; 0x84
 8006bb2:	193a      	adds	r2, r7, r4
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f383 8810 	msr	PRIMASK, r3
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	438a      	bics	r2, r1
 8006bd0:	609a      	str	r2, [r3, #8]
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	f383 8810 	msr	PRIMASK, r3
}
 8006bde:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfa:	2480      	movs	r4, #128	; 0x80
 8006bfc:	193a      	adds	r2, r7, r4
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	2301      	movs	r3, #1
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f383 8810 	msr	PRIMASK, r3
}
 8006c0a:	46c0      	nop			; (mov r8, r8)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2110      	movs	r1, #16
 8006c18:	438a      	bics	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	193b      	adds	r3, r7, r4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	f383 8810 	msr	PRIMASK, r3
}
 8006c28:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c2a:	183b      	adds	r3, r7, r0
 8006c2c:	881a      	ldrh	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	0011      	movs	r1, r2
 8006c32:	0018      	movs	r0, r3
 8006c34:	f000 f860 	bl	8006cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c38:	e044      	b.n	8006cc4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c3a:	23a4      	movs	r3, #164	; 0xa4
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2380      	movs	r3, #128	; 0x80
 8006c42:	035b      	lsls	r3, r3, #13
 8006c44:	4013      	ands	r3, r2
 8006c46:	d010      	beq.n	8006c6a <HAL_UART_IRQHandler+0x542>
 8006c48:	239c      	movs	r3, #156	; 0x9c
 8006c4a:	18fb      	adds	r3, r7, r3
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	2380      	movs	r3, #128	; 0x80
 8006c50:	03db      	lsls	r3, r3, #15
 8006c52:	4013      	ands	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0352      	lsls	r2, r2, #13
 8006c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 fbf8 	bl	8007458 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c68:	e02f      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c6a:	23a4      	movs	r3, #164	; 0xa4
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2280      	movs	r2, #128	; 0x80
 8006c72:	4013      	ands	r3, r2
 8006c74:	d00f      	beq.n	8006c96 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c76:	23a0      	movs	r3, #160	; 0xa0
 8006c78:	18fb      	adds	r3, r7, r3
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2280      	movs	r2, #128	; 0x80
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d009      	beq.n	8006c96 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01e      	beq.n	8006cc8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	0010      	movs	r0, r2
 8006c92:	4798      	blx	r3
    }
    return;
 8006c94:	e018      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c96:	23a4      	movs	r3, #164	; 0xa4
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d013      	beq.n	8006cca <HAL_UART_IRQHandler+0x5a2>
 8006ca2:	23a0      	movs	r3, #160	; 0xa0
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2240      	movs	r2, #64	; 0x40
 8006caa:	4013      	ands	r3, r2
 8006cac:	d00d      	beq.n	8006cca <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 fba6 	bl	8007402 <UART_EndTransmit_IT>
    return;
 8006cb6:	e008      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
      return;
 8006cb8:	46c0      	nop			; (mov r8, r8)
 8006cba:	e006      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
    return;
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	e004      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
      return;
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	e002      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
      return;
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	e000      	b.n	8006cca <HAL_UART_IRQHandler+0x5a2>
    return;
 8006cc8:	46c0      	nop			; (mov r8, r8)
  }

}
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b02b      	add	sp, #172	; 0xac
 8006cce:	bd90      	pop	{r4, r7, pc}
 8006cd0:	fffffeff 	.word	0xfffffeff
 8006cd4:	fffffedf 	.word	0xfffffedf

08006cd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b002      	add	sp, #8
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	000a      	movs	r2, r1
 8006d02:	1cbb      	adds	r3, r7, #2
 8006d04:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b002      	add	sp, #8
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b088      	sub	sp, #32
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d18:	231e      	movs	r3, #30
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a8d      	ldr	r2, [pc, #564]	; (8006f74 <UART_SetConfig+0x264>)
 8006d40:	4013      	ands	r3, r2
 8006d42:	0019      	movs	r1, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a88      	ldr	r2, [pc, #544]	; (8006f78 <UART_SetConfig+0x268>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	0019      	movs	r1, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4a7f      	ldr	r2, [pc, #508]	; (8006f7c <UART_SetConfig+0x26c>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	0019      	movs	r1, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7b      	ldr	r2, [pc, #492]	; (8006f80 <UART_SetConfig+0x270>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d127      	bne.n	8006de6 <UART_SetConfig+0xd6>
 8006d96:	4b7b      	ldr	r3, [pc, #492]	; (8006f84 <UART_SetConfig+0x274>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d00d      	beq.n	8006dbe <UART_SetConfig+0xae>
 8006da2:	d81b      	bhi.n	8006ddc <UART_SetConfig+0xcc>
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d014      	beq.n	8006dd2 <UART_SetConfig+0xc2>
 8006da8:	d818      	bhi.n	8006ddc <UART_SetConfig+0xcc>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <UART_SetConfig+0xa4>
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d00a      	beq.n	8006dc8 <UART_SetConfig+0xb8>
 8006db2:	e013      	b.n	8006ddc <UART_SetConfig+0xcc>
 8006db4:	231f      	movs	r3, #31
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	e021      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006dbe:	231f      	movs	r3, #31
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e01c      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006dc8:	231f      	movs	r3, #31
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	2204      	movs	r2, #4
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	e017      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006dd2:	231f      	movs	r3, #31
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	e012      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006ddc:	231f      	movs	r3, #31
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	2210      	movs	r2, #16
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	e00d      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a67      	ldr	r2, [pc, #412]	; (8006f88 <UART_SetConfig+0x278>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d104      	bne.n	8006dfa <UART_SetConfig+0xea>
 8006df0:	231f      	movs	r3, #31
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	e003      	b.n	8006e02 <UART_SetConfig+0xf2>
 8006dfa:	231f      	movs	r3, #31
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	2210      	movs	r2, #16
 8006e00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69da      	ldr	r2, [r3, #28]
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d15d      	bne.n	8006eca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8006e0e:	231f      	movs	r3, #31
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d015      	beq.n	8006e44 <UART_SetConfig+0x134>
 8006e18:	dc18      	bgt.n	8006e4c <UART_SetConfig+0x13c>
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d00d      	beq.n	8006e3a <UART_SetConfig+0x12a>
 8006e1e:	dc15      	bgt.n	8006e4c <UART_SetConfig+0x13c>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <UART_SetConfig+0x11a>
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d005      	beq.n	8006e34 <UART_SetConfig+0x124>
 8006e28:	e010      	b.n	8006e4c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e2a:	f7fe fc67 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8006e2e:	0003      	movs	r3, r0
 8006e30:	61bb      	str	r3, [r7, #24]
        break;
 8006e32:	e012      	b.n	8006e5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e34:	4b55      	ldr	r3, [pc, #340]	; (8006f8c <UART_SetConfig+0x27c>)
 8006e36:	61bb      	str	r3, [r7, #24]
        break;
 8006e38:	e00f      	b.n	8006e5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e3a:	f7fe fbf1 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	61bb      	str	r3, [r7, #24]
        break;
 8006e42:	e00a      	b.n	8006e5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	61bb      	str	r3, [r7, #24]
        break;
 8006e4a:	e006      	b.n	8006e5a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e50:	231e      	movs	r3, #30
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	2201      	movs	r2, #1
 8006e56:	701a      	strb	r2, [r3, #0]
        break;
 8006e58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d100      	bne.n	8006e62 <UART_SetConfig+0x152>
 8006e60:	e07b      	b.n	8006f5a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	005a      	lsls	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	085b      	lsrs	r3, r3, #1
 8006e6c:	18d2      	adds	r2, r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	0019      	movs	r1, r3
 8006e74:	0010      	movs	r0, r2
 8006e76:	f7f9 f963 	bl	8000140 <__udivsi3>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b0f      	cmp	r3, #15
 8006e84:	d91c      	bls.n	8006ec0 <UART_SetConfig+0x1b0>
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	025b      	lsls	r3, r3, #9
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d217      	bcs.n	8006ec0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	200e      	movs	r0, #14
 8006e96:	183b      	adds	r3, r7, r0
 8006e98:	210f      	movs	r1, #15
 8006e9a:	438a      	bics	r2, r1
 8006e9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	183b      	adds	r3, r7, r0
 8006eac:	183a      	adds	r2, r7, r0
 8006eae:	8812      	ldrh	r2, [r2, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	183a      	adds	r2, r7, r0
 8006eba:	8812      	ldrh	r2, [r2, #0]
 8006ebc:	60da      	str	r2, [r3, #12]
 8006ebe:	e04c      	b.n	8006f5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006ec0:	231e      	movs	r3, #30
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e047      	b.n	8006f5a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eca:	231f      	movs	r3, #31
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d015      	beq.n	8006f00 <UART_SetConfig+0x1f0>
 8006ed4:	dc18      	bgt.n	8006f08 <UART_SetConfig+0x1f8>
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d00d      	beq.n	8006ef6 <UART_SetConfig+0x1e6>
 8006eda:	dc15      	bgt.n	8006f08 <UART_SetConfig+0x1f8>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <UART_SetConfig+0x1d6>
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d005      	beq.n	8006ef0 <UART_SetConfig+0x1e0>
 8006ee4:	e010      	b.n	8006f08 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee6:	f7fe fc09 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8006eea:	0003      	movs	r3, r0
 8006eec:	61bb      	str	r3, [r7, #24]
        break;
 8006eee:	e012      	b.n	8006f16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b26      	ldr	r3, [pc, #152]	; (8006f8c <UART_SetConfig+0x27c>)
 8006ef2:	61bb      	str	r3, [r7, #24]
        break;
 8006ef4:	e00f      	b.n	8006f16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fe fb93 	bl	8005620 <HAL_RCC_GetSysClockFreq>
 8006efa:	0003      	movs	r3, r0
 8006efc:	61bb      	str	r3, [r7, #24]
        break;
 8006efe:	e00a      	b.n	8006f16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f00:	2380      	movs	r3, #128	; 0x80
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	61bb      	str	r3, [r7, #24]
        break;
 8006f06:	e006      	b.n	8006f16 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f0c:	231e      	movs	r3, #30
 8006f0e:	18fb      	adds	r3, r7, r3
 8006f10:	2201      	movs	r2, #1
 8006f12:	701a      	strb	r2, [r3, #0]
        break;
 8006f14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01e      	beq.n	8006f5a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	085a      	lsrs	r2, r3, #1
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	18d2      	adds	r2, r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	0010      	movs	r0, r2
 8006f2e:	f7f9 f907 	bl	8000140 <__udivsi3>
 8006f32:	0003      	movs	r3, r0
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d909      	bls.n	8006f52 <UART_SetConfig+0x242>
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	025b      	lsls	r3, r3, #9
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d204      	bcs.n	8006f52 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	e003      	b.n	8006f5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006f52:	231e      	movs	r3, #30
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	2201      	movs	r2, #1
 8006f58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f66:	231e      	movs	r3, #30
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	781b      	ldrb	r3, [r3, #0]
}
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b008      	add	sp, #32
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	ffff69f3 	.word	0xffff69f3
 8006f78:	ffffcfff 	.word	0xffffcfff
 8006f7c:	fffff4ff 	.word	0xfffff4ff
 8006f80:	40013800 	.word	0x40013800
 8006f84:	40021000 	.word	0x40021000
 8006f88:	40004400 	.word	0x40004400
 8006f8c:	007a1200 	.word	0x007a1200

08006f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d00b      	beq.n	8006fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a4a      	ldr	r2, [pc, #296]	; (80070d4 <UART_AdvFeatureConfig+0x144>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	0019      	movs	r1, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d00b      	beq.n	8006fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4a43      	ldr	r2, [pc, #268]	; (80070d8 <UART_AdvFeatureConfig+0x148>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	0019      	movs	r1, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2204      	movs	r2, #4
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d00b      	beq.n	8006ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a3b      	ldr	r2, [pc, #236]	; (80070dc <UART_AdvFeatureConfig+0x14c>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2208      	movs	r2, #8
 8007004:	4013      	ands	r3, r2
 8007006:	d00b      	beq.n	8007020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4a34      	ldr	r2, [pc, #208]	; (80070e0 <UART_AdvFeatureConfig+0x150>)
 8007010:	4013      	ands	r3, r2
 8007012:	0019      	movs	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	2210      	movs	r2, #16
 8007026:	4013      	ands	r3, r2
 8007028:	d00b      	beq.n	8007042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <UART_AdvFeatureConfig+0x154>)
 8007032:	4013      	ands	r3, r2
 8007034:	0019      	movs	r1, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2220      	movs	r2, #32
 8007048:	4013      	ands	r3, r2
 800704a:	d00b      	beq.n	8007064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <UART_AdvFeatureConfig+0x158>)
 8007054:	4013      	ands	r3, r2
 8007056:	0019      	movs	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2240      	movs	r2, #64	; 0x40
 800706a:	4013      	ands	r3, r2
 800706c:	d01d      	beq.n	80070aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <UART_AdvFeatureConfig+0x15c>)
 8007076:	4013      	ands	r3, r2
 8007078:	0019      	movs	r1, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800708a:	2380      	movs	r3, #128	; 0x80
 800708c:	035b      	lsls	r3, r3, #13
 800708e:	429a      	cmp	r2, r3
 8007090:	d10b      	bne.n	80070aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4a15      	ldr	r2, [pc, #84]	; (80070f0 <UART_AdvFeatureConfig+0x160>)
 800709a:	4013      	ands	r3, r2
 800709c:	0019      	movs	r1, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2280      	movs	r2, #128	; 0x80
 80070b0:	4013      	ands	r3, r2
 80070b2:	d00b      	beq.n	80070cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4a0e      	ldr	r2, [pc, #56]	; (80070f4 <UART_AdvFeatureConfig+0x164>)
 80070bc:	4013      	ands	r3, r2
 80070be:	0019      	movs	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b002      	add	sp, #8
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	fffdffff 	.word	0xfffdffff
 80070d8:	fffeffff 	.word	0xfffeffff
 80070dc:	fffbffff 	.word	0xfffbffff
 80070e0:	ffff7fff 	.word	0xffff7fff
 80070e4:	ffffefff 	.word	0xffffefff
 80070e8:	ffffdfff 	.word	0xffffdfff
 80070ec:	ffefffff 	.word	0xffefffff
 80070f0:	ff9fffff 	.word	0xff9fffff
 80070f4:	fff7ffff 	.word	0xfff7ffff

080070f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2280      	movs	r2, #128	; 0x80
 8007104:	2100      	movs	r1, #0
 8007106:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007108:	f7fd fa3c 	bl	8004584 <HAL_GetTick>
 800710c:	0003      	movs	r3, r0
 800710e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2208      	movs	r2, #8
 8007118:	4013      	ands	r3, r2
 800711a:	2b08      	cmp	r3, #8
 800711c:	d10c      	bne.n	8007138 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2280      	movs	r2, #128	; 0x80
 8007122:	0391      	lsls	r1, r2, #14
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <UART_CheckIdleState+0x8c>)
 8007128:	9200      	str	r2, [sp, #0]
 800712a:	2200      	movs	r2, #0
 800712c:	f000 f82c 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 8007130:	1e03      	subs	r3, r0, #0
 8007132:	d001      	beq.n	8007138 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e021      	b.n	800717c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2204      	movs	r2, #4
 8007140:	4013      	ands	r3, r2
 8007142:	2b04      	cmp	r3, #4
 8007144:	d10c      	bne.n	8007160 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2280      	movs	r2, #128	; 0x80
 800714a:	03d1      	lsls	r1, r2, #15
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <UART_CheckIdleState+0x8c>)
 8007150:	9200      	str	r2, [sp, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	f000 f818 	bl	8007188 <UART_WaitOnFlagUntilTimeout>
 8007158:	1e03      	subs	r3, r0, #0
 800715a:	d001      	beq.n	8007160 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e00d      	b.n	800717c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2274      	movs	r2, #116	; 0x74
 8007176:	2100      	movs	r1, #0
 8007178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	0018      	movs	r0, r3
 800717e:	46bd      	mov	sp, r7
 8007180:	b004      	add	sp, #16
 8007182:	bd80      	pop	{r7, pc}
 8007184:	01ffffff 	.word	0x01ffffff

08007188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b094      	sub	sp, #80	; 0x50
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	1dfb      	adds	r3, r7, #7
 8007196:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007198:	e0a3      	b.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800719a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800719c:	3301      	adds	r3, #1
 800719e:	d100      	bne.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80071a0:	e09f      	b.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a2:	f7fd f9ef 	bl	8004584 <HAL_GetTick>
 80071a6:	0002      	movs	r2, r0
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d302      	bcc.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80071b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13d      	bne.n	8007234 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b8:	f3ef 8310 	mrs	r3, PRIMASK
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071c0:	647b      	str	r3, [r7, #68]	; 0x44
 80071c2:	2301      	movs	r3, #1
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	f383 8810 	msr	PRIMASK, r3
}
 80071cc:	46c0      	nop			; (mov r8, r8)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	494c      	ldr	r1, [pc, #304]	; (800730c <UART_WaitOnFlagUntilTimeout+0x184>)
 80071da:	400a      	ands	r2, r1
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f383 8810 	msr	PRIMASK, r3
}
 80071e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ea:	f3ef 8310 	mrs	r3, PRIMASK
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
 80071f4:	2301      	movs	r3, #1
 80071f6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	f383 8810 	msr	PRIMASK, r3
}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2101      	movs	r1, #1
 800720c:	438a      	bics	r2, r1
 800720e:	609a      	str	r2, [r3, #8]
 8007210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007216:	f383 8810 	msr	PRIMASK, r3
}
 800721a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2274      	movs	r2, #116	; 0x74
 800722c:	2100      	movs	r1, #0
 800722e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e067      	b.n	8007304 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2204      	movs	r2, #4
 800723c:	4013      	ands	r3, r2
 800723e:	d050      	beq.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69da      	ldr	r2, [r3, #28]
 8007246:	2380      	movs	r3, #128	; 0x80
 8007248:	011b      	lsls	r3, r3, #4
 800724a:	401a      	ands	r2, r3
 800724c:	2380      	movs	r3, #128	; 0x80
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	429a      	cmp	r2, r3
 8007252:	d146      	bne.n	80072e2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2280      	movs	r2, #128	; 0x80
 800725a:	0112      	lsls	r2, r2, #4
 800725c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	613b      	str	r3, [r7, #16]
  return(result);
 8007264:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007268:	2301      	movs	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f383 8810 	msr	PRIMASK, r3
}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4923      	ldr	r1, [pc, #140]	; (800730c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007280:	400a      	ands	r2, r1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	f383 8810 	msr	PRIMASK, r3
}
 800728e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007290:	f3ef 8310 	mrs	r3, PRIMASK
 8007294:	61fb      	str	r3, [r7, #28]
  return(result);
 8007296:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007298:	64bb      	str	r3, [r7, #72]	; 0x48
 800729a:	2301      	movs	r3, #1
 800729c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f383 8810 	msr	PRIMASK, r3
}
 80072a4:	46c0      	nop			; (mov r8, r8)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2101      	movs	r1, #1
 80072b2:	438a      	bics	r2, r1
 80072b4:	609a      	str	r2, [r3, #8]
 80072b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	f383 8810 	msr	PRIMASK, r3
}
 80072c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2220      	movs	r2, #32
 80072c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	2120      	movs	r1, #32
 80072d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2274      	movs	r2, #116	; 0x74
 80072da:	2100      	movs	r1, #0
 80072dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e010      	b.n	8007304 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	425a      	negs	r2, r3
 80072f2:	4153      	adcs	r3, r2
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	001a      	movs	r2, r3
 80072f8:	1dfb      	adds	r3, r7, #7
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d100      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007300:	e74b      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b014      	add	sp, #80	; 0x50
 800730a:	bd80      	pop	{r7, pc}
 800730c:	fffffe5f 	.word	0xfffffe5f

08007310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	; 0x38
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007318:	f3ef 8310 	mrs	r3, PRIMASK
 800731c:	617b      	str	r3, [r7, #20]
  return(result);
 800731e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
 8007322:	2301      	movs	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f383 8810 	msr	PRIMASK, r3
}
 800732c:	46c0      	nop			; (mov r8, r8)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4925      	ldr	r1, [pc, #148]	; (80073d0 <UART_EndRxTransfer+0xc0>)
 800733a:	400a      	ands	r2, r1
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f383 8810 	msr	PRIMASK, r3
}
 8007348:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800734a:	f3ef 8310 	mrs	r3, PRIMASK
 800734e:	623b      	str	r3, [r7, #32]
  return(result);
 8007350:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	633b      	str	r3, [r7, #48]	; 0x30
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	f383 8810 	msr	PRIMASK, r3
}
 800735e:	46c0      	nop			; (mov r8, r8)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2101      	movs	r1, #1
 800736c:	438a      	bics	r2, r1
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f383 8810 	msr	PRIMASK, r3
}
 800737a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007380:	2b01      	cmp	r3, #1
 8007382:	d118      	bne.n	80073b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007384:	f3ef 8310 	mrs	r3, PRIMASK
 8007388:	60bb      	str	r3, [r7, #8]
  return(result);
 800738a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	2301      	movs	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f383 8810 	msr	PRIMASK, r3
}
 8007398:	46c0      	nop			; (mov r8, r8)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2110      	movs	r1, #16
 80073a6:	438a      	bics	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f383 8810 	msr	PRIMASK, r3
}
 80073b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073c8:	46c0      	nop			; (mov r8, r8)
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b00e      	add	sp, #56	; 0x38
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	fffffedf 	.word	0xfffffedf

080073d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	225a      	movs	r2, #90	; 0x5a
 80073e6:	2100      	movs	r1, #0
 80073e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2252      	movs	r2, #82	; 0x52
 80073ee:	2100      	movs	r1, #0
 80073f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f7ff fc77 	bl	8006ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b004      	add	sp, #16
 8007400:	bd80      	pop	{r7, pc}

08007402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800740a:	f3ef 8310 	mrs	r3, PRIMASK
 800740e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007410:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	2301      	movs	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f383 8810 	msr	PRIMASK, r3
}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2140      	movs	r1, #64	; 0x40
 800742c:	438a      	bics	r2, r1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f383 8810 	msr	PRIMASK, r3
}
 800743a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	0018      	movs	r0, r3
 800744c:	f7ff fc44 	bl	8006cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b006      	add	sp, #24
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007460:	46c0      	nop			; (mov r8, r8)
 8007462:	46bd      	mov	sp, r7
 8007464:	b002      	add	sp, #8
 8007466:	bd80      	pop	{r7, pc}

08007468 <__errno>:
 8007468:	4b01      	ldr	r3, [pc, #4]	; (8007470 <__errno+0x8>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	4770      	bx	lr
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	2000000c 	.word	0x2000000c

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	2600      	movs	r6, #0
 8007478:	4d0c      	ldr	r5, [pc, #48]	; (80074ac <__libc_init_array+0x38>)
 800747a:	4c0d      	ldr	r4, [pc, #52]	; (80074b0 <__libc_init_array+0x3c>)
 800747c:	1b64      	subs	r4, r4, r5
 800747e:	10a4      	asrs	r4, r4, #2
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	2600      	movs	r6, #0
 8007486:	f002 ffbb 	bl	800a400 <_init>
 800748a:	4d0a      	ldr	r5, [pc, #40]	; (80074b4 <__libc_init_array+0x40>)
 800748c:	4c0a      	ldr	r4, [pc, #40]	; (80074b8 <__libc_init_array+0x44>)
 800748e:	1b64      	subs	r4, r4, r5
 8007490:	10a4      	asrs	r4, r4, #2
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	00b3      	lsls	r3, r6, #2
 800749a:	58eb      	ldr	r3, [r5, r3]
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	00b3      	lsls	r3, r6, #2
 80074a4:	58eb      	ldr	r3, [r5, r3]
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	0800a93c 	.word	0x0800a93c
 80074b0:	0800a93c 	.word	0x0800a93c
 80074b4:	0800a93c 	.word	0x0800a93c
 80074b8:	0800a940 	.word	0x0800a940

080074bc <memcpy>:
 80074bc:	2300      	movs	r3, #0
 80074be:	b510      	push	{r4, lr}
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d100      	bne.n	80074c6 <memcpy+0xa>
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	5ccc      	ldrb	r4, [r1, r3]
 80074c8:	54c4      	strb	r4, [r0, r3]
 80074ca:	3301      	adds	r3, #1
 80074cc:	e7f8      	b.n	80074c0 <memcpy+0x4>

080074ce <memmove>:
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4288      	cmp	r0, r1
 80074d2:	d902      	bls.n	80074da <memmove+0xc>
 80074d4:	188b      	adds	r3, r1, r2
 80074d6:	4298      	cmp	r0, r3
 80074d8:	d303      	bcc.n	80074e2 <memmove+0x14>
 80074da:	2300      	movs	r3, #0
 80074dc:	e007      	b.n	80074ee <memmove+0x20>
 80074de:	5c8b      	ldrb	r3, [r1, r2]
 80074e0:	5483      	strb	r3, [r0, r2]
 80074e2:	3a01      	subs	r2, #1
 80074e4:	d2fb      	bcs.n	80074de <memmove+0x10>
 80074e6:	bd10      	pop	{r4, pc}
 80074e8:	5ccc      	ldrb	r4, [r1, r3]
 80074ea:	54c4      	strb	r4, [r0, r3]
 80074ec:	3301      	adds	r3, #1
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d1fa      	bne.n	80074e8 <memmove+0x1a>
 80074f2:	e7f8      	b.n	80074e6 <memmove+0x18>

080074f4 <memset>:
 80074f4:	0003      	movs	r3, r0
 80074f6:	1882      	adds	r2, r0, r2
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d100      	bne.n	80074fe <memset+0xa>
 80074fc:	4770      	bx	lr
 80074fe:	7019      	strb	r1, [r3, #0]
 8007500:	3301      	adds	r3, #1
 8007502:	e7f9      	b.n	80074f8 <memset+0x4>

08007504 <__cvt>:
 8007504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007506:	001e      	movs	r6, r3
 8007508:	2300      	movs	r3, #0
 800750a:	0014      	movs	r4, r2
 800750c:	b08b      	sub	sp, #44	; 0x2c
 800750e:	429e      	cmp	r6, r3
 8007510:	da04      	bge.n	800751c <__cvt+0x18>
 8007512:	2180      	movs	r1, #128	; 0x80
 8007514:	0609      	lsls	r1, r1, #24
 8007516:	1873      	adds	r3, r6, r1
 8007518:	001e      	movs	r6, r3
 800751a:	232d      	movs	r3, #45	; 0x2d
 800751c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800751e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007520:	7013      	strb	r3, [r2, #0]
 8007522:	2320      	movs	r3, #32
 8007524:	2203      	movs	r2, #3
 8007526:	439f      	bics	r7, r3
 8007528:	2f46      	cmp	r7, #70	; 0x46
 800752a:	d007      	beq.n	800753c <__cvt+0x38>
 800752c:	003b      	movs	r3, r7
 800752e:	3b45      	subs	r3, #69	; 0x45
 8007530:	4259      	negs	r1, r3
 8007532:	414b      	adcs	r3, r1
 8007534:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007536:	3a01      	subs	r2, #1
 8007538:	18cb      	adds	r3, r1, r3
 800753a:	9310      	str	r3, [sp, #64]	; 0x40
 800753c:	ab09      	add	r3, sp, #36	; 0x24
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	ab08      	add	r3, sp, #32
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007546:	9200      	str	r2, [sp, #0]
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800754c:	0022      	movs	r2, r4
 800754e:	9301      	str	r3, [sp, #4]
 8007550:	0033      	movs	r3, r6
 8007552:	f000 fcf1 	bl	8007f38 <_dtoa_r>
 8007556:	0005      	movs	r5, r0
 8007558:	2f47      	cmp	r7, #71	; 0x47
 800755a:	d102      	bne.n	8007562 <__cvt+0x5e>
 800755c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800755e:	07db      	lsls	r3, r3, #31
 8007560:	d528      	bpl.n	80075b4 <__cvt+0xb0>
 8007562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007564:	18eb      	adds	r3, r5, r3
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	2f46      	cmp	r7, #70	; 0x46
 800756a:	d114      	bne.n	8007596 <__cvt+0x92>
 800756c:	782b      	ldrb	r3, [r5, #0]
 800756e:	2b30      	cmp	r3, #48	; 0x30
 8007570:	d10c      	bne.n	800758c <__cvt+0x88>
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	0020      	movs	r0, r4
 8007578:	0031      	movs	r1, r6
 800757a:	f7f8 ff67 	bl	800044c <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	d104      	bne.n	800758c <__cvt+0x88>
 8007582:	2301      	movs	r3, #1
 8007584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800758e:	9a07      	ldr	r2, [sp, #28]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	18d3      	adds	r3, r2, r3
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	0020      	movs	r0, r4
 800759c:	0031      	movs	r1, r6
 800759e:	f7f8 ff55 	bl	800044c <__aeabi_dcmpeq>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d001      	beq.n	80075aa <__cvt+0xa6>
 80075a6:	9b07      	ldr	r3, [sp, #28]
 80075a8:	9309      	str	r3, [sp, #36]	; 0x24
 80075aa:	2230      	movs	r2, #48	; 0x30
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	9907      	ldr	r1, [sp, #28]
 80075b0:	428b      	cmp	r3, r1
 80075b2:	d306      	bcc.n	80075c2 <__cvt+0xbe>
 80075b4:	0028      	movs	r0, r5
 80075b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075ba:	1b5b      	subs	r3, r3, r5
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	b00b      	add	sp, #44	; 0x2c
 80075c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c2:	1c59      	adds	r1, r3, #1
 80075c4:	9109      	str	r1, [sp, #36]	; 0x24
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	e7f0      	b.n	80075ac <__cvt+0xa8>

080075ca <__exponent>:
 80075ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075cc:	1c83      	adds	r3, r0, #2
 80075ce:	b087      	sub	sp, #28
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	0005      	movs	r5, r0
 80075d4:	000c      	movs	r4, r1
 80075d6:	232b      	movs	r3, #43	; 0x2b
 80075d8:	7002      	strb	r2, [r0, #0]
 80075da:	2900      	cmp	r1, #0
 80075dc:	da01      	bge.n	80075e2 <__exponent+0x18>
 80075de:	424c      	negs	r4, r1
 80075e0:	3302      	adds	r3, #2
 80075e2:	706b      	strb	r3, [r5, #1]
 80075e4:	2c09      	cmp	r4, #9
 80075e6:	dd31      	ble.n	800764c <__exponent+0x82>
 80075e8:	270a      	movs	r7, #10
 80075ea:	ab04      	add	r3, sp, #16
 80075ec:	1dde      	adds	r6, r3, #7
 80075ee:	0020      	movs	r0, r4
 80075f0:	0039      	movs	r1, r7
 80075f2:	9601      	str	r6, [sp, #4]
 80075f4:	f7f8 ff14 	bl	8000420 <__aeabi_idivmod>
 80075f8:	3e01      	subs	r6, #1
 80075fa:	3130      	adds	r1, #48	; 0x30
 80075fc:	0020      	movs	r0, r4
 80075fe:	7031      	strb	r1, [r6, #0]
 8007600:	0039      	movs	r1, r7
 8007602:	9402      	str	r4, [sp, #8]
 8007604:	f7f8 fe26 	bl	8000254 <__divsi3>
 8007608:	9b02      	ldr	r3, [sp, #8]
 800760a:	0004      	movs	r4, r0
 800760c:	2b63      	cmp	r3, #99	; 0x63
 800760e:	dcee      	bgt.n	80075ee <__exponent+0x24>
 8007610:	9b01      	ldr	r3, [sp, #4]
 8007612:	3430      	adds	r4, #48	; 0x30
 8007614:	1e9a      	subs	r2, r3, #2
 8007616:	0013      	movs	r3, r2
 8007618:	9903      	ldr	r1, [sp, #12]
 800761a:	7014      	strb	r4, [r2, #0]
 800761c:	a804      	add	r0, sp, #16
 800761e:	3007      	adds	r0, #7
 8007620:	4298      	cmp	r0, r3
 8007622:	d80e      	bhi.n	8007642 <__exponent+0x78>
 8007624:	ab04      	add	r3, sp, #16
 8007626:	3307      	adds	r3, #7
 8007628:	2000      	movs	r0, #0
 800762a:	429a      	cmp	r2, r3
 800762c:	d804      	bhi.n	8007638 <__exponent+0x6e>
 800762e:	ab04      	add	r3, sp, #16
 8007630:	3009      	adds	r0, #9
 8007632:	18c0      	adds	r0, r0, r3
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	1ac0      	subs	r0, r0, r3
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	1818      	adds	r0, r3, r0
 800763c:	1b40      	subs	r0, r0, r5
 800763e:	b007      	add	sp, #28
 8007640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007642:	7818      	ldrb	r0, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	7008      	strb	r0, [r1, #0]
 8007648:	3101      	adds	r1, #1
 800764a:	e7e7      	b.n	800761c <__exponent+0x52>
 800764c:	2330      	movs	r3, #48	; 0x30
 800764e:	18e4      	adds	r4, r4, r3
 8007650:	70ab      	strb	r3, [r5, #2]
 8007652:	1d28      	adds	r0, r5, #4
 8007654:	70ec      	strb	r4, [r5, #3]
 8007656:	e7f1      	b.n	800763c <__exponent+0x72>

08007658 <_printf_float>:
 8007658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765a:	b095      	sub	sp, #84	; 0x54
 800765c:	000c      	movs	r4, r1
 800765e:	9209      	str	r2, [sp, #36]	; 0x24
 8007660:	001e      	movs	r6, r3
 8007662:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007664:	0007      	movs	r7, r0
 8007666:	f001 fa81 	bl	8008b6c <_localeconv_r>
 800766a:	6803      	ldr	r3, [r0, #0]
 800766c:	0018      	movs	r0, r3
 800766e:	930c      	str	r3, [sp, #48]	; 0x30
 8007670:	f7f8 fd4a 	bl	8000108 <strlen>
 8007674:	2300      	movs	r3, #0
 8007676:	9312      	str	r3, [sp, #72]	; 0x48
 8007678:	7e23      	ldrb	r3, [r4, #24]
 800767a:	2207      	movs	r2, #7
 800767c:	930a      	str	r3, [sp, #40]	; 0x28
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	900e      	str	r0, [sp, #56]	; 0x38
 8007682:	930d      	str	r3, [sp, #52]	; 0x34
 8007684:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	05c9      	lsls	r1, r1, #23
 800768a:	d547      	bpl.n	800771c <_printf_float+0xc4>
 800768c:	189b      	adds	r3, r3, r2
 800768e:	4393      	bics	r3, r2
 8007690:	001a      	movs	r2, r3
 8007692:	3208      	adds	r2, #8
 8007694:	602a      	str	r2, [r5, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	64a2      	str	r2, [r4, #72]	; 0x48
 800769c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800769e:	2201      	movs	r2, #1
 80076a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80076a2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80076a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80076a6:	006b      	lsls	r3, r5, #1
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076ae:	4ba7      	ldr	r3, [pc, #668]	; (800794c <_printf_float+0x2f4>)
 80076b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076b2:	4252      	negs	r2, r2
 80076b4:	f7fb f960 	bl	8002978 <__aeabi_dcmpun>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d131      	bne.n	8007720 <_printf_float+0xc8>
 80076bc:	2201      	movs	r2, #1
 80076be:	4ba3      	ldr	r3, [pc, #652]	; (800794c <_printf_float+0x2f4>)
 80076c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076c4:	4252      	negs	r2, r2
 80076c6:	f7f8 fed1 	bl	800046c <__aeabi_dcmple>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d128      	bne.n	8007720 <_printf_float+0xc8>
 80076ce:	2200      	movs	r2, #0
 80076d0:	2300      	movs	r3, #0
 80076d2:	0029      	movs	r1, r5
 80076d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80076d6:	f7f8 febf 	bl	8000458 <__aeabi_dcmplt>
 80076da:	2800      	cmp	r0, #0
 80076dc:	d003      	beq.n	80076e6 <_printf_float+0x8e>
 80076de:	0023      	movs	r3, r4
 80076e0:	222d      	movs	r2, #45	; 0x2d
 80076e2:	3343      	adds	r3, #67	; 0x43
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e8:	4d99      	ldr	r5, [pc, #612]	; (8007950 <_printf_float+0x2f8>)
 80076ea:	2b47      	cmp	r3, #71	; 0x47
 80076ec:	d900      	bls.n	80076f0 <_printf_float+0x98>
 80076ee:	4d99      	ldr	r5, [pc, #612]	; (8007954 <_printf_float+0x2fc>)
 80076f0:	2303      	movs	r3, #3
 80076f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	3301      	adds	r3, #1
 80076f8:	439a      	bics	r2, r3
 80076fa:	2300      	movs	r3, #0
 80076fc:	6022      	str	r2, [r4, #0]
 80076fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007702:	0021      	movs	r1, r4
 8007704:	0038      	movs	r0, r7
 8007706:	9600      	str	r6, [sp, #0]
 8007708:	aa13      	add	r2, sp, #76	; 0x4c
 800770a:	f000 f9e7 	bl	8007adc <_printf_common>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d000      	beq.n	8007714 <_printf_float+0xbc>
 8007712:	e0a2      	b.n	800785a <_printf_float+0x202>
 8007714:	2001      	movs	r0, #1
 8007716:	4240      	negs	r0, r0
 8007718:	b015      	add	sp, #84	; 0x54
 800771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800771c:	3307      	adds	r3, #7
 800771e:	e7b6      	b.n	800768e <_printf_float+0x36>
 8007720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007722:	002b      	movs	r3, r5
 8007724:	0010      	movs	r0, r2
 8007726:	0029      	movs	r1, r5
 8007728:	f7fb f926 	bl	8002978 <__aeabi_dcmpun>
 800772c:	2800      	cmp	r0, #0
 800772e:	d00b      	beq.n	8007748 <_printf_float+0xf0>
 8007730:	2d00      	cmp	r5, #0
 8007732:	da03      	bge.n	800773c <_printf_float+0xe4>
 8007734:	0023      	movs	r3, r4
 8007736:	222d      	movs	r2, #45	; 0x2d
 8007738:	3343      	adds	r3, #67	; 0x43
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773e:	4d86      	ldr	r5, [pc, #536]	; (8007958 <_printf_float+0x300>)
 8007740:	2b47      	cmp	r3, #71	; 0x47
 8007742:	d9d5      	bls.n	80076f0 <_printf_float+0x98>
 8007744:	4d85      	ldr	r5, [pc, #532]	; (800795c <_printf_float+0x304>)
 8007746:	e7d3      	b.n	80076f0 <_printf_float+0x98>
 8007748:	2220      	movs	r2, #32
 800774a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800774c:	6863      	ldr	r3, [r4, #4]
 800774e:	4391      	bics	r1, r2
 8007750:	910f      	str	r1, [sp, #60]	; 0x3c
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	d149      	bne.n	80077ea <_printf_float+0x192>
 8007756:	3307      	adds	r3, #7
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	2380      	movs	r3, #128	; 0x80
 800775c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	4313      	orrs	r3, r2
 8007762:	2200      	movs	r2, #0
 8007764:	9206      	str	r2, [sp, #24]
 8007766:	aa12      	add	r2, sp, #72	; 0x48
 8007768:	9205      	str	r2, [sp, #20]
 800776a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776c:	a908      	add	r1, sp, #32
 800776e:	9204      	str	r2, [sp, #16]
 8007770:	aa11      	add	r2, sp, #68	; 0x44
 8007772:	9203      	str	r2, [sp, #12]
 8007774:	2223      	movs	r2, #35	; 0x23
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	9301      	str	r3, [sp, #4]
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	1852      	adds	r2, r2, r1
 800777e:	9202      	str	r2, [sp, #8]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	0038      	movs	r0, r7
 8007784:	002b      	movs	r3, r5
 8007786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007788:	f7ff febc 	bl	8007504 <__cvt>
 800778c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800778e:	0005      	movs	r5, r0
 8007790:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007792:	2b47      	cmp	r3, #71	; 0x47
 8007794:	d108      	bne.n	80077a8 <_printf_float+0x150>
 8007796:	1ccb      	adds	r3, r1, #3
 8007798:	db02      	blt.n	80077a0 <_printf_float+0x148>
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	4299      	cmp	r1, r3
 800779e:	dd48      	ble.n	8007832 <_printf_float+0x1da>
 80077a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a2:	3b02      	subs	r3, #2
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	930a      	str	r3, [sp, #40]	; 0x28
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	2b65      	cmp	r3, #101	; 0x65
 80077ac:	d824      	bhi.n	80077f8 <_printf_float+0x1a0>
 80077ae:	0020      	movs	r0, r4
 80077b0:	001a      	movs	r2, r3
 80077b2:	3901      	subs	r1, #1
 80077b4:	3050      	adds	r0, #80	; 0x50
 80077b6:	9111      	str	r1, [sp, #68]	; 0x44
 80077b8:	f7ff ff07 	bl	80075ca <__exponent>
 80077bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077be:	900b      	str	r0, [sp, #44]	; 0x2c
 80077c0:	1813      	adds	r3, r2, r0
 80077c2:	6123      	str	r3, [r4, #16]
 80077c4:	2a01      	cmp	r2, #1
 80077c6:	dc02      	bgt.n	80077ce <_printf_float+0x176>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	07d2      	lsls	r2, r2, #31
 80077cc:	d501      	bpl.n	80077d2 <_printf_float+0x17a>
 80077ce:	3301      	adds	r3, #1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	2323      	movs	r3, #35	; 0x23
 80077d4:	aa08      	add	r2, sp, #32
 80077d6:	189b      	adds	r3, r3, r2
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d100      	bne.n	80077e0 <_printf_float+0x188>
 80077de:	e78f      	b.n	8007700 <_printf_float+0xa8>
 80077e0:	0023      	movs	r3, r4
 80077e2:	222d      	movs	r2, #45	; 0x2d
 80077e4:	3343      	adds	r3, #67	; 0x43
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e78a      	b.n	8007700 <_printf_float+0xa8>
 80077ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077ec:	2a47      	cmp	r2, #71	; 0x47
 80077ee:	d1b4      	bne.n	800775a <_printf_float+0x102>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1b2      	bne.n	800775a <_printf_float+0x102>
 80077f4:	3301      	adds	r3, #1
 80077f6:	e7af      	b.n	8007758 <_printf_float+0x100>
 80077f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fa:	2b66      	cmp	r3, #102	; 0x66
 80077fc:	d11b      	bne.n	8007836 <_printf_float+0x1de>
 80077fe:	6863      	ldr	r3, [r4, #4]
 8007800:	2900      	cmp	r1, #0
 8007802:	dd0d      	ble.n	8007820 <_printf_float+0x1c8>
 8007804:	6121      	str	r1, [r4, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <_printf_float+0x1b8>
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	07d2      	lsls	r2, r2, #31
 800780e:	d502      	bpl.n	8007816 <_printf_float+0x1be>
 8007810:	3301      	adds	r3, #1
 8007812:	1859      	adds	r1, r3, r1
 8007814:	6121      	str	r1, [r4, #16]
 8007816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007818:	65a3      	str	r3, [r4, #88]	; 0x58
 800781a:	2300      	movs	r3, #0
 800781c:	930b      	str	r3, [sp, #44]	; 0x2c
 800781e:	e7d8      	b.n	80077d2 <_printf_float+0x17a>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <_printf_float+0x1d4>
 8007824:	2201      	movs	r2, #1
 8007826:	6821      	ldr	r1, [r4, #0]
 8007828:	4211      	tst	r1, r2
 800782a:	d000      	beq.n	800782e <_printf_float+0x1d6>
 800782c:	1c9a      	adds	r2, r3, #2
 800782e:	6122      	str	r2, [r4, #16]
 8007830:	e7f1      	b.n	8007816 <_printf_float+0x1be>
 8007832:	2367      	movs	r3, #103	; 0x67
 8007834:	930a      	str	r3, [sp, #40]	; 0x28
 8007836:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007838:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800783a:	4293      	cmp	r3, r2
 800783c:	db06      	blt.n	800784c <_printf_float+0x1f4>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	07d2      	lsls	r2, r2, #31
 8007844:	d5e7      	bpl.n	8007816 <_printf_float+0x1be>
 8007846:	3301      	adds	r3, #1
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	e7e4      	b.n	8007816 <_printf_float+0x1be>
 800784c:	2101      	movs	r1, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	dc01      	bgt.n	8007856 <_printf_float+0x1fe>
 8007852:	1849      	adds	r1, r1, r1
 8007854:	1ac9      	subs	r1, r1, r3
 8007856:	1852      	adds	r2, r2, r1
 8007858:	e7e9      	b.n	800782e <_printf_float+0x1d6>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	0553      	lsls	r3, r2, #21
 800785e:	d407      	bmi.n	8007870 <_printf_float+0x218>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	002a      	movs	r2, r5
 8007864:	0038      	movs	r0, r7
 8007866:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007868:	47b0      	blx	r6
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d128      	bne.n	80078c0 <_printf_float+0x268>
 800786e:	e751      	b.n	8007714 <_printf_float+0xbc>
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	2b65      	cmp	r3, #101	; 0x65
 8007874:	d800      	bhi.n	8007878 <_printf_float+0x220>
 8007876:	e0e1      	b.n	8007a3c <_printf_float+0x3e4>
 8007878:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800787a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f8 fde4 	bl	800044c <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d031      	beq.n	80078ec <_printf_float+0x294>
 8007888:	2301      	movs	r3, #1
 800788a:	0038      	movs	r0, r7
 800788c:	4a34      	ldr	r2, [pc, #208]	; (8007960 <_printf_float+0x308>)
 800788e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007890:	47b0      	blx	r6
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	d100      	bne.n	8007898 <_printf_float+0x240>
 8007896:	e73d      	b.n	8007714 <_printf_float+0xbc>
 8007898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800789a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800789c:	4293      	cmp	r3, r2
 800789e:	db02      	blt.n	80078a6 <_printf_float+0x24e>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07db      	lsls	r3, r3, #31
 80078a4:	d50c      	bpl.n	80078c0 <_printf_float+0x268>
 80078a6:	0038      	movs	r0, r7
 80078a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078ae:	47b0      	blx	r6
 80078b0:	2500      	movs	r5, #0
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d100      	bne.n	80078b8 <_printf_float+0x260>
 80078b6:	e72d      	b.n	8007714 <_printf_float+0xbc>
 80078b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078ba:	3b01      	subs	r3, #1
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dc0a      	bgt.n	80078d6 <_printf_float+0x27e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	d500      	bpl.n	80078c8 <_printf_float+0x270>
 80078c6:	e106      	b.n	8007ad6 <_printf_float+0x47e>
 80078c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078ca:	68e0      	ldr	r0, [r4, #12]
 80078cc:	4298      	cmp	r0, r3
 80078ce:	db00      	blt.n	80078d2 <_printf_float+0x27a>
 80078d0:	e722      	b.n	8007718 <_printf_float+0xc0>
 80078d2:	0018      	movs	r0, r3
 80078d4:	e720      	b.n	8007718 <_printf_float+0xc0>
 80078d6:	0022      	movs	r2, r4
 80078d8:	2301      	movs	r3, #1
 80078da:	0038      	movs	r0, r7
 80078dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078de:	321a      	adds	r2, #26
 80078e0:	47b0      	blx	r6
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d100      	bne.n	80078e8 <_printf_float+0x290>
 80078e6:	e715      	b.n	8007714 <_printf_float+0xbc>
 80078e8:	3501      	adds	r5, #1
 80078ea:	e7e5      	b.n	80078b8 <_printf_float+0x260>
 80078ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc38      	bgt.n	8007964 <_printf_float+0x30c>
 80078f2:	2301      	movs	r3, #1
 80078f4:	0038      	movs	r0, r7
 80078f6:	4a1a      	ldr	r2, [pc, #104]	; (8007960 <_printf_float+0x308>)
 80078f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078fa:	47b0      	blx	r6
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d100      	bne.n	8007902 <_printf_float+0x2aa>
 8007900:	e708      	b.n	8007714 <_printf_float+0xbc>
 8007902:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007906:	4313      	orrs	r3, r2
 8007908:	d102      	bne.n	8007910 <_printf_float+0x2b8>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	07db      	lsls	r3, r3, #31
 800790e:	d5d7      	bpl.n	80078c0 <_printf_float+0x268>
 8007910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007912:	0038      	movs	r0, r7
 8007914:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007918:	47b0      	blx	r6
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	d100      	bne.n	8007920 <_printf_float+0x2c8>
 800791e:	e6f9      	b.n	8007714 <_printf_float+0xbc>
 8007920:	2300      	movs	r3, #0
 8007922:	930a      	str	r3, [sp, #40]	; 0x28
 8007924:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007928:	425b      	negs	r3, r3
 800792a:	4293      	cmp	r3, r2
 800792c:	dc01      	bgt.n	8007932 <_printf_float+0x2da>
 800792e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007930:	e797      	b.n	8007862 <_printf_float+0x20a>
 8007932:	0022      	movs	r2, r4
 8007934:	2301      	movs	r3, #1
 8007936:	0038      	movs	r0, r7
 8007938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800793a:	321a      	adds	r2, #26
 800793c:	47b0      	blx	r6
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d100      	bne.n	8007944 <_printf_float+0x2ec>
 8007942:	e6e7      	b.n	8007714 <_printf_float+0xbc>
 8007944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007946:	3301      	adds	r3, #1
 8007948:	e7eb      	b.n	8007922 <_printf_float+0x2ca>
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	7fefffff 	.word	0x7fefffff
 8007950:	0800a568 	.word	0x0800a568
 8007954:	0800a56c 	.word	0x0800a56c
 8007958:	0800a570 	.word	0x0800a570
 800795c:	0800a574 	.word	0x0800a574
 8007960:	0800a578 	.word	0x0800a578
 8007964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007968:	920a      	str	r2, [sp, #40]	; 0x28
 800796a:	429a      	cmp	r2, r3
 800796c:	dd00      	ble.n	8007970 <_printf_float+0x318>
 800796e:	930a      	str	r3, [sp, #40]	; 0x28
 8007970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	dc3c      	bgt.n	80079f0 <_printf_float+0x398>
 8007976:	2300      	movs	r3, #0
 8007978:	930d      	str	r3, [sp, #52]	; 0x34
 800797a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797c:	43db      	mvns	r3, r3
 800797e:	17db      	asrs	r3, r3, #31
 8007980:	930f      	str	r3, [sp, #60]	; 0x3c
 8007982:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007984:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007986:	930b      	str	r3, [sp, #44]	; 0x2c
 8007988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798a:	4013      	ands	r3, r2
 800798c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007992:	4293      	cmp	r3, r2
 8007994:	dc34      	bgt.n	8007a00 <_printf_float+0x3a8>
 8007996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800799a:	4293      	cmp	r3, r2
 800799c:	db3d      	blt.n	8007a1a <_printf_float+0x3c2>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	07db      	lsls	r3, r3, #31
 80079a2:	d43a      	bmi.n	8007a1a <_printf_float+0x3c2>
 80079a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	1a52      	subs	r2, r2, r1
 80079ae:	920a      	str	r2, [sp, #40]	; 0x28
 80079b0:	429a      	cmp	r2, r3
 80079b2:	dd00      	ble.n	80079b6 <_printf_float+0x35e>
 80079b4:	930a      	str	r3, [sp, #40]	; 0x28
 80079b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	dc36      	bgt.n	8007a2a <_printf_float+0x3d2>
 80079bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079be:	2500      	movs	r5, #0
 80079c0:	43db      	mvns	r3, r3
 80079c2:	17db      	asrs	r3, r3, #31
 80079c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079cc:	1a9b      	subs	r3, r3, r2
 80079ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d0:	400a      	ands	r2, r1
 80079d2:	1a9b      	subs	r3, r3, r2
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	dc00      	bgt.n	80079da <_printf_float+0x382>
 80079d8:	e772      	b.n	80078c0 <_printf_float+0x268>
 80079da:	0022      	movs	r2, r4
 80079dc:	2301      	movs	r3, #1
 80079de:	0038      	movs	r0, r7
 80079e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079e2:	321a      	adds	r2, #26
 80079e4:	47b0      	blx	r6
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d100      	bne.n	80079ec <_printf_float+0x394>
 80079ea:	e693      	b.n	8007714 <_printf_float+0xbc>
 80079ec:	3501      	adds	r5, #1
 80079ee:	e7ea      	b.n	80079c6 <_printf_float+0x36e>
 80079f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f2:	002a      	movs	r2, r5
 80079f4:	0038      	movs	r0, r7
 80079f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f8:	47b0      	blx	r6
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d1bb      	bne.n	8007976 <_printf_float+0x31e>
 80079fe:	e689      	b.n	8007714 <_printf_float+0xbc>
 8007a00:	0022      	movs	r2, r4
 8007a02:	2301      	movs	r3, #1
 8007a04:	0038      	movs	r0, r7
 8007a06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a08:	321a      	adds	r2, #26
 8007a0a:	47b0      	blx	r6
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d100      	bne.n	8007a12 <_printf_float+0x3ba>
 8007a10:	e680      	b.n	8007714 <_printf_float+0xbc>
 8007a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a14:	3301      	adds	r3, #1
 8007a16:	930d      	str	r3, [sp, #52]	; 0x34
 8007a18:	e7b3      	b.n	8007982 <_printf_float+0x32a>
 8007a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1c:	0038      	movs	r0, r7
 8007a1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a22:	47b0      	blx	r6
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d1bd      	bne.n	80079a4 <_printf_float+0x34c>
 8007a28:	e674      	b.n	8007714 <_printf_float+0xbc>
 8007a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2c:	0038      	movs	r0, r7
 8007a2e:	18ea      	adds	r2, r5, r3
 8007a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a34:	47b0      	blx	r6
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d1c0      	bne.n	80079bc <_printf_float+0x364>
 8007a3a:	e66b      	b.n	8007714 <_printf_float+0xbc>
 8007a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	dc02      	bgt.n	8007a48 <_printf_float+0x3f0>
 8007a42:	2301      	movs	r3, #1
 8007a44:	421a      	tst	r2, r3
 8007a46:	d034      	beq.n	8007ab2 <_printf_float+0x45a>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	002a      	movs	r2, r5
 8007a4c:	0038      	movs	r0, r7
 8007a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a50:	47b0      	blx	r6
 8007a52:	1c43      	adds	r3, r0, #1
 8007a54:	d100      	bne.n	8007a58 <_printf_float+0x400>
 8007a56:	e65d      	b.n	8007714 <_printf_float+0xbc>
 8007a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a5a:	0038      	movs	r0, r7
 8007a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a60:	47b0      	blx	r6
 8007a62:	1c43      	adds	r3, r0, #1
 8007a64:	d100      	bne.n	8007a68 <_printf_float+0x410>
 8007a66:	e655      	b.n	8007714 <_printf_float+0xbc>
 8007a68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007a6a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f7f8 fcec 	bl	800044c <__aeabi_dcmpeq>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d11a      	bne.n	8007aae <_printf_float+0x456>
 8007a78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a7a:	1c6a      	adds	r2, r5, #1
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	0038      	movs	r0, r7
 8007a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a82:	47b0      	blx	r6
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d10e      	bne.n	8007aa6 <_printf_float+0x44e>
 8007a88:	e644      	b.n	8007714 <_printf_float+0xbc>
 8007a8a:	0022      	movs	r2, r4
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	0038      	movs	r0, r7
 8007a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a92:	321a      	adds	r2, #26
 8007a94:	47b0      	blx	r6
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	d100      	bne.n	8007a9c <_printf_float+0x444>
 8007a9a:	e63b      	b.n	8007714 <_printf_float+0xbc>
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	42ab      	cmp	r3, r5
 8007aa4:	dcf1      	bgt.n	8007a8a <_printf_float+0x432>
 8007aa6:	0022      	movs	r2, r4
 8007aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aaa:	3250      	adds	r2, #80	; 0x50
 8007aac:	e6da      	b.n	8007864 <_printf_float+0x20c>
 8007aae:	2500      	movs	r5, #0
 8007ab0:	e7f5      	b.n	8007a9e <_printf_float+0x446>
 8007ab2:	002a      	movs	r2, r5
 8007ab4:	e7e3      	b.n	8007a7e <_printf_float+0x426>
 8007ab6:	0022      	movs	r2, r4
 8007ab8:	2301      	movs	r3, #1
 8007aba:	0038      	movs	r0, r7
 8007abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007abe:	3219      	adds	r2, #25
 8007ac0:	47b0      	blx	r6
 8007ac2:	1c43      	adds	r3, r0, #1
 8007ac4:	d100      	bne.n	8007ac8 <_printf_float+0x470>
 8007ac6:	e625      	b.n	8007714 <_printf_float+0xbc>
 8007ac8:	3501      	adds	r5, #1
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dcf0      	bgt.n	8007ab6 <_printf_float+0x45e>
 8007ad4:	e6f8      	b.n	80078c8 <_printf_float+0x270>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	e7f7      	b.n	8007aca <_printf_float+0x472>
 8007ada:	46c0      	nop			; (mov r8, r8)

08007adc <_printf_common>:
 8007adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ade:	0015      	movs	r5, r2
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	688a      	ldr	r2, [r1, #8]
 8007ae4:	690b      	ldr	r3, [r1, #16]
 8007ae6:	000c      	movs	r4, r1
 8007ae8:	9000      	str	r0, [sp, #0]
 8007aea:	4293      	cmp	r3, r2
 8007aec:	da00      	bge.n	8007af0 <_printf_common+0x14>
 8007aee:	0013      	movs	r3, r2
 8007af0:	0022      	movs	r2, r4
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	3243      	adds	r2, #67	; 0x43
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	2a00      	cmp	r2, #0
 8007afa:	d001      	beq.n	8007b00 <_printf_common+0x24>
 8007afc:	3301      	adds	r3, #1
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	069b      	lsls	r3, r3, #26
 8007b04:	d502      	bpl.n	8007b0c <_printf_common+0x30>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	3302      	adds	r3, #2
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	2306      	movs	r3, #6
 8007b10:	0017      	movs	r7, r2
 8007b12:	401f      	ands	r7, r3
 8007b14:	421a      	tst	r2, r3
 8007b16:	d027      	beq.n	8007b68 <_printf_common+0x8c>
 8007b18:	0023      	movs	r3, r4
 8007b1a:	3343      	adds	r3, #67	; 0x43
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	4193      	sbcs	r3, r2
 8007b22:	6822      	ldr	r2, [r4, #0]
 8007b24:	0692      	lsls	r2, r2, #26
 8007b26:	d430      	bmi.n	8007b8a <_printf_common+0xae>
 8007b28:	0022      	movs	r2, r4
 8007b2a:	9901      	ldr	r1, [sp, #4]
 8007b2c:	9800      	ldr	r0, [sp, #0]
 8007b2e:	9e08      	ldr	r6, [sp, #32]
 8007b30:	3243      	adds	r2, #67	; 0x43
 8007b32:	47b0      	blx	r6
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d025      	beq.n	8007b84 <_printf_common+0xa8>
 8007b38:	2306      	movs	r3, #6
 8007b3a:	6820      	ldr	r0, [r4, #0]
 8007b3c:	682a      	ldr	r2, [r5, #0]
 8007b3e:	68e1      	ldr	r1, [r4, #12]
 8007b40:	2500      	movs	r5, #0
 8007b42:	4003      	ands	r3, r0
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d103      	bne.n	8007b50 <_printf_common+0x74>
 8007b48:	1a8d      	subs	r5, r1, r2
 8007b4a:	43eb      	mvns	r3, r5
 8007b4c:	17db      	asrs	r3, r3, #31
 8007b4e:	401d      	ands	r5, r3
 8007b50:	68a3      	ldr	r3, [r4, #8]
 8007b52:	6922      	ldr	r2, [r4, #16]
 8007b54:	4293      	cmp	r3, r2
 8007b56:	dd01      	ble.n	8007b5c <_printf_common+0x80>
 8007b58:	1a9b      	subs	r3, r3, r2
 8007b5a:	18ed      	adds	r5, r5, r3
 8007b5c:	2700      	movs	r7, #0
 8007b5e:	42bd      	cmp	r5, r7
 8007b60:	d120      	bne.n	8007ba4 <_printf_common+0xc8>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e010      	b.n	8007b88 <_printf_common+0xac>
 8007b66:	3701      	adds	r7, #1
 8007b68:	68e3      	ldr	r3, [r4, #12]
 8007b6a:	682a      	ldr	r2, [r5, #0]
 8007b6c:	1a9b      	subs	r3, r3, r2
 8007b6e:	42bb      	cmp	r3, r7
 8007b70:	ddd2      	ble.n	8007b18 <_printf_common+0x3c>
 8007b72:	0022      	movs	r2, r4
 8007b74:	2301      	movs	r3, #1
 8007b76:	9901      	ldr	r1, [sp, #4]
 8007b78:	9800      	ldr	r0, [sp, #0]
 8007b7a:	9e08      	ldr	r6, [sp, #32]
 8007b7c:	3219      	adds	r2, #25
 8007b7e:	47b0      	blx	r6
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d1f0      	bne.n	8007b66 <_printf_common+0x8a>
 8007b84:	2001      	movs	r0, #1
 8007b86:	4240      	negs	r0, r0
 8007b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b8a:	2030      	movs	r0, #48	; 0x30
 8007b8c:	18e1      	adds	r1, r4, r3
 8007b8e:	3143      	adds	r1, #67	; 0x43
 8007b90:	7008      	strb	r0, [r1, #0]
 8007b92:	0021      	movs	r1, r4
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	3145      	adds	r1, #69	; 0x45
 8007b98:	7809      	ldrb	r1, [r1, #0]
 8007b9a:	18a2      	adds	r2, r4, r2
 8007b9c:	3243      	adds	r2, #67	; 0x43
 8007b9e:	3302      	adds	r3, #2
 8007ba0:	7011      	strb	r1, [r2, #0]
 8007ba2:	e7c1      	b.n	8007b28 <_printf_common+0x4c>
 8007ba4:	0022      	movs	r2, r4
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	9901      	ldr	r1, [sp, #4]
 8007baa:	9800      	ldr	r0, [sp, #0]
 8007bac:	9e08      	ldr	r6, [sp, #32]
 8007bae:	321a      	adds	r2, #26
 8007bb0:	47b0      	blx	r6
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	d0e6      	beq.n	8007b84 <_printf_common+0xa8>
 8007bb6:	3701      	adds	r7, #1
 8007bb8:	e7d1      	b.n	8007b5e <_printf_common+0x82>
	...

08007bbc <_printf_i>:
 8007bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bbe:	b08b      	sub	sp, #44	; 0x2c
 8007bc0:	9206      	str	r2, [sp, #24]
 8007bc2:	000a      	movs	r2, r1
 8007bc4:	3243      	adds	r2, #67	; 0x43
 8007bc6:	9307      	str	r3, [sp, #28]
 8007bc8:	9005      	str	r0, [sp, #20]
 8007bca:	9204      	str	r2, [sp, #16]
 8007bcc:	7e0a      	ldrb	r2, [r1, #24]
 8007bce:	000c      	movs	r4, r1
 8007bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bd2:	2a78      	cmp	r2, #120	; 0x78
 8007bd4:	d807      	bhi.n	8007be6 <_printf_i+0x2a>
 8007bd6:	2a62      	cmp	r2, #98	; 0x62
 8007bd8:	d809      	bhi.n	8007bee <_printf_i+0x32>
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	d100      	bne.n	8007be0 <_printf_i+0x24>
 8007bde:	e0c1      	b.n	8007d64 <_printf_i+0x1a8>
 8007be0:	2a58      	cmp	r2, #88	; 0x58
 8007be2:	d100      	bne.n	8007be6 <_printf_i+0x2a>
 8007be4:	e08c      	b.n	8007d00 <_printf_i+0x144>
 8007be6:	0026      	movs	r6, r4
 8007be8:	3642      	adds	r6, #66	; 0x42
 8007bea:	7032      	strb	r2, [r6, #0]
 8007bec:	e022      	b.n	8007c34 <_printf_i+0x78>
 8007bee:	0010      	movs	r0, r2
 8007bf0:	3863      	subs	r0, #99	; 0x63
 8007bf2:	2815      	cmp	r0, #21
 8007bf4:	d8f7      	bhi.n	8007be6 <_printf_i+0x2a>
 8007bf6:	f7f8 fa99 	bl	800012c <__gnu_thumb1_case_shi>
 8007bfa:	0016      	.short	0x0016
 8007bfc:	fff6001f 	.word	0xfff6001f
 8007c00:	fff6fff6 	.word	0xfff6fff6
 8007c04:	001ffff6 	.word	0x001ffff6
 8007c08:	fff6fff6 	.word	0xfff6fff6
 8007c0c:	fff6fff6 	.word	0xfff6fff6
 8007c10:	003600a8 	.word	0x003600a8
 8007c14:	fff6009a 	.word	0xfff6009a
 8007c18:	00b9fff6 	.word	0x00b9fff6
 8007c1c:	0036fff6 	.word	0x0036fff6
 8007c20:	fff6fff6 	.word	0xfff6fff6
 8007c24:	009e      	.short	0x009e
 8007c26:	0026      	movs	r6, r4
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	3642      	adds	r6, #66	; 0x42
 8007c2c:	1d11      	adds	r1, r2, #4
 8007c2e:	6019      	str	r1, [r3, #0]
 8007c30:	6813      	ldr	r3, [r2, #0]
 8007c32:	7033      	strb	r3, [r6, #0]
 8007c34:	2301      	movs	r3, #1
 8007c36:	e0a7      	b.n	8007d88 <_printf_i+0x1cc>
 8007c38:	6808      	ldr	r0, [r1, #0]
 8007c3a:	6819      	ldr	r1, [r3, #0]
 8007c3c:	1d0a      	adds	r2, r1, #4
 8007c3e:	0605      	lsls	r5, r0, #24
 8007c40:	d50b      	bpl.n	8007c5a <_printf_i+0x9e>
 8007c42:	680d      	ldr	r5, [r1, #0]
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	da03      	bge.n	8007c52 <_printf_i+0x96>
 8007c4a:	232d      	movs	r3, #45	; 0x2d
 8007c4c:	9a04      	ldr	r2, [sp, #16]
 8007c4e:	426d      	negs	r5, r5
 8007c50:	7013      	strb	r3, [r2, #0]
 8007c52:	4b61      	ldr	r3, [pc, #388]	; (8007dd8 <_printf_i+0x21c>)
 8007c54:	270a      	movs	r7, #10
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	e01b      	b.n	8007c92 <_printf_i+0xd6>
 8007c5a:	680d      	ldr	r5, [r1, #0]
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	0641      	lsls	r1, r0, #25
 8007c60:	d5f1      	bpl.n	8007c46 <_printf_i+0x8a>
 8007c62:	b22d      	sxth	r5, r5
 8007c64:	e7ef      	b.n	8007c46 <_printf_i+0x8a>
 8007c66:	680d      	ldr	r5, [r1, #0]
 8007c68:	6819      	ldr	r1, [r3, #0]
 8007c6a:	1d08      	adds	r0, r1, #4
 8007c6c:	6018      	str	r0, [r3, #0]
 8007c6e:	062e      	lsls	r6, r5, #24
 8007c70:	d501      	bpl.n	8007c76 <_printf_i+0xba>
 8007c72:	680d      	ldr	r5, [r1, #0]
 8007c74:	e003      	b.n	8007c7e <_printf_i+0xc2>
 8007c76:	066d      	lsls	r5, r5, #25
 8007c78:	d5fb      	bpl.n	8007c72 <_printf_i+0xb6>
 8007c7a:	680d      	ldr	r5, [r1, #0]
 8007c7c:	b2ad      	uxth	r5, r5
 8007c7e:	4b56      	ldr	r3, [pc, #344]	; (8007dd8 <_printf_i+0x21c>)
 8007c80:	2708      	movs	r7, #8
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	2a6f      	cmp	r2, #111	; 0x6f
 8007c86:	d000      	beq.n	8007c8a <_printf_i+0xce>
 8007c88:	3702      	adds	r7, #2
 8007c8a:	0023      	movs	r3, r4
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	3343      	adds	r3, #67	; 0x43
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	db03      	blt.n	8007ca2 <_printf_i+0xe6>
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	6821      	ldr	r1, [r4, #0]
 8007c9e:	4391      	bics	r1, r2
 8007ca0:	6021      	str	r1, [r4, #0]
 8007ca2:	2d00      	cmp	r5, #0
 8007ca4:	d102      	bne.n	8007cac <_printf_i+0xf0>
 8007ca6:	9e04      	ldr	r6, [sp, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <_printf_i+0x10a>
 8007cac:	9e04      	ldr	r6, [sp, #16]
 8007cae:	0028      	movs	r0, r5
 8007cb0:	0039      	movs	r1, r7
 8007cb2:	f7f8 facb 	bl	800024c <__aeabi_uidivmod>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	3e01      	subs	r6, #1
 8007cba:	5c5b      	ldrb	r3, [r3, r1]
 8007cbc:	7033      	strb	r3, [r6, #0]
 8007cbe:	002b      	movs	r3, r5
 8007cc0:	0005      	movs	r5, r0
 8007cc2:	429f      	cmp	r7, r3
 8007cc4:	d9f3      	bls.n	8007cae <_printf_i+0xf2>
 8007cc6:	2f08      	cmp	r7, #8
 8007cc8:	d109      	bne.n	8007cde <_printf_i+0x122>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	07db      	lsls	r3, r3, #31
 8007cce:	d506      	bpl.n	8007cde <_printf_i+0x122>
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	6922      	ldr	r2, [r4, #16]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	dc02      	bgt.n	8007cde <_printf_i+0x122>
 8007cd8:	2330      	movs	r3, #48	; 0x30
 8007cda:	3e01      	subs	r6, #1
 8007cdc:	7033      	strb	r3, [r6, #0]
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	1b9b      	subs	r3, r3, r6
 8007ce2:	6123      	str	r3, [r4, #16]
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	0021      	movs	r1, r4
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	9805      	ldr	r0, [sp, #20]
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	aa09      	add	r2, sp, #36	; 0x24
 8007cf0:	f7ff fef4 	bl	8007adc <_printf_common>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d14c      	bne.n	8007d92 <_printf_i+0x1d6>
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	4240      	negs	r0, r0
 8007cfc:	b00b      	add	sp, #44	; 0x2c
 8007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d00:	3145      	adds	r1, #69	; 0x45
 8007d02:	700a      	strb	r2, [r1, #0]
 8007d04:	4a34      	ldr	r2, [pc, #208]	; (8007dd8 <_printf_i+0x21c>)
 8007d06:	9203      	str	r2, [sp, #12]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	ca20      	ldmia	r2!, {r5}
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	0608      	lsls	r0, r1, #24
 8007d12:	d516      	bpl.n	8007d42 <_printf_i+0x186>
 8007d14:	07cb      	lsls	r3, r1, #31
 8007d16:	d502      	bpl.n	8007d1e <_printf_i+0x162>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	4319      	orrs	r1, r3
 8007d1c:	6021      	str	r1, [r4, #0]
 8007d1e:	2710      	movs	r7, #16
 8007d20:	2d00      	cmp	r5, #0
 8007d22:	d1b2      	bne.n	8007c8a <_printf_i+0xce>
 8007d24:	2320      	movs	r3, #32
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	439a      	bics	r2, r3
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	e7ad      	b.n	8007c8a <_printf_i+0xce>
 8007d2e:	2220      	movs	r2, #32
 8007d30:	6809      	ldr	r1, [r1, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	0022      	movs	r2, r4
 8007d38:	2178      	movs	r1, #120	; 0x78
 8007d3a:	3245      	adds	r2, #69	; 0x45
 8007d3c:	7011      	strb	r1, [r2, #0]
 8007d3e:	4a27      	ldr	r2, [pc, #156]	; (8007ddc <_printf_i+0x220>)
 8007d40:	e7e1      	b.n	8007d06 <_printf_i+0x14a>
 8007d42:	0648      	lsls	r0, r1, #25
 8007d44:	d5e6      	bpl.n	8007d14 <_printf_i+0x158>
 8007d46:	b2ad      	uxth	r5, r5
 8007d48:	e7e4      	b.n	8007d14 <_printf_i+0x158>
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	680d      	ldr	r5, [r1, #0]
 8007d4e:	1d10      	adds	r0, r2, #4
 8007d50:	6949      	ldr	r1, [r1, #20]
 8007d52:	6018      	str	r0, [r3, #0]
 8007d54:	6813      	ldr	r3, [r2, #0]
 8007d56:	062e      	lsls	r6, r5, #24
 8007d58:	d501      	bpl.n	8007d5e <_printf_i+0x1a2>
 8007d5a:	6019      	str	r1, [r3, #0]
 8007d5c:	e002      	b.n	8007d64 <_printf_i+0x1a8>
 8007d5e:	066d      	lsls	r5, r5, #25
 8007d60:	d5fb      	bpl.n	8007d5a <_printf_i+0x19e>
 8007d62:	8019      	strh	r1, [r3, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	9e04      	ldr	r6, [sp, #16]
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	e7bb      	b.n	8007ce4 <_printf_i+0x128>
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	1d11      	adds	r1, r2, #4
 8007d70:	6019      	str	r1, [r3, #0]
 8007d72:	6816      	ldr	r6, [r2, #0]
 8007d74:	2100      	movs	r1, #0
 8007d76:	0030      	movs	r0, r6
 8007d78:	6862      	ldr	r2, [r4, #4]
 8007d7a:	f000 ff05 	bl	8008b88 <memchr>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d001      	beq.n	8007d86 <_printf_i+0x1ca>
 8007d82:	1b80      	subs	r0, r0, r6
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9a04      	ldr	r2, [sp, #16]
 8007d8e:	7013      	strb	r3, [r2, #0]
 8007d90:	e7a8      	b.n	8007ce4 <_printf_i+0x128>
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	0032      	movs	r2, r6
 8007d96:	9906      	ldr	r1, [sp, #24]
 8007d98:	9805      	ldr	r0, [sp, #20]
 8007d9a:	9d07      	ldr	r5, [sp, #28]
 8007d9c:	47a8      	blx	r5
 8007d9e:	1c43      	adds	r3, r0, #1
 8007da0:	d0aa      	beq.n	8007cf8 <_printf_i+0x13c>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	079b      	lsls	r3, r3, #30
 8007da6:	d415      	bmi.n	8007dd4 <_printf_i+0x218>
 8007da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007daa:	68e0      	ldr	r0, [r4, #12]
 8007dac:	4298      	cmp	r0, r3
 8007dae:	daa5      	bge.n	8007cfc <_printf_i+0x140>
 8007db0:	0018      	movs	r0, r3
 8007db2:	e7a3      	b.n	8007cfc <_printf_i+0x140>
 8007db4:	0022      	movs	r2, r4
 8007db6:	2301      	movs	r3, #1
 8007db8:	9906      	ldr	r1, [sp, #24]
 8007dba:	9805      	ldr	r0, [sp, #20]
 8007dbc:	9e07      	ldr	r6, [sp, #28]
 8007dbe:	3219      	adds	r2, #25
 8007dc0:	47b0      	blx	r6
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	d098      	beq.n	8007cf8 <_printf_i+0x13c>
 8007dc6:	3501      	adds	r5, #1
 8007dc8:	68e3      	ldr	r3, [r4, #12]
 8007dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	42ab      	cmp	r3, r5
 8007dd0:	dcf0      	bgt.n	8007db4 <_printf_i+0x1f8>
 8007dd2:	e7e9      	b.n	8007da8 <_printf_i+0x1ec>
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	e7f7      	b.n	8007dc8 <_printf_i+0x20c>
 8007dd8:	0800a57a 	.word	0x0800a57a
 8007ddc:	0800a58b 	.word	0x0800a58b

08007de0 <siprintf>:
 8007de0:	b40e      	push	{r1, r2, r3}
 8007de2:	b500      	push	{lr}
 8007de4:	490b      	ldr	r1, [pc, #44]	; (8007e14 <siprintf+0x34>)
 8007de6:	b09c      	sub	sp, #112	; 0x70
 8007de8:	ab1d      	add	r3, sp, #116	; 0x74
 8007dea:	9002      	str	r0, [sp, #8]
 8007dec:	9006      	str	r0, [sp, #24]
 8007dee:	9107      	str	r1, [sp, #28]
 8007df0:	9104      	str	r1, [sp, #16]
 8007df2:	4809      	ldr	r0, [pc, #36]	; (8007e18 <siprintf+0x38>)
 8007df4:	4909      	ldr	r1, [pc, #36]	; (8007e1c <siprintf+0x3c>)
 8007df6:	cb04      	ldmia	r3!, {r2}
 8007df8:	9105      	str	r1, [sp, #20]
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	a902      	add	r1, sp, #8
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	f001 fbda 	bl	80095b8 <_svfiprintf_r>
 8007e04:	2300      	movs	r3, #0
 8007e06:	9a02      	ldr	r2, [sp, #8]
 8007e08:	7013      	strb	r3, [r2, #0]
 8007e0a:	b01c      	add	sp, #112	; 0x70
 8007e0c:	bc08      	pop	{r3}
 8007e0e:	b003      	add	sp, #12
 8007e10:	4718      	bx	r3
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	7fffffff 	.word	0x7fffffff
 8007e18:	2000000c 	.word	0x2000000c
 8007e1c:	ffff0208 	.word	0xffff0208

08007e20 <quorem>:
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	0006      	movs	r6, r0
 8007e24:	690b      	ldr	r3, [r1, #16]
 8007e26:	6932      	ldr	r2, [r6, #16]
 8007e28:	b087      	sub	sp, #28
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	9103      	str	r1, [sp, #12]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	db65      	blt.n	8007efe <quorem+0xde>
 8007e32:	3b01      	subs	r3, #1
 8007e34:	009c      	lsls	r4, r3, #2
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	000b      	movs	r3, r1
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	9305      	str	r3, [sp, #20]
 8007e3e:	191b      	adds	r3, r3, r4
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	0033      	movs	r3, r6
 8007e44:	3314      	adds	r3, #20
 8007e46:	9302      	str	r3, [sp, #8]
 8007e48:	191c      	adds	r4, r3, r4
 8007e4a:	9b04      	ldr	r3, [sp, #16]
 8007e4c:	6827      	ldr	r7, [r4, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	0038      	movs	r0, r7
 8007e52:	1c5d      	adds	r5, r3, #1
 8007e54:	0029      	movs	r1, r5
 8007e56:	9301      	str	r3, [sp, #4]
 8007e58:	f7f8 f972 	bl	8000140 <__udivsi3>
 8007e5c:	9001      	str	r0, [sp, #4]
 8007e5e:	42af      	cmp	r7, r5
 8007e60:	d324      	bcc.n	8007eac <quorem+0x8c>
 8007e62:	2500      	movs	r5, #0
 8007e64:	46ac      	mov	ip, r5
 8007e66:	9802      	ldr	r0, [sp, #8]
 8007e68:	9f05      	ldr	r7, [sp, #20]
 8007e6a:	cf08      	ldmia	r7!, {r3}
 8007e6c:	9a01      	ldr	r2, [sp, #4]
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	4351      	muls	r1, r2
 8007e72:	0c1b      	lsrs	r3, r3, #16
 8007e74:	4353      	muls	r3, r2
 8007e76:	1949      	adds	r1, r1, r5
 8007e78:	0c0a      	lsrs	r2, r1, #16
 8007e7a:	189b      	adds	r3, r3, r2
 8007e7c:	6802      	ldr	r2, [r0, #0]
 8007e7e:	b289      	uxth	r1, r1
 8007e80:	b292      	uxth	r2, r2
 8007e82:	4462      	add	r2, ip
 8007e84:	1a52      	subs	r2, r2, r1
 8007e86:	6801      	ldr	r1, [r0, #0]
 8007e88:	0c1d      	lsrs	r5, r3, #16
 8007e8a:	0c09      	lsrs	r1, r1, #16
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	1acb      	subs	r3, r1, r3
 8007e90:	1411      	asrs	r1, r2, #16
 8007e92:	185b      	adds	r3, r3, r1
 8007e94:	1419      	asrs	r1, r3, #16
 8007e96:	b292      	uxth	r2, r2
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	9b04      	ldr	r3, [sp, #16]
 8007e9e:	468c      	mov	ip, r1
 8007ea0:	c004      	stmia	r0!, {r2}
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	d2e1      	bcs.n	8007e6a <quorem+0x4a>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d030      	beq.n	8007f0e <quorem+0xee>
 8007eac:	0030      	movs	r0, r6
 8007eae:	9903      	ldr	r1, [sp, #12]
 8007eb0:	f001 f8fa 	bl	80090a8 <__mcmp>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	db21      	blt.n	8007efc <quorem+0xdc>
 8007eb8:	0030      	movs	r0, r6
 8007eba:	2400      	movs	r4, #0
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	9903      	ldr	r1, [sp, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	3014      	adds	r0, #20
 8007ec6:	3114      	adds	r1, #20
 8007ec8:	6803      	ldr	r3, [r0, #0]
 8007eca:	c920      	ldmia	r1!, {r5}
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	1914      	adds	r4, r2, r4
 8007ed0:	b2aa      	uxth	r2, r5
 8007ed2:	1aa2      	subs	r2, r4, r2
 8007ed4:	0c1b      	lsrs	r3, r3, #16
 8007ed6:	0c2d      	lsrs	r5, r5, #16
 8007ed8:	1414      	asrs	r4, r2, #16
 8007eda:	1b5b      	subs	r3, r3, r5
 8007edc:	191b      	adds	r3, r3, r4
 8007ede:	141c      	asrs	r4, r3, #16
 8007ee0:	b292      	uxth	r2, r2
 8007ee2:	041b      	lsls	r3, r3, #16
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	c008      	stmia	r0!, {r3}
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	428b      	cmp	r3, r1
 8007eec:	d2ec      	bcs.n	8007ec8 <quorem+0xa8>
 8007eee:	9b00      	ldr	r3, [sp, #0]
 8007ef0:	9a02      	ldr	r2, [sp, #8]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	18d3      	adds	r3, r2, r3
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	d015      	beq.n	8007f28 <quorem+0x108>
 8007efc:	9801      	ldr	r0, [sp, #4]
 8007efe:	b007      	add	sp, #28
 8007f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <quorem+0xf6>
 8007f08:	9b00      	ldr	r3, [sp, #0]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	9b02      	ldr	r3, [sp, #8]
 8007f10:	3c04      	subs	r4, #4
 8007f12:	42a3      	cmp	r3, r4
 8007f14:	d3f5      	bcc.n	8007f02 <quorem+0xe2>
 8007f16:	9b00      	ldr	r3, [sp, #0]
 8007f18:	6133      	str	r3, [r6, #16]
 8007f1a:	e7c7      	b.n	8007eac <quorem+0x8c>
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	2a00      	cmp	r2, #0
 8007f20:	d106      	bne.n	8007f30 <quorem+0x110>
 8007f22:	9a00      	ldr	r2, [sp, #0]
 8007f24:	3a01      	subs	r2, #1
 8007f26:	9200      	str	r2, [sp, #0]
 8007f28:	9a02      	ldr	r2, [sp, #8]
 8007f2a:	3b04      	subs	r3, #4
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d3f5      	bcc.n	8007f1c <quorem+0xfc>
 8007f30:	9b00      	ldr	r3, [sp, #0]
 8007f32:	6133      	str	r3, [r6, #16]
 8007f34:	e7e2      	b.n	8007efc <quorem+0xdc>
	...

08007f38 <_dtoa_r>:
 8007f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3a:	b09d      	sub	sp, #116	; 0x74
 8007f3c:	9202      	str	r2, [sp, #8]
 8007f3e:	9303      	str	r3, [sp, #12]
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	9c03      	ldr	r4, [sp, #12]
 8007f44:	9308      	str	r3, [sp, #32]
 8007f46:	9409      	str	r4, [sp, #36]	; 0x24
 8007f48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f4a:	0007      	movs	r7, r0
 8007f4c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	d10e      	bne.n	8007f70 <_dtoa_r+0x38>
 8007f52:	2010      	movs	r0, #16
 8007f54:	f000 fe0e 	bl	8008b74 <malloc>
 8007f58:	1e02      	subs	r2, r0, #0
 8007f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8007f5c:	d104      	bne.n	8007f68 <_dtoa_r+0x30>
 8007f5e:	21ea      	movs	r1, #234	; 0xea
 8007f60:	4bc7      	ldr	r3, [pc, #796]	; (8008280 <_dtoa_r+0x348>)
 8007f62:	48c8      	ldr	r0, [pc, #800]	; (8008284 <_dtoa_r+0x34c>)
 8007f64:	f001 fc3a 	bl	80097dc <__assert_func>
 8007f68:	6044      	str	r4, [r0, #4]
 8007f6a:	6084      	str	r4, [r0, #8]
 8007f6c:	6004      	str	r4, [r0, #0]
 8007f6e:	60c4      	str	r4, [r0, #12]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	2900      	cmp	r1, #0
 8007f76:	d00a      	beq.n	8007f8e <_dtoa_r+0x56>
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4093      	lsls	r3, r2
 8007f7e:	604a      	str	r2, [r1, #4]
 8007f80:	608b      	str	r3, [r1, #8]
 8007f82:	0038      	movs	r0, r7
 8007f84:	f000 fe50 	bl	8008c28 <_Bfree>
 8007f88:	2200      	movs	r2, #0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da20      	bge.n	8007fd6 <_dtoa_r+0x9e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007fa2:	4bb9      	ldr	r3, [pc, #740]	; (8008288 <_dtoa_r+0x350>)
 8007fa4:	4ab8      	ldr	r2, [pc, #736]	; (8008288 <_dtoa_r+0x350>)
 8007fa6:	402b      	ands	r3, r5
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d117      	bne.n	8007fdc <_dtoa_r+0xa4>
 8007fac:	4bb7      	ldr	r3, [pc, #732]	; (800828c <_dtoa_r+0x354>)
 8007fae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fb0:	0328      	lsls	r0, r5, #12
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	0b00      	lsrs	r0, r0, #12
 8007fb8:	4318      	orrs	r0, r3
 8007fba:	d101      	bne.n	8007fc0 <_dtoa_r+0x88>
 8007fbc:	f000 fdbf 	bl	8008b3e <_dtoa_r+0xc06>
 8007fc0:	48b3      	ldr	r0, [pc, #716]	; (8008290 <_dtoa_r+0x358>)
 8007fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fc4:	9006      	str	r0, [sp, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <_dtoa_r+0x98>
 8007fca:	4bb2      	ldr	r3, [pc, #712]	; (8008294 <_dtoa_r+0x35c>)
 8007fcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	9806      	ldr	r0, [sp, #24]
 8007fd2:	b01d      	add	sp, #116	; 0x74
 8007fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	e7e1      	b.n	8007fa0 <_dtoa_r+0x68>
 8007fdc:	9b08      	ldr	r3, [sp, #32]
 8007fde:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007fe0:	9312      	str	r3, [sp, #72]	; 0x48
 8007fe2:	9413      	str	r4, [sp, #76]	; 0x4c
 8007fe4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007fe6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2300      	movs	r3, #0
 8007fec:	f7f8 fa2e 	bl	800044c <__aeabi_dcmpeq>
 8007ff0:	1e04      	subs	r4, r0, #0
 8007ff2:	d009      	beq.n	8008008 <_dtoa_r+0xd0>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4ba7      	ldr	r3, [pc, #668]	; (8008298 <_dtoa_r+0x360>)
 8007ffc:	9306      	str	r3, [sp, #24]
 8007ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0e5      	beq.n	8007fd0 <_dtoa_r+0x98>
 8008004:	4ba5      	ldr	r3, [pc, #660]	; (800829c <_dtoa_r+0x364>)
 8008006:	e7e1      	b.n	8007fcc <_dtoa_r+0x94>
 8008008:	ab1a      	add	r3, sp, #104	; 0x68
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	ab1b      	add	r3, sp, #108	; 0x6c
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	0038      	movs	r0, r7
 8008012:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008016:	f001 f8fb 	bl	8009210 <__d2b>
 800801a:	006e      	lsls	r6, r5, #1
 800801c:	9005      	str	r0, [sp, #20]
 800801e:	0d76      	lsrs	r6, r6, #21
 8008020:	d100      	bne.n	8008024 <_dtoa_r+0xec>
 8008022:	e07c      	b.n	800811e <_dtoa_r+0x1e6>
 8008024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008026:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800802a:	4a9d      	ldr	r2, [pc, #628]	; (80082a0 <_dtoa_r+0x368>)
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	0b1b      	lsrs	r3, r3, #12
 8008030:	431a      	orrs	r2, r3
 8008032:	0011      	movs	r1, r2
 8008034:	4b9b      	ldr	r3, [pc, #620]	; (80082a4 <_dtoa_r+0x36c>)
 8008036:	9418      	str	r4, [sp, #96]	; 0x60
 8008038:	18f6      	adds	r6, r6, r3
 800803a:	2200      	movs	r2, #0
 800803c:	4b9a      	ldr	r3, [pc, #616]	; (80082a8 <_dtoa_r+0x370>)
 800803e:	f7fa f909 	bl	8002254 <__aeabi_dsub>
 8008042:	4a9a      	ldr	r2, [pc, #616]	; (80082ac <_dtoa_r+0x374>)
 8008044:	4b9a      	ldr	r3, [pc, #616]	; (80082b0 <_dtoa_r+0x378>)
 8008046:	f7f9 fe99 	bl	8001d7c <__aeabi_dmul>
 800804a:	4a9a      	ldr	r2, [pc, #616]	; (80082b4 <_dtoa_r+0x37c>)
 800804c:	4b9a      	ldr	r3, [pc, #616]	; (80082b8 <_dtoa_r+0x380>)
 800804e:	f7f8 ff57 	bl	8000f00 <__aeabi_dadd>
 8008052:	0004      	movs	r4, r0
 8008054:	0030      	movs	r0, r6
 8008056:	000d      	movs	r5, r1
 8008058:	f7fa fce2 	bl	8002a20 <__aeabi_i2d>
 800805c:	4a97      	ldr	r2, [pc, #604]	; (80082bc <_dtoa_r+0x384>)
 800805e:	4b98      	ldr	r3, [pc, #608]	; (80082c0 <_dtoa_r+0x388>)
 8008060:	f7f9 fe8c 	bl	8001d7c <__aeabi_dmul>
 8008064:	0002      	movs	r2, r0
 8008066:	000b      	movs	r3, r1
 8008068:	0020      	movs	r0, r4
 800806a:	0029      	movs	r1, r5
 800806c:	f7f8 ff48 	bl	8000f00 <__aeabi_dadd>
 8008070:	0004      	movs	r4, r0
 8008072:	000d      	movs	r5, r1
 8008074:	f7fa fc9e 	bl	80029b4 <__aeabi_d2iz>
 8008078:	2200      	movs	r2, #0
 800807a:	9002      	str	r0, [sp, #8]
 800807c:	2300      	movs	r3, #0
 800807e:	0020      	movs	r0, r4
 8008080:	0029      	movs	r1, r5
 8008082:	f7f8 f9e9 	bl	8000458 <__aeabi_dcmplt>
 8008086:	2800      	cmp	r0, #0
 8008088:	d00b      	beq.n	80080a2 <_dtoa_r+0x16a>
 800808a:	9802      	ldr	r0, [sp, #8]
 800808c:	f7fa fcc8 	bl	8002a20 <__aeabi_i2d>
 8008090:	002b      	movs	r3, r5
 8008092:	0022      	movs	r2, r4
 8008094:	f7f8 f9da 	bl	800044c <__aeabi_dcmpeq>
 8008098:	4243      	negs	r3, r0
 800809a:	4158      	adcs	r0, r3
 800809c:	9b02      	ldr	r3, [sp, #8]
 800809e:	1a1b      	subs	r3, r3, r0
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	2301      	movs	r3, #1
 80080a4:	9316      	str	r3, [sp, #88]	; 0x58
 80080a6:	9b02      	ldr	r3, [sp, #8]
 80080a8:	2b16      	cmp	r3, #22
 80080aa:	d80f      	bhi.n	80080cc <_dtoa_r+0x194>
 80080ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80080ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080b0:	00da      	lsls	r2, r3, #3
 80080b2:	4b84      	ldr	r3, [pc, #528]	; (80082c4 <_dtoa_r+0x38c>)
 80080b4:	189b      	adds	r3, r3, r2
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f7f8 f9cd 	bl	8000458 <__aeabi_dcmplt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d049      	beq.n	8008156 <_dtoa_r+0x21e>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	9302      	str	r3, [sp, #8]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9316      	str	r3, [sp, #88]	; 0x58
 80080cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80080ce:	1b9e      	subs	r6, r3, r6
 80080d0:	2300      	movs	r3, #0
 80080d2:	930a      	str	r3, [sp, #40]	; 0x28
 80080d4:	0033      	movs	r3, r6
 80080d6:	3b01      	subs	r3, #1
 80080d8:	930d      	str	r3, [sp, #52]	; 0x34
 80080da:	d504      	bpl.n	80080e6 <_dtoa_r+0x1ae>
 80080dc:	2301      	movs	r3, #1
 80080de:	1b9b      	subs	r3, r3, r6
 80080e0:	930a      	str	r3, [sp, #40]	; 0x28
 80080e2:	2300      	movs	r3, #0
 80080e4:	930d      	str	r3, [sp, #52]	; 0x34
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	db36      	blt.n	800815a <_dtoa_r+0x222>
 80080ec:	9a02      	ldr	r2, [sp, #8]
 80080ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080f0:	4694      	mov	ip, r2
 80080f2:	4463      	add	r3, ip
 80080f4:	930d      	str	r3, [sp, #52]	; 0x34
 80080f6:	2300      	movs	r3, #0
 80080f8:	9215      	str	r2, [sp, #84]	; 0x54
 80080fa:	930e      	str	r3, [sp, #56]	; 0x38
 80080fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080fe:	2401      	movs	r4, #1
 8008100:	2b09      	cmp	r3, #9
 8008102:	d864      	bhi.n	80081ce <_dtoa_r+0x296>
 8008104:	2b05      	cmp	r3, #5
 8008106:	dd02      	ble.n	800810e <_dtoa_r+0x1d6>
 8008108:	2400      	movs	r4, #0
 800810a:	3b04      	subs	r3, #4
 800810c:	9322      	str	r3, [sp, #136]	; 0x88
 800810e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008110:	1e98      	subs	r0, r3, #2
 8008112:	2803      	cmp	r0, #3
 8008114:	d864      	bhi.n	80081e0 <_dtoa_r+0x2a8>
 8008116:	f7f7 ffff 	bl	8000118 <__gnu_thumb1_case_uqi>
 800811a:	3829      	.short	0x3829
 800811c:	5836      	.short	0x5836
 800811e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008120:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008122:	189e      	adds	r6, r3, r2
 8008124:	4b68      	ldr	r3, [pc, #416]	; (80082c8 <_dtoa_r+0x390>)
 8008126:	18f2      	adds	r2, r6, r3
 8008128:	2a20      	cmp	r2, #32
 800812a:	dd0f      	ble.n	800814c <_dtoa_r+0x214>
 800812c:	2340      	movs	r3, #64	; 0x40
 800812e:	1a9b      	subs	r3, r3, r2
 8008130:	409d      	lsls	r5, r3
 8008132:	4b66      	ldr	r3, [pc, #408]	; (80082cc <_dtoa_r+0x394>)
 8008134:	9802      	ldr	r0, [sp, #8]
 8008136:	18f3      	adds	r3, r6, r3
 8008138:	40d8      	lsrs	r0, r3
 800813a:	4328      	orrs	r0, r5
 800813c:	f7fa fca0 	bl	8002a80 <__aeabi_ui2d>
 8008140:	2301      	movs	r3, #1
 8008142:	4c63      	ldr	r4, [pc, #396]	; (80082d0 <_dtoa_r+0x398>)
 8008144:	3e01      	subs	r6, #1
 8008146:	1909      	adds	r1, r1, r4
 8008148:	9318      	str	r3, [sp, #96]	; 0x60
 800814a:	e776      	b.n	800803a <_dtoa_r+0x102>
 800814c:	2320      	movs	r3, #32
 800814e:	9802      	ldr	r0, [sp, #8]
 8008150:	1a9b      	subs	r3, r3, r2
 8008152:	4098      	lsls	r0, r3
 8008154:	e7f2      	b.n	800813c <_dtoa_r+0x204>
 8008156:	9016      	str	r0, [sp, #88]	; 0x58
 8008158:	e7b8      	b.n	80080cc <_dtoa_r+0x194>
 800815a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815c:	9a02      	ldr	r2, [sp, #8]
 800815e:	1a9b      	subs	r3, r3, r2
 8008160:	930a      	str	r3, [sp, #40]	; 0x28
 8008162:	4253      	negs	r3, r2
 8008164:	930e      	str	r3, [sp, #56]	; 0x38
 8008166:	2300      	movs	r3, #0
 8008168:	9315      	str	r3, [sp, #84]	; 0x54
 800816a:	e7c7      	b.n	80080fc <_dtoa_r+0x1c4>
 800816c:	2300      	movs	r3, #0
 800816e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008172:	930c      	str	r3, [sp, #48]	; 0x30
 8008174:	9307      	str	r3, [sp, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dc13      	bgt.n	80081a2 <_dtoa_r+0x26a>
 800817a:	2301      	movs	r3, #1
 800817c:	001a      	movs	r2, r3
 800817e:	930c      	str	r3, [sp, #48]	; 0x30
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	9223      	str	r2, [sp, #140]	; 0x8c
 8008184:	e00d      	b.n	80081a2 <_dtoa_r+0x26a>
 8008186:	2301      	movs	r3, #1
 8008188:	e7f1      	b.n	800816e <_dtoa_r+0x236>
 800818a:	2300      	movs	r3, #0
 800818c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800818e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008190:	4694      	mov	ip, r2
 8008192:	9b02      	ldr	r3, [sp, #8]
 8008194:	4463      	add	r3, ip
 8008196:	930c      	str	r3, [sp, #48]	; 0x30
 8008198:	3301      	adds	r3, #1
 800819a:	9307      	str	r3, [sp, #28]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dc00      	bgt.n	80081a2 <_dtoa_r+0x26a>
 80081a0:	2301      	movs	r3, #1
 80081a2:	2200      	movs	r2, #0
 80081a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081a6:	6042      	str	r2, [r0, #4]
 80081a8:	3204      	adds	r2, #4
 80081aa:	0015      	movs	r5, r2
 80081ac:	3514      	adds	r5, #20
 80081ae:	6841      	ldr	r1, [r0, #4]
 80081b0:	429d      	cmp	r5, r3
 80081b2:	d919      	bls.n	80081e8 <_dtoa_r+0x2b0>
 80081b4:	0038      	movs	r0, r7
 80081b6:	f000 fcf3 	bl	8008ba0 <_Balloc>
 80081ba:	9006      	str	r0, [sp, #24]
 80081bc:	2800      	cmp	r0, #0
 80081be:	d117      	bne.n	80081f0 <_dtoa_r+0x2b8>
 80081c0:	21d5      	movs	r1, #213	; 0xd5
 80081c2:	0002      	movs	r2, r0
 80081c4:	4b43      	ldr	r3, [pc, #268]	; (80082d4 <_dtoa_r+0x39c>)
 80081c6:	0049      	lsls	r1, r1, #1
 80081c8:	e6cb      	b.n	8007f62 <_dtoa_r+0x2a>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7de      	b.n	800818c <_dtoa_r+0x254>
 80081ce:	2300      	movs	r3, #0
 80081d0:	940f      	str	r4, [sp, #60]	; 0x3c
 80081d2:	9322      	str	r3, [sp, #136]	; 0x88
 80081d4:	3b01      	subs	r3, #1
 80081d6:	930c      	str	r3, [sp, #48]	; 0x30
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	2200      	movs	r2, #0
 80081dc:	3313      	adds	r3, #19
 80081de:	e7d0      	b.n	8008182 <_dtoa_r+0x24a>
 80081e0:	2301      	movs	r3, #1
 80081e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e4:	3b02      	subs	r3, #2
 80081e6:	e7f6      	b.n	80081d6 <_dtoa_r+0x29e>
 80081e8:	3101      	adds	r1, #1
 80081ea:	6041      	str	r1, [r0, #4]
 80081ec:	0052      	lsls	r2, r2, #1
 80081ee:	e7dc      	b.n	80081aa <_dtoa_r+0x272>
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	9a06      	ldr	r2, [sp, #24]
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	2b0e      	cmp	r3, #14
 80081fa:	d900      	bls.n	80081fe <_dtoa_r+0x2c6>
 80081fc:	e0eb      	b.n	80083d6 <_dtoa_r+0x49e>
 80081fe:	2c00      	cmp	r4, #0
 8008200:	d100      	bne.n	8008204 <_dtoa_r+0x2cc>
 8008202:	e0e8      	b.n	80083d6 <_dtoa_r+0x49e>
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dd68      	ble.n	80082dc <_dtoa_r+0x3a4>
 800820a:	001a      	movs	r2, r3
 800820c:	210f      	movs	r1, #15
 800820e:	4b2d      	ldr	r3, [pc, #180]	; (80082c4 <_dtoa_r+0x38c>)
 8008210:	400a      	ands	r2, r1
 8008212:	00d2      	lsls	r2, r2, #3
 8008214:	189b      	adds	r3, r3, r2
 8008216:	681d      	ldr	r5, [r3, #0]
 8008218:	685e      	ldr	r6, [r3, #4]
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	111c      	asrs	r4, r3, #4
 800821e:	2302      	movs	r3, #2
 8008220:	9310      	str	r3, [sp, #64]	; 0x40
 8008222:	9b02      	ldr	r3, [sp, #8]
 8008224:	05db      	lsls	r3, r3, #23
 8008226:	d50b      	bpl.n	8008240 <_dtoa_r+0x308>
 8008228:	4b2b      	ldr	r3, [pc, #172]	; (80082d8 <_dtoa_r+0x3a0>)
 800822a:	400c      	ands	r4, r1
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008232:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008234:	f7f9 f9a0 	bl	8001578 <__aeabi_ddiv>
 8008238:	2303      	movs	r3, #3
 800823a:	9008      	str	r0, [sp, #32]
 800823c:	9109      	str	r1, [sp, #36]	; 0x24
 800823e:	9310      	str	r3, [sp, #64]	; 0x40
 8008240:	4b25      	ldr	r3, [pc, #148]	; (80082d8 <_dtoa_r+0x3a0>)
 8008242:	9314      	str	r3, [sp, #80]	; 0x50
 8008244:	2c00      	cmp	r4, #0
 8008246:	d108      	bne.n	800825a <_dtoa_r+0x322>
 8008248:	9808      	ldr	r0, [sp, #32]
 800824a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800824c:	002a      	movs	r2, r5
 800824e:	0033      	movs	r3, r6
 8008250:	f7f9 f992 	bl	8001578 <__aeabi_ddiv>
 8008254:	9008      	str	r0, [sp, #32]
 8008256:	9109      	str	r1, [sp, #36]	; 0x24
 8008258:	e05c      	b.n	8008314 <_dtoa_r+0x3dc>
 800825a:	2301      	movs	r3, #1
 800825c:	421c      	tst	r4, r3
 800825e:	d00b      	beq.n	8008278 <_dtoa_r+0x340>
 8008260:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008262:	0028      	movs	r0, r5
 8008264:	3301      	adds	r3, #1
 8008266:	9310      	str	r3, [sp, #64]	; 0x40
 8008268:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800826a:	0031      	movs	r1, r6
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	f7f9 fd84 	bl	8001d7c <__aeabi_dmul>
 8008274:	0005      	movs	r5, r0
 8008276:	000e      	movs	r6, r1
 8008278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800827a:	1064      	asrs	r4, r4, #1
 800827c:	3308      	adds	r3, #8
 800827e:	e7e0      	b.n	8008242 <_dtoa_r+0x30a>
 8008280:	0800a5a9 	.word	0x0800a5a9
 8008284:	0800a5c0 	.word	0x0800a5c0
 8008288:	7ff00000 	.word	0x7ff00000
 800828c:	0000270f 	.word	0x0000270f
 8008290:	0800a5a5 	.word	0x0800a5a5
 8008294:	0800a5a8 	.word	0x0800a5a8
 8008298:	0800a578 	.word	0x0800a578
 800829c:	0800a579 	.word	0x0800a579
 80082a0:	3ff00000 	.word	0x3ff00000
 80082a4:	fffffc01 	.word	0xfffffc01
 80082a8:	3ff80000 	.word	0x3ff80000
 80082ac:	636f4361 	.word	0x636f4361
 80082b0:	3fd287a7 	.word	0x3fd287a7
 80082b4:	8b60c8b3 	.word	0x8b60c8b3
 80082b8:	3fc68a28 	.word	0x3fc68a28
 80082bc:	509f79fb 	.word	0x509f79fb
 80082c0:	3fd34413 	.word	0x3fd34413
 80082c4:	0800a6b0 	.word	0x0800a6b0
 80082c8:	00000432 	.word	0x00000432
 80082cc:	00000412 	.word	0x00000412
 80082d0:	fe100000 	.word	0xfe100000
 80082d4:	0800a61b 	.word	0x0800a61b
 80082d8:	0800a688 	.word	0x0800a688
 80082dc:	2302      	movs	r3, #2
 80082de:	9310      	str	r3, [sp, #64]	; 0x40
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d016      	beq.n	8008314 <_dtoa_r+0x3dc>
 80082e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082ea:	425c      	negs	r4, r3
 80082ec:	230f      	movs	r3, #15
 80082ee:	4ab6      	ldr	r2, [pc, #728]	; (80085c8 <_dtoa_r+0x690>)
 80082f0:	4023      	ands	r3, r4
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	18d3      	adds	r3, r2, r3
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f7f9 fd3f 	bl	8001d7c <__aeabi_dmul>
 80082fe:	2601      	movs	r6, #1
 8008300:	2300      	movs	r3, #0
 8008302:	9008      	str	r0, [sp, #32]
 8008304:	9109      	str	r1, [sp, #36]	; 0x24
 8008306:	4db1      	ldr	r5, [pc, #708]	; (80085cc <_dtoa_r+0x694>)
 8008308:	1124      	asrs	r4, r4, #4
 800830a:	2c00      	cmp	r4, #0
 800830c:	d000      	beq.n	8008310 <_dtoa_r+0x3d8>
 800830e:	e094      	b.n	800843a <_dtoa_r+0x502>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d19f      	bne.n	8008254 <_dtoa_r+0x31c>
 8008314:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008316:	2b00      	cmp	r3, #0
 8008318:	d100      	bne.n	800831c <_dtoa_r+0x3e4>
 800831a:	e09b      	b.n	8008454 <_dtoa_r+0x51c>
 800831c:	9c08      	ldr	r4, [sp, #32]
 800831e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008320:	2200      	movs	r2, #0
 8008322:	0020      	movs	r0, r4
 8008324:	0029      	movs	r1, r5
 8008326:	4baa      	ldr	r3, [pc, #680]	; (80085d0 <_dtoa_r+0x698>)
 8008328:	f7f8 f896 	bl	8000458 <__aeabi_dcmplt>
 800832c:	2800      	cmp	r0, #0
 800832e:	d100      	bne.n	8008332 <_dtoa_r+0x3fa>
 8008330:	e090      	b.n	8008454 <_dtoa_r+0x51c>
 8008332:	9b07      	ldr	r3, [sp, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d100      	bne.n	800833a <_dtoa_r+0x402>
 8008338:	e08c      	b.n	8008454 <_dtoa_r+0x51c>
 800833a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800833c:	2b00      	cmp	r3, #0
 800833e:	dd46      	ble.n	80083ce <_dtoa_r+0x496>
 8008340:	9b02      	ldr	r3, [sp, #8]
 8008342:	2200      	movs	r2, #0
 8008344:	0020      	movs	r0, r4
 8008346:	0029      	movs	r1, r5
 8008348:	1e5e      	subs	r6, r3, #1
 800834a:	4ba2      	ldr	r3, [pc, #648]	; (80085d4 <_dtoa_r+0x69c>)
 800834c:	f7f9 fd16 	bl	8001d7c <__aeabi_dmul>
 8008350:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008352:	9008      	str	r0, [sp, #32]
 8008354:	9109      	str	r1, [sp, #36]	; 0x24
 8008356:	3301      	adds	r3, #1
 8008358:	9310      	str	r3, [sp, #64]	; 0x40
 800835a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800835e:	9c08      	ldr	r4, [sp, #32]
 8008360:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008362:	9314      	str	r3, [sp, #80]	; 0x50
 8008364:	f7fa fb5c 	bl	8002a20 <__aeabi_i2d>
 8008368:	0022      	movs	r2, r4
 800836a:	002b      	movs	r3, r5
 800836c:	f7f9 fd06 	bl	8001d7c <__aeabi_dmul>
 8008370:	2200      	movs	r2, #0
 8008372:	4b99      	ldr	r3, [pc, #612]	; (80085d8 <_dtoa_r+0x6a0>)
 8008374:	f7f8 fdc4 	bl	8000f00 <__aeabi_dadd>
 8008378:	9010      	str	r0, [sp, #64]	; 0x40
 800837a:	9111      	str	r1, [sp, #68]	; 0x44
 800837c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800837e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008380:	9208      	str	r2, [sp, #32]
 8008382:	9309      	str	r3, [sp, #36]	; 0x24
 8008384:	4a95      	ldr	r2, [pc, #596]	; (80085dc <_dtoa_r+0x6a4>)
 8008386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008388:	4694      	mov	ip, r2
 800838a:	4463      	add	r3, ip
 800838c:	9317      	str	r3, [sp, #92]	; 0x5c
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008392:	2b00      	cmp	r3, #0
 8008394:	d161      	bne.n	800845a <_dtoa_r+0x522>
 8008396:	2200      	movs	r2, #0
 8008398:	0020      	movs	r0, r4
 800839a:	0029      	movs	r1, r5
 800839c:	4b90      	ldr	r3, [pc, #576]	; (80085e0 <_dtoa_r+0x6a8>)
 800839e:	f7f9 ff59 	bl	8002254 <__aeabi_dsub>
 80083a2:	9a08      	ldr	r2, [sp, #32]
 80083a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083a6:	0004      	movs	r4, r0
 80083a8:	000d      	movs	r5, r1
 80083aa:	f7f8 f869 	bl	8000480 <__aeabi_dcmpgt>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	d000      	beq.n	80083b4 <_dtoa_r+0x47c>
 80083b2:	e2af      	b.n	8008914 <_dtoa_r+0x9dc>
 80083b4:	488b      	ldr	r0, [pc, #556]	; (80085e4 <_dtoa_r+0x6ac>)
 80083b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80083b8:	4684      	mov	ip, r0
 80083ba:	4461      	add	r1, ip
 80083bc:	000b      	movs	r3, r1
 80083be:	0020      	movs	r0, r4
 80083c0:	0029      	movs	r1, r5
 80083c2:	9a08      	ldr	r2, [sp, #32]
 80083c4:	f7f8 f848 	bl	8000458 <__aeabi_dcmplt>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d000      	beq.n	80083ce <_dtoa_r+0x496>
 80083cc:	e29f      	b.n	800890e <_dtoa_r+0x9d6>
 80083ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80083d2:	9308      	str	r3, [sp, #32]
 80083d4:	9409      	str	r4, [sp, #36]	; 0x24
 80083d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	da00      	bge.n	80083de <_dtoa_r+0x4a6>
 80083dc:	e172      	b.n	80086c4 <_dtoa_r+0x78c>
 80083de:	9a02      	ldr	r2, [sp, #8]
 80083e0:	2a0e      	cmp	r2, #14
 80083e2:	dd00      	ble.n	80083e6 <_dtoa_r+0x4ae>
 80083e4:	e16e      	b.n	80086c4 <_dtoa_r+0x78c>
 80083e6:	4b78      	ldr	r3, [pc, #480]	; (80085c8 <_dtoa_r+0x690>)
 80083e8:	00d2      	lsls	r2, r2, #3
 80083ea:	189b      	adds	r3, r3, r2
 80083ec:	685c      	ldr	r4, [r3, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	930a      	str	r3, [sp, #40]	; 0x28
 80083f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80083f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	db00      	blt.n	80083fc <_dtoa_r+0x4c4>
 80083fa:	e0f7      	b.n	80085ec <_dtoa_r+0x6b4>
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd00      	ble.n	8008404 <_dtoa_r+0x4cc>
 8008402:	e0f3      	b.n	80085ec <_dtoa_r+0x6b4>
 8008404:	d000      	beq.n	8008408 <_dtoa_r+0x4d0>
 8008406:	e282      	b.n	800890e <_dtoa_r+0x9d6>
 8008408:	980a      	ldr	r0, [sp, #40]	; 0x28
 800840a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800840c:	2200      	movs	r2, #0
 800840e:	4b74      	ldr	r3, [pc, #464]	; (80085e0 <_dtoa_r+0x6a8>)
 8008410:	f7f9 fcb4 	bl	8001d7c <__aeabi_dmul>
 8008414:	9a08      	ldr	r2, [sp, #32]
 8008416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008418:	f7f8 f83c 	bl	8000494 <__aeabi_dcmpge>
 800841c:	9e07      	ldr	r6, [sp, #28]
 800841e:	0035      	movs	r5, r6
 8008420:	2800      	cmp	r0, #0
 8008422:	d000      	beq.n	8008426 <_dtoa_r+0x4ee>
 8008424:	e259      	b.n	80088da <_dtoa_r+0x9a2>
 8008426:	9b06      	ldr	r3, [sp, #24]
 8008428:	9a06      	ldr	r2, [sp, #24]
 800842a:	3301      	adds	r3, #1
 800842c:	9308      	str	r3, [sp, #32]
 800842e:	2331      	movs	r3, #49	; 0x31
 8008430:	7013      	strb	r3, [r2, #0]
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	3301      	adds	r3, #1
 8008436:	9302      	str	r3, [sp, #8]
 8008438:	e254      	b.n	80088e4 <_dtoa_r+0x9ac>
 800843a:	4234      	tst	r4, r6
 800843c:	d007      	beq.n	800844e <_dtoa_r+0x516>
 800843e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008440:	3301      	adds	r3, #1
 8008442:	9310      	str	r3, [sp, #64]	; 0x40
 8008444:	682a      	ldr	r2, [r5, #0]
 8008446:	686b      	ldr	r3, [r5, #4]
 8008448:	f7f9 fc98 	bl	8001d7c <__aeabi_dmul>
 800844c:	0033      	movs	r3, r6
 800844e:	1064      	asrs	r4, r4, #1
 8008450:	3508      	adds	r5, #8
 8008452:	e75a      	b.n	800830a <_dtoa_r+0x3d2>
 8008454:	9e02      	ldr	r6, [sp, #8]
 8008456:	9b07      	ldr	r3, [sp, #28]
 8008458:	e780      	b.n	800835c <_dtoa_r+0x424>
 800845a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800845c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800845e:	1e5a      	subs	r2, r3, #1
 8008460:	4b59      	ldr	r3, [pc, #356]	; (80085c8 <_dtoa_r+0x690>)
 8008462:	00d2      	lsls	r2, r2, #3
 8008464:	189b      	adds	r3, r3, r2
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2900      	cmp	r1, #0
 800846c:	d051      	beq.n	8008512 <_dtoa_r+0x5da>
 800846e:	2000      	movs	r0, #0
 8008470:	495d      	ldr	r1, [pc, #372]	; (80085e8 <_dtoa_r+0x6b0>)
 8008472:	f7f9 f881 	bl	8001578 <__aeabi_ddiv>
 8008476:	9a08      	ldr	r2, [sp, #32]
 8008478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847a:	f7f9 feeb 	bl	8002254 <__aeabi_dsub>
 800847e:	9a06      	ldr	r2, [sp, #24]
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	4694      	mov	ip, r2
 8008484:	9317      	str	r3, [sp, #92]	; 0x5c
 8008486:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008488:	9010      	str	r0, [sp, #64]	; 0x40
 800848a:	9111      	str	r1, [sp, #68]	; 0x44
 800848c:	4463      	add	r3, ip
 800848e:	9319      	str	r3, [sp, #100]	; 0x64
 8008490:	0029      	movs	r1, r5
 8008492:	0020      	movs	r0, r4
 8008494:	f7fa fa8e 	bl	80029b4 <__aeabi_d2iz>
 8008498:	9014      	str	r0, [sp, #80]	; 0x50
 800849a:	f7fa fac1 	bl	8002a20 <__aeabi_i2d>
 800849e:	0002      	movs	r2, r0
 80084a0:	000b      	movs	r3, r1
 80084a2:	0020      	movs	r0, r4
 80084a4:	0029      	movs	r1, r5
 80084a6:	f7f9 fed5 	bl	8002254 <__aeabi_dsub>
 80084aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084ae:	3301      	adds	r3, #1
 80084b0:	9308      	str	r3, [sp, #32]
 80084b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084b4:	0004      	movs	r4, r0
 80084b6:	3330      	adds	r3, #48	; 0x30
 80084b8:	7013      	strb	r3, [r2, #0]
 80084ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084be:	000d      	movs	r5, r1
 80084c0:	f7f7 ffca 	bl	8000458 <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d175      	bne.n	80085b4 <_dtoa_r+0x67c>
 80084c8:	0022      	movs	r2, r4
 80084ca:	002b      	movs	r3, r5
 80084cc:	2000      	movs	r0, #0
 80084ce:	4940      	ldr	r1, [pc, #256]	; (80085d0 <_dtoa_r+0x698>)
 80084d0:	f7f9 fec0 	bl	8002254 <__aeabi_dsub>
 80084d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d8:	f7f7 ffbe 	bl	8000458 <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d000      	beq.n	80084e2 <_dtoa_r+0x5aa>
 80084e0:	e0d2      	b.n	8008688 <_dtoa_r+0x750>
 80084e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084e4:	9a08      	ldr	r2, [sp, #32]
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d100      	bne.n	80084ec <_dtoa_r+0x5b4>
 80084ea:	e770      	b.n	80083ce <_dtoa_r+0x496>
 80084ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084f0:	2200      	movs	r2, #0
 80084f2:	4b38      	ldr	r3, [pc, #224]	; (80085d4 <_dtoa_r+0x69c>)
 80084f4:	f7f9 fc42 	bl	8001d7c <__aeabi_dmul>
 80084f8:	4b36      	ldr	r3, [pc, #216]	; (80085d4 <_dtoa_r+0x69c>)
 80084fa:	9010      	str	r0, [sp, #64]	; 0x40
 80084fc:	9111      	str	r1, [sp, #68]	; 0x44
 80084fe:	2200      	movs	r2, #0
 8008500:	0020      	movs	r0, r4
 8008502:	0029      	movs	r1, r5
 8008504:	f7f9 fc3a 	bl	8001d7c <__aeabi_dmul>
 8008508:	9b08      	ldr	r3, [sp, #32]
 800850a:	0004      	movs	r4, r0
 800850c:	000d      	movs	r5, r1
 800850e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008510:	e7be      	b.n	8008490 <_dtoa_r+0x558>
 8008512:	9808      	ldr	r0, [sp, #32]
 8008514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008516:	f7f9 fc31 	bl	8001d7c <__aeabi_dmul>
 800851a:	9a06      	ldr	r2, [sp, #24]
 800851c:	9b06      	ldr	r3, [sp, #24]
 800851e:	4694      	mov	ip, r2
 8008520:	9308      	str	r3, [sp, #32]
 8008522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008524:	9010      	str	r0, [sp, #64]	; 0x40
 8008526:	9111      	str	r1, [sp, #68]	; 0x44
 8008528:	4463      	add	r3, ip
 800852a:	9319      	str	r3, [sp, #100]	; 0x64
 800852c:	0029      	movs	r1, r5
 800852e:	0020      	movs	r0, r4
 8008530:	f7fa fa40 	bl	80029b4 <__aeabi_d2iz>
 8008534:	9017      	str	r0, [sp, #92]	; 0x5c
 8008536:	f7fa fa73 	bl	8002a20 <__aeabi_i2d>
 800853a:	0002      	movs	r2, r0
 800853c:	000b      	movs	r3, r1
 800853e:	0020      	movs	r0, r4
 8008540:	0029      	movs	r1, r5
 8008542:	f7f9 fe87 	bl	8002254 <__aeabi_dsub>
 8008546:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008548:	9a08      	ldr	r2, [sp, #32]
 800854a:	3330      	adds	r3, #48	; 0x30
 800854c:	7013      	strb	r3, [r2, #0]
 800854e:	0013      	movs	r3, r2
 8008550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008552:	3301      	adds	r3, #1
 8008554:	0004      	movs	r4, r0
 8008556:	000d      	movs	r5, r1
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	4293      	cmp	r3, r2
 800855c:	d12c      	bne.n	80085b8 <_dtoa_r+0x680>
 800855e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008560:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008562:	9a06      	ldr	r2, [sp, #24]
 8008564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008566:	4694      	mov	ip, r2
 8008568:	4463      	add	r3, ip
 800856a:	2200      	movs	r2, #0
 800856c:	9308      	str	r3, [sp, #32]
 800856e:	4b1e      	ldr	r3, [pc, #120]	; (80085e8 <_dtoa_r+0x6b0>)
 8008570:	f7f8 fcc6 	bl	8000f00 <__aeabi_dadd>
 8008574:	0002      	movs	r2, r0
 8008576:	000b      	movs	r3, r1
 8008578:	0020      	movs	r0, r4
 800857a:	0029      	movs	r1, r5
 800857c:	f7f7 ff80 	bl	8000480 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d000      	beq.n	8008586 <_dtoa_r+0x64e>
 8008584:	e080      	b.n	8008688 <_dtoa_r+0x750>
 8008586:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800858a:	2000      	movs	r0, #0
 800858c:	4916      	ldr	r1, [pc, #88]	; (80085e8 <_dtoa_r+0x6b0>)
 800858e:	f7f9 fe61 	bl	8002254 <__aeabi_dsub>
 8008592:	0002      	movs	r2, r0
 8008594:	000b      	movs	r3, r1
 8008596:	0020      	movs	r0, r4
 8008598:	0029      	movs	r1, r5
 800859a:	f7f7 ff5d 	bl	8000458 <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d100      	bne.n	80085a4 <_dtoa_r+0x66c>
 80085a2:	e714      	b.n	80083ce <_dtoa_r+0x496>
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	001a      	movs	r2, r3
 80085a8:	3a01      	subs	r2, #1
 80085aa:	9208      	str	r2, [sp, #32]
 80085ac:	7812      	ldrb	r2, [r2, #0]
 80085ae:	2a30      	cmp	r2, #48	; 0x30
 80085b0:	d0f8      	beq.n	80085a4 <_dtoa_r+0x66c>
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	9602      	str	r6, [sp, #8]
 80085b6:	e055      	b.n	8008664 <_dtoa_r+0x72c>
 80085b8:	2200      	movs	r2, #0
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <_dtoa_r+0x69c>)
 80085bc:	f7f9 fbde 	bl	8001d7c <__aeabi_dmul>
 80085c0:	0004      	movs	r4, r0
 80085c2:	000d      	movs	r5, r1
 80085c4:	e7b2      	b.n	800852c <_dtoa_r+0x5f4>
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	0800a6b0 	.word	0x0800a6b0
 80085cc:	0800a688 	.word	0x0800a688
 80085d0:	3ff00000 	.word	0x3ff00000
 80085d4:	40240000 	.word	0x40240000
 80085d8:	401c0000 	.word	0x401c0000
 80085dc:	fcc00000 	.word	0xfcc00000
 80085e0:	40140000 	.word	0x40140000
 80085e4:	7cc00000 	.word	0x7cc00000
 80085e8:	3fe00000 	.word	0x3fe00000
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	9e06      	ldr	r6, [sp, #24]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	199b      	adds	r3, r3, r6
 80085f4:	930c      	str	r3, [sp, #48]	; 0x30
 80085f6:	9c08      	ldr	r4, [sp, #32]
 80085f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80085fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fe:	0020      	movs	r0, r4
 8008600:	0029      	movs	r1, r5
 8008602:	f7f8 ffb9 	bl	8001578 <__aeabi_ddiv>
 8008606:	f7fa f9d5 	bl	80029b4 <__aeabi_d2iz>
 800860a:	9007      	str	r0, [sp, #28]
 800860c:	f7fa fa08 	bl	8002a20 <__aeabi_i2d>
 8008610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	f7f9 fbb2 	bl	8001d7c <__aeabi_dmul>
 8008618:	0002      	movs	r2, r0
 800861a:	000b      	movs	r3, r1
 800861c:	0020      	movs	r0, r4
 800861e:	0029      	movs	r1, r5
 8008620:	f7f9 fe18 	bl	8002254 <__aeabi_dsub>
 8008624:	0033      	movs	r3, r6
 8008626:	9a07      	ldr	r2, [sp, #28]
 8008628:	3601      	adds	r6, #1
 800862a:	3230      	adds	r2, #48	; 0x30
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008630:	9608      	str	r6, [sp, #32]
 8008632:	429a      	cmp	r2, r3
 8008634:	d139      	bne.n	80086aa <_dtoa_r+0x772>
 8008636:	0002      	movs	r2, r0
 8008638:	000b      	movs	r3, r1
 800863a:	f7f8 fc61 	bl	8000f00 <__aeabi_dadd>
 800863e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008640:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008642:	0004      	movs	r4, r0
 8008644:	000d      	movs	r5, r1
 8008646:	f7f7 ff1b 	bl	8000480 <__aeabi_dcmpgt>
 800864a:	2800      	cmp	r0, #0
 800864c:	d11b      	bne.n	8008686 <_dtoa_r+0x74e>
 800864e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008652:	0020      	movs	r0, r4
 8008654:	0029      	movs	r1, r5
 8008656:	f7f7 fef9 	bl	800044c <__aeabi_dcmpeq>
 800865a:	2800      	cmp	r0, #0
 800865c:	d002      	beq.n	8008664 <_dtoa_r+0x72c>
 800865e:	9b07      	ldr	r3, [sp, #28]
 8008660:	07db      	lsls	r3, r3, #31
 8008662:	d410      	bmi.n	8008686 <_dtoa_r+0x74e>
 8008664:	0038      	movs	r0, r7
 8008666:	9905      	ldr	r1, [sp, #20]
 8008668:	f000 fade 	bl	8008c28 <_Bfree>
 800866c:	2300      	movs	r3, #0
 800866e:	9a08      	ldr	r2, [sp, #32]
 8008670:	9802      	ldr	r0, [sp, #8]
 8008672:	7013      	strb	r3, [r2, #0]
 8008674:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008676:	3001      	adds	r0, #1
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800867c:	2b00      	cmp	r3, #0
 800867e:	d100      	bne.n	8008682 <_dtoa_r+0x74a>
 8008680:	e4a6      	b.n	8007fd0 <_dtoa_r+0x98>
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	e4a4      	b.n	8007fd0 <_dtoa_r+0x98>
 8008686:	9e02      	ldr	r6, [sp, #8]
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	9308      	str	r3, [sp, #32]
 800868c:	3b01      	subs	r3, #1
 800868e:	781a      	ldrb	r2, [r3, #0]
 8008690:	2a39      	cmp	r2, #57	; 0x39
 8008692:	d106      	bne.n	80086a2 <_dtoa_r+0x76a>
 8008694:	9a06      	ldr	r2, [sp, #24]
 8008696:	429a      	cmp	r2, r3
 8008698:	d1f7      	bne.n	800868a <_dtoa_r+0x752>
 800869a:	2230      	movs	r2, #48	; 0x30
 800869c:	9906      	ldr	r1, [sp, #24]
 800869e:	3601      	adds	r6, #1
 80086a0:	700a      	strb	r2, [r1, #0]
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	3201      	adds	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	e784      	b.n	80085b4 <_dtoa_r+0x67c>
 80086aa:	2200      	movs	r2, #0
 80086ac:	4baa      	ldr	r3, [pc, #680]	; (8008958 <_dtoa_r+0xa20>)
 80086ae:	f7f9 fb65 	bl	8001d7c <__aeabi_dmul>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	0004      	movs	r4, r0
 80086b8:	000d      	movs	r5, r1
 80086ba:	f7f7 fec7 	bl	800044c <__aeabi_dcmpeq>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d09b      	beq.n	80085fa <_dtoa_r+0x6c2>
 80086c2:	e7cf      	b.n	8008664 <_dtoa_r+0x72c>
 80086c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80086c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	d012      	beq.n	80086f4 <_dtoa_r+0x7bc>
 80086ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80086d0:	2a01      	cmp	r2, #1
 80086d2:	dc66      	bgt.n	80087a2 <_dtoa_r+0x86a>
 80086d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086d6:	2a00      	cmp	r2, #0
 80086d8:	d05d      	beq.n	8008796 <_dtoa_r+0x85e>
 80086da:	4aa0      	ldr	r2, [pc, #640]	; (800895c <_dtoa_r+0xa24>)
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e0:	2101      	movs	r1, #1
 80086e2:	18d2      	adds	r2, r2, r3
 80086e4:	920a      	str	r2, [sp, #40]	; 0x28
 80086e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086e8:	0038      	movs	r0, r7
 80086ea:	18d3      	adds	r3, r2, r3
 80086ec:	930d      	str	r3, [sp, #52]	; 0x34
 80086ee:	f000 fb4b 	bl	8008d88 <__i2b>
 80086f2:	0005      	movs	r5, r0
 80086f4:	2c00      	cmp	r4, #0
 80086f6:	dd0e      	ble.n	8008716 <_dtoa_r+0x7de>
 80086f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dd0b      	ble.n	8008716 <_dtoa_r+0x7de>
 80086fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008700:	0023      	movs	r3, r4
 8008702:	4294      	cmp	r4, r2
 8008704:	dd00      	ble.n	8008708 <_dtoa_r+0x7d0>
 8008706:	0013      	movs	r3, r2
 8008708:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800870a:	1ae4      	subs	r4, r4, r3
 800870c:	1ad2      	subs	r2, r2, r3
 800870e:	920a      	str	r2, [sp, #40]	; 0x28
 8008710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	930d      	str	r3, [sp, #52]	; 0x34
 8008716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01f      	beq.n	800875c <_dtoa_r+0x824>
 800871c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d054      	beq.n	80087cc <_dtoa_r+0x894>
 8008722:	2e00      	cmp	r6, #0
 8008724:	dd11      	ble.n	800874a <_dtoa_r+0x812>
 8008726:	0029      	movs	r1, r5
 8008728:	0032      	movs	r2, r6
 800872a:	0038      	movs	r0, r7
 800872c:	f000 fbf2 	bl	8008f14 <__pow5mult>
 8008730:	9a05      	ldr	r2, [sp, #20]
 8008732:	0001      	movs	r1, r0
 8008734:	0005      	movs	r5, r0
 8008736:	0038      	movs	r0, r7
 8008738:	f000 fb3c 	bl	8008db4 <__multiply>
 800873c:	9905      	ldr	r1, [sp, #20]
 800873e:	9014      	str	r0, [sp, #80]	; 0x50
 8008740:	0038      	movs	r0, r7
 8008742:	f000 fa71 	bl	8008c28 <_Bfree>
 8008746:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874c:	1b9a      	subs	r2, r3, r6
 800874e:	42b3      	cmp	r3, r6
 8008750:	d004      	beq.n	800875c <_dtoa_r+0x824>
 8008752:	0038      	movs	r0, r7
 8008754:	9905      	ldr	r1, [sp, #20]
 8008756:	f000 fbdd 	bl	8008f14 <__pow5mult>
 800875a:	9005      	str	r0, [sp, #20]
 800875c:	2101      	movs	r1, #1
 800875e:	0038      	movs	r0, r7
 8008760:	f000 fb12 	bl	8008d88 <__i2b>
 8008764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008766:	0006      	movs	r6, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	dd31      	ble.n	80087d0 <_dtoa_r+0x898>
 800876c:	001a      	movs	r2, r3
 800876e:	0001      	movs	r1, r0
 8008770:	0038      	movs	r0, r7
 8008772:	f000 fbcf 	bl	8008f14 <__pow5mult>
 8008776:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008778:	0006      	movs	r6, r0
 800877a:	2b01      	cmp	r3, #1
 800877c:	dd2d      	ble.n	80087da <_dtoa_r+0x8a2>
 800877e:	2300      	movs	r3, #0
 8008780:	930e      	str	r3, [sp, #56]	; 0x38
 8008782:	6933      	ldr	r3, [r6, #16]
 8008784:	3303      	adds	r3, #3
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	18f3      	adds	r3, r6, r3
 800878a:	6858      	ldr	r0, [r3, #4]
 800878c:	f000 fab4 	bl	8008cf8 <__hi0bits>
 8008790:	2320      	movs	r3, #32
 8008792:	1a18      	subs	r0, r3, r0
 8008794:	e039      	b.n	800880a <_dtoa_r+0x8d2>
 8008796:	2336      	movs	r3, #54	; 0x36
 8008798:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800879a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800879c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800879e:	1a9b      	subs	r3, r3, r2
 80087a0:	e79d      	b.n	80086de <_dtoa_r+0x7a6>
 80087a2:	9b07      	ldr	r3, [sp, #28]
 80087a4:	1e5e      	subs	r6, r3, #1
 80087a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a8:	42b3      	cmp	r3, r6
 80087aa:	db07      	blt.n	80087bc <_dtoa_r+0x884>
 80087ac:	1b9e      	subs	r6, r3, r6
 80087ae:	9b07      	ldr	r3, [sp, #28]
 80087b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	da93      	bge.n	80086de <_dtoa_r+0x7a6>
 80087b6:	1ae4      	subs	r4, r4, r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	e790      	b.n	80086de <_dtoa_r+0x7a6>
 80087bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80087c0:	1af3      	subs	r3, r6, r3
 80087c2:	18d3      	adds	r3, r2, r3
 80087c4:	960e      	str	r6, [sp, #56]	; 0x38
 80087c6:	9315      	str	r3, [sp, #84]	; 0x54
 80087c8:	2600      	movs	r6, #0
 80087ca:	e7f0      	b.n	80087ae <_dtoa_r+0x876>
 80087cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087ce:	e7c0      	b.n	8008752 <_dtoa_r+0x81a>
 80087d0:	2300      	movs	r3, #0
 80087d2:	930e      	str	r3, [sp, #56]	; 0x38
 80087d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	dc13      	bgt.n	8008802 <_dtoa_r+0x8ca>
 80087da:	2300      	movs	r3, #0
 80087dc:	930e      	str	r3, [sp, #56]	; 0x38
 80087de:	9b08      	ldr	r3, [sp, #32]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10e      	bne.n	8008802 <_dtoa_r+0x8ca>
 80087e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e6:	031b      	lsls	r3, r3, #12
 80087e8:	d10b      	bne.n	8008802 <_dtoa_r+0x8ca>
 80087ea:	4b5d      	ldr	r3, [pc, #372]	; (8008960 <_dtoa_r+0xa28>)
 80087ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ee:	4213      	tst	r3, r2
 80087f0:	d007      	beq.n	8008802 <_dtoa_r+0x8ca>
 80087f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f4:	3301      	adds	r3, #1
 80087f6:	930a      	str	r3, [sp, #40]	; 0x28
 80087f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087fa:	3301      	adds	r3, #1
 80087fc:	930d      	str	r3, [sp, #52]	; 0x34
 80087fe:	2301      	movs	r3, #1
 8008800:	930e      	str	r3, [sp, #56]	; 0x38
 8008802:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008804:	2001      	movs	r0, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1bb      	bne.n	8008782 <_dtoa_r+0x84a>
 800880a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800880c:	221f      	movs	r2, #31
 800880e:	1818      	adds	r0, r3, r0
 8008810:	0003      	movs	r3, r0
 8008812:	4013      	ands	r3, r2
 8008814:	4210      	tst	r0, r2
 8008816:	d046      	beq.n	80088a6 <_dtoa_r+0x96e>
 8008818:	3201      	adds	r2, #1
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	2a04      	cmp	r2, #4
 800881e:	dd3f      	ble.n	80088a0 <_dtoa_r+0x968>
 8008820:	221c      	movs	r2, #28
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008826:	18e4      	adds	r4, r4, r3
 8008828:	18d2      	adds	r2, r2, r3
 800882a:	920a      	str	r2, [sp, #40]	; 0x28
 800882c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800882e:	18d3      	adds	r3, r2, r3
 8008830:	930d      	str	r3, [sp, #52]	; 0x34
 8008832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd05      	ble.n	8008844 <_dtoa_r+0x90c>
 8008838:	001a      	movs	r2, r3
 800883a:	0038      	movs	r0, r7
 800883c:	9905      	ldr	r1, [sp, #20]
 800883e:	f000 fbc5 	bl	8008fcc <__lshift>
 8008842:	9005      	str	r0, [sp, #20]
 8008844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008846:	2b00      	cmp	r3, #0
 8008848:	dd05      	ble.n	8008856 <_dtoa_r+0x91e>
 800884a:	0031      	movs	r1, r6
 800884c:	001a      	movs	r2, r3
 800884e:	0038      	movs	r0, r7
 8008850:	f000 fbbc 	bl	8008fcc <__lshift>
 8008854:	0006      	movs	r6, r0
 8008856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008858:	2b00      	cmp	r3, #0
 800885a:	d026      	beq.n	80088aa <_dtoa_r+0x972>
 800885c:	0031      	movs	r1, r6
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	f000 fc22 	bl	80090a8 <__mcmp>
 8008864:	2800      	cmp	r0, #0
 8008866:	da20      	bge.n	80088aa <_dtoa_r+0x972>
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	220a      	movs	r2, #10
 800886c:	3b01      	subs	r3, #1
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	0038      	movs	r0, r7
 8008872:	2300      	movs	r3, #0
 8008874:	9905      	ldr	r1, [sp, #20]
 8008876:	f000 f9fb 	bl	8008c70 <__multadd>
 800887a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800887c:	9005      	str	r0, [sp, #20]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d100      	bne.n	8008884 <_dtoa_r+0x94c>
 8008882:	e166      	b.n	8008b52 <_dtoa_r+0xc1a>
 8008884:	2300      	movs	r3, #0
 8008886:	0029      	movs	r1, r5
 8008888:	220a      	movs	r2, #10
 800888a:	0038      	movs	r0, r7
 800888c:	f000 f9f0 	bl	8008c70 <__multadd>
 8008890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008892:	0005      	movs	r5, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc47      	bgt.n	8008928 <_dtoa_r+0x9f0>
 8008898:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800889a:	2b02      	cmp	r3, #2
 800889c:	dc0d      	bgt.n	80088ba <_dtoa_r+0x982>
 800889e:	e043      	b.n	8008928 <_dtoa_r+0x9f0>
 80088a0:	2a04      	cmp	r2, #4
 80088a2:	d0c6      	beq.n	8008832 <_dtoa_r+0x8fa>
 80088a4:	0013      	movs	r3, r2
 80088a6:	331c      	adds	r3, #28
 80088a8:	e7bc      	b.n	8008824 <_dtoa_r+0x8ec>
 80088aa:	9b07      	ldr	r3, [sp, #28]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc35      	bgt.n	800891c <_dtoa_r+0x9e4>
 80088b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	dd32      	ble.n	800891c <_dtoa_r+0x9e4>
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	930c      	str	r3, [sp, #48]	; 0x30
 80088ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10c      	bne.n	80088da <_dtoa_r+0x9a2>
 80088c0:	0031      	movs	r1, r6
 80088c2:	2205      	movs	r2, #5
 80088c4:	0038      	movs	r0, r7
 80088c6:	f000 f9d3 	bl	8008c70 <__multadd>
 80088ca:	0006      	movs	r6, r0
 80088cc:	0001      	movs	r1, r0
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	f000 fbea 	bl	80090a8 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	dd00      	ble.n	80088da <_dtoa_r+0x9a2>
 80088d8:	e5a5      	b.n	8008426 <_dtoa_r+0x4ee>
 80088da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088dc:	43db      	mvns	r3, r3
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	9b06      	ldr	r3, [sp, #24]
 80088e2:	9308      	str	r3, [sp, #32]
 80088e4:	2400      	movs	r4, #0
 80088e6:	0031      	movs	r1, r6
 80088e8:	0038      	movs	r0, r7
 80088ea:	f000 f99d 	bl	8008c28 <_Bfree>
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d100      	bne.n	80088f4 <_dtoa_r+0x9bc>
 80088f2:	e6b7      	b.n	8008664 <_dtoa_r+0x72c>
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	d005      	beq.n	8008904 <_dtoa_r+0x9cc>
 80088f8:	42ac      	cmp	r4, r5
 80088fa:	d003      	beq.n	8008904 <_dtoa_r+0x9cc>
 80088fc:	0021      	movs	r1, r4
 80088fe:	0038      	movs	r0, r7
 8008900:	f000 f992 	bl	8008c28 <_Bfree>
 8008904:	0029      	movs	r1, r5
 8008906:	0038      	movs	r0, r7
 8008908:	f000 f98e 	bl	8008c28 <_Bfree>
 800890c:	e6aa      	b.n	8008664 <_dtoa_r+0x72c>
 800890e:	2600      	movs	r6, #0
 8008910:	0035      	movs	r5, r6
 8008912:	e7e2      	b.n	80088da <_dtoa_r+0x9a2>
 8008914:	9602      	str	r6, [sp, #8]
 8008916:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008918:	0035      	movs	r5, r6
 800891a:	e584      	b.n	8008426 <_dtoa_r+0x4ee>
 800891c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d100      	bne.n	8008924 <_dtoa_r+0x9ec>
 8008922:	e0ce      	b.n	8008ac2 <_dtoa_r+0xb8a>
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	930c      	str	r3, [sp, #48]	; 0x30
 8008928:	2c00      	cmp	r4, #0
 800892a:	dd05      	ble.n	8008938 <_dtoa_r+0xa00>
 800892c:	0029      	movs	r1, r5
 800892e:	0022      	movs	r2, r4
 8008930:	0038      	movs	r0, r7
 8008932:	f000 fb4b 	bl	8008fcc <__lshift>
 8008936:	0005      	movs	r5, r0
 8008938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800893a:	0028      	movs	r0, r5
 800893c:	2b00      	cmp	r3, #0
 800893e:	d022      	beq.n	8008986 <_dtoa_r+0xa4e>
 8008940:	0038      	movs	r0, r7
 8008942:	6869      	ldr	r1, [r5, #4]
 8008944:	f000 f92c 	bl	8008ba0 <_Balloc>
 8008948:	1e04      	subs	r4, r0, #0
 800894a:	d10f      	bne.n	800896c <_dtoa_r+0xa34>
 800894c:	0002      	movs	r2, r0
 800894e:	4b05      	ldr	r3, [pc, #20]	; (8008964 <_dtoa_r+0xa2c>)
 8008950:	4905      	ldr	r1, [pc, #20]	; (8008968 <_dtoa_r+0xa30>)
 8008952:	f7ff fb06 	bl	8007f62 <_dtoa_r+0x2a>
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	40240000 	.word	0x40240000
 800895c:	00000433 	.word	0x00000433
 8008960:	7ff00000 	.word	0x7ff00000
 8008964:	0800a61b 	.word	0x0800a61b
 8008968:	000002ea 	.word	0x000002ea
 800896c:	0029      	movs	r1, r5
 800896e:	692b      	ldr	r3, [r5, #16]
 8008970:	310c      	adds	r1, #12
 8008972:	1c9a      	adds	r2, r3, #2
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	300c      	adds	r0, #12
 8008978:	f7fe fda0 	bl	80074bc <memcpy>
 800897c:	2201      	movs	r2, #1
 800897e:	0021      	movs	r1, r4
 8008980:	0038      	movs	r0, r7
 8008982:	f000 fb23 	bl	8008fcc <__lshift>
 8008986:	9b06      	ldr	r3, [sp, #24]
 8008988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800898a:	930a      	str	r3, [sp, #40]	; 0x28
 800898c:	3b01      	subs	r3, #1
 800898e:	189b      	adds	r3, r3, r2
 8008990:	2201      	movs	r2, #1
 8008992:	002c      	movs	r4, r5
 8008994:	0005      	movs	r5, r0
 8008996:	9314      	str	r3, [sp, #80]	; 0x50
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	4013      	ands	r3, r2
 800899c:	930f      	str	r3, [sp, #60]	; 0x3c
 800899e:	0031      	movs	r1, r6
 80089a0:	9805      	ldr	r0, [sp, #20]
 80089a2:	f7ff fa3d 	bl	8007e20 <quorem>
 80089a6:	0003      	movs	r3, r0
 80089a8:	0021      	movs	r1, r4
 80089aa:	3330      	adds	r3, #48	; 0x30
 80089ac:	900d      	str	r0, [sp, #52]	; 0x34
 80089ae:	9805      	ldr	r0, [sp, #20]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	f000 fb79 	bl	80090a8 <__mcmp>
 80089b6:	002a      	movs	r2, r5
 80089b8:	900e      	str	r0, [sp, #56]	; 0x38
 80089ba:	0031      	movs	r1, r6
 80089bc:	0038      	movs	r0, r7
 80089be:	f000 fb8f 	bl	80090e0 <__mdiff>
 80089c2:	68c3      	ldr	r3, [r0, #12]
 80089c4:	9008      	str	r0, [sp, #32]
 80089c6:	9310      	str	r3, [sp, #64]	; 0x40
 80089c8:	2301      	movs	r3, #1
 80089ca:	930c      	str	r3, [sp, #48]	; 0x30
 80089cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <_dtoa_r+0xaa4>
 80089d2:	0001      	movs	r1, r0
 80089d4:	9805      	ldr	r0, [sp, #20]
 80089d6:	f000 fb67 	bl	80090a8 <__mcmp>
 80089da:	900c      	str	r0, [sp, #48]	; 0x30
 80089dc:	0038      	movs	r0, r7
 80089de:	9908      	ldr	r1, [sp, #32]
 80089e0:	f000 f922 	bl	8008c28 <_Bfree>
 80089e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089e8:	3301      	adds	r3, #1
 80089ea:	9308      	str	r3, [sp, #32]
 80089ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089ee:	4313      	orrs	r3, r2
 80089f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d10c      	bne.n	8008a10 <_dtoa_r+0xad8>
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	2b39      	cmp	r3, #57	; 0x39
 80089fa:	d026      	beq.n	8008a4a <_dtoa_r+0xb12>
 80089fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	dd02      	ble.n	8008a08 <_dtoa_r+0xad0>
 8008a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a04:	3331      	adds	r3, #49	; 0x31
 8008a06:	9307      	str	r3, [sp, #28]
 8008a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0a:	9a07      	ldr	r2, [sp, #28]
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	e76a      	b.n	80088e6 <_dtoa_r+0x9ae>
 8008a10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	db04      	blt.n	8008a20 <_dtoa_r+0xae8>
 8008a16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	d11f      	bne.n	8008a60 <_dtoa_r+0xb28>
 8008a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	ddf0      	ble.n	8008a08 <_dtoa_r+0xad0>
 8008a26:	9905      	ldr	r1, [sp, #20]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	f000 face 	bl	8008fcc <__lshift>
 8008a30:	0031      	movs	r1, r6
 8008a32:	9005      	str	r0, [sp, #20]
 8008a34:	f000 fb38 	bl	80090a8 <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dc03      	bgt.n	8008a44 <_dtoa_r+0xb0c>
 8008a3c:	d1e4      	bne.n	8008a08 <_dtoa_r+0xad0>
 8008a3e:	9b07      	ldr	r3, [sp, #28]
 8008a40:	07db      	lsls	r3, r3, #31
 8008a42:	d5e1      	bpl.n	8008a08 <_dtoa_r+0xad0>
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	2b39      	cmp	r3, #57	; 0x39
 8008a48:	d1db      	bne.n	8008a02 <_dtoa_r+0xaca>
 8008a4a:	2339      	movs	r3, #57	; 0x39
 8008a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a4e:	7013      	strb	r3, [r2, #0]
 8008a50:	9b08      	ldr	r3, [sp, #32]
 8008a52:	9308      	str	r3, [sp, #32]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	2a39      	cmp	r2, #57	; 0x39
 8008a5a:	d068      	beq.n	8008b2e <_dtoa_r+0xbf6>
 8008a5c:	3201      	adds	r2, #1
 8008a5e:	e7d5      	b.n	8008a0c <_dtoa_r+0xad4>
 8008a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	dd07      	ble.n	8008a76 <_dtoa_r+0xb3e>
 8008a66:	9b07      	ldr	r3, [sp, #28]
 8008a68:	2b39      	cmp	r3, #57	; 0x39
 8008a6a:	d0ee      	beq.n	8008a4a <_dtoa_r+0xb12>
 8008a6c:	9b07      	ldr	r3, [sp, #28]
 8008a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a70:	3301      	adds	r3, #1
 8008a72:	7013      	strb	r3, [r2, #0]
 8008a74:	e737      	b.n	80088e6 <_dtoa_r+0x9ae>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	9a07      	ldr	r2, [sp, #28]
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d03e      	beq.n	8008b02 <_dtoa_r+0xbca>
 8008a84:	2300      	movs	r3, #0
 8008a86:	220a      	movs	r2, #10
 8008a88:	9905      	ldr	r1, [sp, #20]
 8008a8a:	0038      	movs	r0, r7
 8008a8c:	f000 f8f0 	bl	8008c70 <__multadd>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9005      	str	r0, [sp, #20]
 8008a94:	220a      	movs	r2, #10
 8008a96:	0021      	movs	r1, r4
 8008a98:	0038      	movs	r0, r7
 8008a9a:	42ac      	cmp	r4, r5
 8008a9c:	d106      	bne.n	8008aac <_dtoa_r+0xb74>
 8008a9e:	f000 f8e7 	bl	8008c70 <__multadd>
 8008aa2:	0004      	movs	r4, r0
 8008aa4:	0005      	movs	r5, r0
 8008aa6:	9b08      	ldr	r3, [sp, #32]
 8008aa8:	930a      	str	r3, [sp, #40]	; 0x28
 8008aaa:	e778      	b.n	800899e <_dtoa_r+0xa66>
 8008aac:	f000 f8e0 	bl	8008c70 <__multadd>
 8008ab0:	0029      	movs	r1, r5
 8008ab2:	0004      	movs	r4, r0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	220a      	movs	r2, #10
 8008ab8:	0038      	movs	r0, r7
 8008aba:	f000 f8d9 	bl	8008c70 <__multadd>
 8008abe:	0005      	movs	r5, r0
 8008ac0:	e7f1      	b.n	8008aa6 <_dtoa_r+0xb6e>
 8008ac2:	9b07      	ldr	r3, [sp, #28]
 8008ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ac6:	2400      	movs	r4, #0
 8008ac8:	0031      	movs	r1, r6
 8008aca:	9805      	ldr	r0, [sp, #20]
 8008acc:	f7ff f9a8 	bl	8007e20 <quorem>
 8008ad0:	9b06      	ldr	r3, [sp, #24]
 8008ad2:	3030      	adds	r0, #48	; 0x30
 8008ad4:	5518      	strb	r0, [r3, r4]
 8008ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ad8:	3401      	adds	r4, #1
 8008ada:	9007      	str	r0, [sp, #28]
 8008adc:	42a3      	cmp	r3, r4
 8008ade:	dd07      	ble.n	8008af0 <_dtoa_r+0xbb8>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	0038      	movs	r0, r7
 8008ae6:	9905      	ldr	r1, [sp, #20]
 8008ae8:	f000 f8c2 	bl	8008c70 <__multadd>
 8008aec:	9005      	str	r0, [sp, #20]
 8008aee:	e7eb      	b.n	8008ac8 <_dtoa_r+0xb90>
 8008af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008af2:	2001      	movs	r0, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd00      	ble.n	8008afa <_dtoa_r+0xbc2>
 8008af8:	0018      	movs	r0, r3
 8008afa:	2400      	movs	r4, #0
 8008afc:	9b06      	ldr	r3, [sp, #24]
 8008afe:	181b      	adds	r3, r3, r0
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	9905      	ldr	r1, [sp, #20]
 8008b04:	2201      	movs	r2, #1
 8008b06:	0038      	movs	r0, r7
 8008b08:	f000 fa60 	bl	8008fcc <__lshift>
 8008b0c:	0031      	movs	r1, r6
 8008b0e:	9005      	str	r0, [sp, #20]
 8008b10:	f000 faca 	bl	80090a8 <__mcmp>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	dc9b      	bgt.n	8008a50 <_dtoa_r+0xb18>
 8008b18:	d102      	bne.n	8008b20 <_dtoa_r+0xbe8>
 8008b1a:	9b07      	ldr	r3, [sp, #28]
 8008b1c:	07db      	lsls	r3, r3, #31
 8008b1e:	d497      	bmi.n	8008a50 <_dtoa_r+0xb18>
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	2a30      	cmp	r2, #48	; 0x30
 8008b2a:	d0fa      	beq.n	8008b22 <_dtoa_r+0xbea>
 8008b2c:	e6db      	b.n	80088e6 <_dtoa_r+0x9ae>
 8008b2e:	9a06      	ldr	r2, [sp, #24]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d18e      	bne.n	8008a52 <_dtoa_r+0xb1a>
 8008b34:	9b02      	ldr	r3, [sp, #8]
 8008b36:	3301      	adds	r3, #1
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	2331      	movs	r3, #49	; 0x31
 8008b3c:	e799      	b.n	8008a72 <_dtoa_r+0xb3a>
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <_dtoa_r+0xc2c>)
 8008b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <_dtoa_r+0xc30>)
 8008b46:	2a00      	cmp	r2, #0
 8008b48:	d001      	beq.n	8008b4e <_dtoa_r+0xc16>
 8008b4a:	f7ff fa3f 	bl	8007fcc <_dtoa_r+0x94>
 8008b4e:	f7ff fa3f 	bl	8007fd0 <_dtoa_r+0x98>
 8008b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	dcb6      	bgt.n	8008ac6 <_dtoa_r+0xb8e>
 8008b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	dd00      	ble.n	8008b60 <_dtoa_r+0xc28>
 8008b5e:	e6ac      	b.n	80088ba <_dtoa_r+0x982>
 8008b60:	e7b1      	b.n	8008ac6 <_dtoa_r+0xb8e>
 8008b62:	46c0      	nop			; (mov r8, r8)
 8008b64:	0800a59c 	.word	0x0800a59c
 8008b68:	0800a5a4 	.word	0x0800a5a4

08008b6c <_localeconv_r>:
 8008b6c:	4800      	ldr	r0, [pc, #0]	; (8008b70 <_localeconv_r+0x4>)
 8008b6e:	4770      	bx	lr
 8008b70:	20000160 	.word	0x20000160

08008b74 <malloc>:
 8008b74:	b510      	push	{r4, lr}
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <malloc+0x10>)
 8008b78:	0001      	movs	r1, r0
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	f000 fc44 	bl	8009408 <_malloc_r>
 8008b80:	bd10      	pop	{r4, pc}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	2000000c 	.word	0x2000000c

08008b88 <memchr>:
 8008b88:	b2c9      	uxtb	r1, r1
 8008b8a:	1882      	adds	r2, r0, r2
 8008b8c:	4290      	cmp	r0, r2
 8008b8e:	d101      	bne.n	8008b94 <memchr+0xc>
 8008b90:	2000      	movs	r0, #0
 8008b92:	4770      	bx	lr
 8008b94:	7803      	ldrb	r3, [r0, #0]
 8008b96:	428b      	cmp	r3, r1
 8008b98:	d0fb      	beq.n	8008b92 <memchr+0xa>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	e7f6      	b.n	8008b8c <memchr+0x4>
	...

08008ba0 <_Balloc>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ba4:	0006      	movs	r6, r0
 8008ba6:	000c      	movs	r4, r1
 8008ba8:	2d00      	cmp	r5, #0
 8008baa:	d10e      	bne.n	8008bca <_Balloc+0x2a>
 8008bac:	2010      	movs	r0, #16
 8008bae:	f7ff ffe1 	bl	8008b74 <malloc>
 8008bb2:	1e02      	subs	r2, r0, #0
 8008bb4:	6270      	str	r0, [r6, #36]	; 0x24
 8008bb6:	d104      	bne.n	8008bc2 <_Balloc+0x22>
 8008bb8:	2166      	movs	r1, #102	; 0x66
 8008bba:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <_Balloc+0x80>)
 8008bbc:	4819      	ldr	r0, [pc, #100]	; (8008c24 <_Balloc+0x84>)
 8008bbe:	f000 fe0d 	bl	80097dc <__assert_func>
 8008bc2:	6045      	str	r5, [r0, #4]
 8008bc4:	6085      	str	r5, [r0, #8]
 8008bc6:	6005      	str	r5, [r0, #0]
 8008bc8:	60c5      	str	r5, [r0, #12]
 8008bca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008bcc:	68eb      	ldr	r3, [r5, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d013      	beq.n	8008bfa <_Balloc+0x5a>
 8008bd2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bd4:	00a2      	lsls	r2, r4, #2
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	189b      	adds	r3, r3, r2
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d118      	bne.n	8008c12 <_Balloc+0x72>
 8008be0:	2101      	movs	r1, #1
 8008be2:	000d      	movs	r5, r1
 8008be4:	40a5      	lsls	r5, r4
 8008be6:	1d6a      	adds	r2, r5, #5
 8008be8:	0030      	movs	r0, r6
 8008bea:	0092      	lsls	r2, r2, #2
 8008bec:	f000 fb74 	bl	80092d8 <_calloc_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d00c      	beq.n	8008c0e <_Balloc+0x6e>
 8008bf4:	6044      	str	r4, [r0, #4]
 8008bf6:	6085      	str	r5, [r0, #8]
 8008bf8:	e00d      	b.n	8008c16 <_Balloc+0x76>
 8008bfa:	2221      	movs	r2, #33	; 0x21
 8008bfc:	2104      	movs	r1, #4
 8008bfe:	0030      	movs	r0, r6
 8008c00:	f000 fb6a 	bl	80092d8 <_calloc_r>
 8008c04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c06:	60e8      	str	r0, [r5, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e1      	bne.n	8008bd2 <_Balloc+0x32>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	bd70      	pop	{r4, r5, r6, pc}
 8008c12:	6802      	ldr	r2, [r0, #0]
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	2300      	movs	r3, #0
 8008c18:	6103      	str	r3, [r0, #16]
 8008c1a:	60c3      	str	r3, [r0, #12]
 8008c1c:	e7f8      	b.n	8008c10 <_Balloc+0x70>
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	0800a5a9 	.word	0x0800a5a9
 8008c24:	0800a62c 	.word	0x0800a62c

08008c28 <_Bfree>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c2c:	0005      	movs	r5, r0
 8008c2e:	000c      	movs	r4, r1
 8008c30:	2e00      	cmp	r6, #0
 8008c32:	d10e      	bne.n	8008c52 <_Bfree+0x2a>
 8008c34:	2010      	movs	r0, #16
 8008c36:	f7ff ff9d 	bl	8008b74 <malloc>
 8008c3a:	1e02      	subs	r2, r0, #0
 8008c3c:	6268      	str	r0, [r5, #36]	; 0x24
 8008c3e:	d104      	bne.n	8008c4a <_Bfree+0x22>
 8008c40:	218a      	movs	r1, #138	; 0x8a
 8008c42:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <_Bfree+0x40>)
 8008c44:	4809      	ldr	r0, [pc, #36]	; (8008c6c <_Bfree+0x44>)
 8008c46:	f000 fdc9 	bl	80097dc <__assert_func>
 8008c4a:	6046      	str	r6, [r0, #4]
 8008c4c:	6086      	str	r6, [r0, #8]
 8008c4e:	6006      	str	r6, [r0, #0]
 8008c50:	60c6      	str	r6, [r0, #12]
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d007      	beq.n	8008c66 <_Bfree+0x3e>
 8008c56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	0092      	lsls	r2, r2, #2
 8008c5e:	189b      	adds	r3, r3, r2
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	6022      	str	r2, [r4, #0]
 8008c64:	601c      	str	r4, [r3, #0]
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	0800a5a9 	.word	0x0800a5a9
 8008c6c:	0800a62c 	.word	0x0800a62c

08008c70 <__multadd>:
 8008c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c72:	000e      	movs	r6, r1
 8008c74:	9001      	str	r0, [sp, #4]
 8008c76:	000c      	movs	r4, r1
 8008c78:	001d      	movs	r5, r3
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	690f      	ldr	r7, [r1, #16]
 8008c7e:	3614      	adds	r6, #20
 8008c80:	6833      	ldr	r3, [r6, #0]
 8008c82:	3001      	adds	r0, #1
 8008c84:	b299      	uxth	r1, r3
 8008c86:	4351      	muls	r1, r2
 8008c88:	0c1b      	lsrs	r3, r3, #16
 8008c8a:	4353      	muls	r3, r2
 8008c8c:	1949      	adds	r1, r1, r5
 8008c8e:	0c0d      	lsrs	r5, r1, #16
 8008c90:	195b      	adds	r3, r3, r5
 8008c92:	0c1d      	lsrs	r5, r3, #16
 8008c94:	b289      	uxth	r1, r1
 8008c96:	041b      	lsls	r3, r3, #16
 8008c98:	185b      	adds	r3, r3, r1
 8008c9a:	c608      	stmia	r6!, {r3}
 8008c9c:	4287      	cmp	r7, r0
 8008c9e:	dcef      	bgt.n	8008c80 <__multadd+0x10>
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	d022      	beq.n	8008cea <__multadd+0x7a>
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	dc19      	bgt.n	8008cde <__multadd+0x6e>
 8008caa:	6863      	ldr	r3, [r4, #4]
 8008cac:	9801      	ldr	r0, [sp, #4]
 8008cae:	1c59      	adds	r1, r3, #1
 8008cb0:	f7ff ff76 	bl	8008ba0 <_Balloc>
 8008cb4:	1e06      	subs	r6, r0, #0
 8008cb6:	d105      	bne.n	8008cc4 <__multadd+0x54>
 8008cb8:	0002      	movs	r2, r0
 8008cba:	21b5      	movs	r1, #181	; 0xb5
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <__multadd+0x80>)
 8008cbe:	480d      	ldr	r0, [pc, #52]	; (8008cf4 <__multadd+0x84>)
 8008cc0:	f000 fd8c 	bl	80097dc <__assert_func>
 8008cc4:	0021      	movs	r1, r4
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	310c      	adds	r1, #12
 8008cca:	1c9a      	adds	r2, r3, #2
 8008ccc:	0092      	lsls	r2, r2, #2
 8008cce:	300c      	adds	r0, #12
 8008cd0:	f7fe fbf4 	bl	80074bc <memcpy>
 8008cd4:	0021      	movs	r1, r4
 8008cd6:	9801      	ldr	r0, [sp, #4]
 8008cd8:	f7ff ffa6 	bl	8008c28 <_Bfree>
 8008cdc:	0034      	movs	r4, r6
 8008cde:	1d3b      	adds	r3, r7, #4
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	18e3      	adds	r3, r4, r3
 8008ce4:	605d      	str	r5, [r3, #4]
 8008ce6:	1c7b      	adds	r3, r7, #1
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	0020      	movs	r0, r4
 8008cec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	0800a61b 	.word	0x0800a61b
 8008cf4:	0800a62c 	.word	0x0800a62c

08008cf8 <__hi0bits>:
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	0c02      	lsrs	r2, r0, #16
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	4282      	cmp	r2, r0
 8008d00:	d101      	bne.n	8008d06 <__hi0bits+0xe>
 8008d02:	041b      	lsls	r3, r3, #16
 8008d04:	3010      	adds	r0, #16
 8008d06:	0e1a      	lsrs	r2, r3, #24
 8008d08:	d101      	bne.n	8008d0e <__hi0bits+0x16>
 8008d0a:	3008      	adds	r0, #8
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	0f1a      	lsrs	r2, r3, #28
 8008d10:	d101      	bne.n	8008d16 <__hi0bits+0x1e>
 8008d12:	3004      	adds	r0, #4
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	0f9a      	lsrs	r2, r3, #30
 8008d18:	d101      	bne.n	8008d1e <__hi0bits+0x26>
 8008d1a:	3002      	adds	r0, #2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	db03      	blt.n	8008d2a <__hi0bits+0x32>
 8008d22:	3001      	adds	r0, #1
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	d400      	bmi.n	8008d2a <__hi0bits+0x32>
 8008d28:	2020      	movs	r0, #32
 8008d2a:	4770      	bx	lr

08008d2c <__lo0bits>:
 8008d2c:	6803      	ldr	r3, [r0, #0]
 8008d2e:	0002      	movs	r2, r0
 8008d30:	2107      	movs	r1, #7
 8008d32:	0018      	movs	r0, r3
 8008d34:	4008      	ands	r0, r1
 8008d36:	420b      	tst	r3, r1
 8008d38:	d00d      	beq.n	8008d56 <__lo0bits+0x2a>
 8008d3a:	3906      	subs	r1, #6
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	420b      	tst	r3, r1
 8008d40:	d105      	bne.n	8008d4e <__lo0bits+0x22>
 8008d42:	3002      	adds	r0, #2
 8008d44:	4203      	tst	r3, r0
 8008d46:	d003      	beq.n	8008d50 <__lo0bits+0x24>
 8008d48:	40cb      	lsrs	r3, r1
 8008d4a:	0008      	movs	r0, r1
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	4770      	bx	lr
 8008d50:	089b      	lsrs	r3, r3, #2
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e7fb      	b.n	8008d4e <__lo0bits+0x22>
 8008d56:	b299      	uxth	r1, r3
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	d101      	bne.n	8008d60 <__lo0bits+0x34>
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	0c1b      	lsrs	r3, r3, #16
 8008d60:	b2d9      	uxtb	r1, r3
 8008d62:	2900      	cmp	r1, #0
 8008d64:	d101      	bne.n	8008d6a <__lo0bits+0x3e>
 8008d66:	3008      	adds	r0, #8
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	0719      	lsls	r1, r3, #28
 8008d6c:	d101      	bne.n	8008d72 <__lo0bits+0x46>
 8008d6e:	3004      	adds	r0, #4
 8008d70:	091b      	lsrs	r3, r3, #4
 8008d72:	0799      	lsls	r1, r3, #30
 8008d74:	d101      	bne.n	8008d7a <__lo0bits+0x4e>
 8008d76:	3002      	adds	r0, #2
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	07d9      	lsls	r1, r3, #31
 8008d7c:	d4e9      	bmi.n	8008d52 <__lo0bits+0x26>
 8008d7e:	3001      	adds	r0, #1
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	d1e6      	bne.n	8008d52 <__lo0bits+0x26>
 8008d84:	2020      	movs	r0, #32
 8008d86:	e7e2      	b.n	8008d4e <__lo0bits+0x22>

08008d88 <__i2b>:
 8008d88:	b510      	push	{r4, lr}
 8008d8a:	000c      	movs	r4, r1
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	f7ff ff07 	bl	8008ba0 <_Balloc>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d106      	bne.n	8008da4 <__i2b+0x1c>
 8008d96:	21a0      	movs	r1, #160	; 0xa0
 8008d98:	0002      	movs	r2, r0
 8008d9a:	4b04      	ldr	r3, [pc, #16]	; (8008dac <__i2b+0x24>)
 8008d9c:	4804      	ldr	r0, [pc, #16]	; (8008db0 <__i2b+0x28>)
 8008d9e:	0049      	lsls	r1, r1, #1
 8008da0:	f000 fd1c 	bl	80097dc <__assert_func>
 8008da4:	2301      	movs	r3, #1
 8008da6:	6144      	str	r4, [r0, #20]
 8008da8:	6103      	str	r3, [r0, #16]
 8008daa:	bd10      	pop	{r4, pc}
 8008dac:	0800a61b 	.word	0x0800a61b
 8008db0:	0800a62c 	.word	0x0800a62c

08008db4 <__multiply>:
 8008db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db6:	690b      	ldr	r3, [r1, #16]
 8008db8:	0014      	movs	r4, r2
 8008dba:	6912      	ldr	r2, [r2, #16]
 8008dbc:	000d      	movs	r5, r1
 8008dbe:	b089      	sub	sp, #36	; 0x24
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	da01      	bge.n	8008dc8 <__multiply+0x14>
 8008dc4:	0025      	movs	r5, r4
 8008dc6:	000c      	movs	r4, r1
 8008dc8:	692f      	ldr	r7, [r5, #16]
 8008dca:	6926      	ldr	r6, [r4, #16]
 8008dcc:	6869      	ldr	r1, [r5, #4]
 8008dce:	19bb      	adds	r3, r7, r6
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	68ab      	ldr	r3, [r5, #8]
 8008dd4:	19ba      	adds	r2, r7, r6
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	da00      	bge.n	8008ddc <__multiply+0x28>
 8008dda:	3101      	adds	r1, #1
 8008ddc:	f7ff fee0 	bl	8008ba0 <_Balloc>
 8008de0:	9001      	str	r0, [sp, #4]
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d106      	bne.n	8008df4 <__multiply+0x40>
 8008de6:	215e      	movs	r1, #94	; 0x5e
 8008de8:	0002      	movs	r2, r0
 8008dea:	4b48      	ldr	r3, [pc, #288]	; (8008f0c <__multiply+0x158>)
 8008dec:	4848      	ldr	r0, [pc, #288]	; (8008f10 <__multiply+0x15c>)
 8008dee:	31ff      	adds	r1, #255	; 0xff
 8008df0:	f000 fcf4 	bl	80097dc <__assert_func>
 8008df4:	9b01      	ldr	r3, [sp, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	3314      	adds	r3, #20
 8008dfa:	469c      	mov	ip, r3
 8008dfc:	19bb      	adds	r3, r7, r6
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4463      	add	r3, ip
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	4663      	mov	r3, ip
 8008e06:	9903      	ldr	r1, [sp, #12]
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	d32c      	bcc.n	8008e66 <__multiply+0xb2>
 8008e0c:	002b      	movs	r3, r5
 8008e0e:	0022      	movs	r2, r4
 8008e10:	3314      	adds	r3, #20
 8008e12:	00bf      	lsls	r7, r7, #2
 8008e14:	3214      	adds	r2, #20
 8008e16:	9306      	str	r3, [sp, #24]
 8008e18:	00b6      	lsls	r6, r6, #2
 8008e1a:	19db      	adds	r3, r3, r7
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	1993      	adds	r3, r2, r6
 8008e20:	9307      	str	r3, [sp, #28]
 8008e22:	2304      	movs	r3, #4
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	002b      	movs	r3, r5
 8008e28:	9904      	ldr	r1, [sp, #16]
 8008e2a:	3315      	adds	r3, #21
 8008e2c:	9200      	str	r2, [sp, #0]
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	d305      	bcc.n	8008e3e <__multiply+0x8a>
 8008e32:	1b4b      	subs	r3, r1, r5
 8008e34:	3b15      	subs	r3, #21
 8008e36:	089b      	lsrs	r3, r3, #2
 8008e38:	3301      	adds	r3, #1
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	9305      	str	r3, [sp, #20]
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	9a00      	ldr	r2, [sp, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d311      	bcc.n	8008e6a <__multiply+0xb6>
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	dd06      	ble.n	8008e5a <__multiply+0xa6>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	3b04      	subs	r3, #4
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d053      	beq.n	8008f02 <__multiply+0x14e>
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	9a02      	ldr	r2, [sp, #8]
 8008e5e:	0018      	movs	r0, r3
 8008e60:	611a      	str	r2, [r3, #16]
 8008e62:	b009      	add	sp, #36	; 0x24
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e66:	c304      	stmia	r3!, {r2}
 8008e68:	e7cd      	b.n	8008e06 <__multiply+0x52>
 8008e6a:	9b00      	ldr	r3, [sp, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	b298      	uxth	r0, r3
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d01b      	beq.n	8008eac <__multiply+0xf8>
 8008e74:	4667      	mov	r7, ip
 8008e76:	2400      	movs	r4, #0
 8008e78:	9e06      	ldr	r6, [sp, #24]
 8008e7a:	ce02      	ldmia	r6!, {r1}
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	b28b      	uxth	r3, r1
 8008e80:	4343      	muls	r3, r0
 8008e82:	b292      	uxth	r2, r2
 8008e84:	189b      	adds	r3, r3, r2
 8008e86:	191b      	adds	r3, r3, r4
 8008e88:	0c0c      	lsrs	r4, r1, #16
 8008e8a:	4344      	muls	r4, r0
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	0c11      	lsrs	r1, r2, #16
 8008e90:	1861      	adds	r1, r4, r1
 8008e92:	0c1c      	lsrs	r4, r3, #16
 8008e94:	1909      	adds	r1, r1, r4
 8008e96:	0c0c      	lsrs	r4, r1, #16
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	0409      	lsls	r1, r1, #16
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	c708      	stmia	r7!, {r3}
 8008ea0:	9b04      	ldr	r3, [sp, #16]
 8008ea2:	42b3      	cmp	r3, r6
 8008ea4:	d8e9      	bhi.n	8008e7a <__multiply+0xc6>
 8008ea6:	4663      	mov	r3, ip
 8008ea8:	9a05      	ldr	r2, [sp, #20]
 8008eaa:	509c      	str	r4, [r3, r2]
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	0c1e      	lsrs	r6, r3, #16
 8008eb2:	d020      	beq.n	8008ef6 <__multiply+0x142>
 8008eb4:	4663      	mov	r3, ip
 8008eb6:	002c      	movs	r4, r5
 8008eb8:	4660      	mov	r0, ip
 8008eba:	2700      	movs	r7, #0
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3414      	adds	r4, #20
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	b291      	uxth	r1, r2
 8008ec6:	4371      	muls	r1, r6
 8008ec8:	6802      	ldr	r2, [r0, #0]
 8008eca:	0c12      	lsrs	r2, r2, #16
 8008ecc:	1889      	adds	r1, r1, r2
 8008ece:	19cf      	adds	r7, r1, r7
 8008ed0:	0439      	lsls	r1, r7, #16
 8008ed2:	430b      	orrs	r3, r1
 8008ed4:	6003      	str	r3, [r0, #0]
 8008ed6:	cc02      	ldmia	r4!, {r1}
 8008ed8:	6843      	ldr	r3, [r0, #4]
 8008eda:	0c09      	lsrs	r1, r1, #16
 8008edc:	4371      	muls	r1, r6
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	0c3f      	lsrs	r7, r7, #16
 8008ee2:	18cb      	adds	r3, r1, r3
 8008ee4:	9a04      	ldr	r2, [sp, #16]
 8008ee6:	19db      	adds	r3, r3, r7
 8008ee8:	0c1f      	lsrs	r7, r3, #16
 8008eea:	3004      	adds	r0, #4
 8008eec:	42a2      	cmp	r2, r4
 8008eee:	d8e7      	bhi.n	8008ec0 <__multiply+0x10c>
 8008ef0:	4662      	mov	r2, ip
 8008ef2:	9905      	ldr	r1, [sp, #20]
 8008ef4:	5053      	str	r3, [r2, r1]
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	2304      	movs	r3, #4
 8008efe:	449c      	add	ip, r3
 8008f00:	e79d      	b.n	8008e3e <__multiply+0x8a>
 8008f02:	9b02      	ldr	r3, [sp, #8]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	9302      	str	r3, [sp, #8]
 8008f08:	e79d      	b.n	8008e46 <__multiply+0x92>
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	0800a61b 	.word	0x0800a61b
 8008f10:	0800a62c 	.word	0x0800a62c

08008f14 <__pow5mult>:
 8008f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f16:	2303      	movs	r3, #3
 8008f18:	0015      	movs	r5, r2
 8008f1a:	0007      	movs	r7, r0
 8008f1c:	000e      	movs	r6, r1
 8008f1e:	401a      	ands	r2, r3
 8008f20:	421d      	tst	r5, r3
 8008f22:	d008      	beq.n	8008f36 <__pow5mult+0x22>
 8008f24:	4925      	ldr	r1, [pc, #148]	; (8008fbc <__pow5mult+0xa8>)
 8008f26:	3a01      	subs	r2, #1
 8008f28:	0092      	lsls	r2, r2, #2
 8008f2a:	5852      	ldr	r2, [r2, r1]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	0031      	movs	r1, r6
 8008f30:	f7ff fe9e 	bl	8008c70 <__multadd>
 8008f34:	0006      	movs	r6, r0
 8008f36:	10ad      	asrs	r5, r5, #2
 8008f38:	d03d      	beq.n	8008fb6 <__pow5mult+0xa2>
 8008f3a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d10f      	bne.n	8008f60 <__pow5mult+0x4c>
 8008f40:	2010      	movs	r0, #16
 8008f42:	f7ff fe17 	bl	8008b74 <malloc>
 8008f46:	1e02      	subs	r2, r0, #0
 8008f48:	6278      	str	r0, [r7, #36]	; 0x24
 8008f4a:	d105      	bne.n	8008f58 <__pow5mult+0x44>
 8008f4c:	21d7      	movs	r1, #215	; 0xd7
 8008f4e:	4b1c      	ldr	r3, [pc, #112]	; (8008fc0 <__pow5mult+0xac>)
 8008f50:	481c      	ldr	r0, [pc, #112]	; (8008fc4 <__pow5mult+0xb0>)
 8008f52:	0049      	lsls	r1, r1, #1
 8008f54:	f000 fc42 	bl	80097dc <__assert_func>
 8008f58:	6044      	str	r4, [r0, #4]
 8008f5a:	6084      	str	r4, [r0, #8]
 8008f5c:	6004      	str	r4, [r0, #0]
 8008f5e:	60c4      	str	r4, [r0, #12]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	689c      	ldr	r4, [r3, #8]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	d108      	bne.n	8008f7c <__pow5mult+0x68>
 8008f6a:	0038      	movs	r0, r7
 8008f6c:	4916      	ldr	r1, [pc, #88]	; (8008fc8 <__pow5mult+0xb4>)
 8008f6e:	f7ff ff0b 	bl	8008d88 <__i2b>
 8008f72:	9b01      	ldr	r3, [sp, #4]
 8008f74:	0004      	movs	r4, r0
 8008f76:	6098      	str	r0, [r3, #8]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6003      	str	r3, [r0, #0]
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	421d      	tst	r5, r3
 8008f80:	d00a      	beq.n	8008f98 <__pow5mult+0x84>
 8008f82:	0031      	movs	r1, r6
 8008f84:	0022      	movs	r2, r4
 8008f86:	0038      	movs	r0, r7
 8008f88:	f7ff ff14 	bl	8008db4 <__multiply>
 8008f8c:	0031      	movs	r1, r6
 8008f8e:	9001      	str	r0, [sp, #4]
 8008f90:	0038      	movs	r0, r7
 8008f92:	f7ff fe49 	bl	8008c28 <_Bfree>
 8008f96:	9e01      	ldr	r6, [sp, #4]
 8008f98:	106d      	asrs	r5, r5, #1
 8008f9a:	d00c      	beq.n	8008fb6 <__pow5mult+0xa2>
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d107      	bne.n	8008fb2 <__pow5mult+0x9e>
 8008fa2:	0022      	movs	r2, r4
 8008fa4:	0021      	movs	r1, r4
 8008fa6:	0038      	movs	r0, r7
 8008fa8:	f7ff ff04 	bl	8008db4 <__multiply>
 8008fac:	2300      	movs	r3, #0
 8008fae:	6020      	str	r0, [r4, #0]
 8008fb0:	6003      	str	r3, [r0, #0]
 8008fb2:	0004      	movs	r4, r0
 8008fb4:	e7e2      	b.n	8008f7c <__pow5mult+0x68>
 8008fb6:	0030      	movs	r0, r6
 8008fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	0800a778 	.word	0x0800a778
 8008fc0:	0800a5a9 	.word	0x0800a5a9
 8008fc4:	0800a62c 	.word	0x0800a62c
 8008fc8:	00000271 	.word	0x00000271

08008fcc <__lshift>:
 8008fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fce:	000c      	movs	r4, r1
 8008fd0:	0017      	movs	r7, r2
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	1155      	asrs	r5, r2, #5
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	18eb      	adds	r3, r5, r3
 8008fda:	9302      	str	r3, [sp, #8]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	6849      	ldr	r1, [r1, #4]
 8008fe2:	68a3      	ldr	r3, [r4, #8]
 8008fe4:	9004      	str	r0, [sp, #16]
 8008fe6:	9a01      	ldr	r2, [sp, #4]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	db10      	blt.n	800900e <__lshift+0x42>
 8008fec:	9804      	ldr	r0, [sp, #16]
 8008fee:	f7ff fdd7 	bl	8008ba0 <_Balloc>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	0006      	movs	r6, r0
 8008ff8:	0019      	movs	r1, r3
 8008ffa:	3214      	adds	r2, #20
 8008ffc:	4298      	cmp	r0, r3
 8008ffe:	d10c      	bne.n	800901a <__lshift+0x4e>
 8009000:	21da      	movs	r1, #218	; 0xda
 8009002:	0002      	movs	r2, r0
 8009004:	4b26      	ldr	r3, [pc, #152]	; (80090a0 <__lshift+0xd4>)
 8009006:	4827      	ldr	r0, [pc, #156]	; (80090a4 <__lshift+0xd8>)
 8009008:	31ff      	adds	r1, #255	; 0xff
 800900a:	f000 fbe7 	bl	80097dc <__assert_func>
 800900e:	3101      	adds	r1, #1
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	e7e8      	b.n	8008fe6 <__lshift+0x1a>
 8009014:	0098      	lsls	r0, r3, #2
 8009016:	5011      	str	r1, [r2, r0]
 8009018:	3301      	adds	r3, #1
 800901a:	42ab      	cmp	r3, r5
 800901c:	dbfa      	blt.n	8009014 <__lshift+0x48>
 800901e:	43eb      	mvns	r3, r5
 8009020:	17db      	asrs	r3, r3, #31
 8009022:	401d      	ands	r5, r3
 8009024:	211f      	movs	r1, #31
 8009026:	0023      	movs	r3, r4
 8009028:	0038      	movs	r0, r7
 800902a:	00ad      	lsls	r5, r5, #2
 800902c:	1955      	adds	r5, r2, r5
 800902e:	6922      	ldr	r2, [r4, #16]
 8009030:	3314      	adds	r3, #20
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	4008      	ands	r0, r1
 8009036:	4684      	mov	ip, r0
 8009038:	189a      	adds	r2, r3, r2
 800903a:	420f      	tst	r7, r1
 800903c:	d02a      	beq.n	8009094 <__lshift+0xc8>
 800903e:	3101      	adds	r1, #1
 8009040:	1a09      	subs	r1, r1, r0
 8009042:	9105      	str	r1, [sp, #20]
 8009044:	2100      	movs	r1, #0
 8009046:	9503      	str	r5, [sp, #12]
 8009048:	4667      	mov	r7, ip
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	40b8      	lsls	r0, r7
 800904e:	4301      	orrs	r1, r0
 8009050:	9803      	ldr	r0, [sp, #12]
 8009052:	c002      	stmia	r0!, {r1}
 8009054:	cb02      	ldmia	r3!, {r1}
 8009056:	9003      	str	r0, [sp, #12]
 8009058:	9805      	ldr	r0, [sp, #20]
 800905a:	40c1      	lsrs	r1, r0
 800905c:	429a      	cmp	r2, r3
 800905e:	d8f3      	bhi.n	8009048 <__lshift+0x7c>
 8009060:	0020      	movs	r0, r4
 8009062:	3015      	adds	r0, #21
 8009064:	2304      	movs	r3, #4
 8009066:	4282      	cmp	r2, r0
 8009068:	d304      	bcc.n	8009074 <__lshift+0xa8>
 800906a:	1b13      	subs	r3, r2, r4
 800906c:	3b15      	subs	r3, #21
 800906e:	089b      	lsrs	r3, r3, #2
 8009070:	3301      	adds	r3, #1
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	50e9      	str	r1, [r5, r3]
 8009076:	2900      	cmp	r1, #0
 8009078:	d002      	beq.n	8009080 <__lshift+0xb4>
 800907a:	9b02      	ldr	r3, [sp, #8]
 800907c:	3302      	adds	r3, #2
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	9804      	ldr	r0, [sp, #16]
 8009084:	3b01      	subs	r3, #1
 8009086:	0021      	movs	r1, r4
 8009088:	6133      	str	r3, [r6, #16]
 800908a:	f7ff fdcd 	bl	8008c28 <_Bfree>
 800908e:	0030      	movs	r0, r6
 8009090:	b007      	add	sp, #28
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009094:	cb02      	ldmia	r3!, {r1}
 8009096:	c502      	stmia	r5!, {r1}
 8009098:	429a      	cmp	r2, r3
 800909a:	d8fb      	bhi.n	8009094 <__lshift+0xc8>
 800909c:	e7f0      	b.n	8009080 <__lshift+0xb4>
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	0800a61b 	.word	0x0800a61b
 80090a4:	0800a62c 	.word	0x0800a62c

080090a8 <__mcmp>:
 80090a8:	6902      	ldr	r2, [r0, #16]
 80090aa:	690b      	ldr	r3, [r1, #16]
 80090ac:	b530      	push	{r4, r5, lr}
 80090ae:	0004      	movs	r4, r0
 80090b0:	1ad0      	subs	r0, r2, r3
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d10d      	bne.n	80090d2 <__mcmp+0x2a>
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	3414      	adds	r4, #20
 80090ba:	3114      	adds	r1, #20
 80090bc:	18e2      	adds	r2, r4, r3
 80090be:	18c9      	adds	r1, r1, r3
 80090c0:	3a04      	subs	r2, #4
 80090c2:	3904      	subs	r1, #4
 80090c4:	6815      	ldr	r5, [r2, #0]
 80090c6:	680b      	ldr	r3, [r1, #0]
 80090c8:	429d      	cmp	r5, r3
 80090ca:	d003      	beq.n	80090d4 <__mcmp+0x2c>
 80090cc:	2001      	movs	r0, #1
 80090ce:	429d      	cmp	r5, r3
 80090d0:	d303      	bcc.n	80090da <__mcmp+0x32>
 80090d2:	bd30      	pop	{r4, r5, pc}
 80090d4:	4294      	cmp	r4, r2
 80090d6:	d3f3      	bcc.n	80090c0 <__mcmp+0x18>
 80090d8:	e7fb      	b.n	80090d2 <__mcmp+0x2a>
 80090da:	4240      	negs	r0, r0
 80090dc:	e7f9      	b.n	80090d2 <__mcmp+0x2a>
	...

080090e0 <__mdiff>:
 80090e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e2:	000e      	movs	r6, r1
 80090e4:	0007      	movs	r7, r0
 80090e6:	0011      	movs	r1, r2
 80090e8:	0030      	movs	r0, r6
 80090ea:	b087      	sub	sp, #28
 80090ec:	0014      	movs	r4, r2
 80090ee:	f7ff ffdb 	bl	80090a8 <__mcmp>
 80090f2:	1e05      	subs	r5, r0, #0
 80090f4:	d110      	bne.n	8009118 <__mdiff+0x38>
 80090f6:	0001      	movs	r1, r0
 80090f8:	0038      	movs	r0, r7
 80090fa:	f7ff fd51 	bl	8008ba0 <_Balloc>
 80090fe:	1e02      	subs	r2, r0, #0
 8009100:	d104      	bne.n	800910c <__mdiff+0x2c>
 8009102:	4b40      	ldr	r3, [pc, #256]	; (8009204 <__mdiff+0x124>)
 8009104:	4940      	ldr	r1, [pc, #256]	; (8009208 <__mdiff+0x128>)
 8009106:	4841      	ldr	r0, [pc, #260]	; (800920c <__mdiff+0x12c>)
 8009108:	f000 fb68 	bl	80097dc <__assert_func>
 800910c:	2301      	movs	r3, #1
 800910e:	6145      	str	r5, [r0, #20]
 8009110:	6103      	str	r3, [r0, #16]
 8009112:	0010      	movs	r0, r2
 8009114:	b007      	add	sp, #28
 8009116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009118:	2301      	movs	r3, #1
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	2800      	cmp	r0, #0
 800911e:	db04      	blt.n	800912a <__mdiff+0x4a>
 8009120:	0023      	movs	r3, r4
 8009122:	0034      	movs	r4, r6
 8009124:	001e      	movs	r6, r3
 8009126:	2300      	movs	r3, #0
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	0038      	movs	r0, r7
 800912c:	6861      	ldr	r1, [r4, #4]
 800912e:	f7ff fd37 	bl	8008ba0 <_Balloc>
 8009132:	1e02      	subs	r2, r0, #0
 8009134:	d103      	bne.n	800913e <__mdiff+0x5e>
 8009136:	2190      	movs	r1, #144	; 0x90
 8009138:	4b32      	ldr	r3, [pc, #200]	; (8009204 <__mdiff+0x124>)
 800913a:	0089      	lsls	r1, r1, #2
 800913c:	e7e3      	b.n	8009106 <__mdiff+0x26>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	2700      	movs	r7, #0
 8009142:	60c3      	str	r3, [r0, #12]
 8009144:	6920      	ldr	r0, [r4, #16]
 8009146:	3414      	adds	r4, #20
 8009148:	9401      	str	r4, [sp, #4]
 800914a:	9b01      	ldr	r3, [sp, #4]
 800914c:	0084      	lsls	r4, r0, #2
 800914e:	191b      	adds	r3, r3, r4
 8009150:	0034      	movs	r4, r6
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	6933      	ldr	r3, [r6, #16]
 8009156:	3414      	adds	r4, #20
 8009158:	0099      	lsls	r1, r3, #2
 800915a:	1863      	adds	r3, r4, r1
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	0013      	movs	r3, r2
 8009160:	3314      	adds	r3, #20
 8009162:	469c      	mov	ip, r3
 8009164:	9305      	str	r3, [sp, #20]
 8009166:	9b01      	ldr	r3, [sp, #4]
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	cc02      	ldmia	r4!, {r1}
 800916e:	cb20      	ldmia	r3!, {r5}
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	b2ab      	uxth	r3, r5
 8009174:	19df      	adds	r7, r3, r7
 8009176:	b28b      	uxth	r3, r1
 8009178:	1afb      	subs	r3, r7, r3
 800917a:	0c09      	lsrs	r1, r1, #16
 800917c:	0c2d      	lsrs	r5, r5, #16
 800917e:	1a6d      	subs	r5, r5, r1
 8009180:	1419      	asrs	r1, r3, #16
 8009182:	186d      	adds	r5, r5, r1
 8009184:	4661      	mov	r1, ip
 8009186:	142f      	asrs	r7, r5, #16
 8009188:	b29b      	uxth	r3, r3
 800918a:	042d      	lsls	r5, r5, #16
 800918c:	432b      	orrs	r3, r5
 800918e:	c108      	stmia	r1!, {r3}
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	468c      	mov	ip, r1
 8009194:	42a3      	cmp	r3, r4
 8009196:	d8e8      	bhi.n	800916a <__mdiff+0x8a>
 8009198:	0031      	movs	r1, r6
 800919a:	9c03      	ldr	r4, [sp, #12]
 800919c:	3115      	adds	r1, #21
 800919e:	2304      	movs	r3, #4
 80091a0:	428c      	cmp	r4, r1
 80091a2:	d304      	bcc.n	80091ae <__mdiff+0xce>
 80091a4:	1ba3      	subs	r3, r4, r6
 80091a6:	3b15      	subs	r3, #21
 80091a8:	089b      	lsrs	r3, r3, #2
 80091aa:	3301      	adds	r3, #1
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	9901      	ldr	r1, [sp, #4]
 80091b0:	18cc      	adds	r4, r1, r3
 80091b2:	9905      	ldr	r1, [sp, #20]
 80091b4:	0026      	movs	r6, r4
 80091b6:	18cb      	adds	r3, r1, r3
 80091b8:	469c      	mov	ip, r3
 80091ba:	9902      	ldr	r1, [sp, #8]
 80091bc:	428e      	cmp	r6, r1
 80091be:	d310      	bcc.n	80091e2 <__mdiff+0x102>
 80091c0:	9e02      	ldr	r6, [sp, #8]
 80091c2:	1ee1      	subs	r1, r4, #3
 80091c4:	2500      	movs	r5, #0
 80091c6:	428e      	cmp	r6, r1
 80091c8:	d304      	bcc.n	80091d4 <__mdiff+0xf4>
 80091ca:	0031      	movs	r1, r6
 80091cc:	3103      	adds	r1, #3
 80091ce:	1b0c      	subs	r4, r1, r4
 80091d0:	08a4      	lsrs	r4, r4, #2
 80091d2:	00a5      	lsls	r5, r4, #2
 80091d4:	195b      	adds	r3, r3, r5
 80091d6:	3b04      	subs	r3, #4
 80091d8:	6819      	ldr	r1, [r3, #0]
 80091da:	2900      	cmp	r1, #0
 80091dc:	d00f      	beq.n	80091fe <__mdiff+0x11e>
 80091de:	6110      	str	r0, [r2, #16]
 80091e0:	e797      	b.n	8009112 <__mdiff+0x32>
 80091e2:	ce02      	ldmia	r6!, {r1}
 80091e4:	b28d      	uxth	r5, r1
 80091e6:	19ed      	adds	r5, r5, r7
 80091e8:	0c0f      	lsrs	r7, r1, #16
 80091ea:	1429      	asrs	r1, r5, #16
 80091ec:	1879      	adds	r1, r7, r1
 80091ee:	140f      	asrs	r7, r1, #16
 80091f0:	b2ad      	uxth	r5, r5
 80091f2:	0409      	lsls	r1, r1, #16
 80091f4:	430d      	orrs	r5, r1
 80091f6:	4661      	mov	r1, ip
 80091f8:	c120      	stmia	r1!, {r5}
 80091fa:	468c      	mov	ip, r1
 80091fc:	e7dd      	b.n	80091ba <__mdiff+0xda>
 80091fe:	3801      	subs	r0, #1
 8009200:	e7e9      	b.n	80091d6 <__mdiff+0xf6>
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	0800a61b 	.word	0x0800a61b
 8009208:	00000232 	.word	0x00000232
 800920c:	0800a62c 	.word	0x0800a62c

08009210 <__d2b>:
 8009210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009212:	2101      	movs	r1, #1
 8009214:	0014      	movs	r4, r2
 8009216:	001e      	movs	r6, r3
 8009218:	9f08      	ldr	r7, [sp, #32]
 800921a:	f7ff fcc1 	bl	8008ba0 <_Balloc>
 800921e:	1e05      	subs	r5, r0, #0
 8009220:	d105      	bne.n	800922e <__d2b+0x1e>
 8009222:	0002      	movs	r2, r0
 8009224:	4b26      	ldr	r3, [pc, #152]	; (80092c0 <__d2b+0xb0>)
 8009226:	4927      	ldr	r1, [pc, #156]	; (80092c4 <__d2b+0xb4>)
 8009228:	4827      	ldr	r0, [pc, #156]	; (80092c8 <__d2b+0xb8>)
 800922a:	f000 fad7 	bl	80097dc <__assert_func>
 800922e:	0333      	lsls	r3, r6, #12
 8009230:	0076      	lsls	r6, r6, #1
 8009232:	0b1b      	lsrs	r3, r3, #12
 8009234:	0d76      	lsrs	r6, r6, #21
 8009236:	d124      	bne.n	8009282 <__d2b+0x72>
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	2c00      	cmp	r4, #0
 800923c:	d027      	beq.n	800928e <__d2b+0x7e>
 800923e:	4668      	mov	r0, sp
 8009240:	9400      	str	r4, [sp, #0]
 8009242:	f7ff fd73 	bl	8008d2c <__lo0bits>
 8009246:	9c00      	ldr	r4, [sp, #0]
 8009248:	2800      	cmp	r0, #0
 800924a:	d01e      	beq.n	800928a <__d2b+0x7a>
 800924c:	9b01      	ldr	r3, [sp, #4]
 800924e:	2120      	movs	r1, #32
 8009250:	001a      	movs	r2, r3
 8009252:	1a09      	subs	r1, r1, r0
 8009254:	408a      	lsls	r2, r1
 8009256:	40c3      	lsrs	r3, r0
 8009258:	4322      	orrs	r2, r4
 800925a:	616a      	str	r2, [r5, #20]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	9c01      	ldr	r4, [sp, #4]
 8009260:	61ac      	str	r4, [r5, #24]
 8009262:	1e63      	subs	r3, r4, #1
 8009264:	419c      	sbcs	r4, r3
 8009266:	3401      	adds	r4, #1
 8009268:	612c      	str	r4, [r5, #16]
 800926a:	2e00      	cmp	r6, #0
 800926c:	d018      	beq.n	80092a0 <__d2b+0x90>
 800926e:	4b17      	ldr	r3, [pc, #92]	; (80092cc <__d2b+0xbc>)
 8009270:	18f6      	adds	r6, r6, r3
 8009272:	2335      	movs	r3, #53	; 0x35
 8009274:	1836      	adds	r6, r6, r0
 8009276:	1a18      	subs	r0, r3, r0
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	603e      	str	r6, [r7, #0]
 800927c:	6018      	str	r0, [r3, #0]
 800927e:	0028      	movs	r0, r5
 8009280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009282:	2280      	movs	r2, #128	; 0x80
 8009284:	0352      	lsls	r2, r2, #13
 8009286:	4313      	orrs	r3, r2
 8009288:	e7d6      	b.n	8009238 <__d2b+0x28>
 800928a:	616c      	str	r4, [r5, #20]
 800928c:	e7e7      	b.n	800925e <__d2b+0x4e>
 800928e:	a801      	add	r0, sp, #4
 8009290:	f7ff fd4c 	bl	8008d2c <__lo0bits>
 8009294:	2401      	movs	r4, #1
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	612c      	str	r4, [r5, #16]
 800929a:	616b      	str	r3, [r5, #20]
 800929c:	3020      	adds	r0, #32
 800929e:	e7e4      	b.n	800926a <__d2b+0x5a>
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <__d2b+0xc0>)
 80092a2:	18c0      	adds	r0, r0, r3
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <__d2b+0xc4>)
 80092a6:	6038      	str	r0, [r7, #0]
 80092a8:	18e3      	adds	r3, r4, r3
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	18eb      	adds	r3, r5, r3
 80092ae:	6958      	ldr	r0, [r3, #20]
 80092b0:	f7ff fd22 	bl	8008cf8 <__hi0bits>
 80092b4:	0164      	lsls	r4, r4, #5
 80092b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b8:	1a24      	subs	r4, r4, r0
 80092ba:	601c      	str	r4, [r3, #0]
 80092bc:	e7df      	b.n	800927e <__d2b+0x6e>
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	0800a61b 	.word	0x0800a61b
 80092c4:	0000030a 	.word	0x0000030a
 80092c8:	0800a62c 	.word	0x0800a62c
 80092cc:	fffffbcd 	.word	0xfffffbcd
 80092d0:	fffffbce 	.word	0xfffffbce
 80092d4:	3fffffff 	.word	0x3fffffff

080092d8 <_calloc_r>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	0c13      	lsrs	r3, r2, #16
 80092dc:	0c0d      	lsrs	r5, r1, #16
 80092de:	d11e      	bne.n	800931e <_calloc_r+0x46>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10c      	bne.n	80092fe <_calloc_r+0x26>
 80092e4:	b289      	uxth	r1, r1
 80092e6:	b294      	uxth	r4, r2
 80092e8:	434c      	muls	r4, r1
 80092ea:	0021      	movs	r1, r4
 80092ec:	f000 f88c 	bl	8009408 <_malloc_r>
 80092f0:	1e05      	subs	r5, r0, #0
 80092f2:	d01b      	beq.n	800932c <_calloc_r+0x54>
 80092f4:	0022      	movs	r2, r4
 80092f6:	2100      	movs	r1, #0
 80092f8:	f7fe f8fc 	bl	80074f4 <memset>
 80092fc:	e016      	b.n	800932c <_calloc_r+0x54>
 80092fe:	1c1d      	adds	r5, r3, #0
 8009300:	1c0b      	adds	r3, r1, #0
 8009302:	b292      	uxth	r2, r2
 8009304:	b289      	uxth	r1, r1
 8009306:	b29c      	uxth	r4, r3
 8009308:	4351      	muls	r1, r2
 800930a:	b2ab      	uxth	r3, r5
 800930c:	4363      	muls	r3, r4
 800930e:	0c0c      	lsrs	r4, r1, #16
 8009310:	191c      	adds	r4, r3, r4
 8009312:	0c22      	lsrs	r2, r4, #16
 8009314:	d107      	bne.n	8009326 <_calloc_r+0x4e>
 8009316:	0424      	lsls	r4, r4, #16
 8009318:	b289      	uxth	r1, r1
 800931a:	430c      	orrs	r4, r1
 800931c:	e7e5      	b.n	80092ea <_calloc_r+0x12>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <_calloc_r+0x4e>
 8009322:	1c13      	adds	r3, r2, #0
 8009324:	e7ed      	b.n	8009302 <_calloc_r+0x2a>
 8009326:	230c      	movs	r3, #12
 8009328:	2500      	movs	r5, #0
 800932a:	6003      	str	r3, [r0, #0]
 800932c:	0028      	movs	r0, r5
 800932e:	bd70      	pop	{r4, r5, r6, pc}

08009330 <_free_r>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	0005      	movs	r5, r0
 8009334:	2900      	cmp	r1, #0
 8009336:	d010      	beq.n	800935a <_free_r+0x2a>
 8009338:	1f0c      	subs	r4, r1, #4
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	da00      	bge.n	8009342 <_free_r+0x12>
 8009340:	18e4      	adds	r4, r4, r3
 8009342:	0028      	movs	r0, r5
 8009344:	f000 fa8a 	bl	800985c <__malloc_lock>
 8009348:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <_free_r+0x90>)
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <_free_r+0x2c>
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	6014      	str	r4, [r2, #0]
 8009354:	0028      	movs	r0, r5
 8009356:	f000 fa89 	bl	800986c <__malloc_unlock>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	42a3      	cmp	r3, r4
 800935e:	d908      	bls.n	8009372 <_free_r+0x42>
 8009360:	6821      	ldr	r1, [r4, #0]
 8009362:	1860      	adds	r0, r4, r1
 8009364:	4283      	cmp	r3, r0
 8009366:	d1f3      	bne.n	8009350 <_free_r+0x20>
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	1841      	adds	r1, r0, r1
 800936e:	6021      	str	r1, [r4, #0]
 8009370:	e7ee      	b.n	8009350 <_free_r+0x20>
 8009372:	001a      	movs	r2, r3
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <_free_r+0x4e>
 800937a:	42a3      	cmp	r3, r4
 800937c:	d9f9      	bls.n	8009372 <_free_r+0x42>
 800937e:	6811      	ldr	r1, [r2, #0]
 8009380:	1850      	adds	r0, r2, r1
 8009382:	42a0      	cmp	r0, r4
 8009384:	d10b      	bne.n	800939e <_free_r+0x6e>
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	1809      	adds	r1, r1, r0
 800938a:	1850      	adds	r0, r2, r1
 800938c:	6011      	str	r1, [r2, #0]
 800938e:	4283      	cmp	r3, r0
 8009390:	d1e0      	bne.n	8009354 <_free_r+0x24>
 8009392:	6818      	ldr	r0, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	1841      	adds	r1, r0, r1
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	6053      	str	r3, [r2, #4]
 800939c:	e7da      	b.n	8009354 <_free_r+0x24>
 800939e:	42a0      	cmp	r0, r4
 80093a0:	d902      	bls.n	80093a8 <_free_r+0x78>
 80093a2:	230c      	movs	r3, #12
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	e7d5      	b.n	8009354 <_free_r+0x24>
 80093a8:	6821      	ldr	r1, [r4, #0]
 80093aa:	1860      	adds	r0, r4, r1
 80093ac:	4283      	cmp	r3, r0
 80093ae:	d103      	bne.n	80093b8 <_free_r+0x88>
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	1841      	adds	r1, r0, r1
 80093b6:	6021      	str	r1, [r4, #0]
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	6054      	str	r4, [r2, #4]
 80093bc:	e7ca      	b.n	8009354 <_free_r+0x24>
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	20000424 	.word	0x20000424

080093c4 <sbrk_aligned>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0f      	ldr	r6, [pc, #60]	; (8009404 <sbrk_aligned+0x40>)
 80093c8:	000d      	movs	r5, r1
 80093ca:	6831      	ldr	r1, [r6, #0]
 80093cc:	0004      	movs	r4, r0
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d102      	bne.n	80093d8 <sbrk_aligned+0x14>
 80093d2:	f000 f9f1 	bl	80097b8 <_sbrk_r>
 80093d6:	6030      	str	r0, [r6, #0]
 80093d8:	0029      	movs	r1, r5
 80093da:	0020      	movs	r0, r4
 80093dc:	f000 f9ec 	bl	80097b8 <_sbrk_r>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d00a      	beq.n	80093fa <sbrk_aligned+0x36>
 80093e4:	2303      	movs	r3, #3
 80093e6:	1cc5      	adds	r5, r0, #3
 80093e8:	439d      	bics	r5, r3
 80093ea:	42a8      	cmp	r0, r5
 80093ec:	d007      	beq.n	80093fe <sbrk_aligned+0x3a>
 80093ee:	1a29      	subs	r1, r5, r0
 80093f0:	0020      	movs	r0, r4
 80093f2:	f000 f9e1 	bl	80097b8 <_sbrk_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d101      	bne.n	80093fe <sbrk_aligned+0x3a>
 80093fa:	2501      	movs	r5, #1
 80093fc:	426d      	negs	r5, r5
 80093fe:	0028      	movs	r0, r5
 8009400:	bd70      	pop	{r4, r5, r6, pc}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	20000428 	.word	0x20000428

08009408 <_malloc_r>:
 8009408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800940a:	2203      	movs	r2, #3
 800940c:	1ccb      	adds	r3, r1, #3
 800940e:	4393      	bics	r3, r2
 8009410:	3308      	adds	r3, #8
 8009412:	0006      	movs	r6, r0
 8009414:	001f      	movs	r7, r3
 8009416:	2b0c      	cmp	r3, #12
 8009418:	d232      	bcs.n	8009480 <_malloc_r+0x78>
 800941a:	270c      	movs	r7, #12
 800941c:	42b9      	cmp	r1, r7
 800941e:	d831      	bhi.n	8009484 <_malloc_r+0x7c>
 8009420:	0030      	movs	r0, r6
 8009422:	f000 fa1b 	bl	800985c <__malloc_lock>
 8009426:	4d32      	ldr	r5, [pc, #200]	; (80094f0 <_malloc_r+0xe8>)
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	001c      	movs	r4, r3
 800942c:	2c00      	cmp	r4, #0
 800942e:	d12e      	bne.n	800948e <_malloc_r+0x86>
 8009430:	0039      	movs	r1, r7
 8009432:	0030      	movs	r0, r6
 8009434:	f7ff ffc6 	bl	80093c4 <sbrk_aligned>
 8009438:	0004      	movs	r4, r0
 800943a:	1c43      	adds	r3, r0, #1
 800943c:	d11e      	bne.n	800947c <_malloc_r+0x74>
 800943e:	682c      	ldr	r4, [r5, #0]
 8009440:	0025      	movs	r5, r4
 8009442:	2d00      	cmp	r5, #0
 8009444:	d14a      	bne.n	80094dc <_malloc_r+0xd4>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	0029      	movs	r1, r5
 800944a:	18e3      	adds	r3, r4, r3
 800944c:	0030      	movs	r0, r6
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	f000 f9b2 	bl	80097b8 <_sbrk_r>
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	4283      	cmp	r3, r0
 8009458:	d143      	bne.n	80094e2 <_malloc_r+0xda>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	3703      	adds	r7, #3
 800945e:	1aff      	subs	r7, r7, r3
 8009460:	2303      	movs	r3, #3
 8009462:	439f      	bics	r7, r3
 8009464:	3708      	adds	r7, #8
 8009466:	2f0c      	cmp	r7, #12
 8009468:	d200      	bcs.n	800946c <_malloc_r+0x64>
 800946a:	270c      	movs	r7, #12
 800946c:	0039      	movs	r1, r7
 800946e:	0030      	movs	r0, r6
 8009470:	f7ff ffa8 	bl	80093c4 <sbrk_aligned>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d034      	beq.n	80094e2 <_malloc_r+0xda>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	19df      	adds	r7, r3, r7
 800947c:	6027      	str	r7, [r4, #0]
 800947e:	e013      	b.n	80094a8 <_malloc_r+0xa0>
 8009480:	2b00      	cmp	r3, #0
 8009482:	dacb      	bge.n	800941c <_malloc_r+0x14>
 8009484:	230c      	movs	r3, #12
 8009486:	2500      	movs	r5, #0
 8009488:	6033      	str	r3, [r6, #0]
 800948a:	0028      	movs	r0, r5
 800948c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	1bd1      	subs	r1, r2, r7
 8009492:	d420      	bmi.n	80094d6 <_malloc_r+0xce>
 8009494:	290b      	cmp	r1, #11
 8009496:	d917      	bls.n	80094c8 <_malloc_r+0xc0>
 8009498:	19e2      	adds	r2, r4, r7
 800949a:	6027      	str	r7, [r4, #0]
 800949c:	42a3      	cmp	r3, r4
 800949e:	d111      	bne.n	80094c4 <_malloc_r+0xbc>
 80094a0:	602a      	str	r2, [r5, #0]
 80094a2:	6863      	ldr	r3, [r4, #4]
 80094a4:	6011      	str	r1, [r2, #0]
 80094a6:	6053      	str	r3, [r2, #4]
 80094a8:	0030      	movs	r0, r6
 80094aa:	0025      	movs	r5, r4
 80094ac:	f000 f9de 	bl	800986c <__malloc_unlock>
 80094b0:	2207      	movs	r2, #7
 80094b2:	350b      	adds	r5, #11
 80094b4:	1d23      	adds	r3, r4, #4
 80094b6:	4395      	bics	r5, r2
 80094b8:	1aea      	subs	r2, r5, r3
 80094ba:	429d      	cmp	r5, r3
 80094bc:	d0e5      	beq.n	800948a <_malloc_r+0x82>
 80094be:	1b5b      	subs	r3, r3, r5
 80094c0:	50a3      	str	r3, [r4, r2]
 80094c2:	e7e2      	b.n	800948a <_malloc_r+0x82>
 80094c4:	605a      	str	r2, [r3, #4]
 80094c6:	e7ec      	b.n	80094a2 <_malloc_r+0x9a>
 80094c8:	6862      	ldr	r2, [r4, #4]
 80094ca:	42a3      	cmp	r3, r4
 80094cc:	d101      	bne.n	80094d2 <_malloc_r+0xca>
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	e7ea      	b.n	80094a8 <_malloc_r+0xa0>
 80094d2:	605a      	str	r2, [r3, #4]
 80094d4:	e7e8      	b.n	80094a8 <_malloc_r+0xa0>
 80094d6:	0023      	movs	r3, r4
 80094d8:	6864      	ldr	r4, [r4, #4]
 80094da:	e7a7      	b.n	800942c <_malloc_r+0x24>
 80094dc:	002c      	movs	r4, r5
 80094de:	686d      	ldr	r5, [r5, #4]
 80094e0:	e7af      	b.n	8009442 <_malloc_r+0x3a>
 80094e2:	230c      	movs	r3, #12
 80094e4:	0030      	movs	r0, r6
 80094e6:	6033      	str	r3, [r6, #0]
 80094e8:	f000 f9c0 	bl	800986c <__malloc_unlock>
 80094ec:	e7cd      	b.n	800948a <_malloc_r+0x82>
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	20000424 	.word	0x20000424

080094f4 <__ssputs_r>:
 80094f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f6:	688e      	ldr	r6, [r1, #8]
 80094f8:	b085      	sub	sp, #20
 80094fa:	0007      	movs	r7, r0
 80094fc:	000c      	movs	r4, r1
 80094fe:	9203      	str	r2, [sp, #12]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	429e      	cmp	r6, r3
 8009504:	d83c      	bhi.n	8009580 <__ssputs_r+0x8c>
 8009506:	2390      	movs	r3, #144	; 0x90
 8009508:	898a      	ldrh	r2, [r1, #12]
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	421a      	tst	r2, r3
 800950e:	d034      	beq.n	800957a <__ssputs_r+0x86>
 8009510:	6909      	ldr	r1, [r1, #16]
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	6960      	ldr	r0, [r4, #20]
 8009516:	1a5b      	subs	r3, r3, r1
 8009518:	9302      	str	r3, [sp, #8]
 800951a:	2303      	movs	r3, #3
 800951c:	4343      	muls	r3, r0
 800951e:	0fdd      	lsrs	r5, r3, #31
 8009520:	18ed      	adds	r5, r5, r3
 8009522:	9b01      	ldr	r3, [sp, #4]
 8009524:	9802      	ldr	r0, [sp, #8]
 8009526:	3301      	adds	r3, #1
 8009528:	181b      	adds	r3, r3, r0
 800952a:	106d      	asrs	r5, r5, #1
 800952c:	42ab      	cmp	r3, r5
 800952e:	d900      	bls.n	8009532 <__ssputs_r+0x3e>
 8009530:	001d      	movs	r5, r3
 8009532:	0553      	lsls	r3, r2, #21
 8009534:	d532      	bpl.n	800959c <__ssputs_r+0xa8>
 8009536:	0029      	movs	r1, r5
 8009538:	0038      	movs	r0, r7
 800953a:	f7ff ff65 	bl	8009408 <_malloc_r>
 800953e:	1e06      	subs	r6, r0, #0
 8009540:	d109      	bne.n	8009556 <__ssputs_r+0x62>
 8009542:	230c      	movs	r3, #12
 8009544:	603b      	str	r3, [r7, #0]
 8009546:	2340      	movs	r3, #64	; 0x40
 8009548:	2001      	movs	r0, #1
 800954a:	89a2      	ldrh	r2, [r4, #12]
 800954c:	4240      	negs	r0, r0
 800954e:	4313      	orrs	r3, r2
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	b005      	add	sp, #20
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009556:	9a02      	ldr	r2, [sp, #8]
 8009558:	6921      	ldr	r1, [r4, #16]
 800955a:	f7fd ffaf 	bl	80074bc <memcpy>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	4a14      	ldr	r2, [pc, #80]	; (80095b4 <__ssputs_r+0xc0>)
 8009562:	401a      	ands	r2, r3
 8009564:	2380      	movs	r3, #128	; 0x80
 8009566:	4313      	orrs	r3, r2
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	6126      	str	r6, [r4, #16]
 800956e:	18f6      	adds	r6, r6, r3
 8009570:	6026      	str	r6, [r4, #0]
 8009572:	6165      	str	r5, [r4, #20]
 8009574:	9e01      	ldr	r6, [sp, #4]
 8009576:	1aed      	subs	r5, r5, r3
 8009578:	60a5      	str	r5, [r4, #8]
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	429e      	cmp	r6, r3
 800957e:	d900      	bls.n	8009582 <__ssputs_r+0x8e>
 8009580:	9e01      	ldr	r6, [sp, #4]
 8009582:	0032      	movs	r2, r6
 8009584:	9903      	ldr	r1, [sp, #12]
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	f7fd ffa1 	bl	80074ce <memmove>
 800958c:	68a3      	ldr	r3, [r4, #8]
 800958e:	2000      	movs	r0, #0
 8009590:	1b9b      	subs	r3, r3, r6
 8009592:	60a3      	str	r3, [r4, #8]
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	199e      	adds	r6, r3, r6
 8009598:	6026      	str	r6, [r4, #0]
 800959a:	e7da      	b.n	8009552 <__ssputs_r+0x5e>
 800959c:	002a      	movs	r2, r5
 800959e:	0038      	movs	r0, r7
 80095a0:	f000 f96c 	bl	800987c <_realloc_r>
 80095a4:	1e06      	subs	r6, r0, #0
 80095a6:	d1e0      	bne.n	800956a <__ssputs_r+0x76>
 80095a8:	0038      	movs	r0, r7
 80095aa:	6921      	ldr	r1, [r4, #16]
 80095ac:	f7ff fec0 	bl	8009330 <_free_r>
 80095b0:	e7c7      	b.n	8009542 <__ssputs_r+0x4e>
 80095b2:	46c0      	nop			; (mov r8, r8)
 80095b4:	fffffb7f 	.word	0xfffffb7f

080095b8 <_svfiprintf_r>:
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ba:	b0a1      	sub	sp, #132	; 0x84
 80095bc:	9003      	str	r0, [sp, #12]
 80095be:	001d      	movs	r5, r3
 80095c0:	898b      	ldrh	r3, [r1, #12]
 80095c2:	000f      	movs	r7, r1
 80095c4:	0016      	movs	r6, r2
 80095c6:	061b      	lsls	r3, r3, #24
 80095c8:	d511      	bpl.n	80095ee <_svfiprintf_r+0x36>
 80095ca:	690b      	ldr	r3, [r1, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10e      	bne.n	80095ee <_svfiprintf_r+0x36>
 80095d0:	2140      	movs	r1, #64	; 0x40
 80095d2:	f7ff ff19 	bl	8009408 <_malloc_r>
 80095d6:	6038      	str	r0, [r7, #0]
 80095d8:	6138      	str	r0, [r7, #16]
 80095da:	2800      	cmp	r0, #0
 80095dc:	d105      	bne.n	80095ea <_svfiprintf_r+0x32>
 80095de:	230c      	movs	r3, #12
 80095e0:	9a03      	ldr	r2, [sp, #12]
 80095e2:	3801      	subs	r0, #1
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	b021      	add	sp, #132	; 0x84
 80095e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ea:	2340      	movs	r3, #64	; 0x40
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	2300      	movs	r3, #0
 80095f0:	ac08      	add	r4, sp, #32
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	3320      	adds	r3, #32
 80095f6:	7663      	strb	r3, [r4, #25]
 80095f8:	3310      	adds	r3, #16
 80095fa:	76a3      	strb	r3, [r4, #26]
 80095fc:	9507      	str	r5, [sp, #28]
 80095fe:	0035      	movs	r5, r6
 8009600:	782b      	ldrb	r3, [r5, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <_svfiprintf_r+0x52>
 8009606:	2b25      	cmp	r3, #37	; 0x25
 8009608:	d147      	bne.n	800969a <_svfiprintf_r+0xe2>
 800960a:	1bab      	subs	r3, r5, r6
 800960c:	9305      	str	r3, [sp, #20]
 800960e:	42b5      	cmp	r5, r6
 8009610:	d00c      	beq.n	800962c <_svfiprintf_r+0x74>
 8009612:	0032      	movs	r2, r6
 8009614:	0039      	movs	r1, r7
 8009616:	9803      	ldr	r0, [sp, #12]
 8009618:	f7ff ff6c 	bl	80094f4 <__ssputs_r>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d100      	bne.n	8009622 <_svfiprintf_r+0x6a>
 8009620:	e0ae      	b.n	8009780 <_svfiprintf_r+0x1c8>
 8009622:	6962      	ldr	r2, [r4, #20]
 8009624:	9b05      	ldr	r3, [sp, #20]
 8009626:	4694      	mov	ip, r2
 8009628:	4463      	add	r3, ip
 800962a:	6163      	str	r3, [r4, #20]
 800962c:	782b      	ldrb	r3, [r5, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d100      	bne.n	8009634 <_svfiprintf_r+0x7c>
 8009632:	e0a5      	b.n	8009780 <_svfiprintf_r+0x1c8>
 8009634:	2201      	movs	r2, #1
 8009636:	2300      	movs	r3, #0
 8009638:	4252      	negs	r2, r2
 800963a:	6062      	str	r2, [r4, #4]
 800963c:	a904      	add	r1, sp, #16
 800963e:	3254      	adds	r2, #84	; 0x54
 8009640:	1852      	adds	r2, r2, r1
 8009642:	1c6e      	adds	r6, r5, #1
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	60e3      	str	r3, [r4, #12]
 8009648:	60a3      	str	r3, [r4, #8]
 800964a:	7013      	strb	r3, [r2, #0]
 800964c:	65a3      	str	r3, [r4, #88]	; 0x58
 800964e:	2205      	movs	r2, #5
 8009650:	7831      	ldrb	r1, [r6, #0]
 8009652:	4854      	ldr	r0, [pc, #336]	; (80097a4 <_svfiprintf_r+0x1ec>)
 8009654:	f7ff fa98 	bl	8008b88 <memchr>
 8009658:	1c75      	adds	r5, r6, #1
 800965a:	2800      	cmp	r0, #0
 800965c:	d11f      	bne.n	800969e <_svfiprintf_r+0xe6>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	06d3      	lsls	r3, r2, #27
 8009662:	d504      	bpl.n	800966e <_svfiprintf_r+0xb6>
 8009664:	2353      	movs	r3, #83	; 0x53
 8009666:	a904      	add	r1, sp, #16
 8009668:	185b      	adds	r3, r3, r1
 800966a:	2120      	movs	r1, #32
 800966c:	7019      	strb	r1, [r3, #0]
 800966e:	0713      	lsls	r3, r2, #28
 8009670:	d504      	bpl.n	800967c <_svfiprintf_r+0xc4>
 8009672:	2353      	movs	r3, #83	; 0x53
 8009674:	a904      	add	r1, sp, #16
 8009676:	185b      	adds	r3, r3, r1
 8009678:	212b      	movs	r1, #43	; 0x2b
 800967a:	7019      	strb	r1, [r3, #0]
 800967c:	7833      	ldrb	r3, [r6, #0]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d016      	beq.n	80096b0 <_svfiprintf_r+0xf8>
 8009682:	0035      	movs	r5, r6
 8009684:	2100      	movs	r1, #0
 8009686:	200a      	movs	r0, #10
 8009688:	68e3      	ldr	r3, [r4, #12]
 800968a:	782a      	ldrb	r2, [r5, #0]
 800968c:	1c6e      	adds	r6, r5, #1
 800968e:	3a30      	subs	r2, #48	; 0x30
 8009690:	2a09      	cmp	r2, #9
 8009692:	d94e      	bls.n	8009732 <_svfiprintf_r+0x17a>
 8009694:	2900      	cmp	r1, #0
 8009696:	d111      	bne.n	80096bc <_svfiprintf_r+0x104>
 8009698:	e017      	b.n	80096ca <_svfiprintf_r+0x112>
 800969a:	3501      	adds	r5, #1
 800969c:	e7b0      	b.n	8009600 <_svfiprintf_r+0x48>
 800969e:	4b41      	ldr	r3, [pc, #260]	; (80097a4 <_svfiprintf_r+0x1ec>)
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	1ac0      	subs	r0, r0, r3
 80096a4:	2301      	movs	r3, #1
 80096a6:	4083      	lsls	r3, r0
 80096a8:	4313      	orrs	r3, r2
 80096aa:	002e      	movs	r6, r5
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	e7ce      	b.n	800964e <_svfiprintf_r+0x96>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	1d19      	adds	r1, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	db01      	blt.n	80096c0 <_svfiprintf_r+0x108>
 80096bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80096be:	e004      	b.n	80096ca <_svfiprintf_r+0x112>
 80096c0:	425b      	negs	r3, r3
 80096c2:	60e3      	str	r3, [r4, #12]
 80096c4:	2302      	movs	r3, #2
 80096c6:	4313      	orrs	r3, r2
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	782b      	ldrb	r3, [r5, #0]
 80096cc:	2b2e      	cmp	r3, #46	; 0x2e
 80096ce:	d10a      	bne.n	80096e6 <_svfiprintf_r+0x12e>
 80096d0:	786b      	ldrb	r3, [r5, #1]
 80096d2:	2b2a      	cmp	r3, #42	; 0x2a
 80096d4:	d135      	bne.n	8009742 <_svfiprintf_r+0x18a>
 80096d6:	9b07      	ldr	r3, [sp, #28]
 80096d8:	3502      	adds	r5, #2
 80096da:	1d1a      	adds	r2, r3, #4
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	9207      	str	r2, [sp, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	db2b      	blt.n	800973c <_svfiprintf_r+0x184>
 80096e4:	9309      	str	r3, [sp, #36]	; 0x24
 80096e6:	4e30      	ldr	r6, [pc, #192]	; (80097a8 <_svfiprintf_r+0x1f0>)
 80096e8:	2203      	movs	r2, #3
 80096ea:	0030      	movs	r0, r6
 80096ec:	7829      	ldrb	r1, [r5, #0]
 80096ee:	f7ff fa4b 	bl	8008b88 <memchr>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d006      	beq.n	8009704 <_svfiprintf_r+0x14c>
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	1b80      	subs	r0, r0, r6
 80096fa:	4083      	lsls	r3, r0
 80096fc:	6822      	ldr	r2, [r4, #0]
 80096fe:	3501      	adds	r5, #1
 8009700:	4313      	orrs	r3, r2
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	7829      	ldrb	r1, [r5, #0]
 8009706:	2206      	movs	r2, #6
 8009708:	4828      	ldr	r0, [pc, #160]	; (80097ac <_svfiprintf_r+0x1f4>)
 800970a:	1c6e      	adds	r6, r5, #1
 800970c:	7621      	strb	r1, [r4, #24]
 800970e:	f7ff fa3b 	bl	8008b88 <memchr>
 8009712:	2800      	cmp	r0, #0
 8009714:	d03c      	beq.n	8009790 <_svfiprintf_r+0x1d8>
 8009716:	4b26      	ldr	r3, [pc, #152]	; (80097b0 <_svfiprintf_r+0x1f8>)
 8009718:	2b00      	cmp	r3, #0
 800971a:	d125      	bne.n	8009768 <_svfiprintf_r+0x1b0>
 800971c:	2207      	movs	r2, #7
 800971e:	9b07      	ldr	r3, [sp, #28]
 8009720:	3307      	adds	r3, #7
 8009722:	4393      	bics	r3, r2
 8009724:	3308      	adds	r3, #8
 8009726:	9307      	str	r3, [sp, #28]
 8009728:	6963      	ldr	r3, [r4, #20]
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	189b      	adds	r3, r3, r2
 800972e:	6163      	str	r3, [r4, #20]
 8009730:	e765      	b.n	80095fe <_svfiprintf_r+0x46>
 8009732:	4343      	muls	r3, r0
 8009734:	0035      	movs	r5, r6
 8009736:	2101      	movs	r1, #1
 8009738:	189b      	adds	r3, r3, r2
 800973a:	e7a6      	b.n	800968a <_svfiprintf_r+0xd2>
 800973c:	2301      	movs	r3, #1
 800973e:	425b      	negs	r3, r3
 8009740:	e7d0      	b.n	80096e4 <_svfiprintf_r+0x12c>
 8009742:	2300      	movs	r3, #0
 8009744:	200a      	movs	r0, #10
 8009746:	001a      	movs	r2, r3
 8009748:	3501      	adds	r5, #1
 800974a:	6063      	str	r3, [r4, #4]
 800974c:	7829      	ldrb	r1, [r5, #0]
 800974e:	1c6e      	adds	r6, r5, #1
 8009750:	3930      	subs	r1, #48	; 0x30
 8009752:	2909      	cmp	r1, #9
 8009754:	d903      	bls.n	800975e <_svfiprintf_r+0x1a6>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0c5      	beq.n	80096e6 <_svfiprintf_r+0x12e>
 800975a:	9209      	str	r2, [sp, #36]	; 0x24
 800975c:	e7c3      	b.n	80096e6 <_svfiprintf_r+0x12e>
 800975e:	4342      	muls	r2, r0
 8009760:	0035      	movs	r5, r6
 8009762:	2301      	movs	r3, #1
 8009764:	1852      	adds	r2, r2, r1
 8009766:	e7f1      	b.n	800974c <_svfiprintf_r+0x194>
 8009768:	ab07      	add	r3, sp, #28
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	003a      	movs	r2, r7
 800976e:	0021      	movs	r1, r4
 8009770:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <_svfiprintf_r+0x1fc>)
 8009772:	9803      	ldr	r0, [sp, #12]
 8009774:	f7fd ff70 	bl	8007658 <_printf_float>
 8009778:	9004      	str	r0, [sp, #16]
 800977a:	9b04      	ldr	r3, [sp, #16]
 800977c:	3301      	adds	r3, #1
 800977e:	d1d3      	bne.n	8009728 <_svfiprintf_r+0x170>
 8009780:	89bb      	ldrh	r3, [r7, #12]
 8009782:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009784:	065b      	lsls	r3, r3, #25
 8009786:	d400      	bmi.n	800978a <_svfiprintf_r+0x1d2>
 8009788:	e72d      	b.n	80095e6 <_svfiprintf_r+0x2e>
 800978a:	2001      	movs	r0, #1
 800978c:	4240      	negs	r0, r0
 800978e:	e72a      	b.n	80095e6 <_svfiprintf_r+0x2e>
 8009790:	ab07      	add	r3, sp, #28
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	003a      	movs	r2, r7
 8009796:	0021      	movs	r1, r4
 8009798:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <_svfiprintf_r+0x1fc>)
 800979a:	9803      	ldr	r0, [sp, #12]
 800979c:	f7fe fa0e 	bl	8007bbc <_printf_i>
 80097a0:	e7ea      	b.n	8009778 <_svfiprintf_r+0x1c0>
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	0800a784 	.word	0x0800a784
 80097a8:	0800a78a 	.word	0x0800a78a
 80097ac:	0800a78e 	.word	0x0800a78e
 80097b0:	08007659 	.word	0x08007659
 80097b4:	080094f5 	.word	0x080094f5

080097b8 <_sbrk_r>:
 80097b8:	2300      	movs	r3, #0
 80097ba:	b570      	push	{r4, r5, r6, lr}
 80097bc:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_sbrk_r+0x20>)
 80097be:	0004      	movs	r4, r0
 80097c0:	0008      	movs	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7fa fe1e 	bl	8004404 <_sbrk>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d103      	bne.n	80097d4 <_sbrk_r+0x1c>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d000      	beq.n	80097d4 <_sbrk_r+0x1c>
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	bd70      	pop	{r4, r5, r6, pc}
 80097d6:	46c0      	nop			; (mov r8, r8)
 80097d8:	2000042c 	.word	0x2000042c

080097dc <__assert_func>:
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	0014      	movs	r4, r2
 80097e0:	001a      	movs	r2, r3
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <__assert_func+0x2c>)
 80097e4:	0005      	movs	r5, r0
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	b085      	sub	sp, #20
 80097ea:	68d8      	ldr	r0, [r3, #12]
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <__assert_func+0x30>)
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	d101      	bne.n	80097f6 <__assert_func+0x1a>
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <__assert_func+0x34>)
 80097f4:	001c      	movs	r4, r3
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9100      	str	r1, [sp, #0]
 80097fa:	002b      	movs	r3, r5
 80097fc:	4905      	ldr	r1, [pc, #20]	; (8009814 <__assert_func+0x38>)
 80097fe:	9402      	str	r4, [sp, #8]
 8009800:	f000 f80a 	bl	8009818 <fiprintf>
 8009804:	f000 faa6 	bl	8009d54 <abort>
 8009808:	2000000c 	.word	0x2000000c
 800980c:	0800a795 	.word	0x0800a795
 8009810:	0800a7d0 	.word	0x0800a7d0
 8009814:	0800a7a2 	.word	0x0800a7a2

08009818 <fiprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b503      	push	{r0, r1, lr}
 800981c:	0001      	movs	r1, r0
 800981e:	ab03      	add	r3, sp, #12
 8009820:	4804      	ldr	r0, [pc, #16]	; (8009834 <fiprintf+0x1c>)
 8009822:	cb04      	ldmia	r3!, {r2}
 8009824:	6800      	ldr	r0, [r0, #0]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	f000 f87e 	bl	8009928 <_vfiprintf_r>
 800982c:	b002      	add	sp, #8
 800982e:	bc08      	pop	{r3}
 8009830:	b003      	add	sp, #12
 8009832:	4718      	bx	r3
 8009834:	2000000c 	.word	0x2000000c

08009838 <__ascii_mbtowc>:
 8009838:	b082      	sub	sp, #8
 800983a:	2900      	cmp	r1, #0
 800983c:	d100      	bne.n	8009840 <__ascii_mbtowc+0x8>
 800983e:	a901      	add	r1, sp, #4
 8009840:	1e10      	subs	r0, r2, #0
 8009842:	d006      	beq.n	8009852 <__ascii_mbtowc+0x1a>
 8009844:	2b00      	cmp	r3, #0
 8009846:	d006      	beq.n	8009856 <__ascii_mbtowc+0x1e>
 8009848:	7813      	ldrb	r3, [r2, #0]
 800984a:	600b      	str	r3, [r1, #0]
 800984c:	7810      	ldrb	r0, [r2, #0]
 800984e:	1e43      	subs	r3, r0, #1
 8009850:	4198      	sbcs	r0, r3
 8009852:	b002      	add	sp, #8
 8009854:	4770      	bx	lr
 8009856:	2002      	movs	r0, #2
 8009858:	4240      	negs	r0, r0
 800985a:	e7fa      	b.n	8009852 <__ascii_mbtowc+0x1a>

0800985c <__malloc_lock>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4802      	ldr	r0, [pc, #8]	; (8009868 <__malloc_lock+0xc>)
 8009860:	f000 fc4f 	bl	800a102 <__retarget_lock_acquire_recursive>
 8009864:	bd10      	pop	{r4, pc}
 8009866:	46c0      	nop			; (mov r8, r8)
 8009868:	20000430 	.word	0x20000430

0800986c <__malloc_unlock>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4802      	ldr	r0, [pc, #8]	; (8009878 <__malloc_unlock+0xc>)
 8009870:	f000 fc48 	bl	800a104 <__retarget_lock_release_recursive>
 8009874:	bd10      	pop	{r4, pc}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	20000430 	.word	0x20000430

0800987c <_realloc_r>:
 800987c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800987e:	0007      	movs	r7, r0
 8009880:	000e      	movs	r6, r1
 8009882:	0014      	movs	r4, r2
 8009884:	2900      	cmp	r1, #0
 8009886:	d105      	bne.n	8009894 <_realloc_r+0x18>
 8009888:	0011      	movs	r1, r2
 800988a:	f7ff fdbd 	bl	8009408 <_malloc_r>
 800988e:	0005      	movs	r5, r0
 8009890:	0028      	movs	r0, r5
 8009892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009894:	2a00      	cmp	r2, #0
 8009896:	d103      	bne.n	80098a0 <_realloc_r+0x24>
 8009898:	f7ff fd4a 	bl	8009330 <_free_r>
 800989c:	0025      	movs	r5, r4
 800989e:	e7f7      	b.n	8009890 <_realloc_r+0x14>
 80098a0:	f000 fc9e 	bl	800a1e0 <_malloc_usable_size_r>
 80098a4:	9001      	str	r0, [sp, #4]
 80098a6:	4284      	cmp	r4, r0
 80098a8:	d803      	bhi.n	80098b2 <_realloc_r+0x36>
 80098aa:	0035      	movs	r5, r6
 80098ac:	0843      	lsrs	r3, r0, #1
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	d3ee      	bcc.n	8009890 <_realloc_r+0x14>
 80098b2:	0021      	movs	r1, r4
 80098b4:	0038      	movs	r0, r7
 80098b6:	f7ff fda7 	bl	8009408 <_malloc_r>
 80098ba:	1e05      	subs	r5, r0, #0
 80098bc:	d0e8      	beq.n	8009890 <_realloc_r+0x14>
 80098be:	9b01      	ldr	r3, [sp, #4]
 80098c0:	0022      	movs	r2, r4
 80098c2:	429c      	cmp	r4, r3
 80098c4:	d900      	bls.n	80098c8 <_realloc_r+0x4c>
 80098c6:	001a      	movs	r2, r3
 80098c8:	0031      	movs	r1, r6
 80098ca:	0028      	movs	r0, r5
 80098cc:	f7fd fdf6 	bl	80074bc <memcpy>
 80098d0:	0031      	movs	r1, r6
 80098d2:	0038      	movs	r0, r7
 80098d4:	f7ff fd2c 	bl	8009330 <_free_r>
 80098d8:	e7da      	b.n	8009890 <_realloc_r+0x14>

080098da <__sfputc_r>:
 80098da:	6893      	ldr	r3, [r2, #8]
 80098dc:	b510      	push	{r4, lr}
 80098de:	3b01      	subs	r3, #1
 80098e0:	6093      	str	r3, [r2, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da04      	bge.n	80098f0 <__sfputc_r+0x16>
 80098e6:	6994      	ldr	r4, [r2, #24]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	db07      	blt.n	80098fc <__sfputc_r+0x22>
 80098ec:	290a      	cmp	r1, #10
 80098ee:	d005      	beq.n	80098fc <__sfputc_r+0x22>
 80098f0:	6813      	ldr	r3, [r2, #0]
 80098f2:	1c58      	adds	r0, r3, #1
 80098f4:	6010      	str	r0, [r2, #0]
 80098f6:	7019      	strb	r1, [r3, #0]
 80098f8:	0008      	movs	r0, r1
 80098fa:	bd10      	pop	{r4, pc}
 80098fc:	f000 f94e 	bl	8009b9c <__swbuf_r>
 8009900:	0001      	movs	r1, r0
 8009902:	e7f9      	b.n	80098f8 <__sfputc_r+0x1e>

08009904 <__sfputs_r>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	0006      	movs	r6, r0
 8009908:	000f      	movs	r7, r1
 800990a:	0014      	movs	r4, r2
 800990c:	18d5      	adds	r5, r2, r3
 800990e:	42ac      	cmp	r4, r5
 8009910:	d101      	bne.n	8009916 <__sfputs_r+0x12>
 8009912:	2000      	movs	r0, #0
 8009914:	e007      	b.n	8009926 <__sfputs_r+0x22>
 8009916:	7821      	ldrb	r1, [r4, #0]
 8009918:	003a      	movs	r2, r7
 800991a:	0030      	movs	r0, r6
 800991c:	f7ff ffdd 	bl	80098da <__sfputc_r>
 8009920:	3401      	adds	r4, #1
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d1f3      	bne.n	800990e <__sfputs_r+0xa>
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009928 <_vfiprintf_r>:
 8009928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992a:	b0a1      	sub	sp, #132	; 0x84
 800992c:	0006      	movs	r6, r0
 800992e:	000c      	movs	r4, r1
 8009930:	001f      	movs	r7, r3
 8009932:	9203      	str	r2, [sp, #12]
 8009934:	2800      	cmp	r0, #0
 8009936:	d004      	beq.n	8009942 <_vfiprintf_r+0x1a>
 8009938:	6983      	ldr	r3, [r0, #24]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <_vfiprintf_r+0x1a>
 800993e:	f000 fb3f 	bl	8009fc0 <__sinit>
 8009942:	4b8e      	ldr	r3, [pc, #568]	; (8009b7c <_vfiprintf_r+0x254>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d11c      	bne.n	8009982 <_vfiprintf_r+0x5a>
 8009948:	6874      	ldr	r4, [r6, #4]
 800994a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800994c:	07db      	lsls	r3, r3, #31
 800994e:	d405      	bmi.n	800995c <_vfiprintf_r+0x34>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	059b      	lsls	r3, r3, #22
 8009954:	d402      	bmi.n	800995c <_vfiprintf_r+0x34>
 8009956:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009958:	f000 fbd3 	bl	800a102 <__retarget_lock_acquire_recursive>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	071b      	lsls	r3, r3, #28
 8009960:	d502      	bpl.n	8009968 <_vfiprintf_r+0x40>
 8009962:	6923      	ldr	r3, [r4, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d11d      	bne.n	80099a4 <_vfiprintf_r+0x7c>
 8009968:	0021      	movs	r1, r4
 800996a:	0030      	movs	r0, r6
 800996c:	f000 f97a 	bl	8009c64 <__swsetup_r>
 8009970:	2800      	cmp	r0, #0
 8009972:	d017      	beq.n	80099a4 <_vfiprintf_r+0x7c>
 8009974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009976:	07db      	lsls	r3, r3, #31
 8009978:	d50d      	bpl.n	8009996 <_vfiprintf_r+0x6e>
 800997a:	2001      	movs	r0, #1
 800997c:	4240      	negs	r0, r0
 800997e:	b021      	add	sp, #132	; 0x84
 8009980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009982:	4b7f      	ldr	r3, [pc, #508]	; (8009b80 <_vfiprintf_r+0x258>)
 8009984:	429c      	cmp	r4, r3
 8009986:	d101      	bne.n	800998c <_vfiprintf_r+0x64>
 8009988:	68b4      	ldr	r4, [r6, #8]
 800998a:	e7de      	b.n	800994a <_vfiprintf_r+0x22>
 800998c:	4b7d      	ldr	r3, [pc, #500]	; (8009b84 <_vfiprintf_r+0x25c>)
 800998e:	429c      	cmp	r4, r3
 8009990:	d1db      	bne.n	800994a <_vfiprintf_r+0x22>
 8009992:	68f4      	ldr	r4, [r6, #12]
 8009994:	e7d9      	b.n	800994a <_vfiprintf_r+0x22>
 8009996:	89a3      	ldrh	r3, [r4, #12]
 8009998:	059b      	lsls	r3, r3, #22
 800999a:	d4ee      	bmi.n	800997a <_vfiprintf_r+0x52>
 800999c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800999e:	f000 fbb1 	bl	800a104 <__retarget_lock_release_recursive>
 80099a2:	e7ea      	b.n	800997a <_vfiprintf_r+0x52>
 80099a4:	2300      	movs	r3, #0
 80099a6:	ad08      	add	r5, sp, #32
 80099a8:	616b      	str	r3, [r5, #20]
 80099aa:	3320      	adds	r3, #32
 80099ac:	766b      	strb	r3, [r5, #25]
 80099ae:	3310      	adds	r3, #16
 80099b0:	76ab      	strb	r3, [r5, #26]
 80099b2:	9707      	str	r7, [sp, #28]
 80099b4:	9f03      	ldr	r7, [sp, #12]
 80099b6:	783b      	ldrb	r3, [r7, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <_vfiprintf_r+0x98>
 80099bc:	2b25      	cmp	r3, #37	; 0x25
 80099be:	d14e      	bne.n	8009a5e <_vfiprintf_r+0x136>
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	1afb      	subs	r3, r7, r3
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	429f      	cmp	r7, r3
 80099ca:	d00d      	beq.n	80099e8 <_vfiprintf_r+0xc0>
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	0021      	movs	r1, r4
 80099d0:	0030      	movs	r0, r6
 80099d2:	9a03      	ldr	r2, [sp, #12]
 80099d4:	f7ff ff96 	bl	8009904 <__sfputs_r>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d100      	bne.n	80099de <_vfiprintf_r+0xb6>
 80099dc:	e0b5      	b.n	8009b4a <_vfiprintf_r+0x222>
 80099de:	696a      	ldr	r2, [r5, #20]
 80099e0:	9b05      	ldr	r3, [sp, #20]
 80099e2:	4694      	mov	ip, r2
 80099e4:	4463      	add	r3, ip
 80099e6:	616b      	str	r3, [r5, #20]
 80099e8:	783b      	ldrb	r3, [r7, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d100      	bne.n	80099f0 <_vfiprintf_r+0xc8>
 80099ee:	e0ac      	b.n	8009b4a <_vfiprintf_r+0x222>
 80099f0:	2201      	movs	r2, #1
 80099f2:	1c7b      	adds	r3, r7, #1
 80099f4:	9303      	str	r3, [sp, #12]
 80099f6:	2300      	movs	r3, #0
 80099f8:	4252      	negs	r2, r2
 80099fa:	606a      	str	r2, [r5, #4]
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	3254      	adds	r2, #84	; 0x54
 8009a00:	1852      	adds	r2, r2, r1
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	60eb      	str	r3, [r5, #12]
 8009a06:	60ab      	str	r3, [r5, #8]
 8009a08:	7013      	strb	r3, [r2, #0]
 8009a0a:	65ab      	str	r3, [r5, #88]	; 0x58
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	2205      	movs	r2, #5
 8009a10:	7819      	ldrb	r1, [r3, #0]
 8009a12:	485d      	ldr	r0, [pc, #372]	; (8009b88 <_vfiprintf_r+0x260>)
 8009a14:	f7ff f8b8 	bl	8008b88 <memchr>
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	1c5f      	adds	r7, r3, #1
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d120      	bne.n	8009a62 <_vfiprintf_r+0x13a>
 8009a20:	682a      	ldr	r2, [r5, #0]
 8009a22:	06d3      	lsls	r3, r2, #27
 8009a24:	d504      	bpl.n	8009a30 <_vfiprintf_r+0x108>
 8009a26:	2353      	movs	r3, #83	; 0x53
 8009a28:	a904      	add	r1, sp, #16
 8009a2a:	185b      	adds	r3, r3, r1
 8009a2c:	2120      	movs	r1, #32
 8009a2e:	7019      	strb	r1, [r3, #0]
 8009a30:	0713      	lsls	r3, r2, #28
 8009a32:	d504      	bpl.n	8009a3e <_vfiprintf_r+0x116>
 8009a34:	2353      	movs	r3, #83	; 0x53
 8009a36:	a904      	add	r1, sp, #16
 8009a38:	185b      	adds	r3, r3, r1
 8009a3a:	212b      	movs	r1, #43	; 0x2b
 8009a3c:	7019      	strb	r1, [r3, #0]
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b2a      	cmp	r3, #42	; 0x2a
 8009a44:	d016      	beq.n	8009a74 <_vfiprintf_r+0x14c>
 8009a46:	2100      	movs	r1, #0
 8009a48:	68eb      	ldr	r3, [r5, #12]
 8009a4a:	9f03      	ldr	r7, [sp, #12]
 8009a4c:	783a      	ldrb	r2, [r7, #0]
 8009a4e:	1c78      	adds	r0, r7, #1
 8009a50:	3a30      	subs	r2, #48	; 0x30
 8009a52:	4684      	mov	ip, r0
 8009a54:	2a09      	cmp	r2, #9
 8009a56:	d94f      	bls.n	8009af8 <_vfiprintf_r+0x1d0>
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d111      	bne.n	8009a80 <_vfiprintf_r+0x158>
 8009a5c:	e017      	b.n	8009a8e <_vfiprintf_r+0x166>
 8009a5e:	3701      	adds	r7, #1
 8009a60:	e7a9      	b.n	80099b6 <_vfiprintf_r+0x8e>
 8009a62:	4b49      	ldr	r3, [pc, #292]	; (8009b88 <_vfiprintf_r+0x260>)
 8009a64:	682a      	ldr	r2, [r5, #0]
 8009a66:	1ac0      	subs	r0, r0, r3
 8009a68:	2301      	movs	r3, #1
 8009a6a:	4083      	lsls	r3, r0
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	602b      	str	r3, [r5, #0]
 8009a70:	9703      	str	r7, [sp, #12]
 8009a72:	e7cb      	b.n	8009a0c <_vfiprintf_r+0xe4>
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	1d19      	adds	r1, r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	db01      	blt.n	8009a84 <_vfiprintf_r+0x15c>
 8009a80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a82:	e004      	b.n	8009a8e <_vfiprintf_r+0x166>
 8009a84:	425b      	negs	r3, r3
 8009a86:	60eb      	str	r3, [r5, #12]
 8009a88:	2302      	movs	r3, #2
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	783b      	ldrb	r3, [r7, #0]
 8009a90:	2b2e      	cmp	r3, #46	; 0x2e
 8009a92:	d10a      	bne.n	8009aaa <_vfiprintf_r+0x182>
 8009a94:	787b      	ldrb	r3, [r7, #1]
 8009a96:	2b2a      	cmp	r3, #42	; 0x2a
 8009a98:	d137      	bne.n	8009b0a <_vfiprintf_r+0x1e2>
 8009a9a:	9b07      	ldr	r3, [sp, #28]
 8009a9c:	3702      	adds	r7, #2
 8009a9e:	1d1a      	adds	r2, r3, #4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	9207      	str	r2, [sp, #28]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	db2d      	blt.n	8009b04 <_vfiprintf_r+0x1dc>
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2203      	movs	r2, #3
 8009aac:	7839      	ldrb	r1, [r7, #0]
 8009aae:	4837      	ldr	r0, [pc, #220]	; (8009b8c <_vfiprintf_r+0x264>)
 8009ab0:	f7ff f86a 	bl	8008b88 <memchr>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d007      	beq.n	8009ac8 <_vfiprintf_r+0x1a0>
 8009ab8:	4b34      	ldr	r3, [pc, #208]	; (8009b8c <_vfiprintf_r+0x264>)
 8009aba:	682a      	ldr	r2, [r5, #0]
 8009abc:	1ac0      	subs	r0, r0, r3
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	4083      	lsls	r3, r0
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	3701      	adds	r7, #1
 8009ac6:	602b      	str	r3, [r5, #0]
 8009ac8:	7839      	ldrb	r1, [r7, #0]
 8009aca:	1c7b      	adds	r3, r7, #1
 8009acc:	2206      	movs	r2, #6
 8009ace:	4830      	ldr	r0, [pc, #192]	; (8009b90 <_vfiprintf_r+0x268>)
 8009ad0:	9303      	str	r3, [sp, #12]
 8009ad2:	7629      	strb	r1, [r5, #24]
 8009ad4:	f7ff f858 	bl	8008b88 <memchr>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d045      	beq.n	8009b68 <_vfiprintf_r+0x240>
 8009adc:	4b2d      	ldr	r3, [pc, #180]	; (8009b94 <_vfiprintf_r+0x26c>)
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d127      	bne.n	8009b32 <_vfiprintf_r+0x20a>
 8009ae2:	2207      	movs	r2, #7
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	4393      	bics	r3, r2
 8009aea:	3308      	adds	r3, #8
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	696b      	ldr	r3, [r5, #20]
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	189b      	adds	r3, r3, r2
 8009af4:	616b      	str	r3, [r5, #20]
 8009af6:	e75d      	b.n	80099b4 <_vfiprintf_r+0x8c>
 8009af8:	210a      	movs	r1, #10
 8009afa:	434b      	muls	r3, r1
 8009afc:	4667      	mov	r7, ip
 8009afe:	189b      	adds	r3, r3, r2
 8009b00:	3909      	subs	r1, #9
 8009b02:	e7a3      	b.n	8009a4c <_vfiprintf_r+0x124>
 8009b04:	2301      	movs	r3, #1
 8009b06:	425b      	negs	r3, r3
 8009b08:	e7ce      	b.n	8009aa8 <_vfiprintf_r+0x180>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	001a      	movs	r2, r3
 8009b0e:	3701      	adds	r7, #1
 8009b10:	606b      	str	r3, [r5, #4]
 8009b12:	7839      	ldrb	r1, [r7, #0]
 8009b14:	1c78      	adds	r0, r7, #1
 8009b16:	3930      	subs	r1, #48	; 0x30
 8009b18:	4684      	mov	ip, r0
 8009b1a:	2909      	cmp	r1, #9
 8009b1c:	d903      	bls.n	8009b26 <_vfiprintf_r+0x1fe>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c3      	beq.n	8009aaa <_vfiprintf_r+0x182>
 8009b22:	9209      	str	r2, [sp, #36]	; 0x24
 8009b24:	e7c1      	b.n	8009aaa <_vfiprintf_r+0x182>
 8009b26:	230a      	movs	r3, #10
 8009b28:	435a      	muls	r2, r3
 8009b2a:	4667      	mov	r7, ip
 8009b2c:	1852      	adds	r2, r2, r1
 8009b2e:	3b09      	subs	r3, #9
 8009b30:	e7ef      	b.n	8009b12 <_vfiprintf_r+0x1ea>
 8009b32:	ab07      	add	r3, sp, #28
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	0022      	movs	r2, r4
 8009b38:	0029      	movs	r1, r5
 8009b3a:	0030      	movs	r0, r6
 8009b3c:	4b16      	ldr	r3, [pc, #88]	; (8009b98 <_vfiprintf_r+0x270>)
 8009b3e:	f7fd fd8b 	bl	8007658 <_printf_float>
 8009b42:	9004      	str	r0, [sp, #16]
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	3301      	adds	r3, #1
 8009b48:	d1d1      	bne.n	8009aee <_vfiprintf_r+0x1c6>
 8009b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b4c:	07db      	lsls	r3, r3, #31
 8009b4e:	d405      	bmi.n	8009b5c <_vfiprintf_r+0x234>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	059b      	lsls	r3, r3, #22
 8009b54:	d402      	bmi.n	8009b5c <_vfiprintf_r+0x234>
 8009b56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b58:	f000 fad4 	bl	800a104 <__retarget_lock_release_recursive>
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	065b      	lsls	r3, r3, #25
 8009b60:	d500      	bpl.n	8009b64 <_vfiprintf_r+0x23c>
 8009b62:	e70a      	b.n	800997a <_vfiprintf_r+0x52>
 8009b64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b66:	e70a      	b.n	800997e <_vfiprintf_r+0x56>
 8009b68:	ab07      	add	r3, sp, #28
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	0022      	movs	r2, r4
 8009b6e:	0029      	movs	r1, r5
 8009b70:	0030      	movs	r0, r6
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <_vfiprintf_r+0x270>)
 8009b74:	f7fe f822 	bl	8007bbc <_printf_i>
 8009b78:	e7e3      	b.n	8009b42 <_vfiprintf_r+0x21a>
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	0800a8fc 	.word	0x0800a8fc
 8009b80:	0800a91c 	.word	0x0800a91c
 8009b84:	0800a8dc 	.word	0x0800a8dc
 8009b88:	0800a784 	.word	0x0800a784
 8009b8c:	0800a78a 	.word	0x0800a78a
 8009b90:	0800a78e 	.word	0x0800a78e
 8009b94:	08007659 	.word	0x08007659
 8009b98:	08009905 	.word	0x08009905

08009b9c <__swbuf_r>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	0005      	movs	r5, r0
 8009ba0:	000e      	movs	r6, r1
 8009ba2:	0014      	movs	r4, r2
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d004      	beq.n	8009bb2 <__swbuf_r+0x16>
 8009ba8:	6983      	ldr	r3, [r0, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d101      	bne.n	8009bb2 <__swbuf_r+0x16>
 8009bae:	f000 fa07 	bl	8009fc0 <__sinit>
 8009bb2:	4b22      	ldr	r3, [pc, #136]	; (8009c3c <__swbuf_r+0xa0>)
 8009bb4:	429c      	cmp	r4, r3
 8009bb6:	d12e      	bne.n	8009c16 <__swbuf_r+0x7a>
 8009bb8:	686c      	ldr	r4, [r5, #4]
 8009bba:	69a3      	ldr	r3, [r4, #24]
 8009bbc:	60a3      	str	r3, [r4, #8]
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	071b      	lsls	r3, r3, #28
 8009bc2:	d532      	bpl.n	8009c2a <__swbuf_r+0x8e>
 8009bc4:	6923      	ldr	r3, [r4, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d02f      	beq.n	8009c2a <__swbuf_r+0x8e>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	6922      	ldr	r2, [r4, #16]
 8009bce:	b2f7      	uxtb	r7, r6
 8009bd0:	1a98      	subs	r0, r3, r2
 8009bd2:	6963      	ldr	r3, [r4, #20]
 8009bd4:	b2f6      	uxtb	r6, r6
 8009bd6:	4283      	cmp	r3, r0
 8009bd8:	dc05      	bgt.n	8009be6 <__swbuf_r+0x4a>
 8009bda:	0021      	movs	r1, r4
 8009bdc:	0028      	movs	r0, r5
 8009bde:	f000 f94d 	bl	8009e7c <_fflush_r>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d127      	bne.n	8009c36 <__swbuf_r+0x9a>
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	3001      	adds	r0, #1
 8009bea:	3b01      	subs	r3, #1
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	6022      	str	r2, [r4, #0]
 8009bf4:	701f      	strb	r7, [r3, #0]
 8009bf6:	6963      	ldr	r3, [r4, #20]
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	d004      	beq.n	8009c06 <__swbuf_r+0x6a>
 8009bfc:	89a3      	ldrh	r3, [r4, #12]
 8009bfe:	07db      	lsls	r3, r3, #31
 8009c00:	d507      	bpl.n	8009c12 <__swbuf_r+0x76>
 8009c02:	2e0a      	cmp	r6, #10
 8009c04:	d105      	bne.n	8009c12 <__swbuf_r+0x76>
 8009c06:	0021      	movs	r1, r4
 8009c08:	0028      	movs	r0, r5
 8009c0a:	f000 f937 	bl	8009e7c <_fflush_r>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d111      	bne.n	8009c36 <__swbuf_r+0x9a>
 8009c12:	0030      	movs	r0, r6
 8009c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c16:	4b0a      	ldr	r3, [pc, #40]	; (8009c40 <__swbuf_r+0xa4>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d101      	bne.n	8009c20 <__swbuf_r+0x84>
 8009c1c:	68ac      	ldr	r4, [r5, #8]
 8009c1e:	e7cc      	b.n	8009bba <__swbuf_r+0x1e>
 8009c20:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <__swbuf_r+0xa8>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	d1c9      	bne.n	8009bba <__swbuf_r+0x1e>
 8009c26:	68ec      	ldr	r4, [r5, #12]
 8009c28:	e7c7      	b.n	8009bba <__swbuf_r+0x1e>
 8009c2a:	0021      	movs	r1, r4
 8009c2c:	0028      	movs	r0, r5
 8009c2e:	f000 f819 	bl	8009c64 <__swsetup_r>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0c9      	beq.n	8009bca <__swbuf_r+0x2e>
 8009c36:	2601      	movs	r6, #1
 8009c38:	4276      	negs	r6, r6
 8009c3a:	e7ea      	b.n	8009c12 <__swbuf_r+0x76>
 8009c3c:	0800a8fc 	.word	0x0800a8fc
 8009c40:	0800a91c 	.word	0x0800a91c
 8009c44:	0800a8dc 	.word	0x0800a8dc

08009c48 <__ascii_wctomb>:
 8009c48:	0003      	movs	r3, r0
 8009c4a:	1e08      	subs	r0, r1, #0
 8009c4c:	d005      	beq.n	8009c5a <__ascii_wctomb+0x12>
 8009c4e:	2aff      	cmp	r2, #255	; 0xff
 8009c50:	d904      	bls.n	8009c5c <__ascii_wctomb+0x14>
 8009c52:	228a      	movs	r2, #138	; 0x8a
 8009c54:	2001      	movs	r0, #1
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	4240      	negs	r0, r0
 8009c5a:	4770      	bx	lr
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	700a      	strb	r2, [r1, #0]
 8009c60:	e7fb      	b.n	8009c5a <__ascii_wctomb+0x12>
	...

08009c64 <__swsetup_r>:
 8009c64:	4b37      	ldr	r3, [pc, #220]	; (8009d44 <__swsetup_r+0xe0>)
 8009c66:	b570      	push	{r4, r5, r6, lr}
 8009c68:	681d      	ldr	r5, [r3, #0]
 8009c6a:	0006      	movs	r6, r0
 8009c6c:	000c      	movs	r4, r1
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	d005      	beq.n	8009c7e <__swsetup_r+0x1a>
 8009c72:	69ab      	ldr	r3, [r5, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d102      	bne.n	8009c7e <__swsetup_r+0x1a>
 8009c78:	0028      	movs	r0, r5
 8009c7a:	f000 f9a1 	bl	8009fc0 <__sinit>
 8009c7e:	4b32      	ldr	r3, [pc, #200]	; (8009d48 <__swsetup_r+0xe4>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	d10f      	bne.n	8009ca4 <__swsetup_r+0x40>
 8009c84:	686c      	ldr	r4, [r5, #4]
 8009c86:	230c      	movs	r3, #12
 8009c88:	5ee2      	ldrsh	r2, [r4, r3]
 8009c8a:	b293      	uxth	r3, r2
 8009c8c:	0711      	lsls	r1, r2, #28
 8009c8e:	d42d      	bmi.n	8009cec <__swsetup_r+0x88>
 8009c90:	06d9      	lsls	r1, r3, #27
 8009c92:	d411      	bmi.n	8009cb8 <__swsetup_r+0x54>
 8009c94:	2309      	movs	r3, #9
 8009c96:	2001      	movs	r0, #1
 8009c98:	6033      	str	r3, [r6, #0]
 8009c9a:	3337      	adds	r3, #55	; 0x37
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	4240      	negs	r0, r0
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <__swsetup_r+0xe8>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d101      	bne.n	8009cae <__swsetup_r+0x4a>
 8009caa:	68ac      	ldr	r4, [r5, #8]
 8009cac:	e7eb      	b.n	8009c86 <__swsetup_r+0x22>
 8009cae:	4b28      	ldr	r3, [pc, #160]	; (8009d50 <__swsetup_r+0xec>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	d1e8      	bne.n	8009c86 <__swsetup_r+0x22>
 8009cb4:	68ec      	ldr	r4, [r5, #12]
 8009cb6:	e7e6      	b.n	8009c86 <__swsetup_r+0x22>
 8009cb8:	075b      	lsls	r3, r3, #29
 8009cba:	d513      	bpl.n	8009ce4 <__swsetup_r+0x80>
 8009cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d008      	beq.n	8009cd4 <__swsetup_r+0x70>
 8009cc2:	0023      	movs	r3, r4
 8009cc4:	3344      	adds	r3, #68	; 0x44
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	d002      	beq.n	8009cd0 <__swsetup_r+0x6c>
 8009cca:	0030      	movs	r0, r6
 8009ccc:	f7ff fb30 	bl	8009330 <_free_r>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd4:	2224      	movs	r2, #36	; 0x24
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	4393      	bics	r3, r2
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	89a2      	ldrh	r2, [r4, #12]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	81a3      	strh	r3, [r4, #12]
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <__swsetup_r+0xa6>
 8009cf2:	21a0      	movs	r1, #160	; 0xa0
 8009cf4:	2280      	movs	r2, #128	; 0x80
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	0089      	lsls	r1, r1, #2
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	400b      	ands	r3, r1
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d003      	beq.n	8009d0a <__swsetup_r+0xa6>
 8009d02:	0021      	movs	r1, r4
 8009d04:	0030      	movs	r0, r6
 8009d06:	f000 fa27 	bl	800a158 <__smakebuf_r>
 8009d0a:	220c      	movs	r2, #12
 8009d0c:	5ea3      	ldrsh	r3, [r4, r2]
 8009d0e:	2001      	movs	r0, #1
 8009d10:	001a      	movs	r2, r3
 8009d12:	b299      	uxth	r1, r3
 8009d14:	4002      	ands	r2, r0
 8009d16:	4203      	tst	r3, r0
 8009d18:	d00f      	beq.n	8009d3a <__swsetup_r+0xd6>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	60a2      	str	r2, [r4, #8]
 8009d1e:	6962      	ldr	r2, [r4, #20]
 8009d20:	4252      	negs	r2, r2
 8009d22:	61a2      	str	r2, [r4, #24]
 8009d24:	2000      	movs	r0, #0
 8009d26:	6922      	ldr	r2, [r4, #16]
 8009d28:	4282      	cmp	r2, r0
 8009d2a:	d1ba      	bne.n	8009ca2 <__swsetup_r+0x3e>
 8009d2c:	060a      	lsls	r2, r1, #24
 8009d2e:	d5b8      	bpl.n	8009ca2 <__swsetup_r+0x3e>
 8009d30:	2240      	movs	r2, #64	; 0x40
 8009d32:	4313      	orrs	r3, r2
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	3801      	subs	r0, #1
 8009d38:	e7b3      	b.n	8009ca2 <__swsetup_r+0x3e>
 8009d3a:	0788      	lsls	r0, r1, #30
 8009d3c:	d400      	bmi.n	8009d40 <__swsetup_r+0xdc>
 8009d3e:	6962      	ldr	r2, [r4, #20]
 8009d40:	60a2      	str	r2, [r4, #8]
 8009d42:	e7ef      	b.n	8009d24 <__swsetup_r+0xc0>
 8009d44:	2000000c 	.word	0x2000000c
 8009d48:	0800a8fc 	.word	0x0800a8fc
 8009d4c:	0800a91c 	.word	0x0800a91c
 8009d50:	0800a8dc 	.word	0x0800a8dc

08009d54 <abort>:
 8009d54:	2006      	movs	r0, #6
 8009d56:	b510      	push	{r4, lr}
 8009d58:	f000 fa74 	bl	800a244 <raise>
 8009d5c:	2001      	movs	r0, #1
 8009d5e:	f7fa fadf 	bl	8004320 <_exit>
	...

08009d64 <__sflush_r>:
 8009d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d66:	898b      	ldrh	r3, [r1, #12]
 8009d68:	0005      	movs	r5, r0
 8009d6a:	000c      	movs	r4, r1
 8009d6c:	071a      	lsls	r2, r3, #28
 8009d6e:	d45f      	bmi.n	8009e30 <__sflush_r+0xcc>
 8009d70:	684a      	ldr	r2, [r1, #4]
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	dc04      	bgt.n	8009d80 <__sflush_r+0x1c>
 8009d76:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009d78:	2a00      	cmp	r2, #0
 8009d7a:	dc01      	bgt.n	8009d80 <__sflush_r+0x1c>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d80:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	d0fa      	beq.n	8009d7c <__sflush_r+0x18>
 8009d86:	2200      	movs	r2, #0
 8009d88:	2180      	movs	r1, #128	; 0x80
 8009d8a:	682e      	ldr	r6, [r5, #0]
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	001a      	movs	r2, r3
 8009d90:	0149      	lsls	r1, r1, #5
 8009d92:	400a      	ands	r2, r1
 8009d94:	420b      	tst	r3, r1
 8009d96:	d034      	beq.n	8009e02 <__sflush_r+0x9e>
 8009d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	075b      	lsls	r3, r3, #29
 8009d9e:	d506      	bpl.n	8009dae <__sflush_r+0x4a>
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	1ac0      	subs	r0, r0, r3
 8009da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <__sflush_r+0x4a>
 8009daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dac:	1ac0      	subs	r0, r0, r3
 8009dae:	0002      	movs	r2, r0
 8009db0:	6a21      	ldr	r1, [r4, #32]
 8009db2:	2300      	movs	r3, #0
 8009db4:	0028      	movs	r0, r5
 8009db6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009db8:	47b8      	blx	r7
 8009dba:	89a1      	ldrh	r1, [r4, #12]
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	d106      	bne.n	8009dce <__sflush_r+0x6a>
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	2b1d      	cmp	r3, #29
 8009dc4:	d831      	bhi.n	8009e2a <__sflush_r+0xc6>
 8009dc6:	4a2c      	ldr	r2, [pc, #176]	; (8009e78 <__sflush_r+0x114>)
 8009dc8:	40da      	lsrs	r2, r3
 8009dca:	07d3      	lsls	r3, r2, #31
 8009dcc:	d52d      	bpl.n	8009e2a <__sflush_r+0xc6>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	04cb      	lsls	r3, r1, #19
 8009dd8:	d505      	bpl.n	8009de6 <__sflush_r+0x82>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d102      	bne.n	8009de4 <__sflush_r+0x80>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d100      	bne.n	8009de6 <__sflush_r+0x82>
 8009de4:	6560      	str	r0, [r4, #84]	; 0x54
 8009de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de8:	602e      	str	r6, [r5, #0]
 8009dea:	2900      	cmp	r1, #0
 8009dec:	d0c6      	beq.n	8009d7c <__sflush_r+0x18>
 8009dee:	0023      	movs	r3, r4
 8009df0:	3344      	adds	r3, #68	; 0x44
 8009df2:	4299      	cmp	r1, r3
 8009df4:	d002      	beq.n	8009dfc <__sflush_r+0x98>
 8009df6:	0028      	movs	r0, r5
 8009df8:	f7ff fa9a 	bl	8009330 <_free_r>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8009e00:	e7bd      	b.n	8009d7e <__sflush_r+0x1a>
 8009e02:	2301      	movs	r3, #1
 8009e04:	0028      	movs	r0, r5
 8009e06:	6a21      	ldr	r1, [r4, #32]
 8009e08:	47b8      	blx	r7
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d1c5      	bne.n	8009d9a <__sflush_r+0x36>
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0c2      	beq.n	8009d9a <__sflush_r+0x36>
 8009e14:	2b1d      	cmp	r3, #29
 8009e16:	d001      	beq.n	8009e1c <__sflush_r+0xb8>
 8009e18:	2b16      	cmp	r3, #22
 8009e1a:	d101      	bne.n	8009e20 <__sflush_r+0xbc>
 8009e1c:	602e      	str	r6, [r5, #0]
 8009e1e:	e7ad      	b.n	8009d7c <__sflush_r+0x18>
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	89a2      	ldrh	r2, [r4, #12]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	81a3      	strh	r3, [r4, #12]
 8009e28:	e7a9      	b.n	8009d7e <__sflush_r+0x1a>
 8009e2a:	2340      	movs	r3, #64	; 0x40
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	e7fa      	b.n	8009e26 <__sflush_r+0xc2>
 8009e30:	690f      	ldr	r7, [r1, #16]
 8009e32:	2f00      	cmp	r7, #0
 8009e34:	d0a2      	beq.n	8009d7c <__sflush_r+0x18>
 8009e36:	680a      	ldr	r2, [r1, #0]
 8009e38:	600f      	str	r7, [r1, #0]
 8009e3a:	1bd2      	subs	r2, r2, r7
 8009e3c:	9201      	str	r2, [sp, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	079b      	lsls	r3, r3, #30
 8009e42:	d100      	bne.n	8009e46 <__sflush_r+0xe2>
 8009e44:	694a      	ldr	r2, [r1, #20]
 8009e46:	60a2      	str	r2, [r4, #8]
 8009e48:	9b01      	ldr	r3, [sp, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	dc00      	bgt.n	8009e50 <__sflush_r+0xec>
 8009e4e:	e795      	b.n	8009d7c <__sflush_r+0x18>
 8009e50:	003a      	movs	r2, r7
 8009e52:	0028      	movs	r0, r5
 8009e54:	9b01      	ldr	r3, [sp, #4]
 8009e56:	6a21      	ldr	r1, [r4, #32]
 8009e58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e5a:	47b0      	blx	r6
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dc06      	bgt.n	8009e6e <__sflush_r+0x10a>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	2001      	movs	r0, #1
 8009e64:	89a2      	ldrh	r2, [r4, #12]
 8009e66:	4240      	negs	r0, r0
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	e787      	b.n	8009d7e <__sflush_r+0x1a>
 8009e6e:	9b01      	ldr	r3, [sp, #4]
 8009e70:	183f      	adds	r7, r7, r0
 8009e72:	1a1b      	subs	r3, r3, r0
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	e7e7      	b.n	8009e48 <__sflush_r+0xe4>
 8009e78:	20400001 	.word	0x20400001

08009e7c <_fflush_r>:
 8009e7c:	690b      	ldr	r3, [r1, #16]
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	0005      	movs	r5, r0
 8009e82:	000c      	movs	r4, r1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <_fflush_r+0x12>
 8009e88:	2500      	movs	r5, #0
 8009e8a:	0028      	movs	r0, r5
 8009e8c:	bd70      	pop	{r4, r5, r6, pc}
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d004      	beq.n	8009e9c <_fflush_r+0x20>
 8009e92:	6983      	ldr	r3, [r0, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <_fflush_r+0x20>
 8009e98:	f000 f892 	bl	8009fc0 <__sinit>
 8009e9c:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <_fflush_r+0x74>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d11b      	bne.n	8009eda <_fflush_r+0x5e>
 8009ea2:	686c      	ldr	r4, [r5, #4]
 8009ea4:	220c      	movs	r2, #12
 8009ea6:	5ea3      	ldrsh	r3, [r4, r2]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ed      	beq.n	8009e88 <_fflush_r+0xc>
 8009eac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eae:	07d2      	lsls	r2, r2, #31
 8009eb0:	d404      	bmi.n	8009ebc <_fflush_r+0x40>
 8009eb2:	059b      	lsls	r3, r3, #22
 8009eb4:	d402      	bmi.n	8009ebc <_fflush_r+0x40>
 8009eb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb8:	f000 f923 	bl	800a102 <__retarget_lock_acquire_recursive>
 8009ebc:	0028      	movs	r0, r5
 8009ebe:	0021      	movs	r1, r4
 8009ec0:	f7ff ff50 	bl	8009d64 <__sflush_r>
 8009ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec6:	0005      	movs	r5, r0
 8009ec8:	07db      	lsls	r3, r3, #31
 8009eca:	d4de      	bmi.n	8009e8a <_fflush_r+0xe>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	059b      	lsls	r3, r3, #22
 8009ed0:	d4db      	bmi.n	8009e8a <_fflush_r+0xe>
 8009ed2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed4:	f000 f916 	bl	800a104 <__retarget_lock_release_recursive>
 8009ed8:	e7d7      	b.n	8009e8a <_fflush_r+0xe>
 8009eda:	4b06      	ldr	r3, [pc, #24]	; (8009ef4 <_fflush_r+0x78>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	d101      	bne.n	8009ee4 <_fflush_r+0x68>
 8009ee0:	68ac      	ldr	r4, [r5, #8]
 8009ee2:	e7df      	b.n	8009ea4 <_fflush_r+0x28>
 8009ee4:	4b04      	ldr	r3, [pc, #16]	; (8009ef8 <_fflush_r+0x7c>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d1dc      	bne.n	8009ea4 <_fflush_r+0x28>
 8009eea:	68ec      	ldr	r4, [r5, #12]
 8009eec:	e7da      	b.n	8009ea4 <_fflush_r+0x28>
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	0800a8fc 	.word	0x0800a8fc
 8009ef4:	0800a91c 	.word	0x0800a91c
 8009ef8:	0800a8dc 	.word	0x0800a8dc

08009efc <std>:
 8009efc:	2300      	movs	r3, #0
 8009efe:	b510      	push	{r4, lr}
 8009f00:	0004      	movs	r4, r0
 8009f02:	6003      	str	r3, [r0, #0]
 8009f04:	6043      	str	r3, [r0, #4]
 8009f06:	6083      	str	r3, [r0, #8]
 8009f08:	8181      	strh	r1, [r0, #12]
 8009f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f0c:	0019      	movs	r1, r3
 8009f0e:	81c2      	strh	r2, [r0, #14]
 8009f10:	6103      	str	r3, [r0, #16]
 8009f12:	6143      	str	r3, [r0, #20]
 8009f14:	6183      	str	r3, [r0, #24]
 8009f16:	2208      	movs	r2, #8
 8009f18:	305c      	adds	r0, #92	; 0x5c
 8009f1a:	f7fd faeb 	bl	80074f4 <memset>
 8009f1e:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <std+0x38>)
 8009f20:	6224      	str	r4, [r4, #32]
 8009f22:	6263      	str	r3, [r4, #36]	; 0x24
 8009f24:	4b04      	ldr	r3, [pc, #16]	; (8009f38 <std+0x3c>)
 8009f26:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f28:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <std+0x40>)
 8009f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <std+0x44>)
 8009f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	46c0      	nop			; (mov r8, r8)
 8009f34:	0800a285 	.word	0x0800a285
 8009f38:	0800a2ad 	.word	0x0800a2ad
 8009f3c:	0800a2e5 	.word	0x0800a2e5
 8009f40:	0800a311 	.word	0x0800a311

08009f44 <_cleanup_r>:
 8009f44:	b510      	push	{r4, lr}
 8009f46:	4902      	ldr	r1, [pc, #8]	; (8009f50 <_cleanup_r+0xc>)
 8009f48:	f000 f8ba 	bl	800a0c0 <_fwalk_reent>
 8009f4c:	bd10      	pop	{r4, pc}
 8009f4e:	46c0      	nop			; (mov r8, r8)
 8009f50:	08009e7d 	.word	0x08009e7d

08009f54 <__sfmoreglue>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	2568      	movs	r5, #104	; 0x68
 8009f58:	1e4a      	subs	r2, r1, #1
 8009f5a:	4355      	muls	r5, r2
 8009f5c:	000e      	movs	r6, r1
 8009f5e:	0029      	movs	r1, r5
 8009f60:	3174      	adds	r1, #116	; 0x74
 8009f62:	f7ff fa51 	bl	8009408 <_malloc_r>
 8009f66:	1e04      	subs	r4, r0, #0
 8009f68:	d008      	beq.n	8009f7c <__sfmoreglue+0x28>
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	002a      	movs	r2, r5
 8009f6e:	6001      	str	r1, [r0, #0]
 8009f70:	6046      	str	r6, [r0, #4]
 8009f72:	300c      	adds	r0, #12
 8009f74:	60a0      	str	r0, [r4, #8]
 8009f76:	3268      	adds	r2, #104	; 0x68
 8009f78:	f7fd fabc 	bl	80074f4 <memset>
 8009f7c:	0020      	movs	r0, r4
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}

08009f80 <__sfp_lock_acquire>:
 8009f80:	b510      	push	{r4, lr}
 8009f82:	4802      	ldr	r0, [pc, #8]	; (8009f8c <__sfp_lock_acquire+0xc>)
 8009f84:	f000 f8bd 	bl	800a102 <__retarget_lock_acquire_recursive>
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	46c0      	nop			; (mov r8, r8)
 8009f8c:	20000431 	.word	0x20000431

08009f90 <__sfp_lock_release>:
 8009f90:	b510      	push	{r4, lr}
 8009f92:	4802      	ldr	r0, [pc, #8]	; (8009f9c <__sfp_lock_release+0xc>)
 8009f94:	f000 f8b6 	bl	800a104 <__retarget_lock_release_recursive>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	20000431 	.word	0x20000431

08009fa0 <__sinit_lock_acquire>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4802      	ldr	r0, [pc, #8]	; (8009fac <__sinit_lock_acquire+0xc>)
 8009fa4:	f000 f8ad 	bl	800a102 <__retarget_lock_acquire_recursive>
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	20000432 	.word	0x20000432

08009fb0 <__sinit_lock_release>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	4802      	ldr	r0, [pc, #8]	; (8009fbc <__sinit_lock_release+0xc>)
 8009fb4:	f000 f8a6 	bl	800a104 <__retarget_lock_release_recursive>
 8009fb8:	bd10      	pop	{r4, pc}
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	20000432 	.word	0x20000432

08009fc0 <__sinit>:
 8009fc0:	b513      	push	{r0, r1, r4, lr}
 8009fc2:	0004      	movs	r4, r0
 8009fc4:	f7ff ffec 	bl	8009fa0 <__sinit_lock_acquire>
 8009fc8:	69a3      	ldr	r3, [r4, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <__sinit+0x14>
 8009fce:	f7ff ffef 	bl	8009fb0 <__sinit_lock_release>
 8009fd2:	bd13      	pop	{r0, r1, r4, pc}
 8009fd4:	64a3      	str	r3, [r4, #72]	; 0x48
 8009fd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009fd8:	6523      	str	r3, [r4, #80]	; 0x50
 8009fda:	4b13      	ldr	r3, [pc, #76]	; (800a028 <__sinit+0x68>)
 8009fdc:	4a13      	ldr	r2, [pc, #76]	; (800a02c <__sinit+0x6c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009fe2:	9301      	str	r3, [sp, #4]
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d101      	bne.n	8009fec <__sinit+0x2c>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	61a3      	str	r3, [r4, #24]
 8009fec:	0020      	movs	r0, r4
 8009fee:	f000 f81f 	bl	800a030 <__sfp>
 8009ff2:	6060      	str	r0, [r4, #4]
 8009ff4:	0020      	movs	r0, r4
 8009ff6:	f000 f81b 	bl	800a030 <__sfp>
 8009ffa:	60a0      	str	r0, [r4, #8]
 8009ffc:	0020      	movs	r0, r4
 8009ffe:	f000 f817 	bl	800a030 <__sfp>
 800a002:	2200      	movs	r2, #0
 800a004:	2104      	movs	r1, #4
 800a006:	60e0      	str	r0, [r4, #12]
 800a008:	6860      	ldr	r0, [r4, #4]
 800a00a:	f7ff ff77 	bl	8009efc <std>
 800a00e:	2201      	movs	r2, #1
 800a010:	2109      	movs	r1, #9
 800a012:	68a0      	ldr	r0, [r4, #8]
 800a014:	f7ff ff72 	bl	8009efc <std>
 800a018:	2202      	movs	r2, #2
 800a01a:	2112      	movs	r1, #18
 800a01c:	68e0      	ldr	r0, [r4, #12]
 800a01e:	f7ff ff6d 	bl	8009efc <std>
 800a022:	2301      	movs	r3, #1
 800a024:	61a3      	str	r3, [r4, #24]
 800a026:	e7d2      	b.n	8009fce <__sinit+0xe>
 800a028:	0800a564 	.word	0x0800a564
 800a02c:	08009f45 	.word	0x08009f45

0800a030 <__sfp>:
 800a030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a032:	0007      	movs	r7, r0
 800a034:	f7ff ffa4 	bl	8009f80 <__sfp_lock_acquire>
 800a038:	4b1f      	ldr	r3, [pc, #124]	; (800a0b8 <__sfp+0x88>)
 800a03a:	681e      	ldr	r6, [r3, #0]
 800a03c:	69b3      	ldr	r3, [r6, #24]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d102      	bne.n	800a048 <__sfp+0x18>
 800a042:	0030      	movs	r0, r6
 800a044:	f7ff ffbc 	bl	8009fc0 <__sinit>
 800a048:	3648      	adds	r6, #72	; 0x48
 800a04a:	68b4      	ldr	r4, [r6, #8]
 800a04c:	6873      	ldr	r3, [r6, #4]
 800a04e:	3b01      	subs	r3, #1
 800a050:	d504      	bpl.n	800a05c <__sfp+0x2c>
 800a052:	6833      	ldr	r3, [r6, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d022      	beq.n	800a09e <__sfp+0x6e>
 800a058:	6836      	ldr	r6, [r6, #0]
 800a05a:	e7f6      	b.n	800a04a <__sfp+0x1a>
 800a05c:	220c      	movs	r2, #12
 800a05e:	5ea5      	ldrsh	r5, [r4, r2]
 800a060:	2d00      	cmp	r5, #0
 800a062:	d11a      	bne.n	800a09a <__sfp+0x6a>
 800a064:	0020      	movs	r0, r4
 800a066:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <__sfp+0x8c>)
 800a068:	3058      	adds	r0, #88	; 0x58
 800a06a:	60e3      	str	r3, [r4, #12]
 800a06c:	6665      	str	r5, [r4, #100]	; 0x64
 800a06e:	f000 f847 	bl	800a100 <__retarget_lock_init_recursive>
 800a072:	f7ff ff8d 	bl	8009f90 <__sfp_lock_release>
 800a076:	0020      	movs	r0, r4
 800a078:	2208      	movs	r2, #8
 800a07a:	0029      	movs	r1, r5
 800a07c:	6025      	str	r5, [r4, #0]
 800a07e:	60a5      	str	r5, [r4, #8]
 800a080:	6065      	str	r5, [r4, #4]
 800a082:	6125      	str	r5, [r4, #16]
 800a084:	6165      	str	r5, [r4, #20]
 800a086:	61a5      	str	r5, [r4, #24]
 800a088:	305c      	adds	r0, #92	; 0x5c
 800a08a:	f7fd fa33 	bl	80074f4 <memset>
 800a08e:	6365      	str	r5, [r4, #52]	; 0x34
 800a090:	63a5      	str	r5, [r4, #56]	; 0x38
 800a092:	64a5      	str	r5, [r4, #72]	; 0x48
 800a094:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a096:	0020      	movs	r0, r4
 800a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a09a:	3468      	adds	r4, #104	; 0x68
 800a09c:	e7d7      	b.n	800a04e <__sfp+0x1e>
 800a09e:	2104      	movs	r1, #4
 800a0a0:	0038      	movs	r0, r7
 800a0a2:	f7ff ff57 	bl	8009f54 <__sfmoreglue>
 800a0a6:	1e04      	subs	r4, r0, #0
 800a0a8:	6030      	str	r0, [r6, #0]
 800a0aa:	d1d5      	bne.n	800a058 <__sfp+0x28>
 800a0ac:	f7ff ff70 	bl	8009f90 <__sfp_lock_release>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	e7ef      	b.n	800a096 <__sfp+0x66>
 800a0b6:	46c0      	nop			; (mov r8, r8)
 800a0b8:	0800a564 	.word	0x0800a564
 800a0bc:	ffff0001 	.word	0xffff0001

0800a0c0 <_fwalk_reent>:
 800a0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0c2:	0004      	movs	r4, r0
 800a0c4:	0006      	movs	r6, r0
 800a0c6:	2700      	movs	r7, #0
 800a0c8:	9101      	str	r1, [sp, #4]
 800a0ca:	3448      	adds	r4, #72	; 0x48
 800a0cc:	6863      	ldr	r3, [r4, #4]
 800a0ce:	68a5      	ldr	r5, [r4, #8]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <_fwalk_reent+0x24>
 800a0da:	6824      	ldr	r4, [r4, #0]
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	d1f5      	bne.n	800a0cc <_fwalk_reent+0xc>
 800a0e0:	0038      	movs	r0, r7
 800a0e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0e4:	89ab      	ldrh	r3, [r5, #12]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d908      	bls.n	800a0fc <_fwalk_reent+0x3c>
 800a0ea:	220e      	movs	r2, #14
 800a0ec:	5eab      	ldrsh	r3, [r5, r2]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	d004      	beq.n	800a0fc <_fwalk_reent+0x3c>
 800a0f2:	0029      	movs	r1, r5
 800a0f4:	0030      	movs	r0, r6
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	4798      	blx	r3
 800a0fa:	4307      	orrs	r7, r0
 800a0fc:	3568      	adds	r5, #104	; 0x68
 800a0fe:	e7e8      	b.n	800a0d2 <_fwalk_reent+0x12>

0800a100 <__retarget_lock_init_recursive>:
 800a100:	4770      	bx	lr

0800a102 <__retarget_lock_acquire_recursive>:
 800a102:	4770      	bx	lr

0800a104 <__retarget_lock_release_recursive>:
 800a104:	4770      	bx	lr
	...

0800a108 <__swhatbuf_r>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	000e      	movs	r6, r1
 800a10c:	001d      	movs	r5, r3
 800a10e:	230e      	movs	r3, #14
 800a110:	5ec9      	ldrsh	r1, [r1, r3]
 800a112:	0014      	movs	r4, r2
 800a114:	b096      	sub	sp, #88	; 0x58
 800a116:	2900      	cmp	r1, #0
 800a118:	da08      	bge.n	800a12c <__swhatbuf_r+0x24>
 800a11a:	220c      	movs	r2, #12
 800a11c:	5eb3      	ldrsh	r3, [r6, r2]
 800a11e:	2200      	movs	r2, #0
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	061b      	lsls	r3, r3, #24
 800a124:	d411      	bmi.n	800a14a <__swhatbuf_r+0x42>
 800a126:	2380      	movs	r3, #128	; 0x80
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	e00f      	b.n	800a14c <__swhatbuf_r+0x44>
 800a12c:	466a      	mov	r2, sp
 800a12e:	f000 f91b 	bl	800a368 <_fstat_r>
 800a132:	2800      	cmp	r0, #0
 800a134:	dbf1      	blt.n	800a11a <__swhatbuf_r+0x12>
 800a136:	23f0      	movs	r3, #240	; 0xf0
 800a138:	9901      	ldr	r1, [sp, #4]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	4019      	ands	r1, r3
 800a13e:	4b05      	ldr	r3, [pc, #20]	; (800a154 <__swhatbuf_r+0x4c>)
 800a140:	18c9      	adds	r1, r1, r3
 800a142:	424b      	negs	r3, r1
 800a144:	4159      	adcs	r1, r3
 800a146:	6029      	str	r1, [r5, #0]
 800a148:	e7ed      	b.n	800a126 <__swhatbuf_r+0x1e>
 800a14a:	2340      	movs	r3, #64	; 0x40
 800a14c:	2000      	movs	r0, #0
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	b016      	add	sp, #88	; 0x58
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	ffffe000 	.word	0xffffe000

0800a158 <__smakebuf_r>:
 800a158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a15a:	2602      	movs	r6, #2
 800a15c:	898b      	ldrh	r3, [r1, #12]
 800a15e:	0005      	movs	r5, r0
 800a160:	000c      	movs	r4, r1
 800a162:	4233      	tst	r3, r6
 800a164:	d006      	beq.n	800a174 <__smakebuf_r+0x1c>
 800a166:	0023      	movs	r3, r4
 800a168:	3347      	adds	r3, #71	; 0x47
 800a16a:	6023      	str	r3, [r4, #0]
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	2301      	movs	r3, #1
 800a170:	6163      	str	r3, [r4, #20]
 800a172:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a174:	466a      	mov	r2, sp
 800a176:	ab01      	add	r3, sp, #4
 800a178:	f7ff ffc6 	bl	800a108 <__swhatbuf_r>
 800a17c:	9900      	ldr	r1, [sp, #0]
 800a17e:	0007      	movs	r7, r0
 800a180:	0028      	movs	r0, r5
 800a182:	f7ff f941 	bl	8009408 <_malloc_r>
 800a186:	2800      	cmp	r0, #0
 800a188:	d108      	bne.n	800a19c <__smakebuf_r+0x44>
 800a18a:	220c      	movs	r2, #12
 800a18c:	5ea3      	ldrsh	r3, [r4, r2]
 800a18e:	059a      	lsls	r2, r3, #22
 800a190:	d4ef      	bmi.n	800a172 <__smakebuf_r+0x1a>
 800a192:	2203      	movs	r2, #3
 800a194:	4393      	bics	r3, r2
 800a196:	431e      	orrs	r6, r3
 800a198:	81a6      	strh	r6, [r4, #12]
 800a19a:	e7e4      	b.n	800a166 <__smakebuf_r+0xe>
 800a19c:	4b0f      	ldr	r3, [pc, #60]	; (800a1dc <__smakebuf_r+0x84>)
 800a19e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	89a2      	ldrh	r2, [r4, #12]
 800a1a4:	6020      	str	r0, [r4, #0]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	9b00      	ldr	r3, [sp, #0]
 800a1ac:	6120      	str	r0, [r4, #16]
 800a1ae:	6163      	str	r3, [r4, #20]
 800a1b0:	9b01      	ldr	r3, [sp, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <__smakebuf_r+0x7a>
 800a1b6:	0028      	movs	r0, r5
 800a1b8:	230e      	movs	r3, #14
 800a1ba:	5ee1      	ldrsh	r1, [r4, r3]
 800a1bc:	f000 f8e6 	bl	800a38c <_isatty_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d006      	beq.n	800a1d2 <__smakebuf_r+0x7a>
 800a1c4:	2203      	movs	r2, #3
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	4393      	bics	r3, r2
 800a1ca:	001a      	movs	r2, r3
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	89a0      	ldrh	r0, [r4, #12]
 800a1d4:	4307      	orrs	r7, r0
 800a1d6:	81a7      	strh	r7, [r4, #12]
 800a1d8:	e7cb      	b.n	800a172 <__smakebuf_r+0x1a>
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	08009f45 	.word	0x08009f45

0800a1e0 <_malloc_usable_size_r>:
 800a1e0:	1f0b      	subs	r3, r1, #4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	1f18      	subs	r0, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	da01      	bge.n	800a1ee <_malloc_usable_size_r+0xe>
 800a1ea:	580b      	ldr	r3, [r1, r0]
 800a1ec:	18c0      	adds	r0, r0, r3
 800a1ee:	4770      	bx	lr

0800a1f0 <_raise_r>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	0004      	movs	r4, r0
 800a1f4:	000d      	movs	r5, r1
 800a1f6:	291f      	cmp	r1, #31
 800a1f8:	d904      	bls.n	800a204 <_raise_r+0x14>
 800a1fa:	2316      	movs	r3, #22
 800a1fc:	6003      	str	r3, [r0, #0]
 800a1fe:	2001      	movs	r0, #1
 800a200:	4240      	negs	r0, r0
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <_raise_r+0x24>
 800a20a:	008a      	lsls	r2, r1, #2
 800a20c:	189b      	adds	r3, r3, r2
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	2a00      	cmp	r2, #0
 800a212:	d108      	bne.n	800a226 <_raise_r+0x36>
 800a214:	0020      	movs	r0, r4
 800a216:	f000 f831 	bl	800a27c <_getpid_r>
 800a21a:	002a      	movs	r2, r5
 800a21c:	0001      	movs	r1, r0
 800a21e:	0020      	movs	r0, r4
 800a220:	f000 f81a 	bl	800a258 <_kill_r>
 800a224:	e7ed      	b.n	800a202 <_raise_r+0x12>
 800a226:	2000      	movs	r0, #0
 800a228:	2a01      	cmp	r2, #1
 800a22a:	d0ea      	beq.n	800a202 <_raise_r+0x12>
 800a22c:	1c51      	adds	r1, r2, #1
 800a22e:	d103      	bne.n	800a238 <_raise_r+0x48>
 800a230:	2316      	movs	r3, #22
 800a232:	3001      	adds	r0, #1
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	e7e4      	b.n	800a202 <_raise_r+0x12>
 800a238:	2400      	movs	r4, #0
 800a23a:	0028      	movs	r0, r5
 800a23c:	601c      	str	r4, [r3, #0]
 800a23e:	4790      	blx	r2
 800a240:	0020      	movs	r0, r4
 800a242:	e7de      	b.n	800a202 <_raise_r+0x12>

0800a244 <raise>:
 800a244:	b510      	push	{r4, lr}
 800a246:	4b03      	ldr	r3, [pc, #12]	; (800a254 <raise+0x10>)
 800a248:	0001      	movs	r1, r0
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	f7ff ffd0 	bl	800a1f0 <_raise_r>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	2000000c 	.word	0x2000000c

0800a258 <_kill_r>:
 800a258:	2300      	movs	r3, #0
 800a25a:	b570      	push	{r4, r5, r6, lr}
 800a25c:	4d06      	ldr	r5, [pc, #24]	; (800a278 <_kill_r+0x20>)
 800a25e:	0004      	movs	r4, r0
 800a260:	0008      	movs	r0, r1
 800a262:	0011      	movs	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7fa f84b 	bl	8004300 <_kill>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d103      	bne.n	800a276 <_kill_r+0x1e>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d000      	beq.n	800a276 <_kill_r+0x1e>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	2000042c 	.word	0x2000042c

0800a27c <_getpid_r>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	f7fa f839 	bl	80042f4 <_getpid>
 800a282:	bd10      	pop	{r4, pc}

0800a284 <__sread>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	000c      	movs	r4, r1
 800a288:	250e      	movs	r5, #14
 800a28a:	5f49      	ldrsh	r1, [r1, r5]
 800a28c:	f000 f8a4 	bl	800a3d8 <_read_r>
 800a290:	2800      	cmp	r0, #0
 800a292:	db03      	blt.n	800a29c <__sread+0x18>
 800a294:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a296:	181b      	adds	r3, r3, r0
 800a298:	6563      	str	r3, [r4, #84]	; 0x54
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	4a02      	ldr	r2, [pc, #8]	; (800a2a8 <__sread+0x24>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	e7f9      	b.n	800a29a <__sread+0x16>
 800a2a6:	46c0      	nop			; (mov r8, r8)
 800a2a8:	ffffefff 	.word	0xffffefff

0800a2ac <__swrite>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	001f      	movs	r7, r3
 800a2b0:	898b      	ldrh	r3, [r1, #12]
 800a2b2:	0005      	movs	r5, r0
 800a2b4:	000c      	movs	r4, r1
 800a2b6:	0016      	movs	r6, r2
 800a2b8:	05db      	lsls	r3, r3, #23
 800a2ba:	d505      	bpl.n	800a2c8 <__swrite+0x1c>
 800a2bc:	230e      	movs	r3, #14
 800a2be:	5ec9      	ldrsh	r1, [r1, r3]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	f000 f874 	bl	800a3b0 <_lseek_r>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	4a05      	ldr	r2, [pc, #20]	; (800a2e0 <__swrite+0x34>)
 800a2cc:	0028      	movs	r0, r5
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	0032      	movs	r2, r6
 800a2d4:	230e      	movs	r3, #14
 800a2d6:	5ee1      	ldrsh	r1, [r4, r3]
 800a2d8:	003b      	movs	r3, r7
 800a2da:	f000 f81f 	bl	800a31c <_write_r>
 800a2de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e0:	ffffefff 	.word	0xffffefff

0800a2e4 <__sseek>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	000c      	movs	r4, r1
 800a2e8:	250e      	movs	r5, #14
 800a2ea:	5f49      	ldrsh	r1, [r1, r5]
 800a2ec:	f000 f860 	bl	800a3b0 <_lseek_r>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	1c42      	adds	r2, r0, #1
 800a2f4:	d103      	bne.n	800a2fe <__sseek+0x1a>
 800a2f6:	4a05      	ldr	r2, [pc, #20]	; (800a30c <__sseek+0x28>)
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
 800a2fe:	2280      	movs	r2, #128	; 0x80
 800a300:	0152      	lsls	r2, r2, #5
 800a302:	4313      	orrs	r3, r2
 800a304:	81a3      	strh	r3, [r4, #12]
 800a306:	6560      	str	r0, [r4, #84]	; 0x54
 800a308:	e7f8      	b.n	800a2fc <__sseek+0x18>
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	ffffefff 	.word	0xffffefff

0800a310 <__sclose>:
 800a310:	b510      	push	{r4, lr}
 800a312:	230e      	movs	r3, #14
 800a314:	5ec9      	ldrsh	r1, [r1, r3]
 800a316:	f000 f815 	bl	800a344 <_close_r>
 800a31a:	bd10      	pop	{r4, pc}

0800a31c <_write_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	0004      	movs	r4, r0
 800a320:	0008      	movs	r0, r1
 800a322:	0011      	movs	r1, r2
 800a324:	001a      	movs	r2, r3
 800a326:	2300      	movs	r3, #0
 800a328:	4d05      	ldr	r5, [pc, #20]	; (800a340 <_write_r+0x24>)
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	f7fa f821 	bl	8004372 <_write>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d103      	bne.n	800a33c <_write_r+0x20>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d000      	beq.n	800a33c <_write_r+0x20>
 800a33a:	6023      	str	r3, [r4, #0]
 800a33c:	bd70      	pop	{r4, r5, r6, pc}
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	2000042c 	.word	0x2000042c

0800a344 <_close_r>:
 800a344:	2300      	movs	r3, #0
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_close_r+0x20>)
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7fa f82b 	bl	80043aa <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d103      	bne.n	800a360 <_close_r+0x1c>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d000      	beq.n	800a360 <_close_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	2000042c 	.word	0x2000042c

0800a368 <_fstat_r>:
 800a368:	2300      	movs	r3, #0
 800a36a:	b570      	push	{r4, r5, r6, lr}
 800a36c:	4d06      	ldr	r5, [pc, #24]	; (800a388 <_fstat_r+0x20>)
 800a36e:	0004      	movs	r4, r0
 800a370:	0008      	movs	r0, r1
 800a372:	0011      	movs	r1, r2
 800a374:	602b      	str	r3, [r5, #0]
 800a376:	f7fa f822 	bl	80043be <_fstat>
 800a37a:	1c43      	adds	r3, r0, #1
 800a37c:	d103      	bne.n	800a386 <_fstat_r+0x1e>
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d000      	beq.n	800a386 <_fstat_r+0x1e>
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	2000042c 	.word	0x2000042c

0800a38c <_isatty_r>:
 800a38c:	2300      	movs	r3, #0
 800a38e:	b570      	push	{r4, r5, r6, lr}
 800a390:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_isatty_r+0x20>)
 800a392:	0004      	movs	r4, r0
 800a394:	0008      	movs	r0, r1
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	f7fa f81f 	bl	80043da <_isatty>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d103      	bne.n	800a3a8 <_isatty_r+0x1c>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d000      	beq.n	800a3a8 <_isatty_r+0x1c>
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	bd70      	pop	{r4, r5, r6, pc}
 800a3aa:	46c0      	nop			; (mov r8, r8)
 800a3ac:	2000042c 	.word	0x2000042c

0800a3b0 <_lseek_r>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	0004      	movs	r4, r0
 800a3b4:	0008      	movs	r0, r1
 800a3b6:	0011      	movs	r1, r2
 800a3b8:	001a      	movs	r2, r3
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4d05      	ldr	r5, [pc, #20]	; (800a3d4 <_lseek_r+0x24>)
 800a3be:	602b      	str	r3, [r5, #0]
 800a3c0:	f7fa f814 	bl	80043ec <_lseek>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	d103      	bne.n	800a3d0 <_lseek_r+0x20>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d000      	beq.n	800a3d0 <_lseek_r+0x20>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	46c0      	nop			; (mov r8, r8)
 800a3d4:	2000042c 	.word	0x2000042c

0800a3d8 <_read_r>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	0004      	movs	r4, r0
 800a3dc:	0008      	movs	r0, r1
 800a3de:	0011      	movs	r1, r2
 800a3e0:	001a      	movs	r2, r3
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4d05      	ldr	r5, [pc, #20]	; (800a3fc <_read_r+0x24>)
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	f7f9 ffa6 	bl	8004338 <_read>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d103      	bne.n	800a3f8 <_read_r+0x20>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d000      	beq.n	800a3f8 <_read_r+0x20>
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	2000042c 	.word	0x2000042c

0800a400 <_init>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	46c0      	nop			; (mov r8, r8)
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr

0800a40c <_fini>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	46c0      	nop			; (mov r8, r8)
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr
